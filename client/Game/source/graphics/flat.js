sprite = [];
RARITY = {};
RARITY.FREE = 0;
RARITY.WOOD = 1;
RARITY.STONE = 2;
RARITY.GOLD = 3;
RARITY.DIAMOND = 4;
RARITY.AMETHYST = 5;
RARITY.REIDITE = 6;
RARITY.SPECIAL = 7;
RARITY.LEVEL = 8;
COSMETICS = {};
MINIMAP_UTILS = [];
find_cosmetics_per_id = function (cosmetics, id) {
  for (var i = 0; i < cosmetics.length; i++) {
    if (cosmetics[i].id === id)
      return i;

  }
  return -1;
};
var MINIMAP_LIST = [];

function render_type_resources_minimap(type, gap) {
  for (var i = 0; i < MINIMAP_LIST.length; i += gap) {
    var r = MINIMAP_LIST[i];
    if (r[0] === type)
      render_resource_minimap(r[0], r[1], r[2], r[3]);

  }
};;

function render_all_resources_minimap() {
  render_type_resources_minimap("isl", 1);
  render_type_resources_minimap("wtb", 20);
  render_type_resources_minimap("la", 1);
  render_type_resources_minimap("c", 1);
  render_type_resources_minimap("s", 1);
  render_type_resources_minimap("f", 1);
  render_type_resources_minimap("p", 1);
  render_type_resources_minimap("g", 1);
  render_type_resources_minimap("d", 1);
  render_type_resources_minimap("a", 1);
  render_type_resources_minimap("re", 1);
  render_type_resources_minimap("m", 1);
  MINIMAP_LIST = [];
};;

function add_resource_minimap(type, subtype, i, j) {
  MINIMAP_LIST.push([type, subtype, i, j]);
};;

function render_resource_minimap(type, subtype, i, j) {
  var resource = MINIMAP_UTILS[type];
  if (resource === undefined)
    return;

  for (var k = 0; k < 2; k++) {
    var img = resource[subtype][k];
    var x = (193 * j) / world.nw;
    var y = (193 * i) / world.nh;
    var w = img.width / 3.5;
    var h = img.height / 3.5;
    sprite[SPRITE.MINIMAP_CTX][k].drawImage(img, x - (w / 2), y - (h / 2), w, h);
    x = (600 * j) / world.nw;
    y = (600 * i) / world.nh;
    w = img.width / 1.5;
    h = img.height / 1.5;
    sprite[SPRITE.BIGMAP_CTX][k].drawImage(img, x - (w / 2), y - (h / 2), w, h);
  }
};
render_minimap = function () {
  for (var i = 0; i < 2; i++) {
    sprite[SPRITE.MINIMAP_CTX][i].clearRect(0, 0, 193, 193);
    sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["MAP"][i], 0, 0, 193, 193);
    sprite[SPRITE.BIGMAP_CTX][i].clearRect(0, 0, 600, 600);
    sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["MAP"][i], 0, 0, 600, 600);
    for (var j = world.biomes.length - 1; j >= 0; j--) {
      var biome = world.biomes[j];
      var x = (193 * biome.x1) / (100 * world.nw);
      var y = (193 * biome.y1) / (100 * world.nh);
      var w = (193 * biome.w) / (100 * world.nw);
      var h = (193 * biome.h) / (100 * world.nh);
      var bx = (600 * biome.x1) / (100 * world.nw);
      var by = (600 * biome.y1) / (100 * world.nh);
      var bw = (600 * biome.w) / (100 * world.nw);
      var bh = (600 * biome.h) / (100 * world.nh);
      if (biome.t === world.BIOME_FOREST) {
        sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["FOREST"][i], x, y, w, h);
        sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["FOREST"][i], bx, by, bw, bh);
      }
      if (biome.t === world.BIOME_WINTER) {
        sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["WINTER"][i], x, y, w, h);
        sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["WINTER"][i], bx, by, bw, bh);
      }
      if (biome.t === world.BIOME_LAVA) {
        sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["LAVA"][i], x, y, w, h);
        sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["LAVA"][i], bx, by, bw, bh);
      }
      if (biome.t === world.BIOME_DRAGON) {
        sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["CAVE"][i], x, y, w, h);
        sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["CAVE"][i], bx, by, bw, bh);
      }
      if (biome.t === world.BIOME_DESERT) {
        sprite[SPRITE.MINIMAP_CTX][i].drawImage(MINIMAP_UTILS["DESERT"][i], x, y, w, h);
        sprite[SPRITE.BIGMAP_CTX][i].drawImage(MINIMAP_UTILS["DESERT"][i], bx, by, bw, bh);
      }
    }
  }
};
render_cosmetics = function () {
  COSMETICS = {
    SKIN: [{
      id: 0,
      day: IMAGES.PLAYER0D,
      night: IMAGES.PLAYER0N,
      dayHand: IMAGES.HAND0D,
      nightHand: IMAGES.HAND0N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Starver"
    }, {
      id: 3,
      day: IMAGES.PLAYER3D,
      night: IMAGES.PLAYER3N,
      dayHand: IMAGES.HAND3D,
      nightHand: IMAGES.HAND3N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Angry"
    }, {
      id: 2,
      day: IMAGES.PLAYER2D,
      night: IMAGES.PLAYER2N,
      dayHand: IMAGES.HAND2D,
      nightHand: IMAGES.HAND2N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Sad"
    }, {
      id: 9,
      day: IMAGES.PLAYER9D,
      night: IMAGES.PLAYER9N,
      dayHand: IMAGES.HAND9D,
      nightHand: IMAGES.HAND9N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Happy 1"
    }, {
      id: 1,
      day: IMAGES.PLAYER1D,
      night: IMAGES.PLAYER1N,
      dayHand: IMAGES.HAND1D,
      nightHand: IMAGES.HAND1N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "What?"
    }, {
      id: 4,
      day: IMAGES.PLAYER4D,
      night: IMAGES.PLAYER4N,
      dayHand: IMAGES.HAND4D,
      nightHand: IMAGES.HAND4N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Suspicious"
    }, {
      id: 5,
      day: IMAGES.PLAYER5D,
      night: IMAGES.PLAYER5N,
      dayHand: IMAGES.HAND5D,
      nightHand: IMAGES.HAND5N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Scar"
    }, {
      id: 6,
      day: IMAGES.PLAYER6D,
      night: IMAGES.PLAYER6N,
      dayHand: IMAGES.HAND6D,
      nightHand: IMAGES.HAND6N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "In Trouble"
    }, {
      id: 7,
      day: IMAGES.PLAYER7D,
      night: IMAGES.PLAYER7N,
      dayHand: IMAGES.HAND7D,
      nightHand: IMAGES.HAND7N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Cute"
    }, {
      id: 8,
      day: IMAGES.PLAYER8D,
      night: IMAGES.PLAYER8N,
      dayHand: IMAGES.HAND8D,
      nightHand: IMAGES.HAND8N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bored 1"
    }, {
      id: 10,
      day: IMAGES.PLAYER10D,
      night: IMAGES.PLAYER10N,
      dayHand: IMAGES.HAND10D,
      nightHand: IMAGES.HAND10N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Happy 2"
    }, {
      id: 11,
      day: IMAGES.PLAYER11D,
      night: IMAGES.PLAYER11N,
      dayHand: IMAGES.HAND11D,
      nightHand: IMAGES.HAND11N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Crazy"
    }, {
      id: 12,
      day: IMAGES.PLAYER12D,
      night: IMAGES.PLAYER12N,
      dayHand: IMAGES.HAND12D,
      nightHand: IMAGES.HAND12N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Happy 3"
    }, {
      id: 13,
      day: IMAGES.PLAYER13D,
      night: IMAGES.PLAYER13N,
      dayHand: IMAGES.HAND13D,
      nightHand: IMAGES.HAND13N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Very Cute"
    }, {
      id: 14,
      day: IMAGES.PLAYER14D,
      night: IMAGES.PLAYER14N,
      dayHand: IMAGES.HAND14D,
      nightHand: IMAGES.HAND14N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Curious"
    }, {
      id: 15,
      day: IMAGES.PLAYER15D,
      night: IMAGES.PLAYER15N,
      dayHand: IMAGES.HAND15D,
      nightHand: IMAGES.HAND15N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bored 2"
    }, {
      id: 16,
      day: IMAGES.PLAYER16D,
      night: IMAGES.PLAYER16N,
      dayHand: IMAGES.HAND16D,
      nightHand: IMAGES.HAND16N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Happy 4"
    }, {
      id: 17,
      day: IMAGES.PLAYER17D,
      night: IMAGES.PLAYER17N,
      dayHand: IMAGES.HAND17D,
      nightHand: IMAGES.HAND17N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Scar 2"
    }, {
      id: 18,
      day: IMAGES.PLAYER18D,
      night: IMAGES.PLAYER18N,
      dayHand: IMAGES.HAND18D,
      nightHand: IMAGES.HAND18N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Sick"
    }, {
      id: 19,
      day: IMAGES.PLAYER19D,
      night: IMAGES.PLAYER19N,
      dayHand: IMAGES.HAND19D,
      nightHand: IMAGES.HAND19N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Somnambule"
    }, {
      id: 24,
      day: IMAGES.SKIN7D,
      night: IMAGES.SKIN7N,
      dayHand: IMAGES.HAND_SKIN7D,
      nightHand: IMAGES.HAND_SKIN7N,
      rarity: RARITY.WOOD,
      author: "Pixelbitie",
      name: "Feel Bad"
    }, {
      id: 23,
      day: IMAGES.SKIN0D,
      night: IMAGES.SKIN0N,
      dayHand: IMAGES.HAND_SKIN0D,
      nightHand: IMAGES.HAND_SKIN0N,
      rarity: RARITY.WOOD,
      author: "Pixelbitie",
      name: "Mmmh."
    }, {
      id: 103,
      day: IMAGES.SKIN78D,
      night: IMAGES.SKIN78N,
      dayHand: IMAGES.HAND_SKIN78D,
      nightHand: IMAGES.HAND_SKIN78N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Panic"
    }, {
      id: 105,
      day: IMAGES.SKIN80D,
      night: IMAGES.SKIN80N,
      dayHand: IMAGES.HAND_SKIN80D,
      nightHand: IMAGES.HAND_SKIN80N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Hypnotic"
    }, {
      id: 106,
      day: IMAGES.SKIN81D,
      night: IMAGES.SKIN81N,
      dayHand: IMAGES.HAND_SKIN81D,
      nightHand: IMAGES.HAND_SKIN81N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Stars in the eyes"
    }, {
      id: 104,
      day: IMAGES.SKIN79D,
      night: IMAGES.SKIN79N,
      dayHand: IMAGES.HAND_SKIN79D,
      nightHand: IMAGES.HAND_SKIN79N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Scared at night"
    }, {
      id: 20,
      day: IMAGES.SKIN_VAMPIRED,
      night: IMAGES.SKIN_VAMPIREN,
      dayHand: IMAGES.HAND_VAMPIRED,
      nightHand: IMAGES.HAND_VAMPIREN,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Vampire"
    }, {
      id: 21,
      day: IMAGES.SKIN_ZOMBIED,
      night: IMAGES.SKIN_ZOMBIEN,
      dayHand: IMAGES.HAND_ZOMBIED,
      nightHand: IMAGES.HAND_ZOMBIEN,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Zombie"
    }, {
      id: 22,
      day: IMAGES.SKIN_DEVASTD,
      night: IMAGES.SKIN_DEVASTN,
      dayHand: IMAGES.HAND_DEVASTD,
      nightHand: IMAGES.HAND_DEVASTN,
      rarity: RARITY.STONE,
      author: "Pixelbitie",
      name: "Devaster"
    }, {
      id: 116,
      day: IMAGES.SKIN91D,
      night: IMAGES.SKIN91N,
      dayHand: IMAGES.HAND_SKIN91D,
      nightHand: IMAGES.HAND_SKIN91N,
      rarity: RARITY.STONE,
      author: "Fukss",
      name: "Dead Devaster"
    }, {
      id: 27,
      day: IMAGES.SKIN19D,
      night: IMAGES.SKIN19N,
      dayHand: IMAGES.HAND_SKIN19D,
      nightHand: IMAGES.HAND_SKIN19N,
      rarity: RARITY.STONE,
      author: "Winter",
      name: "Cactus"
    }, {
      id: 28,
      day: IMAGES.SKIN20D,
      night: IMAGES.SKIN20N,
      dayHand: IMAGES.HAND_SKIN20D,
      nightHand: IMAGES.HAND_SKIN20N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Bee"
    }, {
      id: 49,
      day: IMAGES.SKIN24D,
      night: IMAGES.SKIN24N,
      dayHand: IMAGES.HAND_SKIN24D,
      nightHand: IMAGES.HAND_SKIN24N,
      rarity: RARITY.STONE,
      author: "Taco4Life",
      name: "Camo Skin"
    }, {
      id: 58,
      day: IMAGES.SKIN34D,
      night: IMAGES.SKIN34N,
      dayHand: IMAGES.HAND_SKIN34D,
      nightHand: IMAGES.HAND_SKIN34N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Blue Limax Skin"
    }, {
      id: 59,
      day: IMAGES.SKIN33D,
      night: IMAGES.SKIN33N,
      dayHand: IMAGES.HAND_SKIN33D,
      nightHand: IMAGES.HAND_SKIN33N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Red Limax Skin"
    }, {
      id: 94,
      day: IMAGES.SKIN69D,
      night: IMAGES.SKIN69N,
      dayHand: IMAGES.HAND_SKIN69D,
      nightHand: IMAGES.HAND_SKIN69N,
      rarity: RARITY.STONE,
      author: "Taco4Life",
      name: "Mr. Pumpkin"
    }, {
      id: 109,
      day: IMAGES.SKIN84D,
      night: IMAGES.SKIN84N,
      dayHand: IMAGES.HAND_SKIN84D,
      nightHand: IMAGES.HAND_SKIN84N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Wood"
    }, {
      id: 114,
      day: IMAGES.SKIN89D,
      night: IMAGES.SKIN89N,
      dayHand: IMAGES.HAND_SKIN89D,
      nightHand: IMAGES.HAND_SKIN89N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Zebra"
    }, {
      id: 120,
      day: IMAGES.SKIN95D,
      night: IMAGES.SKIN95N,
      dayHand: IMAGES.HAND_SKIN95D,
      nightHand: IMAGES.HAND_SKIN95N,
      rarity: RARITY.STONE,
      author: "CrysTal",
      name: "Tiger"
    }, {
      id: 134,
      day: IMAGES.SKIN109D,
      night: IMAGES.SKIN109N,
      dayHand: IMAGES.HAND_SKIN109D,
      nightHand: IMAGES.HAND_SKIN109N,
      rarity: RARITY.STONE,
      author: "Franchestcreator",
      name: "Day or Night"
    }, {
      id: 135,
      day: IMAGES.SKIN110D,
      night: IMAGES.SKIN110N,
      dayHand: IMAGES.HAND_SKIN110D,
      nightHand: IMAGES.HAND_SKIN110N,
      rarity: RARITY.STONE,
      author: "Poinet",
      name: "Square Starver"
    }, {
      id: 136,
      day: IMAGES.SKIN111D,
      night: IMAGES.SKIN111N,
      dayHand: IMAGES.HAND_SKIN111D,
      nightHand: IMAGES.HAND_SKIN111N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Voodoo Doll"
    }, {
      id: 137,
      day: IMAGES.SKIN112D,
      night: IMAGES.SKIN112N,
      dayHand: IMAGES.HAND_SKIN112D,
      nightHand: IMAGES.HAND_SKIN112N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Frankenstein"
    }, {
      id: 138,
      day: IMAGES.SKIN114D,
      night: IMAGES.SKIN114N,
      dayHand: IMAGES.HAND_SKIN114D,
      nightHand: IMAGES.HAND_SKIN114N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Mummy"
    }, {
      id: 139,
      day: IMAGES.SKIN115D,
      night: IMAGES.SKIN115N,
      dayHand: IMAGES.HAND_SKIN115D,
      nightHand: IMAGES.HAND_SKIN115N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Werewolf"
    }, {
      id: 140,
      day: IMAGES.SKIN116D,
      night: IMAGES.SKIN116N,
      dayHand: IMAGES.HAND_SKIN116D,
      nightHand: IMAGES.HAND_SKIN116N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Cthulhu"
    }, {
      id: 141,
      day: IMAGES.SKIN117D,
      night: IMAGES.SKIN117N,
      dayHand: IMAGES.HAND_SKIN117D,
      nightHand: IMAGES.HAND_SKIN117N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Sea Man"
    }, {
      id: 142,
      day: IMAGES.SKIN118D,
      night: IMAGES.SKIN118N,
      dayHand: IMAGES.HAND_SKIN118D,
      nightHand: IMAGES.HAND_SKIN118N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Pumpkin"
    }, {
      id: 148,
      day: IMAGES.SKIN124D,
      night: IMAGES.SKIN124N,
      dayHand: IMAGES.HAND_SKIN124D,
      nightHand: IMAGES.HAND_SKIN124N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Snowman"
    }, {
      id: 149,
      day: IMAGES.SKIN125D,
      night: IMAGES.SKIN125N,
      dayHand: IMAGES.HAND_SKIN125D,
      nightHand: IMAGES.HAND_SKIN125N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Christmas Tree Man"
    }, {
      id: 150,
      day: IMAGES.SKIN126D,
      night: IMAGES.SKIN126N,
      dayHand: IMAGES.HAND_SKIN126D,
      nightHand: IMAGES.HAND_SKIN126N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Mrs Bell"
    }, {
      id: 151,
      day: IMAGES.SKIN127D,
      night: IMAGES.SKIN127N,
      dayHand: IMAGES.HAND_SKIN127D,
      nightHand: IMAGES.HAND_SKIN127N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Elfy"
    }, {
      id: 152,
      day: IMAGES.SKIN128D,
      night: IMAGES.SKIN128N,
      dayHand: IMAGES.HAND_SKIN128D,
      nightHand: IMAGES.HAND_SKIN128N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Mr Present"
    }, {
      id: 153,
      day: IMAGES.SKIN129D,
      night: IMAGES.SKIN129N,
      dayHand: IMAGES.HAND_SKIN129D,
      nightHand: IMAGES.HAND_SKIN129N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "My Dear Old Deer"
    }, {
      id: 154,
      day: IMAGES.SKIN130D,
      night: IMAGES.SKIN130N,
      dayHand: IMAGES.HAND_SKIN130D,
      nightHand: IMAGES.HAND_SKIN130N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Mr Angel"
    }, {
      id: 155,
      day: IMAGES.SKIN131D,
      night: IMAGES.SKIN131N,
      dayHand: IMAGES.HAND_SKIN131D,
      nightHand: IMAGES.HAND_SKIN131N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Mr Ice Cube"
    }, {
      id: 156,
      day: IMAGES.SKIN132D,
      night: IMAGES.SKIN132N,
      dayHand: IMAGES.HAND_SKIN132D,
      nightHand: IMAGES.HAND_SKIN132N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Mr Snowman"
    }, {
      id: 159,
      day: IMAGES.SKIN135D,
      night: IMAGES.SKIN135N,
      dayHand: IMAGES.HAND_SKIN135D,
      nightHand: IMAGES.HAND_SKIN135N,
      rarity: RARITY.STONE,
      author: "CrysTal",
      name: "Crystal Sky Skin"
    }, {
      id: 167,
      day: IMAGES.SKIN143D,
      night: IMAGES.SKIN143N,
      dayHand: IMAGES.HAND_SKIN143D,
      nightHand: IMAGES.HAND_SKIN143N,
      rarity: RARITY.STONE,
      author: "Franchestcreator",
      name: "Radioactive Starver"
    }, {
      id: 169,
      day: IMAGES.SKIN146D,
      night: IMAGES.SKIN146N,
      dayHand: IMAGES.HAND_SKIN146D,
      nightHand: IMAGES.HAND_SKIN146N,
      rarity: RARITY.STONE,
      author: "TheScaryBlaze",
      name: "Eaten Cookie"
    }, {
      id: 170,
      day: IMAGES.SKIN147D,
      night: IMAGES.SKIN147N,
      dayHand: IMAGES.HAND_SKIN147D,
      nightHand: IMAGES.HAND_SKIN147N,
      rarity: RARITY.STONE,
      author: "aloner",
      name: "Blob Thing"
    }, {
      id: 172,
      day: IMAGES.SKIN149D,
      night: IMAGES.SKIN149N,
      dayHand: IMAGES.HAND_SKIN149D,
      nightHand: IMAGES.HAND_SKIN149N,
      rarity: RARITY.STONE,
      author: "aloner",
      name: "Machine Mask"
    }, {
      id: 29,
      day: IMAGES.SKIN2D,
      night: IMAGES.SKIN2N,
      dayHand: IMAGES.HAND_SKIN2D,
      nightHand: IMAGES.HAND_SKIN2N,
      rarity: RARITY.GOLD,
      author: "Pixelbitie",
      name: "Lollipop 1"
    }, {
      id: 30,
      day: IMAGES.SKIN3D,
      night: IMAGES.SKIN3N,
      dayHand: IMAGES.HAND_SKIN3D,
      nightHand: IMAGES.HAND_SKIN3N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Lollipop 2"
    }, {
      id: 31,
      day: IMAGES.SKIN4D,
      night: IMAGES.SKIN4N,
      dayHand: IMAGES.HAND_SKIN4D,
      nightHand: IMAGES.HAND_SKIN4N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Lollipop 3"
    }, {
      id: 32,
      day: IMAGES.SKIN5D,
      night: IMAGES.SKIN5N,
      dayHand: IMAGES.HAND_SKIN5D,
      nightHand: IMAGES.HAND_SKIN5N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Lollipop 4"
    }, {
      id: 33,
      day: IMAGES.SKIN8D,
      night: IMAGES.SKIN8N,
      dayHand: IMAGES.HAND_SKIN8D,
      nightHand: IMAGES.HAND_SKIN8N,
      rarity: RARITY.GOLD,
      author: "Sushui",
      name: "Yellow Bird"
    }, {
      id: 34,
      day: IMAGES.SKIN9D,
      night: IMAGES.SKIN9N,
      dayHand: IMAGES.HAND_SKIN9D,
      nightHand: IMAGES.HAND_SKIN9N,
      rarity: RARITY.GOLD,
      author: "Sushui",
      name: "Red Bird"
    }, {
      id: 35,
      day: IMAGES.SKIN10D,
      night: IMAGES.SKIN10N,
      dayHand: IMAGES.HAND_SKIN10D,
      nightHand: IMAGES.HAND_SKIN10N,
      rarity: RARITY.GOLD,
      author: "Sushui",
      name: "Blue Bird"
    }, {
      id: 37,
      day: IMAGES.SKIN17D,
      night: IMAGES.SKIN17N,
      dayHand: IMAGES.HAND_SKIN17D,
      nightHand: IMAGES.HAND_SKIN17N,
      rarity: RARITY.GOLD,
      author: "Winter",
      name: "Owl"
    }, {
      id: 52,
      day: IMAGES.SKIN27D,
      night: IMAGES.SKIN27N,
      dayHand: IMAGES.HAND_SKIN27D,
      nightHand: IMAGES.HAND_SKIN27N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Nemo"
    }, {
      id: 53,
      day: IMAGES.SKIN28D,
      night: IMAGES.SKIN28N,
      dayHand: IMAGES.HAND_SKIN28D,
      nightHand: IMAGES.HAND_SKIN28N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Mr. Bread"
    }, {
      id: 74,
      day: IMAGES.SKIN49D,
      night: IMAGES.SKIN49N,
      dayHand: IMAGES.HAND_SKIN49D,
      nightHand: IMAGES.HAND_SKIN49N,
      rarity: RARITY.GOLD,
      author: "Communist & Taco4Life",
      name: "Mr. Bread 2"
    }, {
      id: 75,
      day: IMAGES.SKIN50D,
      night: IMAGES.SKIN50N,
      dayHand: IMAGES.HAND_SKIN50D,
      nightHand: IMAGES.HAND_SKIN50N,
      rarity: RARITY.GOLD,
      author: "Communist & Taco4Life",
      name: "Mr. Bread 3"
    }, {
      id: 60,
      day: IMAGES.SKIN35D,
      night: IMAGES.SKIN35N,
      dayHand: IMAGES.HAND_SKIN35D,
      nightHand: IMAGES.HAND_SKIN35N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Red Berry"
    }, {
      id: 61,
      day: IMAGES.SKIN36D,
      night: IMAGES.SKIN36N,
      dayHand: IMAGES.HAND_SKIN36D,
      nightHand: IMAGES.HAND_SKIN36N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Old Berry"
    }, {
      id: 70,
      day: IMAGES.SKIN45D,
      night: IMAGES.SKIN45N,
      dayHand: IMAGES.HAND_SKIN45D,
      nightHand: IMAGES.HAND_SKIN45N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Cake"
    }, {
      id: 71,
      day: IMAGES.SKIN46D,
      night: IMAGES.SKIN46N,
      dayHand: IMAGES.HAND_SKIN46D,
      nightHand: IMAGES.HAND_SKIN46N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Christmas Cake"
    }, {
      id: 77,
      day: IMAGES.SKIN52D,
      night: IMAGES.SKIN52N,
      dayHand: IMAGES.HAND_SKIN52D,
      nightHand: IMAGES.HAND_SKIN52N,
      rarity: RARITY.GOLD,
      author: "Pancakez",
      name: "Mr. Pancake"
    }, {
      id: 87,
      day: IMAGES.SKIN62D,
      night: IMAGES.SKIN62N,
      dayHand: IMAGES.HAND_SKIN62D,
      nightHand: IMAGES.HAND_SKIN62N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Mr. Taco"
    }, {
      id: 78,
      day: IMAGES.SKIN53D,
      night: IMAGES.SKIN53N,
      dayHand: IMAGES.HAND_SKIN53D,
      nightHand: IMAGES.HAND_SKIN53N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Mr. Bottle"
    }, {
      id: 79,
      day: IMAGES.SKIN54D,
      night: IMAGES.SKIN54N,
      dayHand: IMAGES.HAND_SKIN54D,
      nightHand: IMAGES.HAND_SKIN54N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Mr. Bottle 2"
    }, {
      id: 97,
      day: IMAGES.SKIN71D,
      night: IMAGES.SKIN71N,
      dayHand: IMAGES.HAND_SKIN71D,
      nightHand: IMAGES.HAND_SKIN71N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Pink Rabbit"
    }, {
      id: 102,
      day: IMAGES.SKIN77D,
      night: IMAGES.SKIN77N,
      dayHand: IMAGES.HAND_SKIN77D,
      nightHand: IMAGES.HAND_SKIN77N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Marshmallow"
    }, {
      id: 107,
      day: IMAGES.SKIN82D,
      night: IMAGES.SKIN82N,
      dayHand: IMAGES.HAND_SKIN82D,
      nightHand: IMAGES.HAND_SKIN82N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Fox"
    }, {
      id: 132,
      day: IMAGES.SKIN107D,
      night: IMAGES.SKIN107N,
      dayHand: IMAGES.HAND_SKIN107D,
      nightHand: IMAGES.HAND_SKIN107N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Raccoon"
    }, {
      id: 111,
      day: IMAGES.SKIN86D,
      night: IMAGES.SKIN86N,
      dayHand: IMAGES.HAND_SKIN86D,
      nightHand: IMAGES.HAND_SKIN86N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Cloud"
    }, {
      id: 113,
      day: IMAGES.SKIN88D,
      night: IMAGES.SKIN88N,
      dayHand: IMAGES.HAND_SKIN88D,
      nightHand: IMAGES.HAND_SKIN88N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Moon"
    }, {
      id: 117,
      day: IMAGES.SKIN92D,
      night: IMAGES.SKIN92N,
      dayHand: IMAGES.HAND_SKIN92D,
      nightHand: IMAGES.HAND_SKIN92N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Mr. Panda"
    }, {
      id: 118,
      day: IMAGES.SKIN93D,
      night: IMAGES.SKIN93N,
      dayHand: IMAGES.HAND_SKIN93D,
      nightHand: IMAGES.HAND_SKIN93N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Mr. Strawberry"
    }, {
      id: 119,
      day: IMAGES.SKIN94D,
      night: IMAGES.SKIN94N,
      dayHand: IMAGES.HAND_SKIN94D,
      nightHand: IMAGES.HAND_SKIN94N,
      rarity: RARITY.GOLD,
      author: "eogito & Sushuui",
      name: "Mummy"
    }, {
      id: 122,
      day: IMAGES.SKIN97D,
      night: IMAGES.SKIN97N,
      dayHand: IMAGES.HAND_SKIN97D,
      nightHand: IMAGES.HAND_SKIN97N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Dino"
    }, {
      id: 127,
      day: IMAGES.SKIN102D,
      night: IMAGES.SKIN102N,
      dayHand: IMAGES.HAND_SKIN102D,
      nightHand: IMAGES.HAND_SKIN102N,
      rarity: RARITY.GOLD,
      author: "MADBalgouthi",
      name: "Mr. Koala"
    }, {
      id: 160,
      day: IMAGES.SKIN136D,
      night: IMAGES.SKIN136N,
      dayHand: IMAGES.HAND_SKIN136D,
      nightHand: IMAGES.HAND_SKIN136N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Bottle Protection"
    }, {
      id: 162,
      day: IMAGES.SKIN138D,
      night: IMAGES.SKIN138N,
      dayHand: IMAGES.HAND_SKIN138D,
      nightHand: IMAGES.HAND_SKIN138N,
      rarity: RARITY.GOLD,
      author: "CrysTal",
      name: "Leaf Man"
    }, {
      id: 166,
      day: IMAGES.SKIN142D,
      night: IMAGES.SKIN142N,
      dayHand: IMAGES.HAND_SKIN142D,
      nightHand: IMAGES.HAND_SKIN142N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Bubble"
    }, {
      id: 174,
      day: IMAGES.SKIN145D,
      night: IMAGES.SKIN145N,
      dayHand: IMAGES.HAND_SKIN145D,
      nightHand: IMAGES.HAND_SKIN145N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Potato"
    }, {
      id: 171,
      day: IMAGES.SKIN148D,
      night: IMAGES.SKIN148N,
      dayHand: IMAGES.HAND_SKIN148D,
      nightHand: IMAGES.HAND_SKIN148N,
      rarity: RARITY.GOLD,
      author: "aloner",
      name: "Axolotl"
    }, {
      id: 25,
      day: IMAGES.SKIN6D,
      night: IMAGES.SKIN6N,
      dayHand: IMAGES.HAND_SKIN6D,
      nightHand: IMAGES.HAND_SKIN0N,
      rarity: RARITY.DIAMOND,
      author: "Pixelbitie",
      name: "Test Dummy"
    }, {
      id: 41,
      day: IMAGES.SKIN_STARD,
      night: IMAGES.SKIN_STARN,
      dayHand: IMAGES.HAND_STARD,
      nightHand: IMAGES.HAND_STARN,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Star-ver"
    }, {
      id: 43,
      day: IMAGES.SKIN11D,
      night: IMAGES.SKIN11N,
      dayHand: IMAGES.HAND_SKIN11D,
      nightHand: IMAGES.HAND_SKIN11N,
      rarity: RARITY.DIAMOND,
      author: "Communist",
      name: "Starver Chest"
    }, {
      id: 88,
      day: IMAGES.SKIN63D,
      night: IMAGES.SKIN63N,
      dayHand: IMAGES.HAND_SKIN63D,
      nightHand: IMAGES.HAND_SKIN63N,
      rarity: RARITY.DIAMOND,
      author: "Communist",
      name: "Starver Workbench"
    }, {
      id: 121,
      day: IMAGES.SKIN96D,
      night: IMAGES.SKIN96N,
      dayHand: IMAGES.HAND_SKIN96D,
      nightHand: IMAGES.HAND_SKIN96N,
      rarity: RARITY.DIAMOND,
      author: "MADBalgouthi",
      name: "Fish"
    }, {
      id: 39,
      day: IMAGES.SKIN22D,
      night: IMAGES.SKIN22N,
      dayHand: IMAGES.HAND_SKIN22D,
      nightHand: IMAGES.HAND_SKIN22N,
      rarity: RARITY.DIAMOND,
      author: "Negligent4Dia",
      name: "Crab"
    }, {
      id: 40,
      day: IMAGES.SKIN23D,
      night: IMAGES.SKIN23N,
      dayHand: IMAGES.HAND_SKIN23D,
      nightHand: IMAGES.HAND_SKIN23N,
      rarity: RARITY.DIAMOND,
      author: "Negligent4Dia",
      name: "Piranha"
    }, {
      id: 36,
      day: IMAGES.SKIN16D,
      night: IMAGES.SKIN16N,
      dayHand: IMAGES.HAND_SKIN16D,
      nightHand: IMAGES.HAND_SKIN16N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Winter Fox"
    }, {
      id: 69,
      day: IMAGES.SKIN44D,
      night: IMAGES.SKIN44N,
      dayHand: IMAGES.HAND_SKIN44D,
      nightHand: IMAGES.HAND_SKIN44N,
      rarity: RARITY.DIAMOND,
      author: "Zed",
      name: "Baby Foxy"
    }, {
      id: 51,
      day: IMAGES.SKIN26D,
      night: IMAGES.SKIN26N,
      dayHand: IMAGES.HAND_SKIN26D,
      nightHand: IMAGES.HAND_SKIN26N,
      rarity: RARITY.DIAMOND,
      author: "HOWI",
      name: "Winter Bear"
    }, {
      id: 133,
      day: IMAGES.SKIN108D,
      night: IMAGES.SKIN108N,
      dayHand: IMAGES.HAND_SKIN108D,
      nightHand: IMAGES.HAND_SKIN108N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Hawk"
    }, {
      id: 55,
      day: IMAGES.SKIN30D,
      night: IMAGES.SKIN30N,
      dayHand: IMAGES.HAND_SKIN30D,
      nightHand: IMAGES.HAND_SKIN30N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Nice Little Yuki"
    }, {
      id: 68,
      day: IMAGES.SKIN43D,
      night: IMAGES.SKIN43N,
      dayHand: IMAGES.HAND_SKIN43D,
      nightHand: IMAGES.HAND_SKIN43N,
      rarity: RARITY.DIAMOND,
      author: "Taco4Life",
      name: "Baby Yuki"
    }, {
      id: 62,
      day: IMAGES.SKIN37D,
      night: IMAGES.SKIN37N,
      dayHand: IMAGES.HAND_SKIN37D,
      nightHand: IMAGES.HAND_SKIN37N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Carrot"
    }, {
      id: 56,
      day: IMAGES.SKIN31D,
      night: IMAGES.SKIN31N,
      dayHand: IMAGES.HAND_SKIN31D,
      nightHand: IMAGES.HAND_SKIN31N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Bat Limax"
    }, {
      id: 72,
      day: IMAGES.SKIN47D,
      night: IMAGES.SKIN47N,
      dayHand: IMAGES.HAND_SKIN47D,
      nightHand: IMAGES.HAND_SKIN47N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Mr. Crate"
    }, {
      id: 73,
      day: IMAGES.SKIN48D,
      night: IMAGES.SKIN48N,
      dayHand: IMAGES.HAND_SKIN48D,
      nightHand: IMAGES.HAND_SKIN48N,
      rarity: RARITY.DIAMOND,
      author: "Taco4Life & eogito",
      name: "Mr. Spider"
    }, {
      id: 93,
      day: IMAGES.SKIN68D,
      night: IMAGES.SKIN68N,
      dayHand: IMAGES.HAND_SKIN68D,
      nightHand: IMAGES.HAND_SKIN68N,
      rarity: RARITY.DIAMOND,
      author: "Anyone want to play?",
      name: "Mr. Spider 2"
    }, {
      id: 82,
      day: IMAGES.SKIN57D,
      night: IMAGES.SKIN57N,
      dayHand: IMAGES.HAND_SKIN57D,
      nightHand: IMAGES.HAND_SKIN57N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Blue Starfish"
    }, {
      id: 83,
      day: IMAGES.SKIN58D,
      night: IMAGES.SKIN58N,
      dayHand: IMAGES.HAND_SKIN58D,
      nightHand: IMAGES.HAND_SKIN58N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Orange Starfish"
    }, {
      id: 84,
      day: IMAGES.SKIN59D,
      night: IMAGES.SKIN59N,
      dayHand: IMAGES.HAND_SKIN59D,
      nightHand: IMAGES.HAND_SKIN59N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Pink Starfish"
    }, {
      id: 85,
      day: IMAGES.SKIN60D,
      night: IMAGES.SKIN60N,
      dayHand: IMAGES.HAND_SKIN60D,
      nightHand: IMAGES.HAND_SKIN60N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. ShellMauve"
    }, {
      id: 86,
      day: IMAGES.SKIN61D,
      night: IMAGES.SKIN61N,
      dayHand: IMAGES.HAND_SKIN61D,
      nightHand: IMAGES.HAND_SKIN61N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Shell Bead"
    }, {
      id: 96,
      day: IMAGES.SKIN72D,
      night: IMAGES.SKIN72N,
      dayHand: IMAGES.HAND_SKIN72D,
      nightHand: IMAGES.HAND_SKIN72N,
      rarity: RARITY.DIAMOND,
      author: "Fukss",
      name: "Angry Crab"
    }, {
      id: 98,
      day: IMAGES.SKIN73D,
      night: IMAGES.SKIN73N,
      dayHand: IMAGES.HAND_SKIN73D,
      nightHand: IMAGES.HAND_SKIN73N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Penguin"
    }, {
      id: 126,
      day: IMAGES.SKIN101D,
      night: IMAGES.SKIN101N,
      dayHand: IMAGES.HAND_SKIN101D,
      nightHand: IMAGES.HAND_SKIN101N,
      rarity: RARITY.DIAMOND,
      author: "Anyone want to play?",
      name: "Mr. Boar"
    }, {
      id: 145,
      day: IMAGES.SKIN121D,
      night: IMAGES.SKIN121N,
      dayHand: IMAGES.HAND_SKIN121D,
      nightHand: IMAGES.HAND_SKIN121N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "I saw you"
    }, {
      id: 146,
      day: IMAGES.SKIN122D,
      night: IMAGES.SKIN122N,
      dayHand: IMAGES.HAND_SKIN122D,
      nightHand: IMAGES.HAND_SKIN122N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "It was funny"
    }, {
      id: 147,
      day: IMAGES.SKIN123D,
      night: IMAGES.SKIN123N,
      dayHand: IMAGES.HAND_SKIN123D,
      nightHand: IMAGES.HAND_SKIN123N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "You can scream"
    }, {
      id: 158,
      day: IMAGES.SKIN134D,
      night: IMAGES.SKIN134N,
      dayHand: IMAGES.HAND_SKIN134D,
      nightHand: IMAGES.HAND_SKIN134N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Mr. Book"
    }, {
      id: 163,
      day: IMAGES.SKIN139D,
      night: IMAGES.SKIN139N,
      dayHand: IMAGES.HAND_SKIN139D,
      nightHand: IMAGES.HAND_SKIN139N,
      rarity: RARITY.DIAMOND,
      author: "Anyone want to play?",
      name: "Mr. Mammoth"
    }, {
      id: 164,
      day: IMAGES.SKIN140D,
      night: IMAGES.SKIN140N,
      dayHand: IMAGES.HAND_SKIN140D,
      nightHand: IMAGES.HAND_SKIN140N,
      rarity: RARITY.DIAMOND,
      author: "SoOw",
      name: "Mr. Mammoth 2"
    }, {
      id: 161,
      day: IMAGES.SKIN137D,
      night: IMAGES.SKIN137N,
      dayHand: IMAGES.HAND_SKIN137D,
      nightHand: IMAGES.HAND_SKIN137N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Nightmare"
    }, {
      id: 168,
      day: IMAGES.SKIN144D,
      night: IMAGES.SKIN144N,
      dayHand: IMAGES.HAND_SKIN144D,
      nightHand: IMAGES.HAND_SKIN144N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Shiny Crystal"
    }, {
      id: 173,
      day: IMAGES.SKIN150D,
      night: IMAGES.SKIN150N,
      dayHand: IMAGES.HAND_SKIN150D,
      nightHand: IMAGES.HAND_SKIN150N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Water skin"
    }, {
      id: 42,
      day: IMAGES.SKIN14D,
      night: IMAGES.SKIN14N,
      dayHand: IMAGES.HAND_SKIN14D,
      nightHand: IMAGES.HAND_SKIN14N,
      rarity: RARITY.AMETHYST,
      author: "Winter",
      name: "Will-O\'-The-Wisp"
    }, {
      id: 91,
      day: IMAGES.SKIN66D,
      night: IMAGES.SKIN66N,
      dayHand: IMAGES.HAND_SKIN66D,
      nightHand: IMAGES.HAND_SKIN66N,
      rarity: RARITY.AMETHYST,
      author: "ExpertyAnimations",
      name: "Flame"
    }, {
      id: 26,
      day: IMAGES.SKIN15D,
      night: IMAGES.SKIN15N,
      dayHand: IMAGES.HAND_SKIN15D,
      nightHand: IMAGES.HAND_SKIN15N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Be a Tree"
    }, {
      id: 38,
      day: IMAGES.SKIN18D,
      night: IMAGES.SKIN18N,
      dayHand: IMAGES.HAND_SKIN18D,
      nightHand: IMAGES.HAND_SKIN18N,
      rarity: RARITY.AMETHYST,
      author: "Winter",
      name: "Toxic Mutant"
    }, {
      id: 50,
      day: IMAGES.SKIN25D,
      night: IMAGES.SKIN25N,
      dayHand: IMAGES.HAND_SKIN25D,
      nightHand: IMAGES.HAND_SKIN25N,
      rarity: RARITY.AMETHYST,
      author: "Communist",
      name: "Mr. Tomato"
    }, {
      id: 54,
      day: IMAGES.SKIN29D,
      night: IMAGES.SKIN29N,
      dayHand: IMAGES.HAND_SKIN29D,
      nightHand: IMAGES.HAND_SKIN29N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mr. Mauve, the Lapa"
    }, {
      id: 57,
      day: IMAGES.SKIN32D,
      night: IMAGES.SKIN32N,
      dayHand: IMAGES.HAND_SKIN32D,
      nightHand: IMAGES.HAND_SKIN32N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Golden Fish"
    }, {
      id: 64,
      day: IMAGES.SKIN39D,
      night: IMAGES.SKIN39N,
      dayHand: IMAGES.HAND_SKIN39D,
      nightHand: IMAGES.HAND_SKIN39N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "LapaMauve"
    }, {
      id: 65,
      day: IMAGES.SKIN40D,
      night: IMAGES.SKIN40N,
      dayHand: IMAGES.HAND_SKIN40D,
      nightHand: IMAGES.HAND_SKIN40N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "LapaMauve "
    }, {
      id: 92,
      day: IMAGES.SKIN67D,
      night: IMAGES.SKIN67N,
      dayHand: IMAGES.HAND_SKIN67D,
      nightHand: IMAGES.HAND_SKIN67N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mr. Burger"
    }, {
      id: 66,
      day: IMAGES.SKIN41D,
      night: IMAGES.SKIN41N,
      dayHand: IMAGES.HAND_SKIN41D,
      nightHand: IMAGES.HAND_SKIN41N,
      rarity: RARITY.AMETHYST,
      author: "pizza wa",
      name: "Tropical Starver"
    }, {
      id: 80,
      day: IMAGES.SKIN55D,
      night: IMAGES.SKIN55N,
      dayHand: IMAGES.HAND_SKIN55D,
      nightHand: IMAGES.HAND_SKIN55N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mr. ShellPink"
    }, {
      id: 81,
      day: IMAGES.SKIN56D,
      night: IMAGES.SKIN56N,
      dayHand: IMAGES.HAND_SKIN56D,
      nightHand: IMAGES.HAND_SKIN56N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mr. OranShell"
    }, {
      id: 99,
      day: IMAGES.SKIN74D,
      night: IMAGES.SKIN74N,
      dayHand: IMAGES.HAND_SKIN74D,
      nightHand: IMAGES.HAND_SKIN74N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Pepe"
    }, {
      id: 100,
      day: IMAGES.SKIN75D,
      night: IMAGES.SKIN75N,
      dayHand: IMAGES.HAND_SKIN75D,
      nightHand: IMAGES.HAND_SKIN75N,
      rarity: RARITY.AMETHYST,
      author: "fatant",
      name: "Mr. Ant"
    }, {
      id: 115,
      day: IMAGES.SKIN90D,
      night: IMAGES.SKIN90N,
      dayHand: IMAGES.HAND_SKIN90D,
      nightHand: IMAGES.HAND_SKIN90N,
      rarity: RARITY.AMETHYST,
      author: "MADBalgouthi",
      name: "Mr. Watermelon"
    }, {
      id: 101,
      day: IMAGES.SKIN76D,
      night: IMAGES.SKIN76N,
      dayHand: IMAGES.HAND_SKIN76D,
      nightHand: IMAGES.HAND_SKIN76N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Mr. Thornbush"
    }, {
      id: 131,
      day: IMAGES.SKIN106D,
      night: IMAGES.SKIN106N,
      dayHand: IMAGES.HAND_SKIN106D,
      nightHand: IMAGES.HAND_SKIN106N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Cthulhu"
    }, {
      id: 143,
      day: IMAGES.SKIN119D,
      night: IMAGES.SKIN119N,
      dayHand: IMAGES.HAND_SKIN119D,
      nightHand: IMAGES.HAND_SKIN119N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Mr. Cactus"
    }, {
      id: 144,
      day: IMAGES.SKIN120D,
      night: IMAGES.SKIN120N,
      dayHand: IMAGES.HAND_SKIN120D,
      nightHand: IMAGES.HAND_SKIN120N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Momo"
    }, {
      id: 95,
      day: IMAGES.SKIN70D,
      night: IMAGES.SKIN70N,
      dayHand: IMAGES.HAND_SKIN70D,
      nightHand: IMAGES.HAND_SKIN70N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Mr. Garlic"
    }, {
      id: 76,
      day: IMAGES.SKIN51D,
      night: IMAGES.SKIN51N,
      dayHand: IMAGES.HAND_SKIN51D,
      nightHand: IMAGES.HAND_SKIN51N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Robot Dragon"
    }, {
      id: 44,
      day: IMAGES.SKIN1D,
      night: IMAGES.SKIN1N,
      dayHand: IMAGES.HAND_SKIN1D,
      nightHand: IMAGES.HAND_SKIN1N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Lava Dragon Version 1"
    }, {
      id: 90,
      day: IMAGES.SKIN65D,
      night: IMAGES.SKIN65N,
      dayHand: IMAGES.HAND_SKIN65D,
      nightHand: IMAGES.HAND_SKIN65N,
      rarity: RARITY.REIDITE,
      author: "ExpertyAnimations",
      name: "Lava Dragon Version 2"
    }, {
      id: 124,
      day: IMAGES.SKIN99D,
      night: IMAGES.SKIN99N,
      dayHand: IMAGES.HAND_SKIN99D,
      nightHand: IMAGES.HAND_SKIN99N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Dragon Version 3"
    }, {
      id: 45,
      day: IMAGES.SKIN12D,
      night: IMAGES.SKIN12N,
      dayHand: IMAGES.HAND_SKIN12D,
      nightHand: IMAGES.HAND_SKIN12N,
      rarity: RARITY.REIDITE,
      author: "Sushui",
      name: "Ice Dragon Version 1"
    }, {
      id: 46,
      day: IMAGES.SKIN13D,
      night: IMAGES.SKIN13N,
      dayHand: IMAGES.HAND_SKIN13D,
      nightHand: IMAGES.HAND_SKIN13N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Ice Dragon Version 2"
    }, {
      id: 108,
      day: IMAGES.SKIN83D,
      night: IMAGES.SKIN83N,
      dayHand: IMAGES.HAND_SKIN83D,
      nightHand: IMAGES.HAND_SKIN83N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Ice Dragon Version 3"
    }, {
      id: 123,
      day: IMAGES.SKIN98D,
      night: IMAGES.SKIN98N,
      dayHand: IMAGES.HAND_SKIN98D,
      nightHand: IMAGES.HAND_SKIN98N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Baby Dragon Version 1"
    }, {
      id: 128,
      day: IMAGES.SKIN103D,
      night: IMAGES.SKIN103N,
      dayHand: IMAGES.HAND_SKIN103D,
      nightHand: IMAGES.HAND_SKIN103N,
      rarity: RARITY.REIDITE,
      author: "MADBalgouthi",
      name: "Baby Dragon Version 2"
    }, {
      id: 125,
      day: IMAGES.SKIN100D,
      night: IMAGES.SKIN100N,
      dayHand: IMAGES.HAND_SKIN100D,
      nightHand: IMAGES.HAND_SKIN100N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Baby Lava"
    }, {
      id: 47,
      day: IMAGES.SKIN21D,
      night: IMAGES.SKIN21N,
      dayHand: IMAGES.HAND_SKIN21D,
      nightHand: IMAGES.HAND_SKIN21N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Kraken"
    }, {
      id: 129,
      day: IMAGES.SKIN104D,
      night: IMAGES.SKIN104N,
      dayHand: IMAGES.HAND_SKIN104D,
      nightHand: IMAGES.HAND_SKIN104N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Sandworm"
    }, {
      id: 63,
      day: IMAGES.SKIN38D,
      night: IMAGES.SKIN38N,
      dayHand: IMAGES.HAND_SKIN38D,
      nightHand: IMAGES.HAND_SKIN38N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Mr. Golden Bread"
    }, {
      id: 67,
      day: IMAGES.SKIN42D,
      night: IMAGES.SKIN42N,
      dayHand: IMAGES.HAND_SKIN42D,
      nightHand: IMAGES.HAND_SKIN42N,
      rarity: RARITY.REIDITE,
      author: "ForgottenHeroe",
      name: "Starver Ores"
    }, {
      id: 130,
      day: IMAGES.SKIN105D,
      night: IMAGES.SKIN105N,
      dayHand: IMAGES.HAND_SKIN105D,
      nightHand: IMAGES.HAND_SKIN105N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Poo"
    }, {
      id: 89,
      day: IMAGES.SKIN64D,
      night: IMAGES.SKIN64N,
      dayHand: IMAGES.HAND_SKIN64D,
      nightHand: IMAGES.HAND_SKIN64N,
      rarity: RARITY.REIDITE,
      author: "Poinet",
      name: "Volcano Starver"
    }, {
      id: 112,
      day: IMAGES.SKIN87D,
      night: IMAGES.SKIN87N,
      dayHand: IMAGES.HAND_SKIN87D,
      nightHand: IMAGES.HAND_SKIN87N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Starver"
    }, {
      id: 48,
      day: IMAGES.SKIN_ROBOTD,
      night: IMAGES.SKIN_ROBOTN,
      dayHand: IMAGES.HAND_ROBOTD,
      nightHand: IMAGES.HAND_ROBOTN,
      rarity: RARITY.SPECIAL,
      author: "eogito",
      name: "Robot"
    }, {
      id: 110,
      day: IMAGES.SKIN85D,
      night: IMAGES.SKIN85N,
      dayHand: IMAGES.HAND_SKIN85D,
      nightHand: IMAGES.HAND_SKIN85N,
      rarity: RARITY.SPECIAL,
      author: "pizza wa",
      name: "Blue Butterfly"
    }, {
      id: 157,
      day: IMAGES.SKIN133D,
      night: IMAGES.SKIN133N,
      dayHand: IMAGES.HAND_SKIN133D,
      nightHand: IMAGES.HAND_SKIN133N,
      rarity: RARITY.SPECIAL,
      author: "eogito",
      name: "Yrifox"
    }, {
      id: 165,
      day: IMAGES.SKIN141D,
      night: IMAGES.SKIN141N,
      dayHand: IMAGES.HAND_SKIN141D,
      nightHand: IMAGES.HAND_SKIN141N,
      rarity: RARITY.SPECIAL,
      author: "OmarJr13",
      name: "Blob Skin"
    }],
    BAG: [{
      id: 0,
      day: IMAGES.BAGD,
      night: IMAGES.BAGN,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Bag 1"
    }, {
      id: 1,
      day: IMAGES.BAG0D,
      night: IMAGES.BAG0N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Old Bag"
    }, {
      id: 2,
      day: IMAGES.BAG4D,
      night: IMAGES.BAG4N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bag 2"
    }, {
      id: 3,
      day: IMAGES.BAG5D,
      night: IMAGES.BAG5N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bag 3"
    }, {
      id: 4,
      day: IMAGES.BAG6D,
      night: IMAGES.BAG6N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bag 4"
    }, {
      id: 5,
      day: IMAGES.BAG7D,
      night: IMAGES.BAG7N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bag 5"
    }, {
      id: 11,
      day: IMAGES.BAG23D,
      night: IMAGES.BAG23N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wood Pickaxe Bag"
    }, {
      id: 19,
      day: IMAGES.BAG16D,
      night: IMAGES.BAG16N,
      rarity: RARITY.WOOD,
      author: "Starve.io ",
      name: "Wood Carrier"
    }, {
      id: 37,
      day: IMAGES.BAG36D,
      night: IMAGES.BAG36N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Bag 6"
    }, {
      id: 39,
      day: IMAGES.BAG38D,
      night: IMAGES.BAG38N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Bag with Wooden Swords"
    }, {
      id: 44,
      day: IMAGES.BAG43D,
      night: IMAGES.BAG43N,
      rarity: RARITY.WOOD,
      author: "Communist",
      name: "Big Bag"
    }, {
      id: 7,
      day: IMAGES.BAG14D,
      night: IMAGES.BAG14N,
      rarity: RARITY.STONE,
      author: "Communist",
      name: "Bag 6"
    }, {
      id: 8,
      day: IMAGES.BAG_EASTERD,
      night: IMAGES.BAG_EASTERN,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Easter Bag"
    }, {
      id: 9,
      day: IMAGES.BAG_STARD,
      night: IMAGES.BAG_STARN,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Star Bag"
    }, {
      id: 10,
      day: IMAGES.BAG9D,
      night: IMAGES.BAG9N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Winter Bag"
    }, {
      id: 20,
      day: IMAGES.BAG17D,
      night: IMAGES.BAG17N,
      rarity: RARITY.STONE,
      author: "Starve.io ",
      name: "Stone Carrier"
    }, {
      id: 24,
      day: IMAGES.BAG24D,
      night: IMAGES.BAG24N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Stone Pickaxe Bag"
    }, {
      id: 6,
      day: IMAGES.BAG13D,
      night: IMAGES.BAG13N,
      rarity: RARITY.STONE,
      author: "Communist",
      name: "Bag Camouflage"
    }, {
      id: 38,
      day: IMAGES.BAG37D,
      night: IMAGES.BAG37N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Bag with Stone Swords"
    }, {
      id: 54,
      day: IMAGES.BAG53D,
      night: IMAGES.BAG53N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Cow Bag"
    }, {
      id: 59,
      day: IMAGES.BAG58D,
      night: IMAGES.BAG58N,
      rarity: RARITY.STONE,
      author: "CrysTal",
      name: "Starver Bag"
    }, {
      id: 62,
      day: IMAGES.BAG61D,
      night: IMAGES.BAG61N,
      rarity: RARITY.STONE,
      author: "CrysTal",
      name: "Crystal Sky Bag"
    }, {
      id: 13,
      day: IMAGES.BAG10D,
      night: IMAGES.BAG10N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Honey Pot"
    }, {
      id: 21,
      day: IMAGES.BAG18D,
      night: IMAGES.BAG18N,
      rarity: RARITY.GOLD,
      author: "Starve.io ",
      name: "Gold Carrier"
    }, {
      id: 30,
      day: IMAGES.BAG25D,
      night: IMAGES.BAG25N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Gold Pickaxe Bag"
    }, {
      id: 29,
      day: IMAGES.BAG31D,
      night: IMAGES.BAG31N,
      rarity: RARITY.GOLD,
      author: "Ariel",
      name: "Mr and Mrs Bakers"
    }, {
      id: 41,
      day: IMAGES.BAG40D,
      night: IMAGES.BAG40N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Bag with Golden Swords"
    }, {
      id: 47,
      day: IMAGES.BAG46D,
      night: IMAGES.BAG46N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Explorer Bag"
    }, {
      id: 51,
      day: IMAGES.BAG50D,
      night: IMAGES.BAG50N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Bamboo Bag"
    }, {
      id: 53,
      day: IMAGES.BAG52D,
      night: IMAGES.BAG52N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Mummy Bag"
    }, {
      id: 58,
      day: IMAGES.BAG57D,
      night: IMAGES.BAG57N,
      rarity: RARITY.GOLD,
      author: "MADBalgouthi",
      name: "Watermelon Bag"
    }, {
      id: 60,
      day: IMAGES.BAG59D,
      night: IMAGES.BAG60N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Garlic Bag"
    }, {
      id: 61,
      day: IMAGES.BAG60D,
      night: IMAGES.BAG59N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Pumpkin Bag"
    }, {
      id: 64,
      day: IMAGES.BAG63D,
      night: IMAGES.BAG63N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Oil Barel bag"
    }, {
      id: 67,
      day: IMAGES.BAG68D,
      night: IMAGES.BAG68N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Tree Bag"
    }, {
      id: 14,
      day: IMAGES.BAG1D,
      night: IMAGES.BAG1N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "a Rabbit in my Bag"
    }, {
      id: 15,
      day: IMAGES.BAG2D,
      night: IMAGES.BAG2N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Bird\'s nest"
    }, {
      id: 16,
      day: IMAGES.BAG3D,
      night: IMAGES.BAG3N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "a Fish on your Back"
    }, {
      id: 17,
      day: IMAGES.BAG8D,
      night: IMAGES.BAG8N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "a Squirrel in my Bag"
    }, {
      id: 22,
      day: IMAGES.BAG19D,
      night: IMAGES.BAG19N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io ",
      name: "Diamond Carrier"
    }, {
      id: 12,
      day: IMAGES.BAG22D,
      night: IMAGES.BAG22N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Resources Bag"
    }, {
      id: 32,
      day: IMAGES.BAG26D,
      night: IMAGES.BAG26N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Diamond Pickaxe Bag"
    }, {
      id: 40,
      day: IMAGES.BAG39D,
      night: IMAGES.BAG39N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Bag with Diamond Swords"
    }, {
      id: 45,
      day: IMAGES.BAG44D,
      night: IMAGES.BAG44N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "My Cake Bag"
    }, {
      id: 46,
      day: IMAGES.BAG45D,
      night: IMAGES.BAG45N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "My Christmas Cake Bag"
    }, {
      id: 52,
      day: IMAGES.BAG51D,
      night: IMAGES.BAG51N,
      rarity: RARITY.DIAMOND,
      author: "MADBalgouthi",
      name: "Fish Bag"
    }, {
      id: 65,
      day: IMAGES.BAG64D,
      night: IMAGES.BAG64N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Cloud Bag"
    }, {
      id: 68,
      day: IMAGES.BAG66D,
      night: IMAGES.BAG66N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Bee Bag"
    }, {
      id: 48,
      day: IMAGES.BAG47D,
      night: IMAGES.BAG47N,
      rarity: RARITY.AMETHYST,
      author: "fatant",
      name: "Natural Bag"
    }, {
      id: 23,
      day: IMAGES.BAG20D,
      night: IMAGES.BAG20N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io ",
      name: "Amethyst Carrier"
    }, {
      id: 25,
      day: IMAGES.BAG27D,
      night: IMAGES.BAG27N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Amethyst Pickaxe Bag"
    }, {
      id: 28,
      day: IMAGES.BAG30D,
      night: IMAGES.BAG30N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Your Baby"
    }, {
      id: 33,
      day: IMAGES.BAG32D,
      night: IMAGES.BAG32N,
      rarity: RARITY.AMETHYST,
      author: "pizza wa",
      name: "Tropical Bag"
    }, {
      id: 43,
      day: IMAGES.BAG42D,
      night: IMAGES.BAG42N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Bag with Amethyst Swords"
    }, {
      id: 35,
      day: IMAGES.BAG34D,
      night: IMAGES.BAG34N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Ice Bag"
    }, {
      id: 50,
      day: IMAGES.BAG49D,
      night: IMAGES.BAG49N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Thornbush Bag"
    }, {
      id: 56,
      day: IMAGES.BAG55D,
      night: IMAGES.BAG55N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Autumn Bag"
    }, {
      id: 57,
      day: IMAGES.BAG56D,
      night: IMAGES.BAG56N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Dino Egg Bag"
    }, {
      id: 66,
      day: IMAGES.BAG65D,
      night: IMAGES.BAG65N,
      rarity: RARITY.AMETHYST,
      author: "pizza wa",
      name: "Magic Cloud Bag"
    }, {
      id: 69,
      day: IMAGES.BAG67D,
      night: IMAGES.BAG67N,
      rarity: RARITY.AMETHYST,
      author: "pizza wa",
      name: "Chest Bag"
    }, {
      id: 31,
      day: IMAGES.BAG21D,
      night: IMAGES.BAG21N,
      rarity: RARITY.REIDITE,
      author: "Starve.io ",
      name: "Reidite Carrier"
    }, {
      id: 18,
      day: IMAGES.BAG11D,
      night: IMAGES.BAG11N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Lava Bag"
    }, {
      id: 49,
      day: IMAGES.BAG48D,
      night: IMAGES.BAG48N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Bag 2"
    }, {
      id: 36,
      day: IMAGES.BAG35D,
      night: IMAGES.BAG35N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Dragon Bag"
    }, {
      id: 55,
      day: IMAGES.BAG54D,
      night: IMAGES.BAG54N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Winter Ice Bag"
    }, {
      id: 26,
      day: IMAGES.BAG28D,
      night: IMAGES.BAG28N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Reidite Pickaxe Bag"
    }, {
      id: 27,
      day: IMAGES.BAG29D,
      night: IMAGES.BAG29N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Octopus Bowl"
    }, {
      id: 34,
      day: IMAGES.BAG33D,
      night: IMAGES.BAG33N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Cave Bag"
    }, {
      id: 42,
      day: IMAGES.BAG41D,
      night: IMAGES.BAG41N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Bag with Reidite Swords"
    }, {
      id: 63,
      day: IMAGES.BAG62D,
      night: IMAGES.BAG62N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Engineer Bag"
    }],
    CRATE: [{
      id: 0,
      day: IMAGES.CRATE7D,
      night: IMAGES.CRATE7N,
      rarity: RARITY.FREE,
      author: "eogito",
      name: "Wooden Dead Box"
    }, {
      id: 1,
      day: IMAGES.CRATE6D,
      night: IMAGES.CRATE6N,
      rarity: RARITY.FREE,
      author: "eogito",
      name: "Hidden item"
    }, {
      id: 2,
      day: IMAGES.CRATE1D,
      night: IMAGES.CRATE1N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box 1"
    }, {
      id: 3,
      day: IMAGES.CRATE2D,
      night: IMAGES.CRATE2N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box 2"
    }, {
      id: 4,
      day: IMAGES.CRATE3D,
      night: IMAGES.CRATE3N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box 3"
    }, {
      id: 5,
      day: IMAGES.CRATE4D,
      night: IMAGES.CRATE4N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Broken Wooden Box"
    }, {
      id: 6,
      day: IMAGES.CRATE5D,
      night: IMAGES.CRATE5N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box"
    }, {
      id: 7,
      day: IMAGES.CRATE8D,
      night: IMAGES.CRATE8N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Battle Box"
    }, {
      id: 8,
      day: IMAGES.CRATE9D,
      night: IMAGES.CRATE9N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box with a Cross"
    }, {
      id: 9,
      day: IMAGES.CRATE10D,
      night: IMAGES.CRATE10N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box with Bubbles"
    }, {
      id: 10,
      day: IMAGES.CRATE11D,
      night: IMAGES.CRATE11N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box with Eyes"
    }, {
      id: 11,
      day: IMAGES.CRATE12D,
      night: IMAGES.CRATE12N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Dark Wooden Box"
    }, {
      id: 38,
      day: IMAGES.CRATE39D,
      night: IMAGES.CRATE39N,
      rarity: RARITY.WOOD,
      author: "Weddlz",
      name: "Noob Box"
    }, {
      id: 12,
      day: IMAGES.CRATE13D,
      night: IMAGES.CRATE13N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Wooden and Stone Box"
    }, {
      id: 14,
      day: IMAGES.CRATE19D,
      night: IMAGES.CRATE19N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Star Box 1"
    }, {
      id: 15,
      day: IMAGES.CRATE20D,
      night: IMAGES.CRATE20N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Star Box 2"
    }, {
      id: 27,
      day: IMAGES.CRATE29D,
      night: IMAGES.CRATE29N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Flower Box"
    }, {
      id: 46,
      day: IMAGES.CRATE47D,
      night: IMAGES.CRATE47N,
      rarity: RARITY.STONE,
      author: "MADBalgouthi",
      name: "Blue Box"
    }, {
      id: 19,
      day: IMAGES.CRATE21D,
      night: IMAGES.CRATE21N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Beehive"
    }, {
      id: 13,
      day: IMAGES.CRATE14D,
      night: IMAGES.CRATE14N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Wooden and Golden Box"
    }, {
      id: 21,
      day: IMAGES.CRATE22D,
      night: IMAGES.CRATE22N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Gravestone"
    }, {
      id: 25,
      day: IMAGES.CRATE26D,
      night: IMAGES.CRATE26N,
      rarity: RARITY.GOLD,
      author: "Communist",
      name: "Sky Box"
    }, {
      id: 29,
      day: IMAGES.CRATE30D,
      night: IMAGES.CRATE30N,
      rarity: RARITY.GOLD,
      author: "Winter",
      name: "Golden Box"
    }, {
      id: 34,
      day: IMAGES.CRATE35D,
      night: IMAGES.CRATE35N,
      rarity: RARITY.GOLD,
      author: "Communist",
      name: "Water Crate"
    }, {
      id: 35,
      day: IMAGES.CRATE36D,
      night: IMAGES.CRATE36N,
      rarity: RARITY.GOLD,
      author: "Communist",
      name: "Glass Crate"
    }, {
      id: 16,
      day: IMAGES.CRATE15D,
      night: IMAGES.CRATE15N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Wooden and Diamond Box"
    }, {
      id: 18,
      day: IMAGES.CRATE18D,
      night: IMAGES.CRATE18N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Don\'t Hit Me"
    }, {
      id: 26,
      day: IMAGES.CRATE27D,
      night: IMAGES.CRATE27N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Underwater Box"
    }, {
      id: 31,
      day: IMAGES.CRATE32D,
      night: IMAGES.CRATE32N,
      rarity: RARITY.DIAMOND,
      author: "Communist",
      name: "Items Pile"
    }, {
      id: 32,
      day: IMAGES.CRATE33D,
      night: IMAGES.CRATE33N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Cake Box"
    }, {
      id: 33,
      day: IMAGES.CRATE34D,
      night: IMAGES.CRATE34N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Christmas Cake Box"
    }, {
      id: 36,
      day: IMAGES.CRATE37D,
      night: IMAGES.CRATE37N,
      rarity: RARITY.DIAMOND,
      author: "Fukss",
      name: "Crab Box"
    }, {
      id: 42,
      day: IMAGES.CRATE43D,
      night: IMAGES.CRATE43N,
      rarity: RARITY.DIAMOND,
      author: "MADBalgouthi",
      name: "Fishing Box"
    }, {
      id: 22,
      day: IMAGES.CRATE23D,
      night: IMAGES.CRATE23N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Let me out of here"
    }, {
      id: 17,
      day: IMAGES.CRATE16D,
      night: IMAGES.CRATE16N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Wooden and Amethyst Box"
    }, {
      id: 24,
      day: IMAGES.CRATE25D,
      night: IMAGES.CRATE25N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Aquarium"
    }, {
      id: 28,
      day: IMAGES.CRATE28D,
      night: IMAGES.CRATE28N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Gift Box"
    }, {
      id: 40,
      day: IMAGES.CRATE41D,
      night: IMAGES.CRATE41N,
      rarity: RARITY.AMETHYST,
      author: "MADBalgouthi",
      name: "Open Watermelon Box"
    }, {
      id: 41,
      day: IMAGES.CRATE42D,
      night: IMAGES.CRATE42N,
      rarity: RARITY.AMETHYST,
      author: "MADBalgouthi",
      name: "Watermelon Box"
    }, {
      id: 39,
      day: IMAGES.CRATE40D,
      night: IMAGES.CRATE40N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Thornbush Box"
    }, {
      id: 43,
      day: IMAGES.CRATE44D,
      night: IMAGES.CRATE44N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Rabbit in the Box"
    }, {
      id: 47,
      day: IMAGES.CRATE48D,
      night: IMAGES.CRATE48N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Garlic Plot"
    }, {
      id: 48,
      day: IMAGES.CRATE49D,
      night: IMAGES.CRATE49N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Pumpkin Plot"
    }, {
      id: 45,
      day: IMAGES.CRATE46D,
      night: IMAGES.CRATE46N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Autumn Box"
    }, {
      id: 44,
      day: IMAGES.CRATE45D,
      night: IMAGES.CRATE45N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Winter Box"
    }, {
      id: 20,
      day: IMAGES.CRATE17D,
      night: IMAGES.CRATE17N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Metal and Reidite Box"
    }, {
      id: 23,
      day: IMAGES.CRATE24D,
      night: IMAGES.CRATE24N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Kraken Box"
    }, {
      id: 30,
      day: IMAGES.CRATE31D,
      night: IMAGES.CRATE31N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Lava Box"
    }, {
      id: 37,
      day: IMAGES.CRATE38D,
      night: IMAGES.CRATE38N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Box 2"
    }, {
      id: 49,
      day: IMAGES.CRATE50D,
      night: IMAGES.CRATE50N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Rabbit"
    }, {
      id: 50,
      day: IMAGES.CRATE51D,
      night: IMAGES.CRATE51N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Wolf"
    }, {
      id: 51,
      day: IMAGES.CRATE52D,
      night: IMAGES.CRATE52N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Spider"
    }, {
      id: 52,
      day: IMAGES.CRATE53D,
      night: IMAGES.CRATE53N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Hawk"
    }, {
      id: 53,
      day: IMAGES.CRATE54D,
      night: IMAGES.CRATE54N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Bear"
    }, {
      id: 54,
      day: IMAGES.CRATE55D,
      night: IMAGES.CRATE55N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Fox"
    }, {
      id: 55,
      day: IMAGES.CRATE56D,
      night: IMAGES.CRATE56N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Baby Mammoth"
    }, {
      id: 56,
      day: IMAGES.CRATE57D,
      night: IMAGES.CRATE57N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Mammoth"
    }, {
      id: 57,
      day: IMAGES.CRATE58D,
      night: IMAGES.CRATE58N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Sandworm"
    }, {
      id: 58,
      day: IMAGES.CRATE59D,
      night: IMAGES.CRATE59N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Vulture"
    }, {
      id: 59,
      day: IMAGES.CRATE60D,
      night: IMAGES.CRATE60N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Kraken"
    }, {
      id: 60,
      day: IMAGES.CRATE61D,
      night: IMAGES.CRATE61N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Piranha"
    }, {
      id: 61,
      day: IMAGES.CRATE62D,
      night: IMAGES.CRATE62N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Baby Dragon"
    }, {
      id: 62,
      day: IMAGES.CRATE63D,
      night: IMAGES.CRATE63N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Baby Lava"
    }, {
      id: 63,
      day: IMAGES.CRATE64D,
      night: IMAGES.CRATE64N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Dragon"
    }, {
      id: 64,
      day: IMAGES.CRATE65D,
      night: IMAGES.CRATE65N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Penguin"
    }, {
      id: 65,
      day: IMAGES.CRATE66D,
      night: IMAGES.CRATE66N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Lava Dragon"
    }, {
      id: 66,
      day: IMAGES.CRATE67D,
      night: IMAGES.CRATE67N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Boar"
    }, {
      id: 67,
      day: IMAGES.CRATE68D,
      night: IMAGES.CRATE68N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Fire mob"
    }, {
      id: 68,
      day: IMAGES.CRATE69D,
      night: IMAGES.CRATE69N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Crab"
    }, {
      id: 69,
      day: IMAGES.CRATE70D,
      night: IMAGES.CRATE70N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the King Crab"
    }, {
      id: 70,
      day: IMAGES.CRATE71D,
      night: IMAGES.CRATE71N,
      rarity: RARITY.GOLD,
      author: "CrysTal",
      name: "Crystal Sky Box"
    }, {
      id: 71,
      day: IMAGES.CRATE72D,
      night: IMAGES.CRATE72N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Dragon Box"
    }],
    BOOK: [{
      id: 0,
      day: IMAGES.BOOK0D,
      night: IMAGES.BOOK0N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Book 1"
    }, {
      id: 1,
      day: IMAGES.BOOK3D,
      night: IMAGES.BOOK3N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Book 2"
    }, {
      id: 2,
      day: IMAGES.BOOK4D,
      night: IMAGES.BOOK4N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Book 3"
    }, {
      id: 3,
      day: IMAGES.BOOK5D,
      night: IMAGES.BOOK5N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Book 4"
    }, {
      id: 4,
      day: IMAGES.BOOK6D,
      night: IMAGES.BOOK6N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Damaged Book 1"
    }, {
      id: 18,
      day: IMAGES.BOOK18D,
      night: IMAGES.BOOK18N,
      rarity: RARITY.WOOD,
      author: "SeveR",
      name: "Damaged Book 2"
    }, {
      id: 5,
      day: IMAGES.BOOK1D,
      night: IMAGES.BOOK1N,
      rarity: RARITY.STONE,
      author: "Doctorpus",
      name: "Scroll"
    }, {
      id: 6,
      day: IMAGES.BOOK2D,
      night: IMAGES.BOOK2N,
      rarity: RARITY.STONE,
      author: "Doctorpus",
      name: "Clipboard"
    }, {
      id: 7,
      day: IMAGES.BOOK7D,
      night: IMAGES.BOOK7N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Seed Book"
    }, {
      id: 20,
      day: IMAGES.BOOK20D,
      night: IMAGES.BOOK20N,
      rarity: RARITY.STONE,
      author: "Taco4Life",
      name: "Camo Book"
    }, {
      id: 24,
      day: IMAGES.BOOK24D,
      night: IMAGES.BOOK24N,
      rarity: RARITY.STONE,
      author: "Communist",
      name: "Stone Tablet"
    }, {
      id: 10,
      day: IMAGES.BOOK13D,
      night: IMAGES.BOOK13N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Star Book"
    }, {
      id: 8,
      day: IMAGES.BOOK9D,
      night: IMAGES.BOOK9N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Gold Book"
    }, {
      id: 15,
      day: IMAGES.BOOK15D,
      night: IMAGES.BOOK15N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Old Mysterious Paper"
    }, {
      id: 17,
      day: IMAGES.BOOK17D,
      night: IMAGES.BOOK17N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Gold Engraving"
    }, {
      id: 25,
      day: IMAGES.BOOK25D,
      night: IMAGES.BOOK25N,
      rarity: RARITY.GOLD,
      author: "fatant",
      name: "Ant Book"
    }, {
      id: 32,
      day: IMAGES.BOOK32D,
      night: IMAGES.BOOK32N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Mummy Book"
    }, {
      id: 37,
      day: IMAGES.BOOK39D,
      night: IMAGES.BOOK39N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Garlic Book"
    }, {
      id: 38,
      day: IMAGES.BOOK38D,
      night: IMAGES.BOOK38N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Pumpkin Book"
    }, {
      id: 39,
      day: IMAGES.BOOK40D,
      night: IMAGES.BOOK40N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Christmas Tree Book"
    }, {
      id: 11,
      day: IMAGES.BOOK10D,
      night: IMAGES.BOOK10N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Diamond Book"
    }, {
      id: 9,
      day: IMAGES.BOOK8D,
      night: IMAGES.BOOK8N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Obscure Book"
    }, {
      id: 16,
      day: IMAGES.BOOK16D,
      night: IMAGES.BOOK16N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Rolled Parchment"
    }, {
      id: 22,
      day: IMAGES.BOOK22D,
      night: IMAGES.BOOK22N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Cake Book"
    }, {
      id: 23,
      day: IMAGES.BOOK23D,
      night: IMAGES.BOOK23N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Christmas Cake Book"
    }, {
      id: 30,
      day: IMAGES.BOOK30D,
      night: IMAGES.BOOK30N,
      rarity: RARITY.DIAMOND,
      author: "MADBalgouthi",
      name: "Fish Book"
    }, {
      id: 31,
      day: IMAGES.BOOK31D,
      night: IMAGES.BOOK31N,
      rarity: RARITY.DIAMOND,
      author: "CrysTal",
      name: "Once upon a time"
    }, {
      id: 13,
      day: IMAGES.BOOK11D,
      night: IMAGES.BOOK11N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Amethyst Book"
    }, {
      id: 28,
      day: IMAGES.BOOK28D,
      night: IMAGES.BOOK28N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Paint Pallet"
    }, {
      id: 29,
      day: IMAGES.BOOK29D,
      night: IMAGES.BOOK29N,
      rarity: RARITY.AMETHYST,
      author: "CrysTal",
      name: "Watermelon Book"
    }, {
      id: 27,
      day: IMAGES.BOOK27D,
      night: IMAGES.BOOK27N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Thornbush Book"
    }, {
      id: 35,
      day: IMAGES.BOOK35D,
      night: IMAGES.BOOK35N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Menu"
    }, {
      id: 36,
      day: IMAGES.BOOK36D,
      night: IMAGES.BOOK36N,
      rarity: RARITY.AMETHYST,
      author: "CrysTal",
      name: "Lover Letter"
    }, {
      id: 40,
      day: IMAGES.BOOK41D,
      night: IMAGES.BOOK41N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Fresh-Baked Cookies"
    }, {
      id: 41,
      day: IMAGES.BOOK42D,
      night: IMAGES.BOOK42N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Inside, there is just a book."
    }, {
      id: 33,
      day: IMAGES.BOOK33D,
      night: IMAGES.BOOK33N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Winter Book"
    }, {
      id: 34,
      day: IMAGES.BOOK34D,
      night: IMAGES.BOOK34N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Autumn Book"
    }, {
      id: 14,
      day: IMAGES.BOOK12D,
      night: IMAGES.BOOK12N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Reidite Book"
    }, {
      id: 12,
      day: IMAGES.BOOK14D,
      night: IMAGES.BOOK14N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Lava Book"
    }, {
      id: 26,
      day: IMAGES.BOOK26D,
      night: IMAGES.BOOK26N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Book 2"
    }, {
      id: 19,
      day: IMAGES.BOOK19D,
      night: IMAGES.BOOK19N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Ocean Mystery"
    }, {
      id: 21,
      day: IMAGES.BOOK21D,
      night: IMAGES.BOOK21N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Dragon Book"
    }, {
      id: 42,
      day: IMAGES.BOOK43D,
      night: IMAGES.BOOK43N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Engineer Book"
    }, {
      id: 43,
      day: IMAGES.BOOK44D,
      night: IMAGES.BOOK44N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Nightmare Book"
    }, {
      id: 44,
      day: IMAGES.BOOK45D,
      night: IMAGES.BOOK45N,
      rarity: RARITY.REIDITE,
      author: "aloner",
      name: "Mystery Book"
    }],
    ACCESSORY: [{
      id: 0,
      day: IMAGES.ACCESSORY0D,
      night: IMAGES.ACCESSORY0D,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Nothing"
    }, {
      id: 2,
      day: IMAGES.ACCESSORY4D,
      night: IMAGES.ACCESSORY4N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Pink Cheeks"
    }, {
      id: 3,
      day: IMAGES.ACCESSORY5D,
      night: IMAGES.ACCESSORY5N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Heart"
    }, {
      id: 1,
      day: IMAGES.ACCESSORY3D,
      night: IMAGES.ACCESSORY3N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Bandage 1"
    }, {
      id: 4,
      day: IMAGES.ACCESSORY6D,
      night: IMAGES.ACCESSORY6N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Flower 1"
    }, {
      id: 5,
      day: IMAGES.ACCESSORY8D,
      night: IMAGES.ACCESSORY8N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bow 1"
    }, {
      id: 6,
      day: IMAGES.ACCESSORY9D,
      night: IMAGES.ACCESSORY9N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Bandage 2"
    }, {
      id: 7,
      day: IMAGES.ACCESSORY15D,
      night: IMAGES.ACCESSORY15N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Flower 2"
    }, {
      id: 8,
      day: IMAGES.ACCESSORY10D,
      night: IMAGES.ACCESSORY10N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Bandage 3"
    }, {
      id: 36,
      day: IMAGES.ACCESSORY36D,
      night: IMAGES.ACCESSORY36N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Foliage"
    }, {
      id: 59,
      day: IMAGES.ACCESSORY47D,
      night: IMAGES.ACCESSORY47N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Peaceful"
    }, {
      id: 67,
      day: IMAGES.ACCESSORY55D,
      night: IMAGES.ACCESSORY55N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Sparkles"
    }, {
      id: 68,
      day: IMAGES.ACCESSORY56D,
      night: IMAGES.ACCESSORY56N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Luxury"
    }, {
      id: 69,
      day: IMAGES.ACCESSORY57D,
      night: IMAGES.ACCESSORY57N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Snow Flakes Crown"
    }, {
      id: 17,
      day: IMAGES.ACCESSORY17D,
      night: IMAGES.ACCESSORY17N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Glasses 1"
    }, {
      id: 10,
      day: IMAGES.ACCESSORY7D,
      night: IMAGES.ACCESSORY7N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Bow 2"
    }, {
      id: 11,
      day: IMAGES.ACCESSORY13D,
      night: IMAGES.ACCESSORY13N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Little Stars"
    }, {
      id: 12,
      day: IMAGES.ACCESSORY11D,
      night: IMAGES.ACCESSORY11N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Pirate Eye Patch 1"
    }, {
      id: 44,
      day: IMAGES.ACCESSORY44D,
      night: IMAGES.ACCESSORY44N,
      rarity: RARITY.STONE,
      author: "Taco4Life",
      name: "Pirate Eye Patch 2"
    }, {
      id: 23,
      day: IMAGES.ACCESSORY23D,
      night: IMAGES.ACCESSORY23N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Clown nose"
    }, {
      id: 16,
      day: IMAGES.ACCESSORY2D,
      night: IMAGES.ACCESSORY2N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Eye Patch"
    }, {
      id: 30,
      day: IMAGES.ACCESSORY30D,
      night: IMAGES.ACCESSORY30N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Flower 3"
    }, {
      id: 38,
      day: IMAGES.ACCESSORY38D,
      night: IMAGES.ACCESSORY38N,
      rarity: RARITY.STONE,
      author: "Winter",
      name: "False Nose"
    }, {
      id: 74,
      day: IMAGES.ACCESSORY62D,
      night: IMAGES.ACCESSORY62N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Red Cloth"
    }, {
      id: 75,
      day: IMAGES.ACCESSORY63D,
      night: IMAGES.ACCESSORY63N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Blue Cloth"
    }, {
      id: 79,
      day: IMAGES.ACCESSORY67D,
      night: IMAGES.ACCESSORY67N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Transparent Mask"
    }, {
      id: 89,
      day: IMAGES.ACCESSORY77D,
      night: IMAGES.ACCESSORY77N,
      rarity: RARITY.STONE,
      author: "Anyone want to play?",
      name: "Starve.io Anime"
    }, {
      id: 94,
      day: IMAGES.ACCESSORY78D,
      night: IMAGES.ACCESSORY78N,
      rarity: RARITY.STONE,
      author: "Ant",
      name: "Hero Mask"
    }, {
      id: 15,
      day: IMAGES.ACCESSORY16D,
      night: IMAGES.ACCESSORY16N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Star Glasses"
    }, {
      id: 21,
      day: IMAGES.ACCESSORY21D,
      night: IMAGES.ACCESSORY21N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Great-aunt\'s Glasses"
    }, {
      id: 24,
      day: IMAGES.ACCESSORY24D,
      night: IMAGES.ACCESSORY24N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Little Starver"
    }, {
      id: 22,
      day: IMAGES.ACCESSORY22D,
      night: IMAGES.ACCESSORY22N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Little Glasses"
    }, {
      id: 13,
      day: IMAGES.ACCESSORY14D,
      night: IMAGES.ACCESSORY14N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Flower Chain"
    }, {
      id: 29,
      day: IMAGES.ACCESSORY29D,
      night: IMAGES.ACCESSORY29N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Horns"
    }, {
      id: 31,
      day: IMAGES.ACCESSORY31D,
      night: IMAGES.ACCESSORY31N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Golden Flower"
    }, {
      id: 40,
      day: IMAGES.ACCESSORY40D,
      night: IMAGES.ACCESSORY40N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Sleeping Mask"
    }, {
      id: 57,
      day: IMAGES.ACCESSORY50D,
      night: IMAGES.ACCESSORY50N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Fish on your head"
    }, {
      id: 58,
      day: IMAGES.ACCESSORY46D,
      night: IMAGES.ACCESSORY46N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Rose"
    }, {
      id: 91,
      day: IMAGES.ACCESSORY80D,
      night: IMAGES.ACCESSORY80N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Grey Scarf"
    }, {
      id: 92,
      day: IMAGES.ACCESSORY81D,
      night: IMAGES.ACCESSORY81N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Black Scarf"
    }, {
      id: 93,
      day: IMAGES.ACCESSORY82D,
      night: IMAGES.ACCESSORY82N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Skull Mask"
    }, {
      id: 9,
      day: IMAGES.ACCESSORY1D,
      night: IMAGES.ACCESSORY1N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Fancy Glasses"
    }, {
      id: 25,
      day: IMAGES.ACCESSORY25D,
      night: IMAGES.ACCESSORY25N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Medecin Mask"
    }, {
      id: 14,
      day: IMAGES.ACCESSORY12D,
      night: IMAGES.ACCESSORY12N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Mayor"
    }, {
      id: 19,
      day: IMAGES.ACCESSORY19D,
      night: IMAGES.ACCESSORY19N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Sunglasses 2"
    }, {
      id: 28,
      day: IMAGES.ACCESSORY28D,
      night: IMAGES.ACCESSORY28N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Starfish"
    }, {
      id: 37,
      day: IMAGES.ACCESSORY37D,
      night: IMAGES.ACCESSORY37N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Berry"
    }, {
      id: 39,
      day: IMAGES.ACCESSORY39D,
      night: IMAGES.ACCESSORY39N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Flake"
    }, {
      id: 43,
      day: IMAGES.ACCESSORY43D,
      night: IMAGES.ACCESSORY43N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Leaf "
    }, {
      id: 61,
      day: IMAGES.ACCESSORY49D,
      night: IMAGES.ACCESSORY49N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "A sword in your head"
    }, {
      id: 62,
      day: IMAGES.ACCESSORY51D,
      night: IMAGES.ACCESSORY51N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Winter Scarf"
    }, {
      id: 64,
      day: IMAGES.ACCESSORY53D,
      night: IMAGES.ACCESSORY53N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Winter Scarf 2"
    }, {
      id: 66,
      day: IMAGES.ACCESSORY54D,
      night: IMAGES.ACCESSORY54N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Winter Scarf 3"
    }, {
      id: 70,
      day: IMAGES.ACCESSORY58D,
      night: IMAGES.ACCESSORY58N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mask with animal tracks"
    }, {
      id: 71,
      day: IMAGES.ACCESSORY59D,
      night: IMAGES.ACCESSORY59N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Spring Mask"
    }, {
      id: 72,
      day: IMAGES.ACCESSORY60D,
      night: IMAGES.ACCESSORY60N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Pink Mask"
    }, {
      id: 73,
      day: IMAGES.ACCESSORY61D,
      night: IMAGES.ACCESSORY61N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Blue Mask"
    }, {
      id: 76,
      day: IMAGES.ACCESSORY64D,
      night: IMAGES.ACCESSORY64N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Military Mask"
    }, {
      id: 77,
      day: IMAGES.ACCESSORY65D,
      night: IMAGES.ACCESSORY65N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Orange Mask"
    }, {
      id: 78,
      day: IMAGES.ACCESSORY66D,
      night: IMAGES.ACCESSORY66N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "White and Red Points Mask"
    }, {
      id: 80,
      day: IMAGES.ACCESSORY68D,
      night: IMAGES.ACCESSORY68N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Stick out your tongue Mask"
    }, {
      id: 81,
      day: IMAGES.ACCESSORY69D,
      night: IMAGES.ACCESSORY69N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Two Teeth Mask"
    }, {
      id: 82,
      day: IMAGES.ACCESSORY70D,
      night: IMAGES.ACCESSORY70N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Make-up Mask"
    }, {
      id: 83,
      day: IMAGES.ACCESSORY71D,
      night: IMAGES.ACCESSORY71N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Sad Mask"
    }, {
      id: 84,
      day: IMAGES.ACCESSORY72D,
      night: IMAGES.ACCESSORY72N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Happy Mask"
    }, {
      id: 90,
      day: IMAGES.ACCESSORY79D,
      night: IMAGES.ACCESSORY79N,
      rarity: RARITY.DIAMOND,
      author: "aloner",
      name: "Blood"
    }, {
      id: 27,
      day: IMAGES.ACCESSORY27D,
      night: IMAGES.ACCESSORY27N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Clown Face"
    }, {
      id: 20,
      day: IMAGES.ACCESSORY20D,
      night: IMAGES.ACCESSORY20N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Sunglasses 3"
    }, {
      id: 32,
      day: IMAGES.ACCESSORY32D,
      night: IMAGES.ACCESSORY32N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Engineer\'s Glasses"
    }, {
      id: 33,
      day: IMAGES.ACCESSORY33D,
      night: IMAGES.ACCESSORY33N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Engineer\'s Monocle"
    }, {
      id: 34,
      day: IMAGES.ACCESSORY34D,
      night: IMAGES.ACCESSORY34N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mauve\'s butt"
    }, {
      id: 41,
      day: IMAGES.ACCESSORY41D,
      night: IMAGES.ACCESSORY41N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Lapa Head"
    }, {
      id: 42,
      day: IMAGES.ACCESSORY42D,
      night: IMAGES.ACCESSORY42N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Lapa Head "
    }, {
      id: 85,
      day: IMAGES.ACCESSORY73D,
      night: IMAGES.ACCESSORY73N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mask and Glasses"
    }, {
      id: 60,
      day: IMAGES.ACCESSORY48D,
      night: IMAGES.ACCESSORY48N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Jason"
    }, {
      id: 26,
      day: IMAGES.ACCESSORY26D,
      night: IMAGES.ACCESSORY26N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Devil Horns"
    }, {
      id: 18,
      day: IMAGES.ACCESSORY18D,
      night: IMAGES.ACCESSORY18N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Big Boss"
    }, {
      id: 35,
      day: IMAGES.ACCESSORY35D,
      night: IMAGES.ACCESSORY35N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Baby Kraken"
    }, {
      id: 63,
      day: IMAGES.ACCESSORY52D,
      night: IMAGES.ACCESSORY52N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Deer Antlers"
    }, {
      id: 65,
      day: IMAGES.ACCESSORY45D,
      night: IMAGES.ACCESSORY45N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Baby Dragon on your head"
    }, {
      id: 86,
      day: IMAGES.ACCESSORY74D,
      night: IMAGES.ACCESSORY74N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Gaz Mask and Glasses"
    }, {
      id: 87,
      day: IMAGES.ACCESSORY75D,
      night: IMAGES.ACCESSORY75N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Pink Gaz Mask and Glasses"
    }, {
      id: 88,
      day: IMAGES.ACCESSORY76D,
      night: IMAGES.ACCESSORY76N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Engineer Glasses"
    }, {
      id: 45,
      day: IMAGES.LEVEL5D,
      night: IMAGES.LEVEL5N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 5",
      level: 5
    }, {
      id: 46,
      day: IMAGES.LEVEL10D,
      night: IMAGES.LEVEL10N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 10",
      level: 10
    }, {
      id: 47,
      day: IMAGES.LEVEL15D,
      night: IMAGES.LEVEL15N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 15",
      level: 15
    }, {
      id: 48,
      day: IMAGES.LEVEL20D,
      night: IMAGES.LEVEL20N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 20",
      level: 20
    }, {
      id: 49,
      day: IMAGES.LEVEL25D,
      night: IMAGES.LEVEL25N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 25",
      level: 25
    }, {
      id: 50,
      day: IMAGES.LEVEL30D,
      night: IMAGES.LEVEL30N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 30",
      level: 30
    }, {
      id: 51,
      day: IMAGES.LEVEL35D,
      night: IMAGES.LEVEL35N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 35",
      level: 35
    }, {
      id: 52,
      day: IMAGES.LEVEL40D,
      night: IMAGES.LEVEL40N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 40",
      level: 40
    }, {
      id: 53,
      day: IMAGES.LEVEL45D,
      night: IMAGES.LEVEL45N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 45",
      level: 45
    }, {
      id: 54,
      day: IMAGES.LEVEL50D,
      night: IMAGES.LEVEL50N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 50",
      level: 50
    }, {
      id: 55,
      day: IMAGES.LEVEL55D,
      night: IMAGES.LEVEL55N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 55",
      level: 55
    }, {
      id: 56,
      day: IMAGES.LEVEL60D,
      night: IMAGES.LEVEL60N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 60",
      level: 60
    }]
  };
  WORLD.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21);
  WORLD.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20);
  sprite[SPRITE.BODY] = [];
  sprite[SPRITE.HAND] = [];
  sprite[SPRITE.CRATE] = [];
  sprite[SPRITE.BOOK] = [];
  sprite[SPRITE.BAG] = [];
  sprite[SPRITE.ACCESSORY] = [];
  for (var i = 0; i < COSMETICS.SKIN.length; i++) {
    sprite[SPRITE.BODY][i] = [COSMETICS.SKIN[i].day, COSMETICS.SKIN[i].night];
    sprite[SPRITE.HAND][i] = [COSMETICS.SKIN[i].dayHand, COSMETICS.SKIN[i].nightHand];
  }
  for (var i = 0; i < COSMETICS.BOOK.length; i++)
    sprite[SPRITE.BOOK][i] = [COSMETICS.BOOK[i].day, COSMETICS.BOOK[i].night];
  for (var i = 0; i < COSMETICS.CRATE.length; i++)
    sprite[SPRITE.CRATE][i] = [COSMETICS.CRATE[i].day, COSMETICS.CRATE[i].night];
  for (var i = 0; i < COSMETICS.BAG.length; i++)
    sprite[SPRITE.BAG][i] = [COSMETICS.BAG[i].day, COSMETICS.BAG[i].night];
  for (var i = 0; i < COSMETICS.ACCESSORY.length; i++)
    sprite[SPRITE.ACCESSORY][i] = [COSMETICS.ACCESSORY[i].day, COSMETICS.ACCESSORY[i].night];
};

function fill_path(ctx, fill, stroke, width) {
  if (fill) {
    ctx.fillStyle = fill;
    ctx.fill();
  }
  if (stroke) {
    ctx.lineWidth = width;
    ctx.strokeStyle = stroke;
    ctx.stroke();
  }
};

function round_rect(ctx, a, b, d, c, e) {
  (d < (2 * e)) && (e = d / 2);
  (c < (2 * e)) && (e = c / 2);
  (0 > e) && (e = 0);
  ctx.beginPath();
  ctx.moveTo(a + e, b);
  ctx.arcTo(a + d, b, a + d, b + c, e);
  ctx.arcTo(a + d, b + c, a, b + c, e);
  ctx.arcTo(a, b + c, a, b, e);
  ctx.arcTo(a, b, a + d, b, e);
  ctx.closePath();
};

function semi_round_rect(ctx, a, b, d, c, e) {
  (d < (2 * e)) && (e = d / 2);
  (c < (2 * e)) && (e = c / 2);
  (0 > e) && (e = 0);
  ctx.beginPath();
  ctx.moveTo(a + e, b);
  ctx.arcTo(a + d, b, a + d, b + c, 0);
  ctx.arcTo(a + d, b + c, a, b + c, e);
  ctx.arcTo(a, b + c, a, b, 0);
  ctx.arcTo(a, b, a + d, b, e);
  ctx.closePath();
};

function circle(ctx, x, y, r) {
  ctx.beginPath();
  ctx.arc(x, y, r, 0, Math.PI * 2);
};

function circle_angle(ctx, x, y, r, a) {
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.arc(x, y, r, 0, (Math.PI * 2) * a);
};

function round_regular_polygon(ctx, n, r, round) {
  var a = (Math.PI * 2) / n;
  ctx.beginPath();
  var vertex = [{
    x: r,
    y: 0
  }];
  var middle = [];
  for (var i = 1; i < n; i++) {
    vertex.push({
      x: Math.cos(i * a) * r,
      y: Math.sin(i * a) * r
    });
    var len = vertex.length;
    middle.push(Utils.middle_point(vertex[len - 2], vertex[len - 1]));
  }
  middle.push(Utils.middle_point(vertex[vertex.length - 1], vertex[0]));
  var v = middle[middle.length - 1];
  ctx.moveTo(v.x, v.y);
  for (var i = 0; i < n; i++)
    ctx.arcTo(vertex[i].x, vertex[i].y, middle[i].x, middle[i].y, round);
  ctx.closePath();
};

function create_rotated_img(r, img) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var d = Math.sqrt((img.width * img.width) + (img.height * img.height));
  d2 = d / 2;
  can.width = d;
  can.height = d;
  ctx.translate(d2, d2);
  ctx.rotate(r);
  ctx.drawImage(img, -img.width / 2, -img.height / 2);
  return can;
};

function create_message(scale, msg) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var h = Math.floor(scale * 28);
  var hf = Math.floor(scale * 20);
  ctx.font = hf + "px Baloo Paaji";
  var gap = 8 * scale;
  var w = ctx.measureText(msg).width + (gap * 2);
  can.width = w;
  can.height = h;
  round_rect(ctx, 0, 0, w, h, 10 * scale);
  ctx.globalAlpha = 0.5;
  fill_path(ctx, "#000");
  ctx.globalAlpha = 1;
  ctx.textBaseline = "middle", ctx.font = hf + "px Baloo Paaji";
  ctx.beginPath();
  ctx.fillStyle = "#FFF";
  ctx.fillText(msg, gap, h / 2);
  return can;
};

function create_accessory(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 120 * scale;
  can.height = 110 * scale;
  if (i == 1) {
    circle(ctx, 35 * scale, 75 * scale, 19.72308292331602 * scale);
    fill_path(ctx, color[1], color[0], 4 * scale);
    ctx.save();
    ctx.translate(11 * scale, 77 * scale);
    round_rect(ctx, -4 * scale, -4 * scale, 8 * scale, 8 * scale, 10 * scale);
    ctx.restore();
    fill_path(ctx, undefined, color[0], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(11 * scale, 81 * scale);
    ctx.bezierCurveTo(13 * scale, 105 * scale, 9 * scale, 106 * scale, 8 * scale, 91 * scale);
    fill_path(ctx, undefined, color[0], 4 * scale);
  } else if (i == 2) {
    circle(ctx, 85 * scale, 75 * scale, 16 * scale);
    fill_path(ctx, color[0], color[0], 4 * scale);
    ctx.scale(-1.7 * scale, 1.7 * scale);
    ctx.translate(-120 * scale, 0 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(20 * scale, 95 * scale);
    ctx.bezierCurveTo(56.5 * scale, 54 * scale, 56.5 * scale, 54 * scale, 93 * scale, 13 * scale);
    ctx.bezierCurveTo(89 * scale, 13 * scale, 89 * scale, 13 * scale, 85 * scale, 13 * scale);
    ctx.bezierCurveTo(49.5 * scale, 53 * scale, 49.5 * scale, 53 * scale, 14 * scale, 93 * scale);
    ctx.bezierCurveTo(15 * scale, 94 * scale, 15 * scale, 94 * scale, 19 * scale, 95 * scale);
    ctx.closePath();
    fill_path(ctx, color[0], color[0], 4 * scale);
  } else if (i == 3) {
    ctx.translate(-52 * scale, 0);
    ctx.save();
    ctx.translate(84.5 * scale, 36.5 * scale);
    ctx.rotate(-0.96);
    round_rect(ctx, -5.5 * scale, -15.5 * scale, 11 * scale, 31 * scale, 4 * scale);
    ctx.restore();
    fill_path(ctx, color[0], color[1], 4 * scale);
    ctx.save();
    ctx.translate(84 * scale, 36 * scale);
    ctx.rotate(0.64);
    round_rect(ctx, -5 * scale, -16 * scale, 10 * scale, 32 * scale, 4 * scale);
    ctx.restore();
    fill_path(ctx, color[0], color[1], 4 * scale);
    ctx.save();
    ctx.translate(83.5 * scale, 36.5 * scale);
    ctx.rotate(0.68);
    round_rect(ctx, -2.5 * scale, -6.5 * scale, 5 * scale, 13 * scale, 4 * scale);
    ctx.restore();
    fill_path(ctx, color[1]);
  } else if (i == 4) {
    circle(ctx, 35 * scale, 85 * scale, 17 * scale);
    fill_path(ctx, color[1], color[0], 3 * scale);
    circle(ctx, 85 * scale, 85 * scale, 17 * scale);
    fill_path(ctx, color[1], color[0], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(53 * scale, 86 * scale);
    ctx.bezierCurveTo(59 * scale, 83 * scale, 63 * scale, 83 * scale, 67 * scale, 86 * scale);
    fill_path(ctx, undefined, color[0], 4 * scale);
  } else if (i == 5) {
    ctx.scale(1.2, 1.2);
    ctx.translate(-27 * scale, -8 * scale);
    ctx.scale(1.2, 1.2);
    ctx.translate(-10 * scale, 0);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(97 * scale, 23 * scale);
    ctx.bezierCurveTo(105 * scale, 24 * scale, 107 * scale, 37 * scale, 97 * scale, 39 * scale);
    ctx.bezierCurveTo(85 * scale, 40 * scale, 84 * scale, 22 * scale, 97 * scale, 23 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[0], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(96 * scale, 24 * scale);
    ctx.bezierCurveTo(96 * scale, 30.5 * scale, 96 * scale, 30.5 * scale, 96 * scale, 37 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[0], 3 * scale);
    ctx.translate(0, -2 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(88 * scale, 37 * scale);
    ctx.bezierCurveTo(93 * scale, 33 * scale, 91.5 * scale, 34.5 * scale, 95 * scale, 32 * scale);
    ctx.bezierCurveTo(98.5 * scale, 34 * scale, 98.5 * scale, 34 * scale, 102 * scale, 36 * scale);
    fill_path(ctx, undefined, color[0], 3 * scale);
  } else if (i == 6) {
    circle(ctx, 13 * scale, 79 * scale, 5 * scale);
    fill_path(ctx, color[0]);
    circle(ctx, 106 * scale, 79 * scale, 5 * scale);
    fill_path(ctx, color[0]);
  } else if (i == 7) {
    ctx.translate(0 * scale, 5 * scale);
    ctx.globalAlpha = 0.5;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(27 * scale, 14.399993896484375 * scale);
    ctx.bezierCurveTo(29 * scale, 4.399993896484375 * scale, 44 * scale, 16.399993896484375 * scale, 37 * scale, 21.399993896484375 * scale);
    ctx.bezierCurveTo(47 * scale, 17.399993896484375 * scale, 45 * scale, 36.399993896484375 * scale, 37 * scale, 32.399993896484375 * scale);
    ctx.bezierCurveTo(44 * scale, 40.399993896484375 * scale, 28 * scale, 47.399993896484375 * scale, 26 * scale, 37.399993896484375 * scale);
    ctx.bezierCurveTo(22 * scale, 46.399993896484375 * scale, 9 * scale, 37.399993896484375 * scale, 16 * scale, 30.399993896484375 * scale);
    ctx.bezierCurveTo(6 * scale, 34.399993896484375 * scale, 9 * scale, 15.399993896484375 * scale, 18 * scale, 19.399993896484375 * scale);
    ctx.bezierCurveTo(10 * scale, 12.399993896484375 * scale, 26 * scale, 7.399993896484375 * scale, 26 * scale, 14.399993896484375 * scale);
    ctx.closePath();
    fill_path(ctx, color[3]);
    ctx.globalAlpha = 1;
    ctx.translate(0 * scale, -5 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(27 * scale, 14.399993896484375 * scale);
    ctx.bezierCurveTo(29 * scale, 4.399993896484375 * scale, 44 * scale, 16.399993896484375 * scale, 37 * scale, 21.399993896484375 * scale);
    ctx.bezierCurveTo(47 * scale, 17.399993896484375 * scale, 45 * scale, 36.399993896484375 * scale, 37 * scale, 32.399993896484375 * scale);
    ctx.bezierCurveTo(44 * scale, 40.399993896484375 * scale, 28 * scale, 47.399993896484375 * scale, 26 * scale, 37.399993896484375 * scale);
    ctx.bezierCurveTo(22 * scale, 46.399993896484375 * scale, 9 * scale, 37.399993896484375 * scale, 16 * scale, 30.399993896484375 * scale);
    ctx.bezierCurveTo(6 * scale, 34.399993896484375 * scale, 9 * scale, 15.399993896484375 * scale, 18 * scale, 19.399993896484375 * scale);
    ctx.bezierCurveTo(10 * scale, 12.399993896484375 * scale, 26 * scale, 7.399993896484375 * scale, 26 * scale, 14.399993896484375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1], color[2], 2 * scale);
    circle(ctx, 27 * scale, 26.800003051757812 * scale, 5 * scale);
    fill_path(ctx, color[0]);
  } else if (i == 8) {
    ctx.translate(-32 * scale, -19 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(123 * scale, 46 * scale);
    ctx.bezierCurveTo(132 * scale, 46 * scale, 135 * scale, 39 * scale, 134 * scale, 33 * scale);
    ctx.bezierCurveTo(145 * scale, 43 * scale, 142 * scale, 65 * scale, 127 * scale, 66 * scale);
    ctx.bezierCurveTo(118 * scale, 61 * scale, 119 * scale, 51 * scale, 123 * scale, 46 * scale);
    ctx.closePath();
    fill_path(ctx, color[0], color[1], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(49 * scale, 32 * scale);
    ctx.bezierCurveTo(49 * scale, 44 * scale, 56 * scale, 44 * scale, 61 * scale, 46 * scale);
    ctx.bezierCurveTo(67 * scale, 52 * scale, 65 * scale, 65 * scale, 55 * scale, 66 * scale);
    ctx.bezierCurveTo(37 * scale, 60 * scale, 42 * scale, 38 * scale, 49 * scale, 32 * scale);
    ctx.closePath();
    fill_path(ctx, color[0], color[1], 4 * scale);
  }
  return can;
};

function create_hurt_player(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 120;
  var h = scale * 110;
  var w2 = w / 2;
  var h2 = h / 2;
  var round = scale * 20;
  var wp = scale * 112;
  var hp = scale * 82;
  var wp2 = wp / 2;
  var hp2 = hp / 2;
  var width = scale * 4;
  can.width = w;
  can.height = h;
  ctx.globalAlpha = 1;
  ctx.translate(w2, h2);
  round_rect(ctx, -wp2, -hp2, wp, hp, round);
  fill_path(ctx, color, color, width);
  return can;
};

function create_player(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 176 * scale;
  can.height = 127 * scale;
  if (i == 8) {
    ctx.globalAlpha = 0.3;
    ctx.save();
    ctx.translate(87 * scale, 64.5 * scale);
    round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
    ctx.restore();
    fill_path(ctx, color[0], color[1], 4 * scale);
    ctx.save();
    ctx.translate(82 * scale, 69.5 * scale);
    round_rect(ctx, -51 * scale, -36.5 * scale, 102 * scale, 73 * scale, 18 * scale);
    ctx.restore();
    fill_path(ctx, color[2], color[1], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(55 * scale, 41 * scale);
    ctx.bezierCurveTo(38 * scale, 41 * scale, 37 * scale, 50 * scale, 38 * scale, 61 * scale);
    ctx.bezierCurveTo(42 * scale, 50 * scale, 46 * scale, 46 * scale, 55 * scale, 42 * scale);
    ctx.closePath();
    fill_path(ctx, color[3]);
    ctx.globalAlpha = 1;
    ctx.translate(26 * scale, 10 * scale);
    circle(ctx, 35 * scale, 75 * scale, 15 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 85 * scale, 75 * scale, 15 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 32 * scale, 67 * scale, 5 * scale);
    fill_path(ctx, color[5]);
    circle(ctx, 82 * scale, 67 * scale, 5 * scale);
    fill_path(ctx, color[5]);
  } else if (i == 9) {
    var can = document.createElement("canvas");
    var ctx = can.getContext("2d");
    can.width = 332 * scale;
    can.height = 127 * scale;
    ctx.globalAlpha = 0.5;
    ctx.translate(0, -36 * scale);
    ctx.save();
    ctx.translate(165.25 * scale, 106.84375 * scale);
    round_rect(ctx, -56.5 * scale, -41.5 * scale, 113 * scale, 83 * scale, 18 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(0, 20 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(210.75 * scale, 72.84375 * scale);
    ctx.bezierCurveTo(238.75 * scale, 74.84375 * scale, 270.75 * scale, 85.84375 * scale, 269.75 * scale, 90.84375 * scale);
    ctx.bezierCurveTo(268.75 * scale, 94.84375 * scale, 221.75 * scale, 81.84375 * scale, 206.75 * scale, 85.84375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(208.75 * scale, 69.84375 * scale);
    ctx.bezierCurveTo(241.75 * scale, 61.84375 * scale, 265.75 * scale, 65.84375 * scale, 286.75 * scale, 69.84375 * scale);
    ctx.bezierCurveTo(290.75 * scale, 75.84375 * scale, 225.75 * scale, 69.84375 * scale, 215.75 * scale, 80.84375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(209.75 * scale, 69.84375 * scale);
    ctx.bezierCurveTo(228.75 * scale, 51.84375 * scale, 265.75 * scale, 46.84375 * scale, 294.75 * scale, 51.84375 * scale);
    ctx.bezierCurveTo(301.75 * scale, 55.84375 * scale, 224.75 * scale, 60.84375 * scale, 216.75 * scale, 80.84375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(193.75 * scale, 72.84375 * scale);
    ctx.bezierCurveTo(206.75 * scale, 47.84375 * scale, 221.75 * scale, 37.84375 * scale, 249.75 * scale, 35.84375 * scale);
    ctx.bezierCurveTo(264.75 * scale, 34.84375 * scale, 305.75 * scale, 16.84375 * scale, 300.75 * scale, 24.84375 * scale);
    ctx.bezierCurveTo(273.75 * scale, 45.84375 * scale, 245.75 * scale, 46.84375 * scale, 235.75 * scale, 62.84375 * scale);
    ctx.bezierCurveTo(218.75 * scale, 82.84375 * scale, 215.75 * scale, 87.84375 * scale, 199.75 * scale, 84.84375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(126.75 * scale, 80.34375 * scale);
    ctx.bezierCurveTo(94.75 * scale, 88.34375 * scale, 83.75 * scale, 88.34375 * scale, 65.75 * scale, 90.34375 * scale);
    ctx.bezierCurveTo(61.75 * scale, 87.34375 * scale, 86.75 * scale, 77.34375 * scale, 129.75 * scale, 70.34375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(120.75 * scale, 72.34375 * scale);
    ctx.bezierCurveTo(128.75 * scale, 62.34375 * scale, 98.75 * scale, 64.34375 * scale, 49.75 * scale, 68.34375 * scale);
    ctx.bezierCurveTo(34.75 * scale, 75.34375 * scale, 101.75 * scale, 72.34375 * scale, 124.75 * scale, 78.34375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(128.75 * scale, 76.34375 * scale);
    ctx.bezierCurveTo(111.75 * scale, 54.34375 * scale, 69.75 * scale, 48.34375 * scale, 39.75 * scale, 50.34375 * scale);
    ctx.bezierCurveTo(26.75 * scale, 53.34375 * scale, 86.75 * scale, 59.34375 * scale, 123.75 * scale, 78.34375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(143.75 * scale, 74.34375 * scale);
    ctx.bezierCurveTo(128.75 * scale, 48.34375 * scale, 108.75 * scale, 35.34375 * scale, 81.75 * scale, 35.34375 * scale);
    ctx.bezierCurveTo(63.75 * scale, 33.34375 * scale, 26.75 * scale, 15.34375 * scale, 29.75 * scale, 25.34375 * scale);
    ctx.bezierCurveTo(33.75 * scale, 30.34375 * scale, 49.75 * scale, 40.34375 * scale, 70.75 * scale, 49.34375 * scale);
    ctx.bezierCurveTo(94.75 * scale, 54.34375 * scale, 104.75 * scale, 72.34375 * scale, 128.75 * scale, 88.34375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.translate(0, -28 * scale);
    ctx.save();
    ctx.translate(165.25 * scale, 106.84375 * scale);
    round_rect(ctx, -56.5 * scale, -41.5 * scale, 113 * scale, 83 * scale, 18 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.translate(28 * scale, 15 * scale);
    ctx.translate(0, 8 * scale);
    ctx.globalAlpha = 0.5;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(83 * scale, 52 * scale);
    ctx.bezierCurveTo(78 * scale, 65 * scale, 110 * scale, 72 * scale, 139 * scale, 71 * scale);
    ctx.bezierCurveTo(176 * scale, 71 * scale, 193 * scale, 61 * scale, 191 * scale, 54 * scale);
    ctx.bezierCurveTo(202 * scale, 58 * scale, 198 * scale, 72 * scale, 187 * scale, 75 * scale);
    ctx.bezierCurveTo(143 * scale, 87 * scale, 107 * scale, 79 * scale, 89 * scale, 75 * scale);
    ctx.bezierCurveTo(72 * scale, 69 * scale, 74 * scale, 58 * scale, 83 * scale, 52 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(0 * scale, -8 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(83 * scale, 52 * scale);
    ctx.bezierCurveTo(78 * scale, 65 * scale, 110 * scale, 72 * scale, 139 * scale, 71 * scale);
    ctx.bezierCurveTo(176 * scale, 71 * scale, 193 * scale, 61 * scale, 191 * scale, 54 * scale);
    ctx.bezierCurveTo(202 * scale, 58 * scale, 198 * scale, 72 * scale, 187 * scale, 75 * scale);
    ctx.bezierCurveTo(143 * scale, 87 * scale, 107 * scale, 79 * scale, 89 * scale, 75 * scale);
    ctx.bezierCurveTo(72 * scale, 69 * scale, 74 * scale, 58 * scale, 83 * scale, 52 * scale);
    ctx.closePath();
    fill_path(ctx, color[5], color[6], 4 * scale);
    ctx.translate(-28 * scale, -15 * scale);
    circle(ctx, 141.75 * scale, 127.34375 * scale, 15 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 191.75 * scale, 127.09375 * scale, 15 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 138.75 * scale, 119.34375 * scale, 5 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 188.75 * scale, 119.34375 * scale, 5 * scale);
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(125.75 * scale, 139.34375 * scale);
    ctx.bezierCurveTo(134.75 * scale, 134.34375 * scale, 143.75 * scale, 134.34375 * scale, 156.75 * scale, 139.34375 * scale);
    ctx.bezierCurveTo(153.25 * scale, 141.84375 * scale, 153.25 * scale, 141.84375 * scale, 149.75 * scale, 144.34375 * scale);
    ctx.bezierCurveTo(140.25 * scale, 144.34375 * scale, 140.25 * scale, 144.34375 * scale, 130.75 * scale, 144.34375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(176.75 * scale, 139.34375 * scale);
    ctx.bezierCurveTo(183.75 * scale, 135.34375 * scale, 199.75 * scale, 135.34375 * scale, 205.75 * scale, 139.34375 * scale);
    ctx.bezierCurveTo(203.25 * scale, 141.34375 * scale, 203.25 * scale, 141.34375 * scale, 200.75 * scale, 143.34375 * scale);
    ctx.bezierCurveTo(190.75 * scale, 143.84375 * scale, 190.75 * scale, 143.84375 * scale, 180.75 * scale, 144.34375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
  } else {
    ctx.globalAlpha = 0.75;
    ctx.translate(0, 8 * scale);
    ctx.save();
    ctx.translate(87 * scale, 64.5 * scale);
    round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(0, -8 * scale);
    ctx.save();
    ctx.translate(87 * scale, 64.5 * scale);
    round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 4 * scale);
    if (i == 0) {
      ctx.translate(27 * scale, 10 * scale);
      circle(ctx, 35 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[3]);
      circle(ctx, 85 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[3]);
      circle(ctx, 32 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 82 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[4]);
    } else if (i == 1) {
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(35 * scale, 73 * scale);
      ctx.bezierCurveTo(40 * scale, 72 * scale, 38 * scale, 68 * scale, 35 * scale, 67 * scale);
      ctx.bezierCurveTo(25 * scale, 67 * scale, 21 * scale, 65 * scale, 16 * scale, 61 * scale);
      ctx.bezierCurveTo(10 * scale, 60 * scale, 16 * scale, 64 * scale, 20 * scale, 67 * scale);
      ctx.bezierCurveTo(3 * scale, 70 * scale, 12 * scale, 68.5 * scale, 4 * scale, 70 * scale);
      ctx.bezierCurveTo(2 * scale, 71 * scale, 6 * scale, 72 * scale, 13 * scale, 73 * scale);
      ctx.bezierCurveTo(12.5 * scale, 76.5 * scale, 12.5 * scale, 76.5 * scale, 12 * scale, 80 * scale);
      ctx.bezierCurveTo(12 * scale, 83 * scale, 15 * scale, 80 * scale, 18 * scale, 73 * scale);
      ctx.bezierCurveTo(26.5 * scale, 73.5 * scale, 26.5 * scale, 73.5 * scale, 35 * scale, 74 * scale);
      ctx.closePath();
      fill_path(ctx, color[5], color[6], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(134 * scale, 64 * scale);
      ctx.bezierCurveTo(141.5 * scale, 64 * scale, 141.5 * scale, 64 * scale, 149 * scale, 64 * scale);
      ctx.bezierCurveTo(153 * scale, 59 * scale, 156 * scale, 56 * scale, 159 * scale, 56 * scale);
      ctx.bezierCurveTo(161 * scale, 57 * scale, 160 * scale, 60 * scale, 155 * scale, 65 * scale);
      ctx.bezierCurveTo(165 * scale, 71 * scale, 168 * scale, 72 * scale, 169 * scale, 74 * scale);
      ctx.bezierCurveTo(169 * scale, 76 * scale, 159 * scale, 71 * scale, 156 * scale, 72 * scale);
      ctx.bezierCurveTo(154 * scale, 72 * scale, 155 * scale, 75 * scale, 156 * scale, 79 * scale);
      ctx.bezierCurveTo(155 * scale, 81 * scale, 153 * scale, 78 * scale, 150 * scale, 72 * scale);
      ctx.bezierCurveTo(142 * scale, 71.5 * scale, 142 * scale, 71.5 * scale, 134 * scale, 71 * scale);
      ctx.bezierCurveTo(130 * scale, 69 * scale, 131 * scale, 65 * scale, 135 * scale, 64 * scale);
      ctx.closePath();
      fill_path(ctx, color[5], color[6], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(80 * scale, 95 * scale);
      ctx.bezierCurveTo(83 * scale, 88 * scale, 89 * scale, 88 * scale, 92 * scale, 95 * scale);
      ctx.bezierCurveTo(92 * scale, 105 * scale, 88 * scale, 110 * scale, 86 * scale, 110 * scale);
      ctx.bezierCurveTo(83 * scale, 107 * scale, 82 * scale, 104 * scale, 80 * scale, 96 * scale);
      ctx.closePath();
      fill_path(ctx, color[7], color[8], 3 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(81 * scale, 100 * scale);
      ctx.bezierCurveTo(82 * scale, 97 * scale, 83 * scale, 96 * scale, 85 * scale, 96 * scale);
      ctx.bezierCurveTo(82 * scale, 100 * scale, 82 * scale, 101 * scale, 83 * scale, 103 * scale);
      ctx.closePath();
      fill_path(ctx, color[8]);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(83 * scale, 103 * scale);
      ctx.bezierCurveTo(83 * scale, 102 * scale, 84 * scale, 100 * scale, 86 * scale, 100 * scale);
      ctx.bezierCurveTo(84 * scale, 103 * scale, 84 * scale, 105 * scale, 84 * scale, 106 * scale);
      ctx.closePath();
      fill_path(ctx, color[8]);
      ctx.translate(27 * scale, 10 * scale);
      circle(ctx, 35 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[3]);
      circle(ctx, 85 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[3]);
      circle(ctx, 32 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 82 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[4]);
    } else if (i == 2) {
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(48 * scale, 22 * scale);
      ctx.bezierCurveTo(85.5 * scale, 22 * scale, 85.5 * scale, 22 * scale, 123 * scale, 22 * scale);
      ctx.bezierCurveTo(138 * scale, 23 * scale, 147 * scale, 34 * scale, 143 * scale, 62 * scale);
      ctx.bezierCurveTo(142 * scale, 67 * scale, 144 * scale, 70 * scale, 149 * scale, 73 * scale);
      ctx.bezierCurveTo(147 * scale, 77 * scale, 145 * scale, 77 * scale, 143 * scale, 77 * scale);
      ctx.bezierCurveTo(141 * scale, 85 * scale, 145 * scale, 92 * scale, 148 * scale, 97 * scale);
      ctx.bezierCurveTo(142 * scale, 103 * scale, 134 * scale, 105 * scale, 121 * scale, 106 * scale);
      ctx.bezierCurveTo(85 * scale, 106 * scale, 85 * scale, 106 * scale, 49 * scale, 106 * scale);
      ctx.bezierCurveTo(32 * scale, 104 * scale, 29 * scale, 101 * scale, 24 * scale, 95 * scale);
      ctx.bezierCurveTo(30 * scale, 86 * scale, 31 * scale, 85 * scale, 30 * scale, 78 * scale);
      ctx.bezierCurveTo(27.5 * scale, 76 * scale, 27.5 * scale, 76 * scale, 25 * scale, 74 * scale);
      ctx.bezierCurveTo(31 * scale, 68 * scale, 31 * scale, 60 * scale, 30 * scale, 46 * scale);
      ctx.bezierCurveTo(31 * scale, 31 * scale, 37 * scale, 23 * scale, 47 * scale, 22 * scale);
      ctx.closePath();
      fill_path(ctx, color[1], color[2], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(30 * scale, 44 * scale);
      ctx.bezierCurveTo(66 * scale, 48 * scale, 99 * scale, 45 * scale, 141 * scale, 39 * scale);
      fill_path(ctx, undefined, color[3], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(30 * scale, 67 * scale);
      ctx.bezierCurveTo(80 * scale, 44 * scale, 118 * scale, 43 * scale, 141 * scale, 60 * scale);
      fill_path(ctx, undefined, color[3], 4 * scale);
      ctx.globalAlpha = 0.4;
      circle(ctx, 31 * scale, 44 * scale, 9 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 42 * scale, 47 * scale, 9 * scale);
      fill_path(ctx, color[5]);
      circle(ctx, 70 * scale, 42 * scale, 9 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 53 * scale, 45 * scale, 9 * scale);
      fill_path(ctx, color[7]);
      circle(ctx, 103 * scale, 40 * scale, 9 * scale);
      fill_path(ctx, color[8]);
      circle(ctx, 116 * scale, 41 * scale, 9 * scale);
      fill_path(ctx, color[5]);
      circle(ctx, 131 * scale, 41 * scale, 9 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 39 * scale, 64 * scale, 9 * scale);
      fill_path(ctx, color[7]);
      circle(ctx, 51 * scale, 60 * scale, 9 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 74 * scale, 53 * scale, 9 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 83 * scale, 51 * scale, 9 * scale);
      fill_path(ctx, color[8]);
      circle(ctx, 95 * scale, 51 * scale, 9 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 107 * scale, 49 * scale, 9 * scale);
      fill_path(ctx, color[7]);
      circle(ctx, 120 * scale, 50 * scale, 9 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 137 * scale, 57 * scale, 9 * scale);
      fill_path(ctx, color[5]);
      ctx.globalAlpha = 1;
      circle(ctx, 31 * scale, 44 * scale, 4 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 42 * scale, 47 * scale, 4 * scale);
      fill_path(ctx, color[5]);
      circle(ctx, 53 * scale, 45 * scale, 4 * scale);
      fill_path(ctx, color[7]);
      circle(ctx, 70 * scale, 43 * scale, 4 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 50 * scale, 59 * scale, 4 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 39 * scale, 64 * scale, 4 * scale);
      fill_path(ctx, color[7]);
      circle(ctx, 83 * scale, 51 * scale, 4 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 74 * scale, 53 * scale, 4 * scale);
      fill_path(ctx, color[8]);
      circle(ctx, 95 * scale, 51 * scale, 4 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 103 * scale, 41 * scale, 4 * scale);
      fill_path(ctx, color[8]);
      circle(ctx, 107 * scale, 49 * scale, 4 * scale);
      fill_path(ctx, color[7]);
      circle(ctx, 116 * scale, 41 * scale, 4 * scale);
      fill_path(ctx, color[5]);
      circle(ctx, 131 * scale, 41 * scale, 4 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 137 * scale, 57 * scale, 4 * scale);
      fill_path(ctx, color[5]);
      circle(ctx, 120 * scale, 50 * scale, 4 * scale);
      fill_path(ctx, color[4]);
      ctx.translate(27 * scale, 10 * scale);
      circle(ctx, 35 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[9]);
      circle(ctx, 85 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[9]);
      circle(ctx, 32 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[10]);
      circle(ctx, 82 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[10]);
    } else if (i == 3) {
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(23 * scale, 95 * scale);
      ctx.bezierCurveTo(30 * scale, 85 * scale, 30 * scale, 83 * scale, 30 * scale, 72 * scale);
      ctx.bezierCurveTo(30 * scale, 61.5 * scale, 30 * scale, 61.5 * scale, 30 * scale, 51 * scale);
      ctx.bezierCurveTo(29 * scale, 33 * scale, 42 * scale, 23 * scale, 54 * scale, 24 * scale);
      ctx.bezierCurveTo(86.5 * scale, 24 * scale, 86.5 * scale, 24 * scale, 119 * scale, 24 * scale);
      ctx.bezierCurveTo(135 * scale, 24 * scale, 143 * scale, 33 * scale, 143 * scale, 47 * scale);
      ctx.bezierCurveTo(143 * scale, 63.5 * scale, 143 * scale, 63.5 * scale, 143 * scale, 80 * scale);
      ctx.bezierCurveTo(142 * scale, 86 * scale, 147 * scale, 93 * scale, 150 * scale, 96 * scale);
      ctx.bezierCurveTo(144 * scale, 107 * scale, 113 * scale, 112 * scale, 84 * scale, 111 * scale);
      ctx.bezierCurveTo(52 * scale, 112 * scale, 34 * scale, 106 * scale, 23 * scale, 96 * scale);
      ctx.closePath();
      fill_path(ctx, color[1], color[2], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(30 * scale, 81 * scale);
      ctx.bezierCurveTo(56 * scale, 99 * scale, 104 * scale, 98 * scale, 142 * scale, 84 * scale);
      ctx.bezierCurveTo(145.5 * scale, 89.5 * scale, 145.5 * scale, 89.5 * scale, 149 * scale, 95 * scale);
      ctx.bezierCurveTo(142 * scale, 106 * scale, 127 * scale, 110 * scale, 81 * scale, 110 * scale);
      ctx.bezierCurveTo(36 * scale, 112 * scale, 28 * scale, 99 * scale, 23 * scale, 95 * scale);
      ctx.bezierCurveTo(31 * scale, 87 * scale, 31 * scale, 82 * scale, 30 * scale, 81 * scale);
      ctx.closePath();
      fill_path(ctx, color[3], color[2], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(23 * scale, 95 * scale);
      ctx.bezierCurveTo(30 * scale, 85 * scale, 30 * scale, 83 * scale, 30 * scale, 72 * scale);
      ctx.bezierCurveTo(30 * scale, 61.5 * scale, 30 * scale, 61.5 * scale, 30 * scale, 51 * scale);
      ctx.bezierCurveTo(29 * scale, 33 * scale, 42 * scale, 23 * scale, 54 * scale, 24 * scale);
      ctx.bezierCurveTo(86.5 * scale, 24 * scale, 86.5 * scale, 24 * scale, 119 * scale, 24 * scale);
      ctx.bezierCurveTo(135 * scale, 24 * scale, 143 * scale, 33 * scale, 143 * scale, 47 * scale);
      ctx.bezierCurveTo(143 * scale, 63.5 * scale, 143 * scale, 63.5 * scale, 143 * scale, 80 * scale);
      ctx.bezierCurveTo(142 * scale, 86 * scale, 147 * scale, 93 * scale, 150 * scale, 96 * scale);
      ctx.bezierCurveTo(144 * scale, 107 * scale, 113 * scale, 112 * scale, 84 * scale, 111 * scale);
      ctx.bezierCurveTo(52 * scale, 112 * scale, 34 * scale, 106 * scale, 23 * scale, 96 * scale);
      ctx.closePath();
      fill_path(ctx, undefined, color[2], 4 * scale);
      ctx.translate(27 * scale, 10 * scale);
      circle(ctx, 35 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 85 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 32 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[7]);
      circle(ctx, 82 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[7]);
      ctx.translate(-96 * scale, -25 * scale);
      ctx.scale(1.8, 1.8);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(85 * scale, 21 * scale);
      ctx.bezierCurveTo(73 * scale, 16 * scale, 70 * scale, 16 * scale, 70 * scale, 26 * scale);
      ctx.bezierCurveTo(72 * scale, 34 * scale, 75 * scale, 37 * scale, 85 * scale, 26 * scale);
      ctx.closePath();
      fill_path(ctx, color[4], color[5], 3 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(89 * scale, 21 * scale);
      ctx.bezierCurveTo(104 * scale, 16 * scale, 105 * scale, 19 * scale, 106 * scale, 24 * scale);
      ctx.bezierCurveTo(105 * scale, 36 * scale, 97 * scale, 36 * scale, 90 * scale, 28 * scale);
      ctx.closePath();
      fill_path(ctx, color[4], color[5], 3 * scale);
      circle(ctx, 87 * scale, 23 * scale, 6.324555320336759 * scale);
      fill_path(ctx, color[4], color[5], 3 * scale);
    } else if (i == 4) {
      ctx.translate(27 * scale, 8 * scale);
      circle(ctx, 15 * scale, 76 * scale, 9.219544457292887 * scale);
      fill_path(ctx, color[3]);
      circle(ctx, 106 * scale, 76 * scale, 9.219544457292887 * scale);
      fill_path(ctx, color[3]);
      ctx.translate(-27 * scale, -8 * scale);
      ctx.translate(27 * scale, 10 * scale);
      circle(ctx, 35 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[5]);
      circle(ctx, 85 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[5]);
      circle(ctx, 32 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 82 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[6]);
      ctx.translate(-27 * scale, -10 * scale);
      ctx.translate(27 * scale, 8 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(52 * scale, 86 * scale);
      ctx.bezierCurveTo(54 * scale, 78 * scale, 65 * scale, 80 * scale, 67 * scale, 85 * scale);
      ctx.bezierCurveTo(69 * scale, 89 * scale, 64 * scale, 99 * scale, 71 * scale, 106 * scale);
      ctx.bezierCurveTo(75 * scale, 109 * scale, 61 * scale, 108 * scale, 58 * scale, 102 * scale);
      ctx.bezierCurveTo(53 * scale, 97 * scale, 52 * scale, 91 * scale, 52 * scale, 86 * scale);
      ctx.closePath();
      fill_path(ctx, color[4]);
    } else if (i == 6) {
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.translate(2 * scale, 0);
      ctx.moveTo(28 * scale, 69 * scale);
      ctx.bezierCurveTo(26 * scale, 39 * scale, 31 * scale, 25 * scale, 52 * scale, 24 * scale);
      ctx.bezierCurveTo(86 * scale, 23.5 * scale, 86 * scale, 23.5 * scale, 120 * scale, 23 * scale);
      ctx.bezierCurveTo(137 * scale, 23 * scale, 145 * scale, 33 * scale, 144 * scale, 53 * scale);
      ctx.bezierCurveTo(144.5 * scale, 63 * scale, 144.5 * scale, 63 * scale, 145 * scale, 73 * scale);
      ctx.bezierCurveTo(141 * scale, 41 * scale, 106 * scale, 41 * scale, 98 * scale, 59 * scale);
      ctx.bezierCurveTo(92 * scale, 69 * scale, 94 * scale, 98 * scale, 90 * scale, 95 * scale);
      ctx.bezierCurveTo(86 * scale, 95 * scale, 86 * scale, 95 * scale, 82 * scale, 95 * scale);
      ctx.bezierCurveTo(79 * scale, 94 * scale, 87 * scale, 33 * scale, 48 * scale, 47 * scale);
      ctx.bezierCurveTo(31 * scale, 57 * scale, 30 * scale, 65 * scale, 28 * scale, 72 * scale);
      ctx.closePath();
      fill_path(ctx, color[3]);
      ctx.save();
      ctx.translate(87 * scale, 64.5 * scale);
      round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
      ctx.restore();
      fill_path(ctx, undefined, color[2], 4 * scale);
      ctx.translate(27 * scale, 10 * scale);
      circle(ctx, 35 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[3]);
      circle(ctx, 85 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[3]);
      circle(ctx, 32 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[4]);
      circle(ctx, 82 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[4]);
      ctx.scale(1.4, 1.4);
      ctx.translate(-43.5 * scale, -32 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(86 * scale, 105 * scale);
      ctx.bezierCurveTo(89 * scale, 103 * scale, 90 * scale, 100 * scale, 92 * scale, 97 * scale);
      ctx.bezierCurveTo(93 * scale, 91 * scale, 85 * scale, 90 * scale, 81 * scale, 95 * scale);
      ctx.bezierCurveTo(80 * scale, 97 * scale, 83 * scale, 101 * scale, 85 * scale, 105 * scale);
      ctx.closePath();
      fill_path(ctx, color[5], color[6], 3 * scale);
    } else if (i == 7) {
      ctx.save();
      ctx.translate(86 * scale, 64.5 * scale);
      round_rect(ctx, -16 * scale, -43.5 * scale, 32 * scale, 87 * scale, 5 * scale);
      ctx.restore();
      fill_path(ctx, color[3], color[4], 4 * scale);
      ctx.translate(0, 6 * scale);
      ctx.globalAlpha = 0.5;
      ctx.save();
      ctx.translate(85.5 * scale, 47 * scale);
      round_rect(ctx, -58.5 * scale, -8 * scale, 117 * scale, 16 * scale, 5 * scale);
      ctx.restore();
      fill_path(ctx, color[0]);
      ctx.translate(0, -6 * scale);
      ctx.globalAlpha = 1;
      ctx.save();
      ctx.translate(85.5 * scale, 47 * scale);
      round_rect(ctx, -58.5 * scale, -8 * scale, 117 * scale, 16 * scale, 5 * scale);
      ctx.restore();
      fill_path(ctx, color[3], color[4], 4 * scale);
      ctx.translate(0, 7 * scale);
      ctx.globalAlpha = 0.5;
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(84 * scale, 44 * scale);
      ctx.bezierCurveTo(85 * scale, 26 * scale, 96 * scale, 23 * scale, 103 * scale, 30 * scale);
      ctx.bezierCurveTo(110 * scale, 36 * scale, 110 * scale, 47 * scale, 92 * scale, 50 * scale);
      ctx.closePath();
      fill_path(ctx, color[0]);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(87 * scale, 44 * scale);
      ctx.bezierCurveTo(108 * scale, 47 * scale, 109 * scale, 54 * scale, 102 * scale, 63 * scale);
      ctx.bezierCurveTo(92 * scale, 77 * scale, 80 * scale, 61 * scale, 84 * scale, 49 * scale);
      ctx.closePath();
      fill_path(ctx, color[0]);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(84 * scale, 43 * scale);
      ctx.bezierCurveTo(86 * scale, 24 * scale, 72 * scale, 23 * scale, 68 * scale, 31 * scale);
      ctx.bezierCurveTo(56 * scale, 42 * scale, 70 * scale, 49 * scale, 81 * scale, 47 * scale);
      ctx.closePath();
      fill_path(ctx, color[0]);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(78 * scale, 45 * scale);
      ctx.bezierCurveTo(61 * scale, 49 * scale, 60 * scale, 58 * scale, 68 * scale, 64 * scale);
      ctx.bezierCurveTo(78 * scale, 75 * scale, 84 * scale, 65 * scale, 89 * scale, 54 * scale);
      ctx.closePath();
      fill_path(ctx, color[0]);
      ctx.translate(0, -7 * scale);
      ctx.globalAlpha = 1;
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(84 * scale, 44 * scale);
      ctx.bezierCurveTo(85 * scale, 26 * scale, 96 * scale, 23 * scale, 103 * scale, 30 * scale);
      ctx.bezierCurveTo(110 * scale, 36 * scale, 110 * scale, 47 * scale, 92 * scale, 50 * scale);
      ctx.closePath();
      fill_path(ctx, color[3], color[4], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(87 * scale, 44 * scale);
      ctx.bezierCurveTo(108 * scale, 47 * scale, 109 * scale, 54 * scale, 102 * scale, 63 * scale);
      ctx.bezierCurveTo(92 * scale, 77 * scale, 80 * scale, 61 * scale, 84 * scale, 49 * scale);
      ctx.closePath();
      fill_path(ctx, color[3], color[4], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(84 * scale, 43 * scale);
      ctx.bezierCurveTo(86 * scale, 24 * scale, 72 * scale, 23 * scale, 68 * scale, 31 * scale);
      ctx.bezierCurveTo(56 * scale, 42 * scale, 70 * scale, 49 * scale, 81 * scale, 47 * scale);
      ctx.closePath();
      fill_path(ctx, color[3], color[4], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(78 * scale, 45 * scale);
      ctx.bezierCurveTo(61 * scale, 49 * scale, 60 * scale, 58 * scale, 68 * scale, 64 * scale);
      ctx.bezierCurveTo(78 * scale, 75 * scale, 84 * scale, 65 * scale, 89 * scale, 54 * scale);
      ctx.closePath();
      fill_path(ctx, color[3], color[4], 4 * scale);
      ctx.translate(0, 6 * scale);
      ctx.globalAlpha = 0.5;
      ctx.save();
      ctx.translate(85 * scale, 47.5 * scale);
      ctx.rotate(0);
      round_rect(ctx, -10 * scale, -10.5 * scale, 20 * scale, 21 * scale, 5 * scale);
      ctx.restore();
      fill_path(ctx, color[0]);
      ctx.translate(0, -6 * scale);
      ctx.globalAlpha = 1;
      ctx.save();
      ctx.translate(85 * scale, 47.5 * scale);
      ctx.rotate(0);
      round_rect(ctx, -10 * scale, -10.5 * scale, 20 * scale, 21 * scale, 5 * scale);
      ctx.restore();
      fill_path(ctx, color[3], color[4], 4 * scale);
      ctx.translate(27 * scale, 10 * scale);
      circle(ctx, 35 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[5]);
      circle(ctx, 85 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[5]);
      circle(ctx, 32 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[6]);
      circle(ctx, 82 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[6]);
    } else if (i == 5) {
      can.width = 211 * scale;
      can.height = 152 * scale;
      ctx.globalAlpha = 0.5;
      ctx.translate(0, 8 * scale);
      ctx.save();
      ctx.translate(105.5 * scale, 76.5 * scale);
      round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
      ctx.restore();
      fill_path(ctx, color[0]);
      ctx.globalAlpha = 1;
      ctx.translate(0, -8 * scale);
      ctx.save();
      ctx.translate(105.5 * scale, 76.5 * scale);
      round_rect(ctx, -56 * scale, -41.5 * scale, 112 * scale, 83 * scale, 18 * scale);
      ctx.restore();
      fill_path(ctx, color[1], color[2], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(68 * scale, 39 * scale);
      ctx.bezierCurveTo(48 * scale, 37 * scale, 43 * scale, 27 * scale, 40 * scale, 12 * scale);
      ctx.bezierCurveTo(31 * scale, 25 * scale, 20 * scale, 17 * scale, 11 * scale, 9 * scale);
      ctx.bezierCurveTo(9 * scale, 41 * scale, 40 * scale, 44 * scale, 62 * scale, 45 * scale);
      ctx.closePath();
      fill_path(ctx, color[3], color[2], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(143 * scale, 38 * scale);
      ctx.bezierCurveTo(161 * scale, 40 * scale, 169 * scale, 24 * scale, 171 * scale, 13 * scale);
      ctx.bezierCurveTo(181 * scale, 23 * scale, 188 * scale, 20 * scale, 199 * scale, 9 * scale);
      ctx.bezierCurveTo(204 * scale, 35 * scale, 182 * scale, 44 * scale, 152 * scale, 45 * scale);
      ctx.closePath();
      fill_path(ctx, color[3], color[2], 4 * scale);
      ctx.save();
      ctx.translate(105.5 * scale, 76.5 * scale);
      round_rect(ctx, -55 * scale, -40.5 * scale, 106 * scale, 77 * scale, 18 * scale);
      ctx.restore();
      fill_path(ctx, color[1]);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(149 * scale, 45 * scale);
      ctx.bezierCurveTo(155 * scale, 37 * scale, 158 * scale, 37 * scale, 161 * scale, 52 * scale);
      ctx.bezierCurveTo(164 * scale, 60 * scale, 161 * scale, 65 * scale, 152 * scale, 58 * scale);
      ctx.bezierCurveTo(145 * scale, 51 * scale, 143 * scale, 49 * scale, 149 * scale, 45 * scale);
      ctx.closePath();
      fill_path(ctx, color[4], color[2], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(60 * scale, 43 * scale);
      ctx.bezierCurveTo(67 * scale, 47 * scale, 67 * scale, 51 * scale, 57 * scale, 59 * scale);
      ctx.bezierCurveTo(50 * scale, 64 * scale, 47 * scale, 64 * scale, 49 * scale, 55 * scale);
      ctx.bezierCurveTo(49 * scale, 42 * scale, 51 * scale, 38 * scale, 59 * scale, 42 * scale);
      ctx.closePath();
      fill_path(ctx, color[4], color[2], 4 * scale);
      circle(ctx, 105 * scale, 107 * scale, 10.63014581273465 * scale);
      fill_path(ctx, color[5], color[6], 4 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(105 * scale, 100 * scale);
      ctx.bezierCurveTo(111 * scale, 101 * scale, 113 * scale, 104 * scale, 112 * scale, 109 * scale);
      ctx.closePath();
      fill_path(ctx, color[7]);
      ctx.translate(44.5 * scale, 22 * scale);
      circle(ctx, 35 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[8]);
      circle(ctx, 85 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[8]);
      circle(ctx, 32 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[9]);
      circle(ctx, 82 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[9]);
    } else if (i == 9) {
      ctx.save();
      ctx.translate(110 * scale, 22 * scale);
      round_rect(ctx, -16 * scale, -5 * scale, 32 * scale, 10 * scale, 10 * scale);
      ctx.restore();
      fill_path(ctx, color[1], color[2], 3 * scale);
      ctx.save();
      ctx.translate(109.5 * scale, 17 * scale);
      round_rect(ctx, -18.5 * scale, -3 * scale, 37 * scale, 6 * scale, 10 * scale);
      ctx.restore();
      fill_path(ctx, color[3], color[4], 3 * scale);
      ctx.globalAlpha = 0.5;
      ctx.translate(0, 5 * scale);
      ctx.save();
      ctx.translate(86 * scale, 40 * scale);
      round_rect(ctx, -58 * scale, -9 * scale, 116 * scale, 18 * scale, 6 * scale);
      ctx.restore();
      fill_path(ctx, color[0]);
      ctx.globalAlpha = 1;
      ctx.translate(0, -5 * scale);
      ctx.save();
      ctx.translate(86 * scale, 40 * scale);
      round_rect(ctx, -58 * scale, -9 * scale, 116 * scale, 18 * scale, 6 * scale);
      ctx.restore();
      fill_path(ctx, color[3], color[4], 3 * scale);
      ctx.globalAlpha = 0.75;
      ctx.translate(0, 5 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(109 * scale, 47 * scale);
      ctx.bezierCurveTo(110.5 * scale, 45 * scale, 110.5 * scale, 45 * scale, 112 * scale, 43 * scale);
      ctx.bezierCurveTo(114 * scale, 44 * scale, 114 * scale, 44 * scale, 116 * scale, 45 * scale);
      ctx.bezierCurveTo(117.5 * scale, 43 * scale, 117.5 * scale, 43 * scale, 119 * scale, 41 * scale);
      ctx.bezierCurveTo(121 * scale, 41.5 * scale, 121 * scale, 41.5 * scale, 123 * scale, 42 * scale);
      ctx.closePath();
      fill_path(ctx, color[0]);
      ctx.beginPath();
      ctx.translate(0, 5 * scale);
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(54 * scale, 35 * scale);
      ctx.bezierCurveTo(61.5 * scale, 35 * scale, 61.5 * scale, 35 * scale, 69 * scale, 35 * scale);
      ctx.bezierCurveTo(70 * scale, 48 * scale, 70 * scale, 60 * scale, 60 * scale, 59 * scale);
      ctx.bezierCurveTo(45 * scale, 61 * scale, 44 * scale, 60 * scale, 43 * scale, 53 * scale);
      ctx.bezierCurveTo(42 * scale, 49 * scale, 55 * scale, 51 * scale, 55 * scale, 44 * scale);
      ctx.closePath();
      fill_path(ctx, color[0]);
      ctx.globalAlpha = 1;
      ctx.translate(0, -5 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(105 * scale, 38 * scale);
      ctx.bezierCurveTo(110 * scale, 48 * scale, 110 * scale, 50 * scale, 105 * scale, 53 * scale);
      ctx.bezierCurveTo(98 * scale, 62 * scale, 107 * scale, 66 * scale, 117 * scale, 60 * scale);
      ctx.bezierCurveTo(128 * scale, 56 * scale, 130 * scale, 56 * scale, 126 * scale, 49 * scale);
      ctx.bezierCurveTo(123.5 * scale, 41.5 * scale, 123.5 * scale, 41.5 * scale, 121 * scale, 34 * scale);
      ctx.closePath();
      fill_path(ctx, color[7], color[8], 3 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(109 * scale, 47 * scale);
      ctx.bezierCurveTo(110.5 * scale, 45 * scale, 110.5 * scale, 45 * scale, 112 * scale, 43 * scale);
      ctx.bezierCurveTo(114 * scale, 44 * scale, 114 * scale, 44 * scale, 116 * scale, 45 * scale);
      ctx.bezierCurveTo(117.5 * scale, 43 * scale, 117.5 * scale, 43 * scale, 119 * scale, 41 * scale);
      ctx.bezierCurveTo(121 * scale, 41.5 * scale, 121 * scale, 41.5 * scale, 123 * scale, 42 * scale);
      ctx.closePath();
      fill_path(ctx, undefined, color[6], 3 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(84 * scale, 33 * scale);
      ctx.bezierCurveTo(88.5 * scale, 34.5 * scale, 88.5 * scale, 34.5 * scale, 93 * scale, 36 * scale);
      ctx.bezierCurveTo(87 * scale, 43 * scale, 88 * scale, 45 * scale, 91 * scale, 46 * scale);
      ctx.bezierCurveTo(98 * scale, 56 * scale, 91 * scale, 57 * scale, 85 * scale, 53 * scale);
      ctx.bezierCurveTo(80 * scale, 50 * scale, 78 * scale, 49 * scale, 82 * scale, 43 * scale);
      ctx.bezierCurveTo(83.5 * scale, 38 * scale, 83.5 * scale, 38 * scale, 85 * scale, 33 * scale);
      ctx.closePath();
      fill_path(ctx, color[5], color[6], 3 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(54 * scale, 35 * scale);
      ctx.bezierCurveTo(61.5 * scale, 35 * scale, 61.5 * scale, 35 * scale, 69 * scale, 35 * scale);
      ctx.bezierCurveTo(70 * scale, 48 * scale, 70 * scale, 60 * scale, 60 * scale, 59 * scale);
      ctx.bezierCurveTo(45 * scale, 61 * scale, 44 * scale, 60 * scale, 43 * scale, 53 * scale);
      ctx.bezierCurveTo(42 * scale, 49 * scale, 55 * scale, 51 * scale, 55 * scale, 44 * scale);
      ctx.closePath();
      fill_path(ctx, color[7], color[8], 3 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(48 * scale, 49 * scale);
      ctx.bezierCurveTo(50 * scale, 50 * scale, 50 * scale, 50 * scale, 52 * scale, 51 * scale);
      ctx.bezierCurveTo(50.5 * scale, 52 * scale, 50.5 * scale, 52 * scale, 49 * scale, 53 * scale);
      ctx.bezierCurveTo(51 * scale, 54.5 * scale, 51 * scale, 54.5 * scale, 53 * scale, 56 * scale);
      ctx.bezierCurveTo(51 * scale, 57.5 * scale, 51 * scale, 57.5 * scale, 49 * scale, 59 * scale);
      ctx.closePath();
      fill_path(ctx, undefined, color[6], 3 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(54 * scale, 39 * scale);
      ctx.bezierCurveTo(61.5 * scale, 39.5 * scale, 61.5 * scale, 39.5 * scale, 69 * scale, 40 * scale);
      ctx.closePath();
      fill_path(ctx, undefined, color[6], 3 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(55 * scale, 43 * scale);
      ctx.bezierCurveTo(61.5 * scale, 43.5 * scale, 61.5 * scale, 43.5 * scale, 68 * scale, 44 * scale);
      ctx.closePath();
      fill_path(ctx, undefined, color[6], 3 * scale);
      ctx.translate(27 * scale, 5 * scale);
      circle(ctx, 35 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[9]);
      circle(ctx, 85 * scale, 75 * scale, 15 * scale);
      fill_path(ctx, color[9]);
      circle(ctx, 32 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[10]);
      circle(ctx, 82 * scale, 67 * scale, 5 * scale);
      fill_path(ctx, color[10]);
    }
  }
  return can;
};

function create_robotskin(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 350 * scale;
  can.height = 350 * scale;
  ctx.translate(0, 15 * scale);
  ctx.globalAlpha = 0.5;
  ctx.save();
  ctx.translate(174 * scale, 172 * scale);
  round_rect(ctx, -81 * scale, -60 * scale, 162 * scale, 120 * scale, 26 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.translate(0, -15 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(174 * scale, 172 * scale);
  round_rect(ctx, -81 * scale, -60 * scale, 162 * scale, 120 * scale, 26 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(179 * scale, 211 * scale);
  ctx.bezierCurveTo(183 * scale, 204.5 * scale, 183 * scale, 204.5 * scale, 187 * scale, 198 * scale);
  ctx.bezierCurveTo(198.5 * scale, 191.5 * scale, 198.5 * scale, 191.5 * scale, 210 * scale, 185 * scale);
  ctx.bezierCurveTo(215 * scale, 176.5 * scale, 215 * scale, 176.5 * scale, 220 * scale, 168 * scale);
  ctx.bezierCurveTo(213 * scale, 173.5 * scale, 213 * scale, 173.5 * scale, 206 * scale, 179 * scale);
  ctx.bezierCurveTo(195 * scale, 184 * scale, 195 * scale, 184 * scale, 184 * scale, 189 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(167 * scale, 233 * scale);
  ctx.bezierCurveTo(167 * scale, 207 * scale, 167 * scale, 207 * scale, 167 * scale, 181 * scale);
  ctx.bezierCurveTo(167 * scale, 166 * scale, 157 * scale, 164 * scale, 148 * scale, 165 * scale);
  ctx.bezierCurveTo(120 * scale, 165 * scale, 120 * scale, 165 * scale, 92 * scale, 165 * scale);
  ctx.bezierCurveTo(92 * scale, 186.5 * scale, 92 * scale, 186.5 * scale, 92 * scale, 208 * scale);
  ctx.bezierCurveTo(93 * scale, 222 * scale, 102 * scale, 234 * scale, 119 * scale, 233 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 7 * scale);
  circle(ctx, 152 * scale, 179 * scale, 6 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 107 * scale, 179 * scale, 6 * scale);
  fill_path(ctx, color[4]);
  ctx.save();
  ctx.translate(210 * scale, 200 * scale);
  ctx.rotate(0.2);
  round_regular_polygon(ctx, 6, 32 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[5], color[2], 7 * scale);
  ctx.save();
  ctx.translate(210 * scale, 200 * scale);
  ctx.rotate(1.0471975511965976);
  round_regular_polygon(ctx, 6, 19 * scale, 6 * scale);
  ctx.restore();
  fill_path(ctx, color[6], color[7], 7 * scale);
  ctx.save();
  ctx.translate(205 * scale, 193 * scale);
  ctx.rotate(0);
  round_regular_polygon(ctx, 6, 10 * scale, 3 * scale);
  ctx.restore();
  fill_path(ctx, color[8]);
  ctx.save();
  ctx.translate(137 * scale, 200 * scale);
  ctx.rotate(-0.5235987755982988);
  round_regular_polygon(ctx, 6, 20 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[6], color[7], 7 * scale);
  ctx.save();
  ctx.translate(131 * scale, 194 * scale);
  round_regular_polygon(ctx, 6, 10 * scale, 3 * scale);
  ctx.restore();
  fill_path(ctx, color[8]);
  ctx.save();
  ctx.translate(150.5 * scale, 120 * scale);
  ctx.rotate(0);
  round_rect(ctx, -19.5 * scale, -8 * scale, 39 * scale, 16 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, undefined, color[2], 7 * scale);
  return can;
};

function create_skins(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 175 * scale;
  can.height = 150 * scale;
  if (i == 0) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 131 * scale, 194 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 206 * scale, 194 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    ctx.translate(0, 1 * scale);
    ctx.save();
    ctx.translate(138.5 * scale, 180.5 * scale);
    round_rect(ctx, -22.5 * scale, -11.5 * scale, 45 * scale, 23 * scale, 0 * scale);
    ctx.restore();
    fill_path(ctx, color[1]);
    ctx.save();
    ctx.translate(207 * scale, 177.5 * scale);
    round_rect(ctx, -31 * scale, -9.5 * scale, 62 * scale, 19 * scale, 0 * scale);
    ctx.restore();
    fill_path(ctx, color[1]);
    ctx.save();
    ctx.translate(171.5 * scale, 220 * scale);
    round_rect(ctx, -52.5 * scale, -2 * scale, 105 * scale, 4 * scale, 0 * scale);
    ctx.restore();
    fill_path(ctx, color[1]);
  } else if (i == 1) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(183 * scale, 223 * scale);
    ctx.bezierCurveTo(193 * scale, 187 * scale, 215 * scale, 193 * scale, 227 * scale, 159 * scale);
    ctx.bezierCurveTo(227 * scale, 194 * scale, 209 * scale, 187 * scale, 183 * scale, 223 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 131 * scale, 190 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 204 * scale, 190 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(120 * scale, 154 * scale);
    ctx.bezierCurveTo(125 * scale, 146 * scale, 131 * scale, 143 * scale, 147 * scale, 137 * scale);
    ctx.bezierCurveTo(139 * scale, 147 * scale, 129 * scale, 152 * scale, 121 * scale, 154 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(120 * scale, 162 * scale);
    ctx.bezierCurveTo(134 * scale, 153 * scale, 139 * scale, 149 * scale, 150 * scale, 144 * scale);
    ctx.bezierCurveTo(143 * scale, 155 * scale, 128 * scale, 163 * scale, 121 * scale, 161 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(127 * scale, 142 * scale);
    ctx.bezierCurveTo(129 * scale, 151 * scale, 132 * scale, 157 * scale, 137 * scale, 162 * scale);
    ctx.bezierCurveTo(134 * scale, 152 * scale, 132 * scale, 146 * scale, 127 * scale, 142 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(135 * scale, 140 * scale);
    ctx.bezierCurveTo(141 * scale, 144 * scale, 143 * scale, 150 * scale, 143 * scale, 157 * scale);
    ctx.bezierCurveTo(138 * scale, 150 * scale, 136 * scale, 145 * scale, 135 * scale, 140 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
  } else if (i == 2) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 130 * scale, 192 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 203 * scale, 192 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(115 * scale, 224 * scale);
    ctx.bezierCurveTo(173 * scale, 223.5 * scale, 173 * scale, 223.5 * scale, 231 * scale, 223 * scale);
    ctx.bezierCurveTo(230 * scale, 222 * scale, 198 * scale, 223 * scale, 186 * scale, 209 * scale);
    ctx.bezierCurveTo(173.5 * scale, 209 * scale, 173.5 * scale, 209 * scale, 161 * scale, 209 * scale);
    ctx.bezierCurveTo(146 * scale, 224 * scale, 114 * scale, 223 * scale, 116 * scale, 224 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(112 * scale, 193 * scale);
    ctx.bezierCurveTo(154 * scale, 182 * scale, 194 * scale, 183 * scale, 234 * scale, 192 * scale);
    ctx.bezierCurveTo(217 * scale, 154 * scale, 148 * scale, 127 * scale, 112 * scale, 192 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
  } else if (i == 3) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 130 * scale, 192 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 203 * scale, 192 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(120 * scale, 176 * scale);
    ctx.bezierCurveTo(175 * scale, 193 * scale, 147.5 * scale, 184.5 * scale, 175 * scale, 193 * scale);
    ctx.bezierCurveTo(200 * scale, 184.5 * scale, 200 * scale, 184.5 * scale, 225 * scale, 176 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(226 * scale, 223 * scale);
    ctx.bezierCurveTo(173.5 * scale, 223 * scale, 173.5 * scale, 223 * scale, 121 * scale, 223 * scale);
    ctx.bezierCurveTo(148 * scale, 218 * scale, 148 * scale, 218 * scale, 175 * scale, 213 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
  } else if (i == 4) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    ctx.rotate(0);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 137 * scale, 203 * scale, 8 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 209 * scale, 203 * scale, 8 * scale);
    fill_path(ctx, color[4]);
    ctx.save();
    ctx.translate(174.5 * scale, 218 * scale);
    ctx.rotate(0);
    round_rect(ctx, -60.5 * scale, -5 * scale, 121 * scale, 10 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(113 * scale, 190 * scale);
    ctx.bezierCurveTo(144 * scale, 181.5 * scale, 144 * scale, 181.5 * scale, 175 * scale, 173 * scale);
    ctx.bezierCurveTo(205 * scale, 182 * scale, 205 * scale, 182 * scale, 235 * scale, 191 * scale);
    ctx.bezierCurveTo(242 * scale, 141 * scale, 106 * scale, 119 * scale, 112 * scale, 189 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
  } else if (i == 5) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    ctx.rotate(0);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 140 * scale, 196 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 213 * scale, 196 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 131 * scale, 206 * scale, 3 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 204 * scale, 206 * scale, 3 * scale);
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(113 * scale, 181 * scale);
    ctx.bezierCurveTo(159 * scale, 204 * scale, 190 * scale, 202 * scale, 235 * scale, 181 * scale);
    ctx.bezierCurveTo(241 * scale, 137 * scale, 109 * scale, 130 * scale, 112 * scale, 180 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.save();
    ctx.translate(174 * scale, 220 * scale);
    ctx.rotate(0);
    round_rect(ctx, -56 * scale, -5 * scale, 112 * scale, 10 * scale, 1 * scale);
    ctx.restore();
    fill_path(ctx, color[1]);
  } else if (i == 6) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 133 * scale, 188 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 206 * scale, 188 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(110 * scale, 193 * scale);
    ctx.bezierCurveTo(130 * scale, 182 * scale, 142 * scale, 183 * scale, 162 * scale, 193 * scale);
    ctx.bezierCurveTo(164 * scale, 176.5 * scale, 164 * scale, 176.5 * scale, 166 * scale, 160 * scale);
    ctx.bezierCurveTo(137 * scale, 159 * scale, 137 * scale, 159 * scale, 108 * scale, 158 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(184 * scale, 192 * scale);
    ctx.bezierCurveTo(205 * scale, 183 * scale, 216 * scale, 183 * scale, 234 * scale, 192 * scale);
    ctx.bezierCurveTo(233.5 * scale, 177 * scale, 233.5 * scale, 177 * scale, 233 * scale, 162 * scale);
    ctx.bezierCurveTo(209 * scale, 161.5 * scale, 186 * scale, 162 * scale, 185 * scale, 161 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
  } else if (i == 7) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 130 * scale, 206 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 203 * scale, 206 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(108 * scale, 191 * scale);
    ctx.bezierCurveTo(141 * scale, 184 * scale, 141 * scale, 184 * scale, 174 * scale, 177 * scale);
    ctx.bezierCurveTo(207 * scale, 184 * scale, 207 * scale, 184 * scale, 240 * scale, 191 * scale);
    ctx.bezierCurveTo(244 * scale, 140 * scale, 113 * scale, 121 * scale, 108 * scale, 191 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
  } else if (i == 8) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.20360331117452 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 127 * scale, 198 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 200 * scale, 198 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    ctx.save();
    ctx.translate(175 * scale, 175.5 * scale);
    round_rect(ctx, -67 * scale, -13.5 * scale, 134 * scale, 27 * scale, 0 * scale);
    ctx.restore();
    fill_path(ctx, color[1]);
    ctx.save();
    ctx.translate(172 * scale, 219 * scale);
    round_rect(ctx, -60 * scale, -4 * scale, 120 * scale, 8 * scale, 0 * scale);
    ctx.restore();
    fill_path(ctx, color[1]);
  } else if (i == 9) {
    ctx.globalAlpha = 0.5;
    ctx.translate(-88 * scale, -95 * scale);
    ctx.save();
    ctx.translate(174 * scale, 195.5 * scale);
    round_rect(ctx, -82 * scale, -46.5 * scale, 164 * scale, 93 * scale, 30 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.save();
    ctx.translate(174 * scale, 170.5 * scale);
    round_rect(ctx, -81 * scale, -59.5 * scale, 162 * scale, 119 * scale, 28 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[2], 6.5 * scale);
    circle(ctx, 137 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 210 * scale, 200 * scale, 22.090722034374522 * scale);
    fill_path(ctx, color[3]);
    circle(ctx, 143 * scale, 200 * scale, 7 * scale);
    fill_path(ctx, color[4]);
    circle(ctx, 204 * scale, 200 * scale, 7 * scale);
    fill_path(ctx, color[4]);
  }
  return can;
};

function create_garlic(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 264 * scale;
  can.height = 246 * scale;
  ctx.translate(0, 10 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(75 * scale, 54 * scale);
  ctx.bezierCurveTo(79 * scale, 21 * scale, 131 * scale, 13 * scale, 153 * scale, 36 * scale);
  ctx.bezierCurveTo(204 * scale, 27 * scale, 221 * scale, 52 * scale, 216 * scale, 83 * scale);
  ctx.bezierCurveTo(241 * scale, 103 * scale, 232 * scale, 138 * scale, 214 * scale, 147 * scale);
  ctx.bezierCurveTo(223 * scale, 184 * scale, 201 * scale, 200 * scale, 175 * scale, 199 * scale);
  ctx.bezierCurveTo(156 * scale, 218 * scale, 135 * scale, 222 * scale, 114 * scale, 203 * scale);
  ctx.bezierCurveTo(62 * scale, 213 * scale, 66 * scale, 189 * scale, 59 * scale, 170 * scale);
  ctx.bezierCurveTo(27 * scale, 164 * scale, 31 * scale, 134 * scale, 38 * scale, 123 * scale);
  ctx.bezierCurveTo(11 * scale, 80 * scale, 51 * scale, 52 * scale, 75 * scale, 54 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, -10 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(75 * scale, 54 * scale);
  ctx.bezierCurveTo(79 * scale, 21 * scale, 131 * scale, 13 * scale, 153 * scale, 36 * scale);
  ctx.bezierCurveTo(204 * scale, 27 * scale, 221 * scale, 52 * scale, 216 * scale, 83 * scale);
  ctx.bezierCurveTo(241 * scale, 103 * scale, 232 * scale, 138 * scale, 214 * scale, 147 * scale);
  ctx.bezierCurveTo(223 * scale, 184 * scale, 201 * scale, 200 * scale, 175 * scale, 199 * scale);
  ctx.bezierCurveTo(156 * scale, 218 * scale, 135 * scale, 222 * scale, 114 * scale, 203 * scale);
  ctx.bezierCurveTo(62 * scale, 213 * scale, 66 * scale, 189 * scale, 59 * scale, 170 * scale);
  ctx.bezierCurveTo(27 * scale, 164 * scale, 31 * scale, 134 * scale, 38 * scale, 123 * scale);
  ctx.bezierCurveTo(11 * scale, 80 * scale, 51 * scale, 52 * scale, 75 * scale, 54 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(121 * scale, 102 * scale);
  ctx.bezierCurveTo(111 * scale, 80 * scale, 110 * scale, 66 * scale, 108 * scale, 51 * scale);
  ctx.bezierCurveTo(119 * scale, 65 * scale, 129 * scale, 85 * scale, 135 * scale, 99 * scale);
  ctx.bezierCurveTo(142 * scale, 67 * scale, 146 * scale, 60 * scale, 152 * scale, 50 * scale);
  ctx.bezierCurveTo(154 * scale, 71 * scale, 152 * scale, 85 * scale, 149 * scale, 104 * scale);
  ctx.bezierCurveTo(166 * scale, 88 * scale, 175 * scale, 83 * scale, 188 * scale, 78 * scale);
  ctx.bezierCurveTo(179 * scale, 91 * scale, 170 * scale, 103 * scale, 160 * scale, 112 * scale);
  ctx.bezierCurveTo(186 * scale, 107 * scale, 191 * scale, 107 * scale, 204 * scale, 108 * scale);
  ctx.bezierCurveTo(195 * scale, 114 * scale, 179 * scale, 120 * scale, 163 * scale, 123 * scale);
  ctx.bezierCurveTo(183 * scale, 130 * scale, 186 * scale, 135 * scale, 192 * scale, 140 * scale);
  ctx.bezierCurveTo(179 * scale, 141 * scale, 164 * scale, 139 * scale, 153 * scale, 135 * scale);
  ctx.bezierCurveTo(158 * scale, 145 * scale, 163 * scale, 159 * scale, 165 * scale, 177 * scale);
  ctx.bezierCurveTo(154 * scale, 166 * scale, 145 * scale, 153 * scale, 138 * scale, 139 * scale);
  ctx.bezierCurveTo(133 * scale, 155 * scale, 125 * scale, 170 * scale, 117 * scale, 182 * scale);
  ctx.bezierCurveTo(116 * scale, 160 * scale, 119 * scale, 151 * scale, 124 * scale, 138 * scale);
  ctx.bezierCurveTo(107 * scale, 150 * scale, 95 * scale, 156 * scale, 82 * scale, 159 * scale);
  ctx.bezierCurveTo(94 * scale, 140 * scale, 101 * scale, 136 * scale, 113 * scale, 128 * scale);
  ctx.bezierCurveTo(78 * scale, 123 * scale, 75 * scale, 121 * scale, 67 * scale, 118 * scale);
  ctx.bezierCurveTo(85 * scale, 112 * scale, 94 * scale, 112 * scale, 111 * scale, 113 * scale);
  ctx.bezierCurveTo(89 * scale, 97 * scale, 85 * scale, 93 * scale, 78 * scale, 82 * scale);
  ctx.bezierCurveTo(92 * scale, 85 * scale, 101 * scale, 90 * scale, 121 * scale, 102 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(128 * scale, 103 * scale);
  ctx.bezierCurveTo(111 * scale, 112 * scale, 117 * scale, 136 * scale, 140 * scale, 130 * scale);
  ctx.bezierCurveTo(151 * scale, 126 * scale, 156 * scale, 115 * scale, 155 * scale, 107 * scale);
  ctx.bezierCurveTo(155 * scale, 96 * scale, 154 * scale, 94 * scale, 148 * scale, 94 * scale);
  ctx.bezierCurveTo(141 * scale, 94 * scale, 146 * scale, 104 * scale, 136 * scale, 104 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  return can;
};

function create_garland_inv(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 70 * scale;
  can.height = 70 * scale;
  ctx.globalAlpha = 0.5;
  circle(ctx, 26 * scale, 26 * scale, 9 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 56 * scale, 36 * scale, 9 * scale);
  fill_path(ctx, color[1]);
  circle(ctx, 40 * scale, 50 * scale, 9 * scale);
  fill_path(ctx, color[2]);
  ctx.globalAlpha = 1;
  circle(ctx, 26 * scale, 26 * scale, 5 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 56 * scale, 36 * scale, 5 * scale);
  fill_path(ctx, color[1]);
  circle(ctx, 40 * scale, 50 * scale, 5 * scale);
  fill_path(ctx, color[2]);
  return can;
};

function create_garland(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 22 * scale;
  can.height = 22 * scale;
  ctx.globalAlpha = 0.4;
  circle(ctx, 11 * scale, 11 * scale, 10 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 0.7;
  circle(ctx, 11 * scale, 11 * scale, 7 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  circle(ctx, 11 * scale, 11 * scale, 4 * scale);
  fill_path(ctx, color[0]);
  return can;
};

function create_garland_light(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 20 * scale;
  can.height = 20 * scale;
  ctx.globalAlpha = 0.5;
  circle(ctx, 10 * scale, 10 * scale, 9 * scale);
  fill_path(ctx, color[0]);
  return can;
};

function create_roof(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 248 * scale;
  can.height = 247 * scale;
  ctx.save();
  ctx.translate(69.5 * scale, 145 * scale);
  round_rect(ctx, -8.5 * scale, -63 * scale, 17 * scale, 127 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(183 * scale, 145 * scale);
  round_rect(ctx, -8 * scale, -63 * scale, 16 * scale, 126 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(123.5 * scale, 62.5 * scale);
  ctx.rotate(6.28);
  round_rect(ctx, -84.5 * scale, -25.5 * scale, 169 * scale, 51 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 6 * scale);
  ctx.save();
  ctx.translate(123.5 * scale, 118 * scale);
  ctx.rotate(6.24);
  round_rect(ctx, -85.5 * scale, -24 * scale, 169 * scale, 48 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 6 * scale);
  ctx.save();
  ctx.translate(122 * scale, 177.5 * scale);
  ctx.rotate(6.32);
  round_rect(ctx, -84 * scale, -23.5 * scale, 169 * scale, 47 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(37 * scale, 157 * scale);
  ctx.bezierCurveTo(49 * scale, 160 * scale, 49 * scale, 160 * scale, 61 * scale, 163 * scale);
  ctx.bezierCurveTo(49.5 * scale, 165.5 * scale, 49.5 * scale, 165.5 * scale, 38 * scale, 168 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(205 * scale, 175 * scale);
  ctx.bezierCurveTo(192.5 * scale, 180 * scale, 192.5 * scale, 180 * scale, 180 * scale, 185 * scale);
  ctx.bezierCurveTo(193 * scale, 188 * scale, 193 * scale, 188 * scale, 206 * scale, 191 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  return can;
};

function create_roof1(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 248 * scale;
  can.height = 247 * scale;
  ctx.save();
  ctx.translate(182 * scale, 120 * scale);
  round_rect(ctx, -8 * scale, -67 * scale, 16 * scale, 134 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(68.5 * scale, 127.5 * scale);
  round_rect(ctx, -8.5 * scale, -70.5 * scale, 17 * scale, 141 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(123.5 * scale, 68 * scale);
  round_rect(ctx, -82.5 * scale, -24 * scale, 165 * scale, 48 * scale, 4 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 6 * scale);
  ctx.save();
  ctx.translate(123 * scale, 179.5 * scale);
  round_rect(ctx, -83 * scale, -24.5 * scale, 166 * scale, 49 * scale, 4 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 6 * scale);
  ctx.save();
  ctx.translate(123.5 * scale, 123.5 * scale);
  ctx.rotate(6.24);
  round_rect(ctx, -82.5 * scale, -24.5 * scale, 165 * scale, 49 * scale, 4 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(204 * scale, 112 * scale);
  ctx.bezierCurveTo(149 * scale, 121.5 * scale, 96 * scale, 130 * scale, 94 * scale, 131 * scale);
  ctx.bezierCurveTo(149.5 * scale, 127.5 * scale, 149.5 * scale, 127.5 * scale, 205 * scale, 124 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  return can;
};

function create_roof2(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 248 * scale;
  can.height = 247 * scale;
  ctx.save();
  ctx.translate(183 * scale, 107 * scale);
  round_rect(ctx, -8 * scale, -70.5 * scale, 16 * scale, 141 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(69.5 * scale, 110 * scale);
  round_rect(ctx, -8.5 * scale, -71 * scale, 17 * scale, 143 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(123.5 * scale, 181 * scale);
  round_rect(ctx, -84.5 * scale, -26 * scale, 169 * scale, 52 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(41 * scale, 95 * scale);
  ctx.bezierCurveTo(105 * scale, 96 * scale, 113 * scale, 99 * scale, 134 * scale, 102 * scale);
  ctx.bezierCurveTo(147 * scale, 106 * scale, 173 * scale, 100 * scale, 207 * scale, 105 * scale);
  ctx.bezierCurveTo(210 * scale, 105 * scale, 207 * scale, 140 * scale, 207 * scale, 154 * scale);
  ctx.bezierCurveTo(123.5 * scale, 151.5 * scale, 123.5 * scale, 151.5 * scale, 40 * scale, 149 * scale);
  ctx.bezierCurveTo(37 * scale, 145 * scale, 39 * scale, 95 * scale, 41 * scale, 96 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(68 * scale, 75 * scale);
  ctx.bezierCurveTo(54 * scale, 72.5 * scale, 54 * scale, 72.5 * scale, 40 * scale, 70 * scale);
  ctx.bezierCurveTo(38 * scale, 46 * scale, 40 * scale, 46 * scale, 53 * scale, 46 * scale);
  ctx.bezierCurveTo(201 * scale, 41 * scale, 201 * scale, 41 * scale, 201 * scale, 42 * scale);
  ctx.bezierCurveTo(211 * scale, 40 * scale, 208 * scale, 53 * scale, 208 * scale, 72 * scale);
  ctx.bezierCurveTo(209 * scale, 91 * scale, 210 * scale, 96 * scale, 194 * scale, 94 * scale);
  ctx.bezierCurveTo(119 * scale, 97 * scale, 119 * scale, 97 * scale, 44 * scale, 100 * scale);
  ctx.bezierCurveTo(39 * scale, 99 * scale, 40 * scale, 96 * scale, 40 * scale, 80 * scale);
  ctx.bezierCurveTo(54 * scale, 77.5 * scale, 54 * scale, 77.5 * scale, 68 * scale, 75 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[1], 6 * scale);
  return can;
};

function create_zombie_head(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 191 * scale;
  can.height = 153 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 10 * scale);
  ctx.save();
  ctx.translate(97.49996948242188 * scale, 95.12844848632812 * scale);
  round_rect(ctx, -62.5 * scale, -41.5 * scale, 125 * scale, 83 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.save();
  ctx.translate(97.49996948242188 * scale, 95.12844848632812 * scale);
  round_rect(ctx, -62.5 * scale, -41.5 * scale, 125 * scale, 83 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.globalCompositeOperation = "destination-out";
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(26.999969482421875 * scale, 50.850677490234375 * scale);
  ctx.bezierCurveTo(46.499969482421875 * scale, 64.85067749023438 * scale, 46.499969482421875 * scale, 64.85067749023438 * scale, 65.99996948242188 * scale, 78.85067749023438 * scale);
  ctx.bezierCurveTo(80.99996948242188 * scale, 87.85067749023438 * scale, 105.99996948242188 * scale, 82.85067749023438 * scale, 114.99996948242188 * scale, 80.85067749023438 * scale);
  ctx.bezierCurveTo(130.99996948242188 * scale, 69.85067749023438 * scale, 152.99996948242188 * scale, 70.85067749023438 * scale, 166.99996948242188 * scale, 67.85067749023438 * scale);
  ctx.bezierCurveTo(156.99996948242188 * scale, 52.850677490234375 * scale, 156.99996948242188 * scale, 52.850677490234375 * scale, 146.99996948242188 * scale, 37.850677490234375 * scale);
  ctx.bezierCurveTo(101.49996948242188 * scale, 37.350677490234375 * scale, 101.49996948242188 * scale, 37.350677490234375 * scale, 55.999969482421875 * scale, 36.850677490234375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 4 * scale);
  ctx.globalCompositeOperation = "source-over";
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(40.999969482421875 * scale, 59.850677490234375 * scale);
  ctx.bezierCurveTo(41.999969482421875 * scale, 50.850677490234375 * scale, 47.999969482421875 * scale, 47.850677490234375 * scale, 56.999969482421875 * scale, 49.850677490234375 * scale);
  ctx.bezierCurveTo(65.99996948242188 * scale, 41.850677490234375 * scale, 76.99996948242188 * scale, 42.850677490234375 * scale, 90.99996948242188 * scale, 47.850677490234375 * scale);
  ctx.bezierCurveTo(94.99996948242188 * scale, 42.850677490234375 * scale, 104.99996948242188 * scale, 42.850677490234375 * scale, 114.99996948242188 * scale, 47.850677490234375 * scale);
  ctx.bezierCurveTo(131.99996948242188 * scale, 42.850677490234375 * scale, 142.99996948242188 * scale, 48.850677490234375 * scale, 145.99996948242188 * scale, 56.850677490234375 * scale);
  ctx.bezierCurveTo(160.99996948242188 * scale, 63.850677490234375 * scale, 154.99996948242188 * scale, 69.85067749023438 * scale, 155.99996948242188 * scale, 70.85067749023438 * scale);
  ctx.bezierCurveTo(141.99996948242188 * scale, 71.85067749023438 * scale, 141.99996948242188 * scale, 71.85067749023438 * scale, 127.99996948242188 * scale, 72.85067749023438 * scale);
  ctx.bezierCurveTo(110.99996948242188 * scale, 83.85067749023438 * scale, 107.99996948242188 * scale, 82.85067749023438 * scale, 90.99996948242188 * scale, 85.85067749023438 * scale);
  ctx.bezierCurveTo(70.99996948242188 * scale, 83.85067749023438 * scale, 64.99996948242188 * scale, 79.85067749023438 * scale, 53.999969482421875 * scale, 70.85067749023438 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(33.999969482421875 * scale, 65.85067749023438 * scale);
  ctx.bezierCurveTo(36.999969482421875 * scale, 59.850677490234375 * scale, 34.999969482421875 * scale, 60.850677490234375 * scale, 39.999969482421875 * scale, 59.850677490234375 * scale);
  ctx.bezierCurveTo(47.999969482421875 * scale, 61.850677490234375 * scale, 62.999969482421875 * scale, 76.85067749023438 * scale, 74.99996948242188 * scale, 79.85067749023438 * scale);
  ctx.bezierCurveTo(93.99996948242188 * scale, 85.85067749023438 * scale, 111.99996948242188 * scale, 83.85067749023438 * scale, 124.99996948242188 * scale, 70.85067749023438 * scale);
  ctx.bezierCurveTo(129.99996948242188 * scale, 67.85067749023438 * scale, 145.99996948242188 * scale, 65.85067749023438 * scale, 159.99996948242188 * scale, 67.85067749023438 * scale);
  ctx.bezierCurveTo(159.99996948242188 * scale, 71.85067749023438 * scale, 159.99996948242188 * scale, 71.85067749023438 * scale, 159.99996948242188 * scale, 75.85067749023438 * scale);
  ctx.bezierCurveTo(146.99996948242188 * scale, 72.85067749023438 * scale, 144.99996948242188 * scale, 75.85067749023438 * scale, 143.99996948242188 * scale, 82.85067749023438 * scale);
  ctx.bezierCurveTo(144.99996948242188 * scale, 86.85067749023438 * scale, 140.99996948242188 * scale, 90.85067749023438 * scale, 137.99996948242188 * scale, 86.85067749023438 * scale);
  ctx.bezierCurveTo(139.99996948242188 * scale, 72.85067749023438 * scale, 135.99996948242188 * scale, 72.85067749023438 * scale, 133.99996948242188 * scale, 82.85067749023438 * scale);
  ctx.bezierCurveTo(127.99996948242188 * scale, 88.85067749023438 * scale, 124.99996948242188 * scale, 70.85067749023438 * scale, 116.99996948242188 * scale, 86.85067749023438 * scale);
  ctx.bezierCurveTo(110.99996948242188 * scale, 91.85067749023438 * scale, 96.99996948242188 * scale, 81.85067749023438 * scale, 89.99996948242188 * scale, 90.85067749023438 * scale);
  ctx.bezierCurveTo(85.99996948242188 * scale, 92.85067749023438 * scale, 81.99996948242188 * scale, 95.85067749023438 * scale, 76.99996948242188 * scale, 86.85067749023438 * scale);
  ctx.bezierCurveTo(67.99996948242188 * scale, 93.85067749023438 * scale, 67.99996948242188 * scale, 91.85067749023438 * scale, 60.999969482421875 * scale, 79.85067749023438 * scale);
  ctx.bezierCurveTo(53.999969482421875 * scale, 71.85067749023438 * scale, 52.999969482421875 * scale, 72.85067749023438 * scale, 46.999969482421875 * scale, 77.85067749023438 * scale);
  ctx.bezierCurveTo(41.999969482421875 * scale, 78.85067749023438 * scale, 42.999969482421875 * scale, 69.85067749023438 * scale, 33.999969482421875 * scale, 65.85067749023438 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 4 * scale);
  circle(ctx, 68 * scale, 111.29513549804688 * scale, 15 * scale);
  fill_path(ctx, color[7], color[8], 4 * scale);
  circle(ctx, 123 * scale, 111.29510498046875 * scale, 15 * scale);
  fill_path(ctx, color[7], color[8], 4 * scale);
  circle(ctx, 63 * scale, 106 * scale, 5 * scale);
  fill_path(ctx, color[9]);
  circle(ctx, 118 * scale, 106 * scale, 5 * scale);
  fill_path(ctx, color[9]);
  return can;
};

function create_zombie_boss(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 191 * scale;
  can.height = 153 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 10 * scale);
  ctx.save();
  ctx.translate(96.49996948242188 * scale, 66.79510498046875 * scale);
  ctx.rotate(0);
  round_rect(ctx, -79.5 * scale, -48.5 * scale, 159 * scale, 97 * scale, 22 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.save();
  ctx.translate(96.49996948242188 * scale, 66.79510498046875 * scale);
  ctx.rotate(0);
  round_rect(ctx, -79.5 * scale, -48.5 * scale, 159 * scale, 97 * scale, 22 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.translate(2 * scale, 0);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(119 * scale, 28 * scale);
  ctx.bezierCurveTo(119 * scale, 22 * scale, 119 * scale, 20 * scale, 122 * scale, 16 * scale);
  ctx.bezierCurveTo(149 * scale, 39 * scale, 149 * scale, 39 * scale, 176 * scale, 63 * scale);
  ctx.bezierCurveTo(176 * scale, 75 * scale, 176 * scale, 75 * scale, 175 * scale, 88 * scale);
  ctx.bezierCurveTo(174 * scale, 90 * scale, 174 * scale, 90 * scale, 172 * scale, 93 * scale);
  ctx.bezierCurveTo(171 * scale, 101 * scale, 169 * scale, 109 * scale, 164 * scale, 113 * scale);
  ctx.bezierCurveTo(163 * scale, 104 * scale, 163 * scale, 104 * scale, 162 * scale, 95 * scale);
  ctx.bezierCurveTo(155 * scale, 105 * scale, 155 * scale, 105 * scale, 147 * scale, 116 * scale);
  ctx.bezierCurveTo(87 * scale, 114 * scale, 87 * scale, 114 * scale, 26 * scale, 112 * scale);
  ctx.bezierCurveTo(27 * scale, 106 * scale, 27 * scale, 106 * scale, 27 * scale, 101 * scale);
  ctx.bezierCurveTo(24 * scale, 104 * scale, 24 * scale, 104 * scale, 20 * scale, 108 * scale);
  ctx.bezierCurveTo(17 * scale, 103 * scale, 20 * scale, 86 * scale, 23 * scale, 72 * scale);
  ctx.bezierCurveTo(15 * scale, 74 * scale, 14 * scale, 78 * scale, 12 * scale, 83 * scale);
  ctx.bezierCurveTo(12 * scale, 65 * scale, 12 * scale, 54 * scale, 16 * scale, 42 * scale);
  ctx.bezierCurveTo(14 * scale, 39 * scale, 14 * scale, 39 * scale, 12 * scale, 36 * scale);
  ctx.bezierCurveTo(16 * scale, 33 * scale, 16 * scale, 33 * scale, 19 * scale, 30 * scale);
  ctx.bezierCurveTo(18 * scale, 27 * scale, 18 * scale, 27 * scale, 17 * scale, 25 * scale);
  ctx.bezierCurveTo(24 * scale, 24 * scale, 31 * scale, 21 * scale, 29 * scale, 19 * scale);
  ctx.bezierCurveTo(37 * scale, 25 * scale, 37 * scale, 25 * scale, 45 * scale, 31 * scale);
  ctx.bezierCurveTo(40 * scale, 23 * scale, 40 * scale, 21 * scale, 42 * scale, 16 * scale);
  ctx.bezierCurveTo(74 * scale, 16 * scale, 74 * scale, 16 * scale, 106 * scale, 16 * scale);
  ctx.bezierCurveTo(113 * scale, 21 * scale, 113 * scale, 21 * scale, 119 * scale, 26 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  return can;
};

function create_zombie_hurt(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 191 * scale;
  can.height = 153 * scale;
  ctx.save();
  ctx.translate(96.49996948242188 * scale, 66.79510498046875 * scale);
  round_rect(ctx, -79.5 * scale, -48.5 * scale, 159 * scale, 97 * scale, 22 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.translate(2 * scale, 0);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(119 * scale, 28 * scale);
  ctx.bezierCurveTo(119 * scale, 22 * scale, 119 * scale, 20 * scale, 122 * scale, 16 * scale);
  ctx.bezierCurveTo(149 * scale, 39 * scale, 149 * scale, 39 * scale, 176 * scale, 63 * scale);
  ctx.bezierCurveTo(176 * scale, 75 * scale, 176 * scale, 75 * scale, 175 * scale, 88 * scale);
  ctx.bezierCurveTo(174 * scale, 90 * scale, 174 * scale, 90 * scale, 172 * scale, 93 * scale);
  ctx.bezierCurveTo(171 * scale, 101 * scale, 169 * scale, 109 * scale, 164 * scale, 113 * scale);
  ctx.bezierCurveTo(163 * scale, 104 * scale, 163 * scale, 104 * scale, 162 * scale, 95 * scale);
  ctx.bezierCurveTo(155 * scale, 105 * scale, 155 * scale, 105 * scale, 147 * scale, 116 * scale);
  ctx.bezierCurveTo(87 * scale, 114 * scale, 87 * scale, 114 * scale, 26 * scale, 112 * scale);
  ctx.bezierCurveTo(27 * scale, 106 * scale, 27 * scale, 106 * scale, 27 * scale, 101 * scale);
  ctx.bezierCurveTo(24 * scale, 104 * scale, 24 * scale, 104 * scale, 20 * scale, 108 * scale);
  ctx.bezierCurveTo(17 * scale, 103 * scale, 20 * scale, 86 * scale, 23 * scale, 72 * scale);
  ctx.bezierCurveTo(15 * scale, 74 * scale, 14 * scale, 78 * scale, 12 * scale, 83 * scale);
  ctx.bezierCurveTo(12 * scale, 65 * scale, 12 * scale, 54 * scale, 16 * scale, 42 * scale);
  ctx.bezierCurveTo(14 * scale, 39 * scale, 14 * scale, 39 * scale, 12 * scale, 36 * scale);
  ctx.bezierCurveTo(16 * scale, 33 * scale, 16 * scale, 33 * scale, 19 * scale, 30 * scale);
  ctx.bezierCurveTo(18 * scale, 27 * scale, 18 * scale, 27 * scale, 17 * scale, 25 * scale);
  ctx.bezierCurveTo(24 * scale, 24 * scale, 31 * scale, 21 * scale, 29 * scale, 19 * scale);
  ctx.bezierCurveTo(37 * scale, 25 * scale, 37 * scale, 25 * scale, 45 * scale, 31 * scale);
  ctx.bezierCurveTo(40 * scale, 23 * scale, 40 * scale, 21 * scale, 42 * scale, 16 * scale);
  ctx.bezierCurveTo(74 * scale, 16 * scale, 74 * scale, 16 * scale, 106 * scale, 16 * scale);
  ctx.bezierCurveTo(113 * scale, 21 * scale, 113 * scale, 21 * scale, 119 * scale, 26 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.save();
  ctx.translate(97.49996948242188 * scale, 95.12844848632812 * scale);
  round_rect(ctx, -62.5 * scale, -41.5 * scale, 125 * scale, 83 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 4 * scale);
  return can;
};

function create_plant_seed(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 40;
  var h = scale * 40;
  can.width = w;
  can.height = h;
  var x = (scale * w) / 2;
  var y = (scale * h) / 2;
  var r = scale * 15;
  ctx.save();
  ctx.translate(x, y);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[0]);
  var r = 5 * scale;
  var x = 2 * scale;
  var y = 1 * scale;
  ctx.translate(x, y);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[1]);
  ctx.restore();
  return can;
};

function create_fish1(scale, useless, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 185 * scale;
  can.height = 240 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 137 * scale);
  ctx.bezierCurveTo(60 * scale, 87 * scale, 68 * scale, 66 * scale, 92 * scale, 67 * scale);
  ctx.bezierCurveTo(115 * scale, 64 * scale, 129 * scale, 97 * scale, 137 * scale, 136 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(53 * scale, 181 * scale);
  ctx.bezierCurveTo(30 * scale, 164 * scale, 19 * scale, 150 * scale, 11 * scale, 136 * scale);
  ctx.bezierCurveTo(28 * scale, 121 * scale, 38 * scale, 132 * scale, 48 * scale, 150 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(63 * scale, 208 * scale);
  ctx.bezierCurveTo(75 * scale, 224 * scale, 86 * scale, 228 * scale, 93 * scale, 228 * scale);
  ctx.bezierCurveTo(104 * scale, 229 * scale, 116 * scale, 219 * scale, 122 * scale, 205 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130 * scale, 170 * scale);
  ctx.bezierCurveTo(146 * scale, 125 * scale, 156 * scale, 126 * scale, 173 * scale, 137 * scale);
  ctx.bezierCurveTo(167 * scale, 151 * scale, 143 * scale, 174 * scale, 131 * scale, 183 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39 * scale, 140 * scale);
  ctx.bezierCurveTo(75 * scale, 126 * scale, 113 * scale, 127 * scale, 143 * scale, 137 * scale);
  ctx.bezierCurveTo(141 * scale, 186 * scale, 130 * scale, 202 * scale, 113 * scale, 214 * scale);
  ctx.bezierCurveTo(85 * scale, 228 * scale, 56 * scale, 219 * scale, 48 * scale, 173 * scale);
  ctx.bezierCurveTo(40 * scale, 148 * scale, 43 * scale, 145 * scale, 39 * scale, 140 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 137 * scale);
  ctx.bezierCurveTo(60 * scale, 87 * scale, 68 * scale, 66 * scale, 92 * scale, 67 * scale);
  ctx.bezierCurveTo(115 * scale, 64 * scale, 129 * scale, 97 * scale, 137 * scale, 136 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(53 * scale, 181 * scale);
  ctx.bezierCurveTo(30 * scale, 164 * scale, 19 * scale, 150 * scale, 11 * scale, 136 * scale);
  ctx.bezierCurveTo(28 * scale, 121 * scale, 38 * scale, 132 * scale, 48 * scale, 150 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(63 * scale, 208 * scale);
  ctx.bezierCurveTo(75 * scale, 224 * scale, 86 * scale, 228 * scale, 93 * scale, 228 * scale);
  ctx.bezierCurveTo(104 * scale, 229 * scale, 116 * scale, 219 * scale, 122 * scale, 205 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130 * scale, 170 * scale);
  ctx.bezierCurveTo(146 * scale, 125 * scale, 156 * scale, 126 * scale, 173 * scale, 137 * scale);
  ctx.bezierCurveTo(167 * scale, 151 * scale, 143 * scale, 174 * scale, 131 * scale, 183 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39 * scale, 140 * scale);
  ctx.bezierCurveTo(75 * scale, 126 * scale, 113 * scale, 127 * scale, 143 * scale, 137 * scale);
  ctx.bezierCurveTo(141 * scale, 186 * scale, 130 * scale, 202 * scale, 113 * scale, 214 * scale);
  ctx.bezierCurveTo(85 * scale, 228 * scale, 56 * scale, 219 * scale, 48 * scale, 173 * scale);
  ctx.bezierCurveTo(40 * scale, 148 * scale, 43 * scale, 145 * scale, 39 * scale, 140 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(59 * scale, 99 * scale);
  ctx.bezierCurveTo(71 * scale, 68 * scale, 81 * scale, 68 * scale, 94 * scale, 67 * scale);
  ctx.bezierCurveTo(105 * scale, 66 * scale, 119 * scale, 75 * scale, 123 * scale, 96 * scale);
  ctx.bezierCurveTo(104 * scale, 91 * scale, 101 * scale, 94 * scale, 94 * scale, 97 * scale);
  ctx.bezierCurveTo(76 * scale, 92 * scale, 73 * scale, 93 * scale, 60 * scale, 99 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  if (i === 0) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(47 * scale, 149 * scale);
    ctx.bezierCurveTo(43 * scale, 140 * scale, 48 * scale, 130 * scale, 59 * scale, 127 * scale);
    ctx.bezierCurveTo(77 * scale, 126 * scale, 90 * scale, 131 * scale, 131 * scale, 127 * scale);
    ctx.bezierCurveTo(143 * scale, 130 * scale, 144 * scale, 143 * scale, 132 * scale, 154 * scale);
    ctx.bezierCurveTo(90 * scale, 152 * scale, 90 * scale, 152 * scale, 48 * scale, 150 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(40 * scale, 139 * scale);
    ctx.bezierCurveTo(48 * scale, 113 * scale, 76 * scale, 119 * scale, 91 * scale, 126 * scale);
    ctx.bezierCurveTo(117 * scale, 113 * scale, 135 * scale, 117 * scale, 144 * scale, 134 * scale);
    ctx.bezierCurveTo(144 * scale, 138 * scale, 144 * scale, 138 * scale, 144 * scale, 142 * scale);
    ctx.bezierCurveTo(128 * scale, 124 * scale, 108 * scale, 124 * scale, 91 * scale, 136 * scale);
    ctx.bezierCurveTo(59 * scale, 124 * scale, 50 * scale, 137 * scale, 42 * scale, 148 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[2], 4 * scale);
  } else {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(41 * scale, 139 * scale);
    ctx.bezierCurveTo(53 * scale, 117 * scale, 69 * scale, 118 * scale, 92 * scale, 127 * scale);
    ctx.bezierCurveTo(124 * scale, 111 * scale, 136 * scale, 121 * scale, 143 * scale, 136 * scale);
    ctx.bezierCurveTo(142 * scale, 144 * scale, 142 * scale, 144 * scale, 141 * scale, 152 * scale);
    ctx.bezierCurveTo(128 * scale, 131 * scale, 113 * scale, 138 * scale, 92 * scale, 145 * scale);
    ctx.bezierCurveTo(57 * scale, 133 * scale, 57 * scale, 147 * scale, 44 * scale, 154 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[2], 4 * scale);
  }
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90 * scale, 95 * scale);
  ctx.bezierCurveTo(99 * scale, 82 * scale, 98 * scale, 58 * scale, 99 * scale, 40 * scale);
  ctx.bezierCurveTo(90 * scale, 38 * scale, 89 * scale, 34 * scale, 92 * scale, 17 * scale);
  ctx.bezierCurveTo(92 * scale, 5 * scale, 83 * scale, 16 * scale, 78 * scale, 29 * scale);
  ctx.bezierCurveTo(72 * scale, 59 * scale, 87 * scale, 81 * scale, 89 * scale, 87 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90 * scale, 86 * scale);
  ctx.bezierCurveTo(95 * scale, 74 * scale, 95 * scale, 62 * scale, 95 * scale, 43 * scale);
  ctx.bezierCurveTo(84 * scale, 37 * scale, 86 * scale, 34 * scale, 89 * scale, 16 * scale);
  ctx.bezierCurveTo(75 * scale, 29 * scale, 80 * scale, 58 * scale, 90 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(92 * scale, 117 * scale);
  ctx.bezierCurveTo(98 * scale, 87 * scale, 93 * scale, 78 * scale, 85 * scale, 76 * scale);
  ctx.bezierCurveTo(85.5 * scale, 79.5 * scale, 85.5 * scale, 79.5 * scale, 86 * scale, 83 * scale);
  ctx.bezierCurveTo(84 * scale, 85.5 * scale, 84 * scale, 85.5 * scale, 82 * scale, 88 * scale);
  ctx.bezierCurveTo(90 * scale, 93 * scale, 89 * scale, 100 * scale, 92 * scale, 117 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(92 * scale, 175 * scale);
  ctx.bezierCurveTo(95 * scale, 135 * scale, 98 * scale, 125 * scale, 109 * scale, 121 * scale);
  ctx.bezierCurveTo(106 * scale, 114 * scale, 104 * scale, 114 * scale, 102 * scale, 113 * scale);
  ctx.bezierCurveTo(103 * scale, 106 * scale, 104 * scale, 103 * scale, 107 * scale, 96 * scale);
  ctx.bezierCurveTo(74 * scale, 108 * scale, 86 * scale, 157 * scale, 92 * scale, 174 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(48 * scale, 169 * scale);
  ctx.bezierCurveTo(42 * scale, 187 * scale, 50 * scale, 193 * scale, 59 * scale, 198 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(136 * scale, 171 * scale);
  ctx.bezierCurveTo(139 * scale, 186 * scale, 138 * scale, 191 * scale, 124 * scale, 199 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 4 * scale);
  circle(ctx, 63 * scale, 180 * scale, 15.231546211727817 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 121 * scale, 181 * scale, 15.652475842498529 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 58 * scale, 175 * scale, 5.656854249492381 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 116 * scale, 175 * scale, 5.656854249492381 * scale);
  fill_path(ctx, color[2]);
  return can;
};

function create_hurt_fish1(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 185 * scale;
  can.height = 240 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 137 * scale);
  ctx.bezierCurveTo(60 * scale, 87 * scale, 68 * scale, 66 * scale, 92 * scale, 67 * scale);
  ctx.bezierCurveTo(115 * scale, 64 * scale, 129 * scale, 97 * scale, 137 * scale, 136 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(53 * scale, 181 * scale);
  ctx.bezierCurveTo(30 * scale, 164 * scale, 19 * scale, 150 * scale, 11 * scale, 136 * scale);
  ctx.bezierCurveTo(28 * scale, 121 * scale, 38 * scale, 132 * scale, 48 * scale, 150 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(63 * scale, 208 * scale);
  ctx.bezierCurveTo(75 * scale, 224 * scale, 86 * scale, 228 * scale, 93 * scale, 228 * scale);
  ctx.bezierCurveTo(104 * scale, 229 * scale, 116 * scale, 219 * scale, 122 * scale, 205 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130 * scale, 170 * scale);
  ctx.bezierCurveTo(146 * scale, 125 * scale, 156 * scale, 126 * scale, 173 * scale, 137 * scale);
  ctx.bezierCurveTo(167 * scale, 151 * scale, 143 * scale, 174 * scale, 131 * scale, 183 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39 * scale, 140 * scale);
  ctx.bezierCurveTo(75 * scale, 126 * scale, 113 * scale, 127 * scale, 143 * scale, 137 * scale);
  ctx.bezierCurveTo(141 * scale, 186 * scale, 130 * scale, 202 * scale, 113 * scale, 214 * scale);
  ctx.bezierCurveTo(85 * scale, 228 * scale, 56 * scale, 219 * scale, 48 * scale, 173 * scale);
  ctx.bezierCurveTo(40 * scale, 148 * scale, 43 * scale, 145 * scale, 39 * scale, 140 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90 * scale, 95 * scale);
  ctx.bezierCurveTo(99 * scale, 82 * scale, 98 * scale, 58 * scale, 99 * scale, 40 * scale);
  ctx.bezierCurveTo(90 * scale, 38 * scale, 89 * scale, 34 * scale, 92 * scale, 17 * scale);
  ctx.bezierCurveTo(92 * scale, 5 * scale, 83 * scale, 16 * scale, 78 * scale, 29 * scale);
  ctx.bezierCurveTo(72 * scale, 59 * scale, 87 * scale, 81 * scale, 89 * scale, 87 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90 * scale, 86 * scale);
  ctx.bezierCurveTo(95 * scale, 74 * scale, 95 * scale, 62 * scale, 95 * scale, 43 * scale);
  ctx.bezierCurveTo(84 * scale, 37 * scale, 86 * scale, 34 * scale, 89 * scale, 16 * scale);
  ctx.bezierCurveTo(75 * scale, 29 * scale, 80 * scale, 58 * scale, 90 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(92 * scale, 117 * scale);
  ctx.bezierCurveTo(98 * scale, 87 * scale, 93 * scale, 78 * scale, 85 * scale, 76 * scale);
  ctx.bezierCurveTo(85.5 * scale, 79.5 * scale, 85.5 * scale, 79.5 * scale, 86 * scale, 83 * scale);
  ctx.bezierCurveTo(84 * scale, 85.5 * scale, 84 * scale, 85.5 * scale, 82 * scale, 88 * scale);
  ctx.bezierCurveTo(90 * scale, 93 * scale, 89 * scale, 100 * scale, 92 * scale, 117 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(92 * scale, 175 * scale);
  ctx.bezierCurveTo(95 * scale, 135 * scale, 98 * scale, 125 * scale, 109 * scale, 121 * scale);
  ctx.bezierCurveTo(106 * scale, 114 * scale, 104 * scale, 114 * scale, 102 * scale, 113 * scale);
  ctx.bezierCurveTo(103 * scale, 106 * scale, 104 * scale, 103 * scale, 107 * scale, 96 * scale);
  ctx.bezierCurveTo(74 * scale, 108 * scale, 86 * scale, 157 * scale, 92 * scale, 174 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_fish2(scale, useless, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 185 * scale;
  can.height = 240 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58 * scale, 205 * scale);
  ctx.bezierCurveTo(74 * scale, 227 * scale, 83 * scale, 230 * scale, 92 * scale, 230 * scale);
  ctx.bezierCurveTo(101 * scale, 232 * scale, 119 * scale, 219 * scale, 122 * scale, 205 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(46 * scale, 151 * scale);
  ctx.bezierCurveTo(34 * scale, 126 * scale, 21 * scale, 130 * scale, 10 * scale, 139 * scale);
  ctx.bezierCurveTo(27 * scale, 168 * scale, 48 * scale, 180 * scale, 53 * scale, 184 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(122 * scale, 165 * scale);
  ctx.bezierCurveTo(143 * scale, 140 * scale, 154 * scale, 123 * scale, 172 * scale, 139 * scale);
  ctx.bezierCurveTo(169 * scale, 149 * scale, 147 * scale, 173 * scale, 126 * scale, 192 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(47 * scale, 129 * scale);
  ctx.bezierCurveTo(55 * scale, 90 * scale, 71 * scale, 66 * scale, 93 * scale, 69 * scale);
  ctx.bezierCurveTo(116 * scale, 70 * scale, 122 * scale, 88 * scale, 136 * scale, 127 * scale);
  ctx.bezierCurveTo(143 * scale, 137 * scale, 144 * scale, 137 * scale, 144 * scale, 142 * scale);
  ctx.bezierCurveTo(138 * scale, 199 * scale, 128 * scale, 206 * scale, 108 * scale, 219 * scale);
  ctx.bezierCurveTo(84 * scale, 228 * scale, 65 * scale, 224 * scale, 50 * scale, 191 * scale);
  ctx.bezierCurveTo(41 * scale, 161 * scale, 41 * scale, 157 * scale, 39 * scale, 144 * scale);
  ctx.bezierCurveTo(40 * scale, 140 * scale, 42 * scale, 137 * scale, 47 * scale, 129 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(47 * scale, 133 * scale);
  ctx.bezierCurveTo(65 * scale, 143 * scale, 74 * scale, 162 * scale, 70 * scale, 186 * scale);
  ctx.bezierCurveTo(71 * scale, 188.5 * scale, 71 * scale, 188.5 * scale, 72 * scale, 191 * scale);
  ctx.bezierCurveTo(81 * scale, 185.5 * scale, 81 * scale, 185.5 * scale, 90 * scale, 180 * scale);
  ctx.bezierCurveTo(99 * scale, 185 * scale, 99 * scale, 185 * scale, 108 * scale, 190 * scale);
  ctx.bezierCurveTo(110.5 * scale, 184.5 * scale, 110.5 * scale, 184.5 * scale, 113 * scale, 179 * scale);
  ctx.bezierCurveTo(110 * scale, 156 * scale, 121 * scale, 156 * scale, 142 * scale, 141 * scale);
  ctx.bezierCurveTo(137.5 * scale, 133 * scale, 137.5 * scale, 133 * scale, 133 * scale, 125 * scale);
  ctx.bezierCurveTo(116 * scale, 78 * scale, 112 * scale, 70 * scale, 91 * scale, 71 * scale);
  ctx.bezierCurveTo(62 * scale, 69 * scale, 59 * scale, 107 * scale, 48 * scale, 132 * scale);
  ctx.closePath();
  fill_path(ctx, color[4]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 86 * scale);
  ctx.bezierCurveTo(101 * scale, 79 * scale, 99 * scale, 56 * scale, 100 * scale, 37 * scale);
  ctx.bezierCurveTo(90 * scale, 34 * scale, 90 * scale, 27 * scale, 93 * scale, 13 * scale);
  ctx.bezierCurveTo(96 * scale, 0 * scale, 85 * scale, 13 * scale, 82 * scale, 26 * scale);
  ctx.bezierCurveTo(78 * scale, 43 * scale, 89 * scale, 74 * scale, 93 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(94 * scale, 86 * scale);
  ctx.bezierCurveTo(120 * scale, 88 * scale, 132 * scale, 109 * scale, 122 * scale, 128 * scale);
  ctx.bezierCurveTo(118 * scale, 139 * scale, 101 * scale, 146 * scale, 90 * scale, 143 * scale);
  ctx.bezierCurveTo(57 * scale, 141 * scale, 49 * scale, 109 * scale, 68 * scale, 94 * scale);
  ctx.bezierCurveTo(78 * scale, 85 * scale, 90 * scale, 86 * scale, 95 * scale, 86 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(91 * scale, 178 * scale);
  ctx.bezierCurveTo(78 * scale, 136 * scale, 81 * scale, 88 * scale, 93 * scale, 87 * scale);
  ctx.bezierCurveTo(101 * scale, 84 * scale, 94 * scale, 97 * scale, 94 * scale, 107 * scale);
  ctx.bezierCurveTo(91 * scale, 112 * scale, 92 * scale, 117 * scale, 94 * scale, 121 * scale);
  ctx.bezierCurveTo(98 * scale, 126 * scale, 102 * scale, 128 * scale, 97 * scale, 135 * scale);
  ctx.bezierCurveTo(92 * scale, 140 * scale, 93 * scale, 160 * scale, 91 * scale, 179 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(20 * scale, 151 * scale);
  ctx.bezierCurveTo(22 * scale, 147 * scale, 22 * scale, 147 * scale, 24 * scale, 143 * scale);
  ctx.bezierCurveTo(27 * scale, 144.5 * scale, 27 * scale, 144.5 * scale, 30 * scale, 146 * scale);
  ctx.bezierCurveTo(31 * scale, 143 * scale, 31 * scale, 143 * scale, 32 * scale, 140 * scale);
  ctx.bezierCurveTo(35 * scale, 140.5 * scale, 35 * scale, 140.5 * scale, 38 * scale, 141 * scale);
  ctx.bezierCurveTo(31 * scale, 132 * scale, 29 * scale, 131 * scale, 22 * scale, 132 * scale);
  ctx.bezierCurveTo(14 * scale, 135 * scale, 13 * scale, 135 * scale, 11 * scale, 138 * scale);
  ctx.bezierCurveTo(15.5 * scale, 144.5 * scale, 15.5 * scale, 144.5 * scale, 20 * scale, 151 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  circle(ctx, 61 * scale, 183 * scale, 16.15549442140351 * scale);
  fill_path(ctx, color[7]);
  circle(ctx, 121 * scale, 184 * scale, 14.866068747318506 * scale);
  fill_path(ctx, color[7]);
  circle(ctx, 57 * scale, 178 * scale, 5.656854249492381 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 116 * scale, 177 * scale, 5.830951894845301 * scale);
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(162 * scale, 152 * scale);
  ctx.bezierCurveTo(161.5 * scale, 148 * scale, 161.5 * scale, 148 * scale, 161 * scale, 144 * scale);
  ctx.bezierCurveTo(157.5 * scale, 145 * scale, 157.5 * scale, 145 * scale, 154 * scale, 146 * scale);
  ctx.bezierCurveTo(153.5 * scale, 143 * scale, 153.5 * scale, 143 * scale, 153 * scale, 140 * scale);
  ctx.bezierCurveTo(149 * scale, 140.5 * scale, 149 * scale, 140.5 * scale, 145 * scale, 141 * scale);
  ctx.bezierCurveTo(150 * scale, 132 * scale, 161 * scale, 131 * scale, 170 * scale, 138 * scale);
  ctx.bezierCurveTo(173 * scale, 141 * scale, 165 * scale, 150 * scale, 162 * scale, 150 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(106 * scale, 110 * scale);
  ctx.bezierCurveTo(104 * scale, 98 * scale, 112 * scale, 91 * scale, 118 * scale, 101 * scale);
  ctx.bezierCurveTo(122 * scale, 115 * scale, 121 * scale, 119 * scale, 117 * scale, 124 * scale);
  ctx.bezierCurveTo(112 * scale, 129 * scale, 107 * scale, 124 * scale, 106 * scale, 112 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(64 * scale, 106 * scale);
  ctx.bezierCurveTo(66 * scale, 97 * scale, 72 * scale, 89 * scale, 76 * scale, 98 * scale);
  ctx.bezierCurveTo(78 * scale, 106 * scale, 79 * scale, 118 * scale, 72 * scale, 126 * scale);
  ctx.bezierCurveTo(65 * scale, 130 * scale, 63 * scale, 117 * scale, 64 * scale, 108 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  return can;
};

function create_food_plant(scale) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 200;
  var h = scale * 200;
  can.width = w;
  can.height = h;
  var img = create_plant(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
  ctx.drawImage(img, 10, 10);
  var img = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  ctx.drawImage(img, 21, 20);
  var img = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  ctx.drawImage(img, 38, 28);
  var img = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  ctx.drawImage(img, 15, 37);
  var img = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  ctx.drawImage(img, 32, 45);
  return can;
};

function create_gear(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 100;
  var h = scale * 100;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  var wr = scale * 5;
  var hr = scale * 28;
  var wr2 = wr / 2;
  var hr2 = hr / 2;
  ctx.translate(x, y);
  for (var i = 0; i < 4; i++) {
    round_rect(ctx, -wr2, -hr2, wr, hr, scale * 2);
    ctx.rotate(Math.PI / 4);
    fill_path(ctx, color);
  }
  ctx.arc(0, 0, 10 * scale, 0, Math.PI * 2);
  fill_path(ctx, color);
  ctx.globalCompositeOperation = "destination-out";
  circle(ctx, 0, 0, scale * 4);
  ctx.fill();
  return can;
};

function create_gear_option(scale, color, t) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 32;
  var h = scale * 32;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  var wr = scale * 5;
  var hr = scale * 28;
  var wr2 = wr / 2;
  var hr2 = hr / 2;
  ctx.translate(0 * scale, 0 * scale);
  ctx.translate(x, y);
  if (t == 1) {
    circle(ctx, 0, 0, 10 * scale, 0);
    fill_path(ctx, color[2], color[2], 3 * scale);
    for (var i = 0; i < 4; i++) {
      round_rect(ctx, -wr2, -hr2, wr, hr, scale * 2);
      ctx.rotate(Math.PI / 4);
      fill_path(ctx, color[2], color[2], 4 * scale);
    }
  }
  circle(ctx, 0, 0, 10 * scale, 0);
  fill_path(ctx, color[0], color[1], 1.5 * scale);
  for (var i = 0; i < 4; i++) {
    round_rect(ctx, -wr2, -hr2, wr, hr, scale * 2);
    ctx.rotate(Math.PI / 4);
    fill_path(ctx, color[0], color[1], 1.5 * scale);
  }
  circle(ctx, 0, 0, 10 * scale, 0);
  fill_path(ctx, color[0]);
  circle(ctx, 0, 0, 4 * scale, 0);
  fill_path(ctx, color[2], color[1], 1.5 * scale);
  ctx.globalCompositeOperation = "destination-out";
  circle(ctx, 0, 0, 4 * scale, 0);
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.globalCompositeOperation = "source-over";
  circle(ctx, 0, 0, 4 * scale, 0);
  fill_path(ctx, undefined, color[1], 2 * scale);
  return can;
};

function create_minimap_object(ctx, scale, color, t, r, max, min) {
  if (min === undefined)
    min = 0;

  for (var k = (max == -1) ? 0 : max; k >= min; k--) {
    for (var i = 0; i < 200; i++) {
      for (var j = 0; j < 200; j++) {
        var tile = MAP.tiles[j][i];
        if (!tile || !tile[t])
          continue;

        if (max == -1)
          var o = tile[t];
        else
          var o = tile[t][k];
        for (var l = 0; o && (l < o.length); l++) {
          var object = o[l];
          ctx.fillStyle = color;
          circle(ctx, (object.x * scale) * 0.0095, (object.y * scale) * 0.0095, r * scale);
          ctx.fill();
        }
      }
    }
  }
};

function create_minimap(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 200 * scale;
  can.height = 200 * scale;
  ctx.translate(9 * scale, 12 * scale);
  ctx.fillStyle = color[0];
  ctx.fillRect(-2, -3, can.width, can.height);
  ctx.fillStyle = color[9];
  ctx.fillRect(0, 0, can.width, can.height);
  ctx.fillStyle = color[17];
  ctx.fillRect(0, 0, can.width, can.height / 2.1);
  ctx.fillStyle = color[26];
  ctx.fillRect(can.width / 1.77, can.height / 2.1, can.width / 2.1, can.height / 2.1);
  ctx.fillStyle = color[28];
  ctx.fillRect(can.width / 1.77, can.height / 2.1, 5, can.height / 2.1);
  create_minimap_object(ctx, scale, color[17], "so", 3, 6, 0);
  create_minimap_object(ctx, scale, color[28], "isl", 6, 2, 2);
  create_minimap_object(ctx, scale, color[28], "isl", 6, 1, 1);
  create_minimap_object(ctx, scale, color[28], "isl", 6, 0, 0);
  create_minimap_object(ctx, scale, color[5], "plm", 2, 2, 2);
  create_minimap_object(ctx, scale, color[5], "plm", 2, 1, 1);
  create_minimap_object(ctx, scale, color[5], "plm", 2, 0, 0);
  create_minimap_object(ctx, scale, color[5], "t", 2, 5, 4);
  create_minimap_object(ctx, scale, color[6], "t", 3, 3, 2);
  create_minimap_object(ctx, scale, color[7], "t", 4, 1, 0);
  create_minimap_object(ctx, scale, color[8], "b", 3, 3, 2);
  create_minimap_object(ctx, scale, color[9], "b", 4, 1, 0);
  create_minimap_object(ctx, scale, color[2], "s", 2, 2, 2);
  create_minimap_object(ctx, scale, color[3], "s", 3, 1, 1);
  create_minimap_object(ctx, scale, color[4], "s", 4, 0, 0);
  create_minimap_object(ctx, scale, color[10], "g", 2, 2, 2);
  create_minimap_object(ctx, scale, color[11], "g", 3, 1, 1);
  create_minimap_object(ctx, scale, color[12], "g", 4, 0, 0);
  create_minimap_object(ctx, scale, color[1], "p", 4, -1);
  create_minimap_object(ctx, scale, color[25], "dg", 3, 6, 0);
  create_minimap_object(ctx, scale, color[27], "cs", 2, 2, 2);
  create_minimap_object(ctx, scale, color[27], "cs", 2, 1, 1);
  create_minimap_object(ctx, scale, color[27], "cs", 2, 0, 0);
  create_minimap_object(ctx, scale, color[19], "f", 2, 2, 2);
  create_minimap_object(ctx, scale, color[20], "f", 3, 1, 1);
  create_minimap_object(ctx, scale, color[21], "f", 4, 0, 0);
  create_minimap_object(ctx, scale, color[22], "gw", 2, 2, 2);
  create_minimap_object(ctx, scale, color[22], "gw", 3, 1, 1);
  create_minimap_object(ctx, scale, color[22], "gw", 4, 0, 0);
  create_minimap_object(ctx, scale, color[23], "dw", 3, 1, 1);
  create_minimap_object(ctx, scale, color[23], "dw", 4, 0, 0);
  create_minimap_object(ctx, scale, color[23], "dw", 2, 2, 2);
  create_minimap_object(ctx, scale, color[23], "d", 3, 1, 1);
  create_minimap_object(ctx, scale, color[23], "d", 4, 0, 0);
  create_minimap_object(ctx, scale, color[23], "d", 2, 2, 2);
  create_minimap_object(ctx, scale, color[24], "a", 2, 2, 2);
  create_minimap_object(ctx, scale, color[24], "a", 3, 1, 1);
  create_minimap_object(ctx, scale, color[24], "a", 4, 0, 0);
  create_minimap_object(ctx, scale, color[30], "l", 4, 2, 2);
  create_minimap_object(ctx, scale, color[30], "l", 4, 1, 1);
  create_minimap_object(ctx, scale, color[30], "l", 4, 0, 0);
  circle(ctx, 0, 0, 0);
  ctx.globalCompositeOperation = "destination-out";
  ctx.translate(-9 * scale, -4 * scale);
  ctx.rect(5 * scale, 0, can.width * scale, can.height * scale, 10 * scale);
  ctx.lineWidth = 7 * scale;
  ctx.strokeStyle = color[16];
  ctx.stroke();
  return can;
};

function create_workbench(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 125;
  var h = scale * 95;
  var w2 = w / 2;
  var h2 = h / 2;
  var round = scale * 10;
  var shadow = scale * 8;
  var ww = scale * 112;
  var hw = scale * 82;
  var ww2 = ww / 2;
  var hw2 = hw / 2;
  var width = scale * 4;
  can.width = w;
  can.height = h;
  ctx.translate(w2 - (4 * scale), h2 + (4 * scale));
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  round_rect(ctx, -ww2, -hw2, ww, hw, round);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -shadow);
  round_rect(ctx, -ww2, -hw2, ww, hw, round);
  fill_path(ctx, color[1], color[2], width);
  var w = 55 * scale;
  var h = 45 * scale;
  var round = 5;
  ctx.translate(-40 * scale, -30 * scale);
  round_rect(ctx, 0, 0, w, h, round);
  fill_path(ctx, color[3]);
  var img = create_gear(0.7 * scale, color[3]);
  ctx.drawImage(img, 45 * scale, -25 * scale);
  var img = create_gear(0.7 * scale, color[3]);
  ctx.drawImage(img, 45 * scale, 15 * scale);
  var img = create_gear(1.2 * scale, color[3]);
  ctx.drawImage(img, 28 * scale, -30 * scale);
  var w = 15 * scale;
  var h = 70 * scale;
  var round = 5 * scale;
  ctx.translate(78 * scale, -5 * scale);
  round_rect(ctx, 0, 0, w, h, round);
  fill_path(ctx, color[4]);
  var w = 9 * scale;
  var h = 50 * scale;
  var round = 3 * scale;
  ctx.translate(-20 * scale, 20 * scale);
  ctx.rotate(Math.PI / 5);
  ctx.globalAlpha = 0.6;
  round_rect(ctx, 0, 0, w, h, round);
  fill_path(ctx, color[5]);
  ctx.translate(-20 * scale, 29 * scale);
  ctx.rotate(Math.PI / 5);
  ctx.globalAlpha = 0.6;
  ctx.beginPath();
  ctx.lineJoin = "round";
  ctx.moveTo(0, 0);
  ctx.lineTo(0, 30 * scale);
  ctx.lineTo(30 * scale, 30 * scale);
  ctx.closePath();
  fill_path(ctx, null, color[5], 8 * scale);
  return can;
};

function create_rabbit(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 85;
  var h = scale * 115;
  var shadow = scale * 6;
  var width = scale * 4;
  can.width = w;
  can.height = h;
  ctx.translate(-130 * scale, (-60 * scale) + shadow);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.bezierCurveTo(190 * scale, 87 * scale, 201 * scale, 59 * scale, 208 * scale, 64 * scale);
  ctx.bezierCurveTo(213 * scale, 68 * scale, 204 * scale, 93 * scale, 195 * scale, 109 * scale);
  ctx.bezierCurveTo(195 * scale, 109 * scale, 202 * scale, 124 * scale, 191 * scale, 141 * scale);
  ctx.bezierCurveTo(182 * scale, 151 * scale, 164 * scale, 155 * scale, 148 * scale, 144 * scale);
  ctx.bezierCurveTo(136 * scale, 135 * scale, 138 * scale, 111 * scale, 145 * scale, 104 * scale);
  ctx.bezierCurveTo(140 * scale, 92 * scale, 131 * scale, 67 * scale, 138 * scale, 63 * scale);
  ctx.bezierCurveTo(145 * scale, 61 * scale, 153 * scale, 82 * scale, 155 * scale, 96 * scale);
  ctx.bezierCurveTo(167 * scale, 91 * scale, 178 * scale, 92 * scale, 187 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, -shadow);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.bezierCurveTo(190 * scale, 87 * scale, 201 * scale, 59 * scale, 208 * scale, 64 * scale);
  ctx.bezierCurveTo(213 * scale, 68 * scale, 204 * scale, 93 * scale, 195 * scale, 109 * scale);
  ctx.bezierCurveTo(195 * scale, 109 * scale, 202 * scale, 124 * scale, 191 * scale, 141 * scale);
  ctx.bezierCurveTo(182 * scale, 151 * scale, 164 * scale, 155 * scale, 148 * scale, 144 * scale);
  ctx.bezierCurveTo(136 * scale, 135 * scale, 138 * scale, 111 * scale, 145 * scale, 104 * scale);
  ctx.bezierCurveTo(140 * scale, 92 * scale, 131 * scale, 67 * scale, 138 * scale, 63 * scale);
  ctx.bezierCurveTo(145 * scale, 61 * scale, 153 * scale, 82 * scale, 155 * scale, 96 * scale);
  ctx.bezierCurveTo(167 * scale, 91 * scale, 178 * scale, 92 * scale, 187 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4);
  var x_eye = scale * 155;
  var y_eye = scale * 133;
  var r_eye = scale * 10;
  var r_pupil1 = scale * 3;
  var x_pupil = x_eye + (scale * -3);
  var y_pupil = y_eye + (scale * -5);
  ctx.save();
  ctx.translate(x_eye, y_eye);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r_eye);
  fill_path(ctx, color[3]);
  ctx.restore();
  ctx.save();
  ctx.translate(x_pupil, y_pupil);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r_pupil1);
  fill_path(ctx, color[4]);
  ctx.restore();
  ctx.save();
  ctx.translate(x_eye + (27 * scale), y_eye);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r_eye);
  fill_path(ctx, color[3]);
  ctx.restore();
  ctx.save();
  ctx.translate((27 * scale) + x_pupil, y_pupil);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r_pupil1);
  fill_path(ctx, color[4]);
  return can;
};

function create_hurt_rabbit(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 85;
  var h = scale * 115;
  var shadow = scale * 6;
  var width = scale * 4;
  can.width = w;
  can.height = h;
  ctx.translate(-130 * scale, -60 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.bezierCurveTo(190 * scale, 87 * scale, 201 * scale, 59 * scale, 208 * scale, 64 * scale);
  ctx.bezierCurveTo(213 * scale, 68 * scale, 204 * scale, 93 * scale, 195 * scale, 109 * scale);
  ctx.bezierCurveTo(195 * scale, 109 * scale, 202 * scale, 124 * scale, 191 * scale, 141 * scale);
  ctx.bezierCurveTo(182 * scale, 151 * scale, 164 * scale, 155 * scale, 148 * scale, 144 * scale);
  ctx.bezierCurveTo(136 * scale, 135 * scale, 138 * scale, 111 * scale, 145 * scale, 104 * scale);
  ctx.bezierCurveTo(140 * scale, 92 * scale, 131 * scale, 67 * scale, 138 * scale, 63 * scale);
  ctx.bezierCurveTo(145 * scale, 61 * scale, 153 * scale, 82 * scale, 155 * scale, 96 * scale);
  ctx.bezierCurveTo(167 * scale, 91 * scale, 178 * scale, 92 * scale, 187 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color, color, width);
  return can;
};

function create_hurt_wolf(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 188 * scale;
  can.height = 190 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(33.00567626953125 * scale, 95.44320678710938 * scale);
  ctx.bezierCurveTo(42.00567626953125 * scale, 87.44320678710938 * scale, 48.00567626953125 * scale, 51.443206787109375 * scale, 74.00567626953125 * scale, 47.443206787109375 * scale);
  ctx.bezierCurveTo(100.00567626953125 * scale, 42.443206787109375 * scale, 118.00567626953125 * scale, 49.443206787109375 * scale, 131.00567626953125 * scale, 55.443206787109375 * scale);
  ctx.bezierCurveTo(140.00567626953125 * scale, 70.44320678710938 * scale, 145.00567626953125 * scale, 87.44320678710938 * scale, 152.00567626953125 * scale, 94.44320678710938 * scale);
  ctx.bezierCurveTo(149.00567626953125 * scale, 99.44320678710938 * scale, 147.00567626953125 * scale, 98.44320678710938 * scale, 141.00567626953125 * scale, 101.44320678710938 * scale);
  ctx.bezierCurveTo(147.00567626953125 * scale, 108.44320678710938 * scale, 147.00567626953125 * scale, 111.44320678710938 * scale, 147.00567626953125 * scale, 112.44320678710938 * scale);
  ctx.bezierCurveTo(143.00567626953125 * scale, 112.44320678710938 * scale, 141.00567626953125 * scale, 112.44320678710938 * scale, 137.00567626953125 * scale, 111.44320678710938 * scale);
  ctx.bezierCurveTo(138.00567626953125 * scale, 117.44320678710938 * scale, 138.00567626953125 * scale, 120.44320678710938 * scale, 138.00567626953125 * scale, 124.44320678710938 * scale);
  ctx.bezierCurveTo(125.00567626953125 * scale, 107.44320678710938 * scale, 121.00567626953125 * scale, 124.44320678710938 * scale, 110.00567626953125 * scale, 141.44320678710938 * scale);
  ctx.bezierCurveTo(102.00567626953125 * scale, 158.44320678710938 * scale, 89.00567626953125 * scale, 158.44320678710938 * scale, 80.00567626953125 * scale, 144.44320678710938 * scale);
  ctx.bezierCurveTo(61.00567626953125 * scale, 111.44320678710938 * scale, 56.00567626953125 * scale, 117.44320678710938 * scale, 48.00567626953125 * scale, 120.44320678710938 * scale);
  ctx.bezierCurveTo(46.00567626953125 * scale, 118.44320678710938 * scale, 47.00567626953125 * scale, 112.44320678710938 * scale, 48.00567626953125 * scale, 107.44320678710938 * scale);
  ctx.bezierCurveTo(43.00567626953125 * scale, 111.44320678710938 * scale, 40.00567626953125 * scale, 111.44320678710938 * scale, 37.00567626953125 * scale, 110.44320678710938 * scale);
  ctx.bezierCurveTo(39.50567626953125 * scale, 104.94320678710938 * scale, 39.50567626953125 * scale, 104.94320678710938 * scale, 42.00567626953125 * scale, 99.44320678710938 * scale);
  ctx.bezierCurveTo(33.00567626953125 * scale, 99.44320678710938 * scale, 33.00567626953125 * scale, 98.44320678710938 * scale, 33.00567626953125 * scale, 96.44320678710938 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(51.00567626953125 * scale, 72.53409576416016 * scale);
  ctx.bezierCurveTo(48.00567626953125 * scale, 56.534095764160156 * scale, 48.00567626953125 * scale, 49.534095764160156 * scale, 54.00567626953125 * scale, 35.534095764160156 * scale);
  ctx.bezierCurveTo(58.00567626953125 * scale, 26.534095764160156 * scale, 65.00567626953125 * scale, 27.534095764160156 * scale, 73.00567626953125 * scale, 40.534095764160156 * scale);
  ctx.bezierCurveTo(81.00567626953125 * scale, 49.534095764160156 * scale, 82.00567626953125 * scale, 50.534095764160156 * scale, 83.00567626953125 * scale, 51.534095764160156 * scale);
  ctx.bezierCurveTo(77.00567626953125 * scale, 71.53409576416016 * scale, 64.00567626953125 * scale, 75.53409576416016 * scale, 51.00567626953125 * scale, 72.53409576416016 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105.00567626953125 * scale, 50.53410339355469 * scale);
  ctx.bezierCurveTo(112.00567626953125 * scale, 48.53410339355469 * scale, 125.00567626953125 * scale, 21.534103393554688 * scale, 132.00567626953125 * scale, 33.53410339355469 * scale);
  ctx.bezierCurveTo(138.00567626953125 * scale, 42.53410339355469 * scale, 140.00567626953125 * scale, 64.53410339355469 * scale, 136.00567626953125 * scale, 75.53410339355469 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 2 * scale);
  return can;
};

function create_wolf(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 188 * scale;
  can.height = 190 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(33.00567626953125 * scale, 95.44320678710938 * scale);
  ctx.bezierCurveTo(42.00567626953125 * scale, 87.44320678710938 * scale, 48.00567626953125 * scale, 51.443206787109375 * scale, 74.00567626953125 * scale, 47.443206787109375 * scale);
  ctx.bezierCurveTo(100.00567626953125 * scale, 42.443206787109375 * scale, 118.00567626953125 * scale, 49.443206787109375 * scale, 131.00567626953125 * scale, 55.443206787109375 * scale);
  ctx.bezierCurveTo(140.00567626953125 * scale, 70.44320678710938 * scale, 145.00567626953125 * scale, 87.44320678710938 * scale, 152.00567626953125 * scale, 94.44320678710938 * scale);
  ctx.bezierCurveTo(149.00567626953125 * scale, 99.44320678710938 * scale, 147.00567626953125 * scale, 98.44320678710938 * scale, 141.00567626953125 * scale, 101.44320678710938 * scale);
  ctx.bezierCurveTo(147.00567626953125 * scale, 108.44320678710938 * scale, 147.00567626953125 * scale, 111.44320678710938 * scale, 147.00567626953125 * scale, 112.44320678710938 * scale);
  ctx.bezierCurveTo(143.00567626953125 * scale, 112.44320678710938 * scale, 141.00567626953125 * scale, 112.44320678710938 * scale, 137.00567626953125 * scale, 111.44320678710938 * scale);
  ctx.bezierCurveTo(138.00567626953125 * scale, 117.44320678710938 * scale, 138.00567626953125 * scale, 120.44320678710938 * scale, 138.00567626953125 * scale, 124.44320678710938 * scale);
  ctx.bezierCurveTo(125.00567626953125 * scale, 107.44320678710938 * scale, 121.00567626953125 * scale, 124.44320678710938 * scale, 110.00567626953125 * scale, 141.44320678710938 * scale);
  ctx.bezierCurveTo(102.00567626953125 * scale, 158.44320678710938 * scale, 89.00567626953125 * scale, 158.44320678710938 * scale, 80.00567626953125 * scale, 144.44320678710938 * scale);
  ctx.bezierCurveTo(61.00567626953125 * scale, 111.44320678710938 * scale, 56.00567626953125 * scale, 117.44320678710938 * scale, 48.00567626953125 * scale, 120.44320678710938 * scale);
  ctx.bezierCurveTo(46.00567626953125 * scale, 118.44320678710938 * scale, 47.00567626953125 * scale, 112.44320678710938 * scale, 48.00567626953125 * scale, 107.44320678710938 * scale);
  ctx.bezierCurveTo(43.00567626953125 * scale, 111.44320678710938 * scale, 40.00567626953125 * scale, 111.44320678710938 * scale, 37.00567626953125 * scale, 110.44320678710938 * scale);
  ctx.bezierCurveTo(39.50567626953125 * scale, 104.94320678710938 * scale, 39.50567626953125 * scale, 104.94320678710938 * scale, 42.00567626953125 * scale, 99.44320678710938 * scale);
  ctx.bezierCurveTo(33.00567626953125 * scale, 99.44320678710938 * scale, 33.00567626953125 * scale, 98.44320678710938 * scale, 33.00567626953125 * scale, 96.44320678710938 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(60.00567626953125 * scale, 99.35227966308594 * scale);
  ctx.bezierCurveTo(70.00567626953125 * scale, 82.35227966308594 * scale, 85.00567626953125 * scale, 86.35227966308594 * scale, 87.00567626953125 * scale, 97.35227966308594 * scale);
  ctx.bezierCurveTo(89.00567626953125 * scale, 101.35227966308594 * scale, 88.00567626953125 * scale, 105.35227966308594 * scale, 87.00567626953125 * scale, 110.35227966308594 * scale);
  ctx.bezierCurveTo(89.00567626953125 * scale, 111.35227966308594 * scale, 91.00567626953125 * scale, 112.35227966308594 * scale, 93.00567626953125 * scale, 115.35227966308594 * scale);
  ctx.bezierCurveTo(96.00567626953125 * scale, 111.35227966308594 * scale, 99.00567626953125 * scale, 111.35227966308594 * scale, 100.00567626953125 * scale, 110.35227966308594 * scale);
  ctx.bezierCurveTo(98.00567626953125 * scale, 92.35227966308594 * scale, 103.00567626953125 * scale, 86.35227966308594 * scale, 113.00567626953125 * scale, 89.35227966308594 * scale);
  ctx.bezierCurveTo(122.00567626953125 * scale, 92.35227966308594 * scale, 123.00567626953125 * scale, 94.35227966308594 * scale, 126.00567626953125 * scale, 98.35227966308594 * scale);
  ctx.bezierCurveTo(124.00567626953125 * scale, 102.35227966308594 * scale, 123.00567626953125 * scale, 103.35227966308594 * scale, 121.00567626953125 * scale, 104.35227966308594 * scale);
  ctx.bezierCurveTo(124.00567626953125 * scale, 105.35227966308594 * scale, 126.00567626953125 * scale, 107.35227966308594 * scale, 129.00567626953125 * scale, 111.35227966308594 * scale);
  ctx.bezierCurveTo(115.00567626953125 * scale, 122.35227966308594 * scale, 113.00567626953125 * scale, 145.35227966308594 * scale, 100.00567626953125 * scale, 152.35227966308594 * scale);
  ctx.bezierCurveTo(91.00567626953125 * scale, 158.35227966308594 * scale, 83.00567626953125 * scale, 149.35227966308594 * scale, 76.00567626953125 * scale, 138.35227966308594 * scale);
  ctx.bezierCurveTo(67.00567626953125 * scale, 114.35227966308594 * scale, 63.00567626953125 * scale, 113.35227966308594 * scale, 59.00567626953125 * scale, 111.35227966308594 * scale);
  ctx.bezierCurveTo(62.00567626953125 * scale, 107.35227966308594 * scale, 64.00567626953125 * scale, 105.35227966308594 * scale, 66.00567626953125 * scale, 104.35227966308594 * scale);
  ctx.bezierCurveTo(63.00567626953125 * scale, 100.35227966308594 * scale, 62.00567626953125 * scale, 100.35227966308594 * scale, 60.00567626953125 * scale, 99.35227966308594 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(51.00567626953125 * scale, 72.53409576416016 * scale);
  ctx.bezierCurveTo(48.00567626953125 * scale, 56.534095764160156 * scale, 48.00567626953125 * scale, 49.534095764160156 * scale, 54.00567626953125 * scale, 35.534095764160156 * scale);
  ctx.bezierCurveTo(58.00567626953125 * scale, 26.534095764160156 * scale, 65.00567626953125 * scale, 27.534095764160156 * scale, 73.00567626953125 * scale, 40.534095764160156 * scale);
  ctx.bezierCurveTo(81.00567626953125 * scale, 49.534095764160156 * scale, 82.00567626953125 * scale, 50.534095764160156 * scale, 83.00567626953125 * scale, 51.534095764160156 * scale);
  ctx.bezierCurveTo(77.00567626953125 * scale, 71.53409576416016 * scale, 64.00567626953125 * scale, 75.53409576416016 * scale, 51.00567626953125 * scale, 72.53409576416016 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105.00567626953125 * scale, 50.53410339355469 * scale);
  ctx.bezierCurveTo(112.00567626953125 * scale, 48.53410339355469 * scale, 125.00567626953125 * scale, 21.534103393554688 * scale, 132.00567626953125 * scale, 33.53410339355469 * scale);
  ctx.bezierCurveTo(138.00567626953125 * scale, 42.53410339355469 * scale, 140.00567626953125 * scale, 64.53410339355469 * scale, 136.00567626953125 * scale, 75.53410339355469 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 2 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(33.00567626953125 * scale, 95.44320678710938 * scale);
  ctx.bezierCurveTo(42.00567626953125 * scale, 87.44320678710938 * scale, 48.00567626953125 * scale, 51.443206787109375 * scale, 74.00567626953125 * scale, 47.443206787109375 * scale);
  ctx.bezierCurveTo(100.00567626953125 * scale, 42.443206787109375 * scale, 118.00567626953125 * scale, 49.443206787109375 * scale, 131.00567626953125 * scale, 55.443206787109375 * scale);
  ctx.bezierCurveTo(140.00567626953125 * scale, 70.44320678710938 * scale, 145.00567626953125 * scale, 87.44320678710938 * scale, 152.00567626953125 * scale, 94.44320678710938 * scale);
  ctx.bezierCurveTo(149.00567626953125 * scale, 99.44320678710938 * scale, 147.00567626953125 * scale, 98.44320678710938 * scale, 141.00567626953125 * scale, 101.44320678710938 * scale);
  ctx.bezierCurveTo(147.00567626953125 * scale, 108.44320678710938 * scale, 147.00567626953125 * scale, 111.44320678710938 * scale, 147.00567626953125 * scale, 112.44320678710938 * scale);
  ctx.bezierCurveTo(143.00567626953125 * scale, 112.44320678710938 * scale, 141.00567626953125 * scale, 112.44320678710938 * scale, 137.00567626953125 * scale, 111.44320678710938 * scale);
  ctx.bezierCurveTo(138.00567626953125 * scale, 117.44320678710938 * scale, 138.00567626953125 * scale, 120.44320678710938 * scale, 138.00567626953125 * scale, 124.44320678710938 * scale);
  ctx.bezierCurveTo(125.00567626953125 * scale, 107.44320678710938 * scale, 121.00567626953125 * scale, 124.44320678710938 * scale, 110.00567626953125 * scale, 141.44320678710938 * scale);
  ctx.bezierCurveTo(102.00567626953125 * scale, 158.44320678710938 * scale, 89.00567626953125 * scale, 158.44320678710938 * scale, 80.00567626953125 * scale, 144.44320678710938 * scale);
  ctx.bezierCurveTo(61.00567626953125 * scale, 111.44320678710938 * scale, 56.00567626953125 * scale, 117.44320678710938 * scale, 48.00567626953125 * scale, 120.44320678710938 * scale);
  ctx.bezierCurveTo(46.00567626953125 * scale, 118.44320678710938 * scale, 47.00567626953125 * scale, 112.44320678710938 * scale, 48.00567626953125 * scale, 107.44320678710938 * scale);
  ctx.bezierCurveTo(43.00567626953125 * scale, 111.44320678710938 * scale, 40.00567626953125 * scale, 111.44320678710938 * scale, 37.00567626953125 * scale, 110.44320678710938 * scale);
  ctx.bezierCurveTo(39.50567626953125 * scale, 104.94320678710938 * scale, 39.50567626953125 * scale, 104.94320678710938 * scale, 42.00567626953125 * scale, 99.44320678710938 * scale);
  ctx.bezierCurveTo(33.00567626953125 * scale, 99.44320678710938 * scale, 33.00567626953125 * scale, 98.44320678710938 * scale, 33.00567626953125 * scale, 96.44320678710938 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(60.00567626953125 * scale, 99.35227966308594 * scale);
  ctx.bezierCurveTo(70.00567626953125 * scale, 82.35227966308594 * scale, 85.00567626953125 * scale, 86.35227966308594 * scale, 87.00567626953125 * scale, 97.35227966308594 * scale);
  ctx.bezierCurveTo(89.00567626953125 * scale, 101.35227966308594 * scale, 88.00567626953125 * scale, 105.35227966308594 * scale, 87.00567626953125 * scale, 110.35227966308594 * scale);
  ctx.bezierCurveTo(89.00567626953125 * scale, 111.35227966308594 * scale, 91.00567626953125 * scale, 112.35227966308594 * scale, 93.00567626953125 * scale, 115.35227966308594 * scale);
  ctx.bezierCurveTo(96.00567626953125 * scale, 111.35227966308594 * scale, 99.00567626953125 * scale, 111.35227966308594 * scale, 100.00567626953125 * scale, 110.35227966308594 * scale);
  ctx.bezierCurveTo(98.00567626953125 * scale, 92.35227966308594 * scale, 103.00567626953125 * scale, 86.35227966308594 * scale, 113.00567626953125 * scale, 89.35227966308594 * scale);
  ctx.bezierCurveTo(122.00567626953125 * scale, 92.35227966308594 * scale, 123.00567626953125 * scale, 94.35227966308594 * scale, 126.00567626953125 * scale, 98.35227966308594 * scale);
  ctx.bezierCurveTo(124.00567626953125 * scale, 102.35227966308594 * scale, 123.00567626953125 * scale, 103.35227966308594 * scale, 121.00567626953125 * scale, 104.35227966308594 * scale);
  ctx.bezierCurveTo(124.00567626953125 * scale, 105.35227966308594 * scale, 126.00567626953125 * scale, 107.35227966308594 * scale, 129.00567626953125 * scale, 111.35227966308594 * scale);
  ctx.bezierCurveTo(115.00567626953125 * scale, 122.35227966308594 * scale, 113.00567626953125 * scale, 145.35227966308594 * scale, 100.00567626953125 * scale, 152.35227966308594 * scale);
  ctx.bezierCurveTo(91.00567626953125 * scale, 158.35227966308594 * scale, 83.00567626953125 * scale, 149.35227966308594 * scale, 76.00567626953125 * scale, 138.35227966308594 * scale);
  ctx.bezierCurveTo(67.00567626953125 * scale, 114.35227966308594 * scale, 63.00567626953125 * scale, 113.35227966308594 * scale, 59.00567626953125 * scale, 111.35227966308594 * scale);
  ctx.bezierCurveTo(62.00567626953125 * scale, 107.35227966308594 * scale, 64.00567626953125 * scale, 105.35227966308594 * scale, 66.00567626953125 * scale, 104.35227966308594 * scale);
  ctx.bezierCurveTo(63.00567626953125 * scale, 100.35227966308594 * scale, 62.00567626953125 * scale, 100.35227966308594 * scale, 60.00567626953125 * scale, 99.35227966308594 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(33.00567626953125 * scale, 95.44320678710938 * scale);
  ctx.bezierCurveTo(42.00567626953125 * scale, 87.44320678710938 * scale, 48.00567626953125 * scale, 51.443206787109375 * scale, 74.00567626953125 * scale, 47.443206787109375 * scale);
  ctx.bezierCurveTo(100.00567626953125 * scale, 42.443206787109375 * scale, 118.00567626953125 * scale, 49.443206787109375 * scale, 131.00567626953125 * scale, 55.443206787109375 * scale);
  ctx.bezierCurveTo(140.00567626953125 * scale, 70.44320678710938 * scale, 145.00567626953125 * scale, 87.44320678710938 * scale, 152.00567626953125 * scale, 94.44320678710938 * scale);
  ctx.bezierCurveTo(149.00567626953125 * scale, 99.44320678710938 * scale, 147.00567626953125 * scale, 98.44320678710938 * scale, 141.00567626953125 * scale, 101.44320678710938 * scale);
  ctx.bezierCurveTo(147.00567626953125 * scale, 108.44320678710938 * scale, 147.00567626953125 * scale, 111.44320678710938 * scale, 147.00567626953125 * scale, 112.44320678710938 * scale);
  ctx.bezierCurveTo(143.00567626953125 * scale, 112.44320678710938 * scale, 141.00567626953125 * scale, 112.44320678710938 * scale, 137.00567626953125 * scale, 111.44320678710938 * scale);
  ctx.bezierCurveTo(138.00567626953125 * scale, 117.44320678710938 * scale, 138.00567626953125 * scale, 120.44320678710938 * scale, 138.00567626953125 * scale, 124.44320678710938 * scale);
  ctx.bezierCurveTo(125.00567626953125 * scale, 107.44320678710938 * scale, 121.00567626953125 * scale, 124.44320678710938 * scale, 110.00567626953125 * scale, 141.44320678710938 * scale);
  ctx.bezierCurveTo(102.00567626953125 * scale, 158.44320678710938 * scale, 89.00567626953125 * scale, 158.44320678710938 * scale, 80.00567626953125 * scale, 144.44320678710938 * scale);
  ctx.bezierCurveTo(61.00567626953125 * scale, 111.44320678710938 * scale, 56.00567626953125 * scale, 117.44320678710938 * scale, 48.00567626953125 * scale, 120.44320678710938 * scale);
  ctx.bezierCurveTo(46.00567626953125 * scale, 118.44320678710938 * scale, 47.00567626953125 * scale, 112.44320678710938 * scale, 48.00567626953125 * scale, 107.44320678710938 * scale);
  ctx.bezierCurveTo(43.00567626953125 * scale, 111.44320678710938 * scale, 40.00567626953125 * scale, 111.44320678710938 * scale, 37.00567626953125 * scale, 110.44320678710938 * scale);
  ctx.bezierCurveTo(39.50567626953125 * scale, 104.94320678710938 * scale, 39.50567626953125 * scale, 104.94320678710938 * scale, 42.00567626953125 * scale, 99.44320678710938 * scale);
  ctx.bezierCurveTo(33.00567626953125 * scale, 99.44320678710938 * scale, 33.00567626953125 * scale, 98.44320678710938 * scale, 33.00567626953125 * scale, 96.44320678710938 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(51.00567626953125 * scale, 72.53409576416016 * scale);
  ctx.bezierCurveTo(48.00567626953125 * scale, 56.534095764160156 * scale, 48.00567626953125 * scale, 49.534095764160156 * scale, 54.00567626953125 * scale, 35.534095764160156 * scale);
  ctx.bezierCurveTo(58.00567626953125 * scale, 26.534095764160156 * scale, 65.00567626953125 * scale, 27.534095764160156 * scale, 73.00567626953125 * scale, 40.534095764160156 * scale);
  ctx.bezierCurveTo(81.00567626953125 * scale, 49.534095764160156 * scale, 82.00567626953125 * scale, 50.534095764160156 * scale, 83.00567626953125 * scale, 51.534095764160156 * scale);
  fill_path(ctx, color[1], color[2], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105.00567626953125 * scale, 50.53410339355469 * scale);
  ctx.bezierCurveTo(112.00567626953125 * scale, 48.53410339355469 * scale, 125.00567626953125 * scale, 21.534103393554688 * scale, 132.00567626953125 * scale, 33.53410339355469 * scale);
  ctx.bezierCurveTo(138.00567626953125 * scale, 42.53410339355469 * scale, 140.00567626953125 * scale, 64.53410339355469 * scale, 136.00567626953125 * scale, 75.53410339355469 * scale);
  fill_path(ctx, color[1], color[2], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(57.00567626953125 * scale, 68.53410339355469 * scale);
  ctx.bezierCurveTo(63.00567626953125 * scale, 69.53410339355469 * scale, 69.00567626953125 * scale, 66.53410339355469 * scale, 73.00567626953125 * scale, 60.53410339355469 * scale);
  ctx.bezierCurveTo(66.00567626953125 * scale, 47.53410339355469 * scale, 61.00567626953125 * scale, 42.53410339355469 * scale, 58.00567626953125 * scale, 49.53410339355469 * scale);
  ctx.bezierCurveTo(56.00567626953125 * scale, 59.53410339355469 * scale, 56.00567626953125 * scale, 64.53410339355469 * scale, 57.00567626953125 * scale, 67.53410339355469 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115.00567626953125 * scale, 59.715911865234375 * scale);
  ctx.bezierCurveTo(119.00567626953125 * scale, 48.715911865234375 * scale, 126.00567626953125 * scale, 41.715911865234375 * scale, 129.00567626953125 * scale, 48.715911865234375 * scale);
  ctx.bezierCurveTo(131.00567626953125 * scale, 56.715911865234375 * scale, 133.00567626953125 * scale, 71.71591186523438 * scale, 127.00567626953125 * scale, 68.71591186523438 * scale);
  ctx.bezierCurveTo(120.00567626953125 * scale, 67.71591186523438 * scale, 114.00567626953125 * scale, 59.715911865234375 * scale, 116.00567626953125 * scale, 58.715911865234375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  circle(ctx, 77 * scale, 107 * scale, 6 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 110 * scale, 107 * scale, 6 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 75 * scale, 105 * scale, 3 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 108 * scale, 105 * scale, 3 * scale);
  fill_path(ctx, color[4]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(88.00567626953125 * scale, 141.4431915283203 * scale);
  ctx.bezierCurveTo(93.00567626953125 * scale, 137.4431915283203 * scale, 96.00567626953125 * scale, 138.4431915283203 * scale, 100.00567626953125 * scale, 141.4431915283203 * scale);
  ctx.bezierCurveTo(103.00567626953125 * scale, 143.4431915283203 * scale, 101.00567626953125 * scale, 149.4431915283203 * scale, 95.00567626953125 * scale, 148.4431915283203 * scale);
  ctx.bezierCurveTo(85.00567626953125 * scale, 148.4431915283203 * scale, 86.00567626953125 * scale, 145.4431915283203 * scale, 88.00567626953125 * scale, 142.4431915283203 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  return can;
};

function create_meat(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 55;
  var h = scale * 55;
  var shadow = scale * 8;
  var width = scale * 4;
  can.width = w;
  can.height = h;
  ctx.translate(-65 * scale, (-55 * scale) + shadow);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.moveTo(95 * scale, 60 * scale);
  ctx.bezierCurveTo(107 * scale, 62 * scale, 110 * scale, 73 * scale, 107 * scale, 79 * scale);
  ctx.bezierCurveTo(104 * scale, 85 * scale, 85 * scale, 93 * scale, 81 * scale, 88 * scale);
  ctx.bezierCurveTo(74 * scale, 80 * scale, 85 * scale, 60 * scale, 95 * scale, 60 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 3);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.moveTo(91 * scale, 70 * scale);
  ctx.bezierCurveTo(91 * scale, 75 * scale, 100 * scale, 76 * scale, 100 * scale, 73 * scale);
  ctx.bezierCurveTo(100 * scale, 69 * scale, 89 * scale, 65 * scale, 91 * scale, 70 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 3);
  return can;
};

function create_hurt_spider(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 238 * scale;
  can.height = 230 * scale;
  ctx.translate(-93 * scale, -110 * scale);
  circle(ctx, 213.5 * scale, 256.75 * scale, 75 * scale);
  fill_path(ctx, color);
  circle(ctx, 213.5 * scale, 175.75 * scale, 25 * scale);
  fill_path(ctx, color);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(156.5 * scale, 137.75 * scale);
  ctx.bezierCurveTo(170.5 * scale, 173.75 * scale, 195.5 * scale, 177.75 * scale, 209.5 * scale, 177.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(217.5 * scale, 178.75 * scale);
  ctx.bezierCurveTo(251.5 * scale, 177.75 * scale, 263.5 * scale, 153.75 * scale, 270.5 * scale, 140.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130.5 * scale, 124.75 * scale);
  ctx.bezierCurveTo(153.5 * scale, 185.75 * scale, 198.5 * scale, 185.75 * scale, 213.5 * scale, 185.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 183.75 * scale);
  ctx.bezierCurveTo(265.5 * scale, 192.75 * scale, 293.5 * scale, 141.75 * scale, 297.5 * scale, 124.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107.5 * scale, 213.75 * scale);
  ctx.bezierCurveTo(151.5 * scale, 190.75 * scale, 198.5 * scale, 184.75 * scale, 210.5 * scale, 184.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(212.5 * scale, 187.75 * scale);
  ctx.bezierCurveTo(258.5 * scale, 182.75 * scale, 286.5 * scale, 194.75 * scale, 314.5 * scale, 206.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102.5 * scale, 258.75 * scale);
  ctx.bezierCurveTo(142.5 * scale, 200.75 * scale, 193.5 * scale, 194.75 * scale, 211.5 * scale, 185.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 192.75 * scale);
  ctx.bezierCurveTo(276.5 * scale, 194.75 * scale, 306.5 * scale, 233.75 * scale, 316.5 * scale, 246.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(219.5 * scale, 158.75 * scale);
  ctx.bezierCurveTo(226.5 * scale, 159.75 * scale, 227.5 * scale, 147.75 * scale, 219.5 * scale, 145.75 * scale);
  ctx.closePath();
  ctx.lineWidth = 10 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(210.5 * scale, 160.75 * scale);
  ctx.bezierCurveTo(203.5 * scale, 159.75 * scale, 199.5 * scale, 146.75 * scale, 210.5 * scale, 145.75 * scale);
  ctx.closePath();
  ctx.lineWidth = 10 * scale;
  ctx.strokeStyle = color;
  ctx.stroke();
  return can;
};

function create_spider(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 238 * scale;
  can.height = 230 * scale;
  ctx.translate(-93 * scale, (-110 * scale) + (5 * scale));
  ctx.globalAlpha = 0.3;
  circle(ctx, 213.5 * scale, 256.75 * scale, 75 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 213.5 * scale, 175.75 * scale, 25 * scale);
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(156.5 * scale, 137.75 * scale);
  ctx.bezierCurveTo(170.5 * scale, 173.75 * scale, 195.5 * scale, 177.75 * scale, 209.5 * scale, 177.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[5];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(217.5 * scale, 178.75 * scale);
  ctx.bezierCurveTo(251.5 * scale, 177.75 * scale, 263.5 * scale, 153.75 * scale, 270.5 * scale, 140.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[5];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130.5 * scale, 124.75 * scale);
  ctx.bezierCurveTo(153.5 * scale, 185.75 * scale, 198.5 * scale, 185.75 * scale, 213.5 * scale, 185.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[5];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 183.75 * scale);
  ctx.bezierCurveTo(265.5 * scale, 192.75 * scale, 293.5 * scale, 141.75 * scale, 297.5 * scale, 124.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[5];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107.5 * scale, 213.75 * scale);
  ctx.bezierCurveTo(151.5 * scale, 190.75 * scale, 198.5 * scale, 184.75 * scale, 210.5 * scale, 184.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[5];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(212.5 * scale, 187.75 * scale);
  ctx.bezierCurveTo(258.5 * scale, 182.75 * scale, 286.5 * scale, 194.75 * scale, 314.5 * scale, 206.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[5];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102.5 * scale, 258.75 * scale);
  ctx.bezierCurveTo(142.5 * scale, 200.75 * scale, 193.5 * scale, 194.75 * scale, 211.5 * scale, 185.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[5];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 192.75 * scale);
  ctx.bezierCurveTo(276.5 * scale, 194.75 * scale, 306.5 * scale, 233.75 * scale, 316.5 * scale, 246.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[5];
  ctx.stroke();
  ctx.translate(0, -5);
  ctx.globalAlpha = 1;
  circle(ctx, 213.5 * scale, 256.75 * scale, 75 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 213.5 * scale, 175.75 * scale, 25 * scale);
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(219.5 * scale, 158.75 * scale);
  ctx.bezierCurveTo(226.5 * scale, 159.75 * scale, 227.5 * scale, 147.75 * scale, 219.5 * scale, 145.75 * scale);
  ctx.closePath();
  ctx.lineWidth = 10 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(210.5 * scale, 160.75 * scale);
  ctx.bezierCurveTo(203.5 * scale, 159.75 * scale, 199.5 * scale, 146.75 * scale, 210.5 * scale, 145.75 * scale);
  ctx.closePath();
  ctx.lineWidth = 10 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(219.5 * scale, 158.75 * scale);
  ctx.bezierCurveTo(226.5 * scale, 159.75 * scale, 227.5 * scale, 147.75 * scale, 219.5 * scale, 145.75 * scale);
  ctx.closePath();
  ctx.fillStyle = color[0];
  ctx.fill();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(210.5 * scale, 160.75 * scale);
  ctx.bezierCurveTo(203.5 * scale, 159.75 * scale, 199.5 * scale, 146.75 * scale, 210.5 * scale, 145.75 * scale);
  ctx.closePath();
  ctx.fillStyle = color[0];
  ctx.fill();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(156.5 * scale, 137.75 * scale);
  ctx.bezierCurveTo(170.5 * scale, 173.75 * scale, 195.5 * scale, 177.75 * scale, 209.5 * scale, 177.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(217.5 * scale, 178.75 * scale);
  ctx.bezierCurveTo(251.5 * scale, 177.75 * scale, 263.5 * scale, 153.75 * scale, 270.5 * scale, 140.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130.5 * scale, 124.75 * scale);
  ctx.bezierCurveTo(153.5 * scale, 185.75 * scale, 198.5 * scale, 185.75 * scale, 213.5 * scale, 185.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 183.75 * scale);
  ctx.bezierCurveTo(265.5 * scale, 192.75 * scale, 293.5 * scale, 141.75 * scale, 297.5 * scale, 124.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107.5 * scale, 213.75 * scale);
  ctx.bezierCurveTo(151.5 * scale, 190.75 * scale, 198.5 * scale, 184.75 * scale, 210.5 * scale, 184.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(212.5 * scale, 187.75 * scale);
  ctx.bezierCurveTo(258.5 * scale, 182.75 * scale, 286.5 * scale, 194.75 * scale, 314.5 * scale, 206.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102.5 * scale, 258.75 * scale);
  ctx.bezierCurveTo(142.5 * scale, 200.75 * scale, 193.5 * scale, 194.75 * scale, 211.5 * scale, 185.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 192.75 * scale);
  ctx.bezierCurveTo(276.5 * scale, 194.75 * scale, 306.5 * scale, 233.75 * scale, 316.5 * scale, 246.75 * scale);
  ctx.lineWidth = 17 * scale;
  ctx.strokeStyle = color[3];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(156.5 * scale, 137.75 * scale);
  ctx.bezierCurveTo(170.5 * scale, 173.75 * scale, 195.5 * scale, 177.75 * scale, 209.5 * scale, 177.75 * scale);
  ctx.lineWidth = 8 * scale;
  ctx.strokeStyle = color[0];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(217.5 * scale, 178.75 * scale);
  ctx.bezierCurveTo(251.5 * scale, 177.75 * scale, 263.5 * scale, 153.75 * scale, 270.5 * scale, 140.75 * scale);
  ctx.lineWidth = 8 * scale;
  ctx.strokeStyle = color[0];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130.5 * scale, 124.75 * scale);
  ctx.bezierCurveTo(153.5 * scale, 185.75 * scale, 198.5 * scale, 185.75 * scale, 213.5 * scale, 185.75 * scale);
  ctx.lineWidth = 8 * scale;
  ctx.strokeStyle = color[0];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 183.75 * scale);
  ctx.bezierCurveTo(265.5 * scale, 192.75 * scale, 293.5 * scale, 141.75 * scale, 297.5 * scale, 124.75 * scale);
  ctx.lineWidth = 8 * scale;
  ctx.strokeStyle = color[0];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107.5 * scale, 213.75 * scale);
  ctx.bezierCurveTo(151.5 * scale, 190.75 * scale, 198.5 * scale, 184.75 * scale, 210.5 * scale, 184.75 * scale);
  ctx.lineWidth = 8 * scale;
  ctx.strokeStyle = color[0];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(212.5 * scale, 187.75 * scale);
  ctx.bezierCurveTo(258.5 * scale, 182.75 * scale, 286.5 * scale, 194.75 * scale, 314.5 * scale, 206.75 * scale);
  ctx.lineWidth = 8 * scale;
  ctx.strokeStyle = color[0];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102.5 * scale, 258.75 * scale);
  ctx.bezierCurveTo(142.5 * scale, 200.75 * scale, 193.5 * scale, 194.75 * scale, 211.5 * scale, 185.75 * scale);
  ctx.lineWidth = 8 * scale;
  ctx.strokeStyle = color[0];
  ctx.stroke();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 192.75 * scale);
  ctx.bezierCurveTo(276.5 * scale, 194.75 * scale, 306.5 * scale, 233.75 * scale, 316.5 * scale, 246.75 * scale);
  ctx.lineWidth = 8 * scale;
  ctx.strokeStyle = color[0];
  ctx.stroke();
  circle(ctx, 213.5 * scale, 256.75 * scale, 70 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 213.5 * scale, 175.75 * scale, 20 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 222 * scale, 166 * scale, 5 * scale);
  ctx.fillStyle = color[2];
  ctx.fill();
  circle(ctx, 205 * scale, 166 * scale, 5 * scale);
  ctx.fillStyle = color[2];
  ctx.fill();
  circle(ctx, 206.2 * scale, 167 * scale, 2.5 * scale);
  ctx.fillStyle = color[4];
  ctx.fill();
  circle(ctx, 223.2 * scale, 167 * scale, 2.5 * scale);
  ctx.fillStyle = color[4];
  ctx.fill();
  ctx.save();
  ctx.translate(213.5 * scale, 293.75 * scale);
  ctx.rotate(0.76);
  round_rect(ctx, -22 * scale, -21 * scale, 44 * scale, 42 * scale, 6 * scale);
  ctx.restore();
  ctx.fillStyle = color[1];
  ctx.fill();
  ctx.save();
  ctx.translate(212.5 * scale, 258.25 * scale);
  ctx.rotate(0.8);
  round_rect(ctx, -15 * scale, -14.5 * scale, 30 * scale, 29 * scale, 6 * scale);
  ctx.restore();
  ctx.fillStyle = color[1];
  ctx.fill();
  return can;
};

function create_web(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 450 * scale;
  can.height = 470 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(226.5 * scale, 91.546875 * scale);
  ctx.bezierCurveTo(254.5 * scale, 115.546875 * scale, 261.5 * scale, 115.546875 * scale, 294.5 * scale, 109.546875 * scale);
  ctx.bezierCurveTo(299.5 * scale, 141.546875 * scale, 315.5 * scale, 151.546875 * scale, 344.5 * scale, 158.546875 * scale);
  ctx.bezierCurveTo(330.5 * scale, 195.546875 * scale, 341.5 * scale, 207.546875 * scale, 361.5 * scale, 226.546875 * scale);
  ctx.bezierCurveTo(331.5 * scale, 251.546875 * scale, 335.5 * scale, 270.546875 * scale, 342.5 * scale, 295.546875 * scale);
  ctx.bezierCurveTo(300.5 * scale, 296.546875 * scale, 293.5 * scale, 325.546875 * scale, 292.5 * scale, 344.546875 * scale);
  ctx.bezierCurveTo(257.5 * scale, 326.546875 * scale, 242.5 * scale, 338.546875 * scale, 224.5 * scale, 361.546875 * scale);
  ctx.bezierCurveTo(200.5 * scale, 329.546875 * scale, 180.5 * scale, 334.546875 * scale, 155.5 * scale, 341.546875 * scale);
  ctx.bezierCurveTo(146.5 * scale, 307.546875 * scale, 140.5 * scale, 302.546875 * scale, 107.5 * scale, 292.546875 * scale);
  ctx.bezierCurveTo(117.5 * scale, 253.546875 * scale, 109.5 * scale, 244.546875 * scale, 89.5 * scale, 224.546875 * scale);
  ctx.bezierCurveTo(118.5 * scale, 191.546875 * scale, 114.5 * scale, 182.546875 * scale, 108.5 * scale, 156.546875 * scale);
  ctx.bezierCurveTo(143.5 * scale, 149.546875 * scale, 150.5 * scale, 136.546875 * scale, 157.5 * scale, 106.546875 * scale);
  ctx.bezierCurveTo(202.5 * scale, 120.546875 * scale, 211.5 * scale, 103.546875 * scale, 228.5 * scale, 91.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(224.5 * scale, 129.546875 * scale);
  ctx.bezierCurveTo(247.5 * scale, 147.546875 * scale, 252.5 * scale, 143.546875 * scale, 274.5 * scale, 141.546875 * scale);
  ctx.bezierCurveTo(279.5 * scale, 163.546875 * scale, 289.5 * scale, 168.546875 * scale, 311.5 * scale, 178.546875 * scale);
  ctx.bezierCurveTo(301.5 * scale, 199.546875 * scale, 307.5 * scale, 213.546875 * scale, 323.5 * scale, 226.546875 * scale);
  ctx.bezierCurveTo(303.5 * scale, 240.546875 * scale, 303.5 * scale, 255.546875 * scale, 312.5 * scale, 275.546875 * scale);
  ctx.bezierCurveTo(281.5 * scale, 278.546875 * scale, 276.5 * scale, 291.546875 * scale, 272.5 * scale, 313.546875 * scale);
  ctx.bezierCurveTo(248.5 * scale, 301.546875 * scale, 239.5 * scale, 310.546875 * scale, 224.5 * scale, 324.546875 * scale);
  ctx.bezierCurveTo(211.5 * scale, 304.546875 * scale, 199.5 * scale, 301.546875 * scale, 176.5 * scale, 309.546875 * scale);
  ctx.bezierCurveTo(165.5 * scale, 276.546875 * scale, 159.5 * scale, 275.546875 * scale, 138.5 * scale, 274.546875 * scale);
  ctx.bezierCurveTo(148.5 * scale, 248.546875 * scale, 140.5 * scale, 237.546875 * scale, 125.5 * scale, 225.546875 * scale);
  ctx.bezierCurveTo(145.5 * scale, 205.546875 * scale, 146.5 * scale, 195.546875 * scale, 142.5 * scale, 176.546875 * scale);
  ctx.bezierCurveTo(173.5 * scale, 164.546875 * scale, 173.5 * scale, 155.546875 * scale, 178.5 * scale, 140.546875 * scale);
  ctx.bezierCurveTo(214.5 * scale, 143.546875 * scale, 214.5 * scale, 135.546875 * scale, 226.5 * scale, 129.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(224.5 * scale, 160.546875 * scale);
  ctx.bezierCurveTo(236.5 * scale, 168.546875 * scale, 239.5 * scale, 168.546875 * scale, 258.5 * scale, 168.546875 * scale);
  ctx.bezierCurveTo(261.5 * scale, 185.546875 * scale, 268.5 * scale, 187.546875 * scale, 282.5 * scale, 192.546875 * scale);
  ctx.bezierCurveTo(277.5 * scale, 208.546875 * scale, 283.5 * scale, 216.546875 * scale, 289.5 * scale, 228.546875 * scale);
  ctx.bezierCurveTo(277.5 * scale, 243.546875 * scale, 280.5 * scale, 253.546875 * scale, 281.5 * scale, 260.546875 * scale);
  ctx.bezierCurveTo(264.5 * scale, 260.546875 * scale, 259.5 * scale, 269.546875 * scale, 256.5 * scale, 283.546875 * scale);
  ctx.bezierCurveTo(244.5 * scale, 276.546875 * scale, 232.5 * scale, 283.546875 * scale, 223.5 * scale, 291.546875 * scale);
  ctx.bezierCurveTo(213.5 * scale, 276.546875 * scale, 205.5 * scale, 278.546875 * scale, 190.5 * scale, 281.546875 * scale);
  ctx.bezierCurveTo(181.5 * scale, 262.546875 * scale, 173.5 * scale, 259.546875 * scale, 165.5 * scale, 258.546875 * scale);
  ctx.bezierCurveTo(169.5 * scale, 239.546875 * scale, 167.5 * scale, 233.546875 * scale, 157.5 * scale, 225.546875 * scale);
  ctx.bezierCurveTo(169.5 * scale, 208.546875 * scale, 170.5 * scale, 203.546875 * scale, 168.5 * scale, 192.546875 * scale);
  ctx.bezierCurveTo(181.5 * scale, 187.546875 * scale, 188.5 * scale, 179.546875 * scale, 192.5 * scale, 168.546875 * scale);
  ctx.bezierCurveTo(216.5 * scale, 170.546875 * scale, 218.5 * scale, 163.546875 * scale, 225.5 * scale, 160.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(205.5 * scale, 194.546875 * scale);
  ctx.bezierCurveTo(216.5 * scale, 192.546875 * scale, 219.5 * scale, 191.546875 * scale, 225.5 * scale, 185.546875 * scale);
  ctx.bezierCurveTo(232.5 * scale, 193.546875 * scale, 237.5 * scale, 191.546875 * scale, 246.5 * scale, 192.546875 * scale);
  ctx.bezierCurveTo(249.5 * scale, 202.546875 * scale, 253.5 * scale, 205.546875 * scale, 258.5 * scale, 207.546875 * scale);
  ctx.bezierCurveTo(259.5 * scale, 222.546875 * scale, 256.5 * scale, 223.546875 * scale, 265.5 * scale, 226.546875 * scale);
  ctx.bezierCurveTo(256.5 * scale, 231.546875 * scale, 255.5 * scale, 241.546875 * scale, 259.5 * scale, 248.546875 * scale);
  ctx.bezierCurveTo(250.5 * scale, 245.546875 * scale, 245.5 * scale, 252.546875 * scale, 243.5 * scale, 260.546875 * scale);
  ctx.bezierCurveTo(234.5 * scale, 256.546875 * scale, 229.5 * scale, 258.546875 * scale, 223.5 * scale, 265.546875 * scale);
  ctx.bezierCurveTo(218.5 * scale, 255.546875 * scale, 213.5 * scale, 257.546875 * scale, 204.5 * scale, 261.546875 * scale);
  ctx.bezierCurveTo(203.5 * scale, 251.546875 * scale, 198.5 * scale, 248.546875 * scale, 189.5 * scale, 244.546875 * scale);
  ctx.bezierCurveTo(194.5 * scale, 237.546875 * scale, 192.5 * scale, 231.546875 * scale, 184.5 * scale, 225.546875 * scale);
  ctx.bezierCurveTo(191.5 * scale, 211.546875 * scale, 192.5 * scale, 209.546875 * scale, 190.5 * scale, 204.546875 * scale);
  ctx.bezierCurveTo(200.5 * scale, 204.546875 * scale, 204.5 * scale, 198.546875 * scale, 207.5 * scale, 194.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(149.5 * scale, 93.546875 * scale);
  ctx.bezierCurveTo(287.5 * scale, 332.546875 * scale, 226 * scale, 225.546875 * scale, 302.5 * scale, 357.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(224.5 * scale, 66.546875 * scale);
  ctx.bezierCurveTo(224.5 * scale, 223.546875 * scale, 224.5 * scale, 223.546875 * scale, 224.5 * scale, 380.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(302.5 * scale, 88.546875 * scale);
  ctx.bezierCurveTo(222.5 * scale, 227.546875 * scale, 222.5 * scale, 227.546875 * scale, 142.5 * scale, 366.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(361.5 * scale, 147.546875 * scale);
  ctx.bezierCurveTo(223 * scale, 226.546875 * scale, 223 * scale, 226.546875 * scale, 84.5 * scale, 305.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(379.5 * scale, 225.546875 * scale);
  ctx.bezierCurveTo(221 * scale, 225.546875 * scale, 221 * scale, 225.546875 * scale, 62.5 * scale, 225.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90.5 * scale, 147.546875 * scale);
  ctx.bezierCurveTo(226.5 * scale, 226.546875 * scale, 226.5 * scale, 226.546875 * scale, 362.5 * scale, 305.546875 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4);
  return can;
};

function create_dead_box(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.save();
  ctx.translate(202.5 * scale, 147.5 * scale);
  round_rect(ctx, -96.5 * scale, -21.5 * scale, 193 * scale, 193 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 12 * scale);
  ctx.save();
  ctx.translate(202.5 * scale, 190.5 * scale);
  round_rect(ctx, 96.5 * scale, -21.5 * scale, -193 * scale, 43 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 12 * scale);
  ctx.save();
  ctx.save();
  ctx.translate(202.5 * scale, 233.5 * scale);
  round_rect(ctx, -96.5 * scale, -20.5 * scale, 193 * scale, 41 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(202.5 * scale, 275 * scale);
  round_rect(ctx, 96.5 * scale, -21 * scale, -193 * scale, 42 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 12 * scale);
  ctx.save();
  ctx.translate(201 * scale, 212 * scale);
  ctx.rotate(8.64);
  round_rect(ctx, -116 * scale, -22 * scale, 232 * scale, 44 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(203.5 * scale, 121.5 * scale);
  round_rect(ctx, -115.5 * scale, -20.5 * scale, 231 * scale, 41 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(203.5 * scale, 299 * scale);
  round_rect(ctx, -115.5 * scale, -20 * scale, 231 * scale, 40 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(298.5 * scale, 210 * scale);
  round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(108.5 * scale, 210 * scale);
  round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(204 * scale, 121.5 * scale);
  round_rect(ctx, -92 * scale, -9.5 * scale, 184 * scale, 19 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[3], 10 * scale);
  ctx.save();
  ctx.translate(197 * scale, 299 * scale);
  round_rect(ctx, 85 * scale, -9 * scale, -170 * scale, 18 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(94 * scale, 317 * scale);
  ctx.bezierCurveTo(110.5 * scale, 299.5 * scale, 110.5 * scale, 299.5 * scale, 127 * scale, 282 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(279 * scale, 142 * scale);
  ctx.bezierCurveTo(296.5 * scale, 125.5 * scale, 296.5 * scale, 125.5 * scale, 314 * scale, 109 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 106 * scale);
  ctx.bezierCurveTo(110.5 * scale, 124 * scale, 110.5 * scale, 124 * scale, 128 * scale, 142 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(281 * scale, 282 * scale);
  ctx.bezierCurveTo(296 * scale, 297.5 * scale, 296 * scale, 297.5 * scale, 311 * scale, 313 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 12 * scale);
  if (i == 0) {
    ctx.scale(2, 2);
    ctx.translate(-7 * scale, 55 * scale);
    ctx.rotate(-0.5);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(60 * scale, 47 * scale);
    ctx.bezierCurveTo(81 * scale, 46 * scale, 85 * scale, 47 * scale, 83 * scale, 63 * scale);
    ctx.bezierCurveTo(83 * scale, 72 * scale, 83 * scale, 75 * scale, 72 * scale, 73 * scale);
    ctx.bezierCurveTo(68 * scale, 80 * scale, 69 * scale, 82 * scale, 66 * scale, 73 * scale);
    ctx.bezierCurveTo(62 * scale, 81 * scale, 61 * scale, 82 * scale, 59 * scale, 73 * scale);
    ctx.bezierCurveTo(54 * scale, 81 * scale, 55 * scale, 81 * scale, 52 * scale, 74 * scale);
    ctx.bezierCurveTo(38 * scale, 76 * scale, 41 * scale, 74 * scale, 40 * scale, 66 * scale);
    ctx.bezierCurveTo(38 * scale, 45 * scale, 39 * scale, 49 * scale, 59 * scale, 47 * scale);
    ctx.closePath();
    fill_path(ctx, color[4], color[4], 5 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(68 * scale, 54 * scale);
    ctx.bezierCurveTo(75 * scale, 54 * scale, 77 * scale, 62 * scale, 71 * scale, 64 * scale);
    ctx.bezierCurveTo(62 * scale, 65 * scale, 63 * scale, 54 * scale, 68 * scale, 54 * scale);
    ctx.closePath();
    fill_path(ctx, color[3]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(50 * scale, 55 * scale);
    ctx.bezierCurveTo(57 * scale, 55 * scale, 58 * scale, 65 * scale, 52 * scale, 65 * scale);
    ctx.bezierCurveTo(44 * scale, 66 * scale, 44 * scale, 54 * scale, 50 * scale, 55 * scale);
    ctx.closePath();
    fill_path(ctx, color[3]);
  } else if (i == 1) {
    ctx.scale(0.6, 0.6);
    ctx.translate(185 * scale, 165 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(108 * scale, 56 * scale);
    ctx.bezierCurveTo(136 * scale, 58 * scale, 203 * scale, 69 * scale, 234 * scale, 75 * scale);
    ctx.bezierCurveTo(246 * scale, 77 * scale, 247 * scale, 78 * scale, 245 * scale, 90 * scale);
    ctx.bezierCurveTo(238 * scale, 143 * scale, 228 * scale, 197 * scale, 214 * scale, 259 * scale);
    ctx.bezierCurveTo(212 * scale, 267 * scale, 209 * scale, 270 * scale, 189 * scale, 268 * scale);
    ctx.bezierCurveTo(142 * scale, 264 * scale, 106 * scale, 260 * scale, 75 * scale, 253 * scale);
    ctx.bezierCurveTo(60 * scale, 250 * scale, 64 * scale, 250 * scale, 66 * scale, 221 * scale);
    ctx.bezierCurveTo(71 * scale, 168 * scale, 87 * scale, 95 * scale, 98 * scale, 67 * scale);
    ctx.bezierCurveTo(101 * scale, 57 * scale, 103 * scale, 56 * scale, 106 * scale, 56 * scale);
    ctx.closePath();
    fill_path(ctx, color[4], color[4], 20 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(112 * scale, 72 * scale);
    ctx.bezierCurveTo(132 * scale, 73 * scale, 227 * scale, 85 * scale, 226 * scale, 91 * scale);
    ctx.bezierCurveTo(231 * scale, 89 * scale, 217 * scale, 196 * scale, 200 * scale, 250 * scale);
    ctx.bezierCurveTo(196 * scale, 254 * scale, 175 * scale, 249 * scale, 166 * scale, 249 * scale);
    ctx.bezierCurveTo(91 * scale, 241 * scale, 82 * scale, 236 * scale, 83 * scale, 232 * scale);
    ctx.bezierCurveTo(90 * scale, 144 * scale, 108 * scale, 71 * scale, 111 * scale, 72 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[0], 13 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(132 * scale, 117 * scale);
    ctx.bezierCurveTo(171 * scale, 86 * scale, 191 * scale, 101 * scale, 188 * scale, 134 * scale);
    ctx.bezierCurveTo(185 * scale, 154 * scale, 170 * scale, 158 * scale, 153 * scale, 158 * scale);
    ctx.bezierCurveTo(143 * scale, 172 * scale, 146 * scale, 180 * scale, 147 * scale, 193 * scale);
    fill_path(ctx, undefined, color[0], 20 * scale);
    circle(ctx, 142 * scale, 221 * scale, 16.1245154965971 * scale);
    fill_path(ctx, color[0]);
  }
  return can;
};

function create_hurt_dead_box(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.save();
  ctx.translate(202.5 * scale, 147.5 * scale);
  round_rect(ctx, -96.5 * scale, -21.5 * scale, 193 * scale, 43 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.save();
  ctx.translate(202.5 * scale, 190.5 * scale);
  round_rect(ctx, 96.5 * scale, -21.5 * scale, -193 * scale, 43 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.save();
  ctx.translate(202.5 * scale, 233.5 * scale);
  round_rect(ctx, -96.5 * scale, -20.5 * scale, 193 * scale, 41 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.save();
  ctx.translate(202.5 * scale, 275 * scale);
  round_rect(ctx, 96.5 * scale, -21 * scale, -193 * scale, 42 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.save();
  ctx.translate(203.5 * scale, 121.5 * scale);
  round_rect(ctx, -115.5 * scale, -20.5 * scale, 231 * scale, 41 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.save();
  ctx.translate(203.5 * scale, 299 * scale);
  round_rect(ctx, -115.5 * scale, -20 * scale, 231 * scale, 40 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.save();
  ctx.translate(298.5 * scale, 210 * scale);
  round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.save();
  ctx.translate(108.5 * scale, 210 * scale);
  round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 12 * scale);
  return can;
};

function create_dead_box_ui(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 650 * scale;
  can.height = 650 * scale;
  ctx.scale(1.9, 1.9);
  ctx.save();
  ctx.translate(202.5 * scale, 147.5 * scale);
  round_rect(ctx, -96.5 * scale, -21.5 * scale, 193 * scale, 193 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[1], 12 * scale);
  ctx.save();
  ctx.translate(203.5 * scale, 121.5 * scale);
  round_rect(ctx, -115.5 * scale, -20.5 * scale, 231 * scale, 41 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(203.5 * scale, 299 * scale);
  round_rect(ctx, -115.5 * scale, -20 * scale, 231 * scale, 40 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(298.5 * scale, 210 * scale);
  round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(108.5 * scale, 210 * scale);
  round_rect(ctx, -20.5 * scale, -109 * scale, 41 * scale, 218 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.save();
  ctx.translate(204 * scale, 121.5 * scale);
  round_rect(ctx, -92 * scale, -9.5 * scale, 184 * scale, 19 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[3], 10 * scale);
  ctx.save();
  ctx.translate(197 * scale, 299 * scale);
  round_rect(ctx, 85 * scale, -9 * scale, -170 * scale, 18 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(94 * scale, 317 * scale);
  ctx.bezierCurveTo(110.5 * scale, 299.5 * scale, 110.5 * scale, 299.5 * scale, 127 * scale, 282 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(279 * scale, 142 * scale);
  ctx.bezierCurveTo(296.5 * scale, 125.5 * scale, 296.5 * scale, 125.5 * scale, 314 * scale, 109 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 106 * scale);
  ctx.bezierCurveTo(110.5 * scale, 124 * scale, 110.5 * scale, 124 * scale, 128 * scale, 142 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(281 * scale, 282 * scale);
  ctx.bezierCurveTo(296 * scale, 297.5 * scale, 296 * scale, 297.5 * scale, 311 * scale, 313 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 12 * scale);
  return can;
};

function create_SANDWICH(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(101 * scale, 255 * scale);
  ctx.bezierCurveTo(113 * scale, 243 * scale, 179 * scale, 210 * scale, 219 * scale, 196 * scale);
  ctx.bezierCurveTo(252 * scale, 203 * scale, 288 * scale, 215 * scale, 318 * scale, 233 * scale);
  ctx.bezierCurveTo(304 * scale, 254 * scale, 258 * scale, 273 * scale, 215 * scale, 296 * scale);
  ctx.bezierCurveTo(161 * scale, 287 * scale, 119 * scale, 270 * scale, 102 * scale, 257 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 14 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(99 * scale, 258 * scale);
  ctx.bezierCurveTo(99 * scale, 272.5 * scale, 99 * scale, 272.5 * scale, 99 * scale, 287 * scale);
  ctx.bezierCurveTo(166 * scale, 319 * scale, 193 * scale, 320 * scale, 212 * scale, 324 * scale);
  ctx.bezierCurveTo(292 * scale, 286 * scale, 312 * scale, 271 * scale, 319 * scale, 263 * scale);
  ctx.bezierCurveTo(320 * scale, 249 * scale, 320 * scale, 241 * scale, 318 * scale, 234 * scale);
  ctx.bezierCurveTo(300 * scale, 254 * scale, 254 * scale, 277 * scale, 216 * scale, 294 * scale);
  ctx.bezierCurveTo(190 * scale, 296 * scale, 135 * scale, 276 * scale, 102 * scale, 258 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 14 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(212 * scale, 323 * scale);
  ctx.bezierCurveTo(211.5 * scale, 310.5 * scale, 211.5 * scale, 310.5 * scale, 211 * scale, 298 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 14 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(212 * scale, 210 * scale);
  ctx.bezierCurveTo(286 * scale, 210 * scale, 331 * scale, 254 * scale, 212 * scale, 276 * scale);
  ctx.bezierCurveTo(108 * scale, 276 * scale, 112 * scale, 222 * scale, 213 * scale, 208 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 14 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(98 * scale, 200 * scale);
  ctx.bezierCurveTo(126 * scale, 216 * scale, 177 * scale, 232 * scale, 213 * scale, 237 * scale);
  ctx.bezierCurveTo(266 * scale, 218 * scale, 288 * scale, 209 * scale, 318 * scale, 190 * scale);
  ctx.bezierCurveTo(269 * scale, 164 * scale, 239 * scale, 158 * scale, 214 * scale, 153 * scale);
  ctx.bezierCurveTo(148 * scale, 172 * scale, 131 * scale, 182 * scale, 98 * scale, 200 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 14 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(97 * scale, 204 * scale);
  ctx.bezierCurveTo(97 * scale, 215.5 * scale, 97 * scale, 215.5 * scale, 97 * scale, 227 * scale);
  ctx.bezierCurveTo(148 * scale, 250 * scale, 179 * scale, 256 * scale, 212 * scale, 262 * scale);
  ctx.bezierCurveTo(268 * scale, 244 * scale, 281 * scale, 233 * scale, 318 * scale, 214 * scale);
  ctx.bezierCurveTo(318 * scale, 203 * scale, 318 * scale, 203 * scale, 318 * scale, 192 * scale);
  ctx.bezierCurveTo(250 * scale, 225 * scale, 236 * scale, 231 * scale, 214 * scale, 239 * scale);
  ctx.bezierCurveTo(158 * scale, 228 * scale, 126 * scale, 215 * scale, 99 * scale, 201 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 14 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(212 * scale, 260 * scale);
  ctx.bezierCurveTo(212 * scale, 251.5 * scale, 212 * scale, 251.5 * scale, 212 * scale, 243 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 14 * scale);
  circle(ctx, 161 * scale, 201 * scale, 13 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 216 * scale, 205 * scale, 8.06225774829855 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 216 * scale, 175 * scale, 6.708203932499369 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 271 * scale, 191 * scale, 5.0990195135927845 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 206 * scale, 180 * scale, 11.180339887498949 * scale);
  fill_path(ctx, color[5]);
  return can;
};

function create_scales(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.save();
  ctx.translate(85 * scale, 237 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 54.585977194239184 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(178 * scale, 238 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 52.53573932334064 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(270 * scale, 239 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 53.58058329516393 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(222 * scale, 312 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 52.53573932334064 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(317 * scale, 159 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 57.63465889766331 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(223.5 * scale, 139.0625 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 51.66236541235796 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(132.5 * scale, 137.0625 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 52.009614495783374 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(178.5 * scale, 58.0625 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 53.16013544000805 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(177.5 * scale, 216.0625 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 50 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(84.5 * scale, 215.0625 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 54 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(319.5 * scale, 138.0625 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 55.08175741568164 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(269.5 * scale, 216.0625 * scale);
  ctx.rotate(1.5707963267948966);
  round_regular_polygon(ctx, 6, 54.589376255824725 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.save();
  ctx.translate(221.5 * scale, 293.0625 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 6, 49.49747468305833 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(221.5 * scale, 342.0625 * scale);
  ctx.bezierCurveTo(221.5 * scale, 350.5625 * scale, 221.5 * scale, 350.5625 * scale, 221.5 * scale, 359.0625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84.5 * scale, 270.0625 * scale);
  ctx.bezierCurveTo(84.5 * scale, 277.0625 * scale, 84.5 * scale, 277.0625 * scale, 84.5 * scale, 284.0625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 12 * scale);
  ctx.save();
  ctx.translate(84.5 * scale, 215.0625 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[3]);
  ctx.save();
  ctx.translate(177.5 * scale, 215.0625 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[3]);
  ctx.save();
  ctx.translate(222.5 * scale, 294.0625 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[3]);
  ctx.save();
  ctx.translate(270.5 * scale, 216.0625 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[3]);
  ctx.save();
  ctx.translate(320.5 * scale, 134.0625 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[3]);
  ctx.save();
  ctx.translate(224.5 * scale, 138.0625 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[3]);
  ctx.save();
  ctx.translate(133.5 * scale, 137.0625 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[3]);
  ctx.save();
  ctx.translate(178.5 * scale, 56.0625 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 6, 30 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[3]);
  return can;
};

function create_wheat(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 52 * scale;
  can.height = 65 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(9.833328247070312 * scale, 12.078125 * scale);
  ctx.bezierCurveTo(15.333328247070312 * scale, 28.078125 * scale, 15.333328247070312 * scale, 28.078125 * scale, 20.833328247070312 * scale, 44.078125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(7.8333282470703125 * scale, 20.078125 * scale);
  ctx.bezierCurveTo(16.833328247070312 * scale, 32.578125 * scale, 16.833328247070312 * scale, 32.578125 * scale, 25.833328247070312 * scale, 45.078125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(23.833328247070312 * scale, 26.078125 * scale);
  ctx.bezierCurveTo(25.833328247070312 * scale, 11.078125 * scale, 16.833328247070312 * scale, 8.078125 * scale, 14.833328247070312 * scale, 7.078125 * scale);
  ctx.bezierCurveTo(11.833328247070312 * scale, 17.078125 * scale, 13.833328247070312 * scale, 22.078125 * scale, 23.833328247070312 * scale, 27.078125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35.83332824707031 * scale, 8.078125 * scale);
  ctx.bezierCurveTo(34.83332824707031 * scale, 27.078125 * scale, 28.833328247070312 * scale, 27.078125 * scale, 23.833328247070312 * scale, 28.078125 * scale);
  ctx.bezierCurveTo(21.833328247070312 * scale, 14.078125 * scale, 26.833328247070312 * scale, 11.078125 * scale, 35.83332824707031 * scale, 8.078125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(25.833328247070312 * scale, 39.078125 * scale);
  ctx.bezierCurveTo(20.833328247070312 * scale, 29.078125 * scale, 14.833328247070312 * scale, 27.078125 * scale, 5.8333282470703125 * scale, 29.078125 * scale);
  ctx.bezierCurveTo(9.833328247070312 * scale, 39.078125 * scale, 16.833328247070312 * scale, 42.078125 * scale, 25.833328247070312 * scale, 40.078125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42.83332824707031 * scale, 23.078125 * scale);
  ctx.bezierCurveTo(35.83332824707031 * scale, 35.078125 * scale, 31.833328247070312 * scale, 37.078125 * scale, 25.833328247070312 * scale, 36.078125 * scale);
  ctx.bezierCurveTo(25.833328247070312 * scale, 24.078125 * scale, 33.83332824707031 * scale, 21.078125 * scale, 42.83332824707031 * scale, 23.078125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(23.833328247070312 * scale, 24.078125 * scale);
  ctx.bezierCurveTo(20.833328247070312 * scale, 34.078125 * scale, 23.833328247070312 * scale, 40.078125 * scale, 27.833328247070312 * scale, 43.078125 * scale);
  ctx.bezierCurveTo(37.33332824707031 * scale, 28.078125 * scale, 37.33332824707031 * scale, 28.078125 * scale, 46.83332824707031 * scale, 13.078125 * scale);
  fill_path(ctx, undefined, color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(38.83332824707031 * scale, 14.078125 * scale);
  ctx.bezierCurveTo(34.83332824707031 * scale, 24.078125 * scale, 34.83332824707031 * scale, 24.078125 * scale, 30.833328247070312 * scale, 34.078125 * scale);
  fill_path(ctx, undefined, color[1], 2 * scale);
  return can;
};

function create_windmill(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 170 * scale;
  can.height = 173 * scale;
  ctx.translate(5 * scale, 5 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(86.25 * scale, 84.953125 * scale);
  ctx.rotate(0.32);
  round_regular_polygon(ctx, 7, 42.15447781671598 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(86.25 * scale, 84.953125 * scale);
  ctx.rotate(0.32);
  round_regular_polygon(ctx, 7, 42.15447781671598 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(86.25 * scale, 84.953125 * scale);
  ctx.rotate(0.28);
  round_regular_polygon(ctx, 7, 30.463092423455635 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(86.25 * scale, 84.953125 * scale);
  ctx.rotate(0.28);
  round_regular_polygon(ctx, 7, 30.463092423455635 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  circle(ctx, 86.25 * scale, 84.953125 * scale, 18.867962264113206 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  circle(ctx, 86.25 * scale, 84.953125 * scale, 18.867962264113206 * scale);
  fill_path(ctx, color[5], color[6], 4 * scale);
  return can;
};

function create_windmill_wing(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 170 * scale;
  can.height = 173 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(85.25 * scale, 82.953125 * scale);
  ctx.bezierCurveTo(98.25 * scale, 46.453125 * scale, 98.25 * scale, 46.453125 * scale, 111.25 * scale, 9.953125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111.25 * scale, 8.953125 * scale);
  ctx.bezierCurveTo(117.75 * scale, 12.453125 * scale, 117.75 * scale, 12.453125 * scale, 124.25 * scale, 15.953125 * scale);
  ctx.bezierCurveTo(113.75 * scale, 39.953125 * scale, 113.75 * scale, 39.953125 * scale, 103.25 * scale, 63.953125 * scale);
  ctx.bezierCurveTo(97.75 * scale, 64.953125 * scale, 97.75 * scale, 64.953125 * scale, 92.25 * scale, 65.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111.25 * scale, 8.953125 * scale);
  ctx.bezierCurveTo(117.75 * scale, 12.453125 * scale, 117.75 * scale, 12.453125 * scale, 124.25 * scale, 15.953125 * scale);
  ctx.bezierCurveTo(113.75 * scale, 39.953125 * scale, 113.75 * scale, 39.953125 * scale, 103.25 * scale, 63.953125 * scale);
  ctx.bezierCurveTo(97.75 * scale, 64.953125 * scale, 97.75 * scale, 64.953125 * scale, 92.25 * scale, 65.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(85.25 * scale, 82.953125 * scale);
  ctx.bezierCurveTo(98.25 * scale, 46.453125 * scale, 98.25 * scale, 46.453125 * scale, 111.25 * scale, 9.953125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 4 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87.25 * scale, 84.953125 * scale);
  ctx.bezierCurveTo(123.75 * scale, 100.453125 * scale, 123.75 * scale, 100.453125 * scale, 160.25 * scale, 115.953125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(160.25 * scale, 114.953125 * scale);
  ctx.bezierCurveTo(156.25 * scale, 122.453125 * scale, 156.25 * scale, 122.453125 * scale, 152.25 * scale, 129.953125 * scale);
  ctx.bezierCurveTo(130.25 * scale, 117.953125 * scale, 130.25 * scale, 117.953125 * scale, 108.25 * scale, 105.953125 * scale);
  ctx.bezierCurveTo(107.25 * scale, 98.953125 * scale, 107.25 * scale, 98.953125 * scale, 106.25 * scale, 91.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(160.25 * scale, 114.953125 * scale);
  ctx.bezierCurveTo(156.25 * scale, 122.453125 * scale, 156.25 * scale, 122.453125 * scale, 152.25 * scale, 129.953125 * scale);
  ctx.bezierCurveTo(130.25 * scale, 117.953125 * scale, 130.25 * scale, 117.953125 * scale, 108.25 * scale, 105.953125 * scale);
  ctx.bezierCurveTo(107.25 * scale, 98.953125 * scale, 107.25 * scale, 98.953125 * scale, 106.25 * scale, 91.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87.25 * scale, 84.953125 * scale);
  ctx.bezierCurveTo(123.75 * scale, 100.453125 * scale, 123.75 * scale, 100.453125 * scale, 160.25 * scale, 115.953125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 4 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(83.25 * scale, 83.953125 * scale);
  ctx.bezierCurveTo(47.75 * scale, 68.453125 * scale, 47.75 * scale, 68.453125 * scale, 12.25 * scale, 52.953125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(13.25 * scale, 53.953125 * scale);
  ctx.bezierCurveTo(17.25 * scale, 46.953125 * scale, 17.25 * scale, 46.953125 * scale, 21.25 * scale, 39.953125 * scale);
  ctx.bezierCurveTo(42.75 * scale, 52.453125 * scale, 42.75 * scale, 52.453125 * scale, 64.25 * scale, 64.953125 * scale);
  ctx.bezierCurveTo(64.25 * scale, 70.953125 * scale, 64.25 * scale, 70.953125 * scale, 64.25 * scale, 76.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(13.25 * scale, 53.953125 * scale);
  ctx.bezierCurveTo(17.25 * scale, 46.953125 * scale, 17.25 * scale, 46.953125 * scale, 21.25 * scale, 39.953125 * scale);
  ctx.bezierCurveTo(42.75 * scale, 52.453125 * scale, 42.75 * scale, 52.453125 * scale, 64.25 * scale, 64.953125 * scale);
  ctx.bezierCurveTo(64.25 * scale, 70.953125 * scale, 64.25 * scale, 70.953125 * scale, 64.25 * scale, 76.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(83.25 * scale, 83.953125 * scale);
  ctx.bezierCurveTo(47.75 * scale, 68.453125 * scale, 47.75 * scale, 68.453125 * scale, 12.25 * scale, 52.953125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 4 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84.25 * scale, 86.953125 * scale);
  ctx.bezierCurveTo(70.25 * scale, 123.953125 * scale, 70.25 * scale, 123.953125 * scale, 56.25 * scale, 160.953125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56.25 * scale, 159.953125 * scale);
  ctx.bezierCurveTo(49.25 * scale, 155.453125 * scale, 49.25 * scale, 155.453125 * scale, 42.25 * scale, 150.953125 * scale);
  ctx.bezierCurveTo(54.25 * scale, 127.953125 * scale, 54.25 * scale, 127.953125 * scale, 66.25 * scale, 104.953125 * scale);
  ctx.bezierCurveTo(71.25 * scale, 104.953125 * scale, 71.25 * scale, 104.953125 * scale, 76.25 * scale, 104.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56.25 * scale, 159.953125 * scale);
  ctx.bezierCurveTo(49.25 * scale, 155.453125 * scale, 49.25 * scale, 155.453125 * scale, 42.25 * scale, 150.953125 * scale);
  ctx.bezierCurveTo(54.25 * scale, 127.953125 * scale, 54.25 * scale, 127.953125 * scale, 66.25 * scale, 104.953125 * scale);
  ctx.bezierCurveTo(71.25 * scale, 104.953125 * scale, 71.25 * scale, 104.953125 * scale, 76.25 * scale, 104.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84.25 * scale, 86.953125 * scale);
  ctx.bezierCurveTo(70.25 * scale, 123.953125 * scale, 70.25 * scale, 123.953125 * scale, 56.25 * scale, 160.953125 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 4 * scale);
  return can;
};

function create_windmill_head(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 170 * scale;
  can.height = 173 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(86.25 * scale, 84.953125 * scale);
  round_regular_polygon(ctx, 7, 9.848857801796104 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(86.25 * scale, 84.953125 * scale);
  round_regular_polygon(ctx, 7, 9.848857801796104 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[8], color[9], 4 * scale);
  return can;
};

function create_cord(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 75;
  var h = scale * 55;
  var width = scale * 4;
  can.width = w;
  can.height = h;
  ctx.translate(-30 * scale, -40 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.bezierCurveTo(67 * scale, 56 * scale, 72 * scale, 71 * scale, 72 * scale, 71 * scale);
  ctx.bezierCurveTo(72 * scale, 71 * scale, 84 * scale, 70 * scale, 75 * scale, 82 * scale);
  ctx.bezierCurveTo(70 * scale, 88 * scale, 61 * scale, 89 * scale, 58 * scale, 89 * scale);
  ctx.bezierCurveTo(55 * scale, 89 * scale, 40 * scale, 89 * scale, 46 * scale, 77 * scale);
  ctx.bezierCurveTo(46 * scale, 77 * scale, 43 * scale, 63 * scale, 43 * scale, 63 * scale);
  ctx.bezierCurveTo(35 * scale, 61 * scale, 35 * scale, 53 * scale, 42 * scale, 47 * scale);
  ctx.bezierCurveTo(48 * scale, 42 * scale, 62 * scale, 41 * scale, 66 * scale, 43 * scale);
  ctx.bezierCurveTo(70 * scale, 45 * scale, 72 * scale, 48 * scale, 67 * scale, 56 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.bezierCurveTo(68 * scale, 61 * scale, 72 * scale, 76 * scale, 72 * scale, 76 * scale);
  ctx.bezierCurveTo(65 * scale, 85 * scale, 61 * scale, 85 * scale, 49 * scale, 83 * scale);
  ctx.bezierCurveTo(49 * scale, 83 * scale, 44 * scale, 63 * scale, 44 * scale, 63 * scale);
  ctx.bezierCurveTo(54 * scale, 63 * scale, 60 * scale, 63 * scale, 67 * scale, 55 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.moveTo(69 * scale, 65 * scale);
  ctx.bezierCurveTo(70 * scale, 61 * scale, 81 * scale, 66 * scale, 86 * scale, 66 * scale);
  ctx.bezierCurveTo(90 * scale, 66 * scale, 97 * scale, 63 * scale, 97 * scale, 56 * scale);
  ctx.bezierCurveTo(97 * scale, 50 * scale, 93 * scale, 47 * scale, 88 * scale, 44 * scale);
  fill_path(ctx, false, color[1], 2);
  ctx.beginPath();
  ctx.moveTo(50 * scale, 48 * scale);
  ctx.bezierCurveTo(43 * scale, 52 * scale, 50 * scale, 54 * scale, 51 * scale, 54 * scale);
  ctx.bezierCurveTo(54 * scale, 54 * scale, 59 * scale, 52 * scale, 59 * scale, 49 * scale);
  ctx.bezierCurveTo(59 * scale, 48 * scale, 55 * scale, 46 * scale, 50 * scale, 48 * scale);
  fill_path(ctx, color[2]);
  return can;
};

function create_bandage(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 195;
  var h = scale * 190;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  var round = scale * 10;
  var wf = scale * 35;
  var hf = scale * 150;
  var wf2 = wf / 2;
  var hf2 = hf / 2;
  var width = scale * 4;
  ctx.translate(x - (5 * scale), y - (5 * scale));
  ctx.rotate(-Math.PI / 1.25);
  ctx.globalAlpha = 1;
  round_rect(ctx, -wf2, -hf2, wf, hf, round);
  fill_path(ctx, color[0], color[1], width);
  ctx.translate(0, 0);
  ctx.rotate(Math.PI / 3);
  ctx.globalAlpha = 1;
  round_rect(ctx, -wf2, -hf2, wf, hf, round);
  fill_path(ctx, color[0], color[1], width);
  ctx.translate(0, 5);
  round_rect(ctx, -wf2 / 2, -hf2 / 2, wf / 2, hf / 3, round - 2);
  fill_path(ctx, color[1]);
  return can;
};

function create_craft_button(scale, funs, subscale, color, alpha) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 70;
  var h = scale * 70;
  var r = scale * 10;
  var shadow = scale * 5;
  can.width = w;
  can.height = h + shadow;
  for (var i = 0; i < funs.length; i++) {
    var f = funs[i];
    ctx.globalAlpha = f.a;
    var img = f.f(subscale, false, f.c);
    ctx.save();
    ctx.translate((w / 2) + (f.x * scale), (h / 2) + (f.y * scale));
    ctx.rotate(f.r);
    ctx.drawImage(img, -img.width / 2, -img.height / 2);
    ctx.restore();
  }
  var buttons = [];
  for (var i = 0; i < color.length; i++) {
    var tmpcan = document.createElement("canvas");
    var tmpctx = tmpcan.getContext("2d");
    tmpcan.width = w;
    tmpcan.height = h + shadow;
    tmpctx.globalAlpha = alpha / 2;
    if (i == 2)
      round_rect(tmpctx, 0, shadow, w, h, r);
    else
      round_rect(tmpctx, 0, 0, w, h + shadow, r);
    fill_path(tmpctx, "#081a19");
    tmpctx.globalAlpha = alpha;
    if (i == 2)
      round_rect(tmpctx, 0, shadow, w, h, r);
    else
      round_rect(tmpctx, 0, 0, w, h, r);
    fill_path(tmpctx, color[i]);
    tmpctx.globalAlpha = 1;
    if (i == 2)
      tmpctx.drawImage(can, 0, shadow);
    else
      tmpctx.drawImage(can, 0, 0);
    buttons.push(CTI(tmpcan));
  }
  return buttons;
};

function create_bread_oven_ui(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 149 * scale;
  can.height = 356 * scale;
  ctx.save();
  ctx.translate(74.5 * scale, 177.5 * scale);
  round_rect(ctx, -57.5 * scale, -161.5 * scale, 100 * scale, 323 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.save();
  ctx.translate(74.5 * scale, 177.5 * scale);
  round_rect(ctx, -57.5 * scale, 50.5 * scale, 100 * scale, 105 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[6], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(16 * scale, 125 * scale);
  ctx.bezierCurveTo(74.5 * scale, 125 * scale, 118 * scale, 125 * scale, 118 * scale, 125 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(16 * scale, 120 * scale);
  ctx.bezierCurveTo(74.5 * scale, 120 * scale, 74.5 * scale, 120 * scale, 118 * scale, 120 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(16 * scale, 228 * scale);
  ctx.bezierCurveTo(75 * scale, 228.5 * scale, 118 * scale, 228.5 * scale, 118 * scale, 229 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(16 * scale, 224 * scale);
  ctx.bezierCurveTo(75 * scale, 224 * scale, 118 * scale, 224 * scale, 118 * scale, 224 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 10 * scale);
  ctx.save();
  ctx.translate(72 * scale, 68.5 * scale);
  round_rect(ctx, -41.5 * scale, -36.5 * scale, 73 * scale, 73 * scale, 13 * scale);
  ctx.restore();
  fill_path(ctx, color[4]);
  ctx.save();
  ctx.translate(72 * scale, 175.5 * scale);
  round_rect(ctx, -41.5 * scale, -38.5 * scale, 73 * scale, 73 * scale, 13 * scale);
  ctx.restore();
  fill_path(ctx, color[4]);
  ctx.save();
  ctx.translate(72 * scale, 279.5 * scale);
  round_rect(ctx, -41.5 * scale, -40.5 * scale, 73 * scale, 73 * scale, 13 * scale);
  ctx.restore();
  fill_path(ctx, color[4]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(16 * scale, 338 * scale);
  ctx.bezierCurveTo(75 * scale, 338 * scale, 118 * scale, 338 * scale, 118 * scale, 338 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(16 * scale, 333 * scale);
  ctx.bezierCurveTo(75 * scale, 333 * scale, 118 * scale, 333 * scale, 118 * scale, 333 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 10 * scale);
  return can;
};

function create_big_fire_wood(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 193;
  var h = scale * 198;
  var x = 140 * scale;
  var y = 90 * scale;
  can.width = w;
  can.height = h;
  var round = scale * 10;
  var wf = scale * 25;
  var hf = scale * 180;
  var wf2 = wf / 2;
  var hf2 = hf / 2;
  var width = scale * 4;
  ctx.translate(-25 * scale, 1 * scale);
  ctx.translate(x, y);
  ctx.rotate(-Math.PI / 5);
  round_rect(ctx, -wf2, -hf2, wf, hf, round);
  fill_path(ctx, color[0], color[1], width);
  ctx.translate(-30 * scale, -25 * scale);
  ctx.rotate(Math.PI / 3);
  round_rect(ctx, -wf2, -hf2, wf, hf, round);
  fill_path(ctx, color[0], color[1], width);
  ctx.translate(35 * scale, 30 * scale);
  ctx.rotate(Math.PI / 3);
  round_rect(ctx, -wf2, -hf2, wf, hf, round);
  fill_path(ctx, color[0], color[1], width);
  return can;
};

function create_fire(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 145;
  var h = scale * 145;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  var r = scale * 70;
  ctx.translate(x, y);
  ctx.globalAlpha = 0.4;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[0]);
  var r = scale * 50;
  ctx.translate(0, 0);
  ctx.globalAlpha = 0.8;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[0]);
  var r = scale * 35;
  ctx.translate(0, 0);
  ctx.globalAlpha = 0.8;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[1]);
  var r = scale * 20;
  ctx.translate(0, 0);
  ctx.globalAlpha = 0.8;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[2]);
  return can;
};

function create_wood_fire(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 135;
  var h = scale * 190;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  var round = scale * 10;
  var wf = scale * 25;
  var hf = scale * 180;
  var wf2 = wf / 2;
  var hf2 = hf / 2;
  var width = scale * 4;
  ctx.translate(x, y);
  ctx.rotate(-Math.PI / 5);
  ctx.globalAlpha = 1;
  round_rect(ctx, -wf2, -hf2, wf, hf, round);
  fill_path(ctx, color[0], color[1], width);
  ctx.translate(0, 0);
  ctx.rotate(Math.PI / 5);
  ctx.globalAlpha = 1;
  round_rect(ctx, -wf2, -hf2, wf, hf, round);
  fill_path(ctx, color[0], color[1], width);
  return can;
};

function create_ground_fire(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 205;
  var h = scale * 205;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  var r = scale * 100;
  ctx.translate(x, y);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[0]);
  return can;
};

function create_halo_fire(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 370;
  var h = scale * 370;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  var r = scale * 180;
  ctx.globalAlpha = 0.2;
  circle(ctx, x, y, r);
  fill_path(ctx, color[0]);
  return can;
};

function create_elf_hat(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 155 * scale;
  can.height = 127 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 8 * scale);
  ctx.translate(-7 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 68 * scale);
  ctx.bezierCurveTo(86 * scale, 64 * scale, 117 * scale, 66 * scale, 134 * scale, 68 * scale);
  ctx.bezierCurveTo(152 * scale, 69 * scale, 165 * scale, 86 * scale, 152 * scale, 104 * scale);
  ctx.bezierCurveTo(146 * scale, 87 * scale, 122 * scale, 89 * scale, 98 * scale, 90 * scale);
  ctx.bezierCurveTo(64 * scale, 89 * scale, 41 * scale, 91 * scale, 36 * scale, 106 * scale);
  ctx.bezierCurveTo(19 * scale, 92 * scale, 31 * scale, 71 * scale, 54 * scale, 69 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -8 * scale);
  ctx.translate(7 * scale, 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(24 * scale, 28 * scale);
  ctx.bezierCurveTo(39 * scale, 30 * scale, 37 * scale, 31 * scale, 40 * scale, 32 * scale);
  ctx.bezierCurveTo(22 * scale, 45 * scale, 26 * scale, 58 * scale, 29 * scale, 66 * scale);
  ctx.bezierCurveTo(86.5 * scale, 65 * scale, 86.5 * scale, 65 * scale, 144 * scale, 64 * scale);
  ctx.bezierCurveTo(151 * scale, 42 * scale, 132 * scale, 20 * scale, 120 * scale, 16 * scale);
  ctx.bezierCurveTo(106 * scale, 12 * scale, 89 * scale, 0 * scale, 73 * scale, 3 * scale);
  ctx.bezierCurveTo(51 * scale, 5 * scale, 36 * scale, 20 * scale, 25 * scale, 28 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 41 * scale);
  ctx.bezierCurveTo(49 * scale, 31 * scale, 53 * scale, 29 * scale, 62 * scale, 27 * scale);
  ctx.bezierCurveTo(59 * scale, 24 * scale, 56 * scale, 25 * scale, 53 * scale, 24 * scale);
  ctx.bezierCurveTo(67 * scale, 15 * scale, 84 * scale, 12 * scale, 120 * scale, 16 * scale);
  ctx.bezierCurveTo(107 * scale, 11 * scale, 96 * scale, 6 * scale, 85 * scale, 2 * scale);
  ctx.bezierCurveTo(59 * scale, 3 * scale, 54 * scale, 7 * scale, 40 * scale, 17 * scale);
  ctx.bezierCurveTo(32.5 * scale, 22.5 * scale, 32.5 * scale, 22.5 * scale, 25 * scale, 28 * scale);
  ctx.bezierCurveTo(32 * scale, 30 * scale, 32 * scale, 30 * scale, 39 * scale, 32 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(24 * scale, 28 * scale);
  ctx.bezierCurveTo(39 * scale, 30 * scale, 37 * scale, 31 * scale, 40 * scale, 32 * scale);
  ctx.bezierCurveTo(22 * scale, 45 * scale, 26 * scale, 58 * scale, 29 * scale, 66 * scale);
  ctx.bezierCurveTo(86.5 * scale, 65 * scale, 86.5 * scale, 65 * scale, 144 * scale, 64 * scale);
  ctx.bezierCurveTo(151 * scale, 42 * scale, 132 * scale, 20 * scale, 120 * scale, 16 * scale);
  ctx.bezierCurveTo(106 * scale, 12 * scale, 89 * scale, 0 * scale, 73 * scale, 3 * scale);
  ctx.bezierCurveTo(51 * scale, 5 * scale, 36 * scale, 20 * scale, 25 * scale, 28 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 4 * scale);
  circle(ctx, 18 * scale, 38 * scale, 14.866068747318506 * scale);
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39 * scale, 30 * scale);
  ctx.bezierCurveTo(27 * scale, 38 * scale, 25 * scale, 50 * scale, 26 * scale, 60 * scale);
  ctx.bezierCurveTo(36.5 * scale, 58.5 * scale, 36.5 * scale, 58.5 * scale, 47 * scale, 57 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.translate(-7 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(27 * scale, 74 * scale);
  ctx.bezierCurveTo(38 * scale, 77.5 * scale, 38 * scale, 77.5 * scale, 49 * scale, 81 * scale);
  ctx.bezierCurveTo(54.5 * scale, 75.5 * scale, 54.5 * scale, 75.5 * scale, 60 * scale, 70 * scale);
  ctx.bezierCurveTo(64 * scale, 72 * scale, 64 * scale, 72 * scale, 68 * scale, 74 * scale);
  ctx.bezierCurveTo(80.5 * scale, 67.5 * scale, 80.5 * scale, 67.5 * scale, 93 * scale, 61 * scale);
  ctx.bezierCurveTo(104.5 * scale, 68 * scale, 104.5 * scale, 68 * scale, 116 * scale, 75 * scale);
  ctx.bezierCurveTo(120.5 * scale, 72.5 * scale, 120.5 * scale, 72.5 * scale, 125 * scale, 70 * scale);
  ctx.bezierCurveTo(129 * scale, 75 * scale, 129 * scale, 75 * scale, 133 * scale, 80 * scale);
  ctx.bezierCurveTo(145.5 * scale, 76.5 * scale, 145.5 * scale, 76.5 * scale, 158 * scale, 73 * scale);
  ctx.bezierCurveTo(158 * scale, 87 * scale, 158 * scale, 93 * scale, 155 * scale, 95 * scale);
  ctx.bezierCurveTo(152.5 * scale, 96 * scale, 152.5 * scale, 96 * scale, 150 * scale, 97 * scale);
  ctx.bezierCurveTo(121 * scale, 85 * scale, 108 * scale, 86 * scale, 93 * scale, 85 * scale);
  ctx.bezierCurveTo(64 * scale, 85 * scale, 52 * scale, 95 * scale, 38 * scale, 99 * scale);
  ctx.bezierCurveTo(36 * scale, 98.5 * scale, 36 * scale, 98.5 * scale, 34 * scale, 98 * scale);
  ctx.bezierCurveTo(25 * scale, 98 * scale, 27 * scale, 91 * scale, 27 * scale, 76 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 6 * scale);
  return can;
};

function create_christmas_hat(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 155 * scale;
  can.height = 127 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 8 * scale);
  ctx.translate(-7 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 68 * scale);
  ctx.bezierCurveTo(86 * scale, 64 * scale, 117 * scale, 66 * scale, 134 * scale, 68 * scale);
  ctx.bezierCurveTo(152 * scale, 69 * scale, 165 * scale, 86 * scale, 152 * scale, 104 * scale);
  ctx.bezierCurveTo(146 * scale, 87 * scale, 122 * scale, 89 * scale, 98 * scale, 90 * scale);
  ctx.bezierCurveTo(64 * scale, 89 * scale, 41 * scale, 91 * scale, 36 * scale, 106 * scale);
  ctx.bezierCurveTo(19 * scale, 92 * scale, 31 * scale, 71 * scale, 54 * scale, 69 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -8 * scale);
  ctx.translate(7 * scale, 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(24 * scale, 28 * scale);
  ctx.bezierCurveTo(39 * scale, 30 * scale, 37 * scale, 31 * scale, 40 * scale, 32 * scale);
  ctx.bezierCurveTo(22 * scale, 45 * scale, 26 * scale, 58 * scale, 29 * scale, 66 * scale);
  ctx.bezierCurveTo(86.5 * scale, 65 * scale, 86.5 * scale, 65 * scale, 144 * scale, 64 * scale);
  ctx.bezierCurveTo(151 * scale, 42 * scale, 132 * scale, 20 * scale, 120 * scale, 16 * scale);
  ctx.bezierCurveTo(106 * scale, 12 * scale, 89 * scale, 0 * scale, 73 * scale, 3 * scale);
  ctx.bezierCurveTo(51 * scale, 5 * scale, 36 * scale, 20 * scale, 25 * scale, 28 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 41 * scale);
  ctx.bezierCurveTo(49 * scale, 31 * scale, 53 * scale, 29 * scale, 62 * scale, 27 * scale);
  ctx.bezierCurveTo(59 * scale, 24 * scale, 56 * scale, 25 * scale, 53 * scale, 24 * scale);
  ctx.bezierCurveTo(67 * scale, 15 * scale, 84 * scale, 12 * scale, 120 * scale, 16 * scale);
  ctx.bezierCurveTo(107 * scale, 11 * scale, 96 * scale, 6 * scale, 85 * scale, 2 * scale);
  ctx.bezierCurveTo(59 * scale, 3 * scale, 54 * scale, 7 * scale, 40 * scale, 17 * scale);
  ctx.bezierCurveTo(32.5 * scale, 22.5 * scale, 32.5 * scale, 22.5 * scale, 25 * scale, 28 * scale);
  ctx.bezierCurveTo(32 * scale, 30 * scale, 32 * scale, 30 * scale, 39 * scale, 32 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(24 * scale, 28 * scale);
  ctx.bezierCurveTo(39 * scale, 30 * scale, 37 * scale, 31 * scale, 40 * scale, 32 * scale);
  ctx.bezierCurveTo(22 * scale, 45 * scale, 26 * scale, 58 * scale, 29 * scale, 66 * scale);
  ctx.bezierCurveTo(86.5 * scale, 65 * scale, 86.5 * scale, 65 * scale, 144 * scale, 64 * scale);
  ctx.bezierCurveTo(151 * scale, 42 * scale, 132 * scale, 20 * scale, 120 * scale, 16 * scale);
  ctx.bezierCurveTo(106 * scale, 12 * scale, 89 * scale, 0 * scale, 73 * scale, 3 * scale);
  ctx.bezierCurveTo(51 * scale, 5 * scale, 36 * scale, 20 * scale, 25 * scale, 28 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 4 * scale);
  circle(ctx, 18 * scale, 38 * scale, 14.866068747318506 * scale);
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39 * scale, 30 * scale);
  ctx.bezierCurveTo(27 * scale, 38 * scale, 25 * scale, 50 * scale, 26 * scale, 60 * scale);
  ctx.bezierCurveTo(36.5 * scale, 58.5 * scale, 36.5 * scale, 58.5 * scale, 47 * scale, 57 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.translate(-7 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 68 * scale);
  ctx.bezierCurveTo(86 * scale, 64 * scale, 117 * scale, 66 * scale, 134 * scale, 68 * scale);
  ctx.bezierCurveTo(152 * scale, 69 * scale, 165 * scale, 86 * scale, 152 * scale, 104 * scale);
  ctx.bezierCurveTo(146 * scale, 87 * scale, 122 * scale, 89 * scale, 98 * scale, 90 * scale);
  ctx.bezierCurveTo(64 * scale, 89 * scale, 41 * scale, 91 * scale, 36 * scale, 106 * scale);
  ctx.bezierCurveTo(19 * scale, 92 * scale, 31 * scale, 71 * scale, 54 * scale, 69 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  return can;
};

function create_zombie_hand(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 220;
  var h = scale * 220;
  var r = scale * 32;
  var width = scale * 4;
  can.width = w;
  can.height = h;
  ctx.translate(w / 2, (h / 2) + (10 * scale));
  ctx.globalAlpha = 0.5;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[0], color[0]);
  ctx.translate(0, -8 * scale);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[1], color[2], width);
  return can;
};

function create_hand(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 40;
  var h = scale * 40;
  var r = scale * 16;
  var width = scale * 4;
  can.width = w;
  can.height = h;
  ctx.translate(w / 2, h / 2);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[0], color[1], width);
  return can;
};

function create_hand_shadow(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 220;
  var h = scale * 220;
  var r = scale * 16;
  can.width = w;
  can.height = h;
  ctx.translate(w / 2, h / 2);
  ctx.globalAlpha = 0.5;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  return can;
};

function create_apricot_tree(scale, color, rotate, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 210;
  var h = scale * 205;
  var w2 = w / 2;
  var h2 = h / 2;
  var round = scale * 30;
  var shadow = scale * 20;
  var wt = scale * 200;
  var ht = scale * 180;
  var r = scale * 80;
  var wt2 = wt / 2;
  var ht2 = ht / 2;
  var width = 4;
  can.width = w;
  can.height = h;
  can.width = 419 * scale;
  can.height = 412 * scale;
  if (i == 1) {
    ctx.save();
    ctx.translate(10 * scale, 0 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(117.99996948242188 * scale, 216.40621948242188 * scale);
    ctx.bezierCurveTo(86.99996948242188 * scale, 221.40621948242188 * scale, 74.99996948242188 * scale, 217.40621948242188 * scale, 60.999969482421875 * scale, 205.40621948242188 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(114.99996948242188 * scale, 227.40621948242188 * scale);
    ctx.bezierCurveTo(90.99996948242188 * scale, 233.40621948242188 * scale, 66.99996948242188 * scale, 228.40621948242188 * scale, 43.999969482421875 * scale, 225.40621948242188 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(110.99996948242188 * scale, 236.40621948242188 * scale);
    ctx.bezierCurveTo(94.99996948242188 * scale, 244.40621948242188 * scale, 79.99996948242188 * scale, 249.40621948242188 * scale, 60.999969482421875 * scale, 249.40621948242188 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(111.99996948242188 * scale, 206.29513549804688 * scale);
    ctx.bezierCurveTo(91.99996948242188 * scale, 206.29513549804688 * scale, 87.99996948242188 * scale, 201.29513549804688 * scale, 79.99996948242188 * scale, 192.29513549804688 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(109.99996948242188 * scale, 249.18402099609375 * scale);
    ctx.bezierCurveTo(97.99996948242188 * scale, 263.18402099609375 * scale, 85.99996948242188 * scale, 271.18402099609375 * scale, 65.99996948242188 * scale, 277.18402099609375 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(105.99996948242188 * scale, 192.18402099609375 * scale);
    ctx.bezierCurveTo(99.49996948242188 * scale, 197.68402099609375 * scale, 99.49996948242188 * scale, 197.68402099609375 * scale, 92.99996948242188 * scale, 203.18402099609375 * scale);
    ctx.bezierCurveTo(95.99996948242188 * scale, 213.18402099609375 * scale, 95.99996948242188 * scale, 215.18402099609375 * scale, 89.99996948242188 * scale, 219.18402099609375 * scale);
    ctx.bezierCurveTo(91.99996948242188 * scale, 223.18402099609375 * scale, 91.99996948242188 * scale, 226.18402099609375 * scale, 87.99996948242188 * scale, 230.18402099609375 * scale);
    ctx.bezierCurveTo(89.99996948242188 * scale, 234.18402099609375 * scale, 91.99996948242188 * scale, 237.18402099609375 * scale, 90.99996948242188 * scale, 244.18402099609375 * scale);
    ctx.bezierCurveTo(96.99996948242188 * scale, 252.18402099609375 * scale, 96.99996948242188 * scale, 256.18402099609375 * scale, 95.99996948242188 * scale, 262.18402099609375 * scale);
    ctx.bezierCurveTo(106.49996948242188 * scale, 264.18402099609375 * scale, 106.49996948242188 * scale, 264.18402099609375 * scale, 116.99996948242188 * scale, 266.18402099609375 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(104.99996948242188 * scale, 183.29513549804688 * scale);
    ctx.bezierCurveTo(99.99996948242188 * scale, 193.29513549804688 * scale, 93.99996948242188 * scale, 195.29513549804688 * scale, 89.99996948242188 * scale, 201.29513549804688 * scale);
    ctx.bezierCurveTo(86.99996948242188 * scale, 212.29513549804688 * scale, 85.99996948242188 * scale, 214.29513549804688 * scale, 81.99996948242188 * scale, 215.29513549804688 * scale);
    ctx.bezierCurveTo(83.99996948242188 * scale, 223.29513549804688 * scale, 83.99996948242188 * scale, 227.29513549804688 * scale, 79.99996948242188 * scale, 230.29513549804688 * scale);
    ctx.bezierCurveTo(83.99996948242188 * scale, 235.29513549804688 * scale, 84.99996948242188 * scale, 240.29513549804688 * scale, 79.99996948242188 * scale, 246.29513549804688 * scale);
    ctx.bezierCurveTo(86.99996948242188 * scale, 251.29513549804688 * scale, 91.99996948242188 * scale, 256.2951354980469 * scale, 89.99996948242188 * scale, 266.2951354980469 * scale);
    ctx.bezierCurveTo(102.99996948242188 * scale, 269.2951354980469 * scale, 102.99996948242188 * scale, 269.2951354980469 * scale, 115.99996948242188 * scale, 272.2951354980469 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(107.99996948242188 * scale, 177.85067749023438 * scale);
    ctx.bezierCurveTo(95.99996948242188 * scale, 187.35067749023438 * scale, 95.99996948242188 * scale, 187.35067749023438 * scale, 83.99996948242188 * scale, 196.85067749023438 * scale);
    ctx.bezierCurveTo(82.99996948242188 * scale, 203.85067749023438 * scale, 80.99996948242188 * scale, 209.85067749023438 * scale, 72.99996948242188 * scale, 210.85067749023438 * scale);
    ctx.bezierCurveTo(73.99996948242188 * scale, 220.85067749023438 * scale, 73.99996948242188 * scale, 221.85067749023438 * scale, 66.99996948242188 * scale, 227.85067749023438 * scale);
    ctx.bezierCurveTo(71.99996948242188 * scale, 235.85067749023438 * scale, 73.99996948242188 * scale, 239.85067749023438 * scale, 71.99996948242188 * scale, 247.85067749023438 * scale);
    ctx.bezierCurveTo(80.99996948242188 * scale, 257.8506774902344 * scale, 81.99996948242188 * scale, 263.8506774902344 * scale, 77.99996948242188 * scale, 271.8506774902344 * scale);
    ctx.bezierCurveTo(95.49996948242188 * scale, 272.8506774902344 * scale, 95.49996948242188 * scale, 272.8506774902344 * scale, 112.99996948242188 * scale, 273.8506774902344 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.restore();
  } else if (i == 2) {
    ctx.save();
    ctx.translate(130 * scale, 35 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(170.99996948242188 * scale, 133.85067749023438 * scale);
    ctx.bezierCurveTo(195.99996948242188 * scale, 129.85067749023438 * scale, 196.99996948242188 * scale, 111.85067749023438 * scale, 200.99996948242188 * scale, 88.85067749023438 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(169.99996948242188 * scale, 143.85067749023438 * scale);
    ctx.bezierCurveTo(189.99996948242188 * scale, 145.85067749023438 * scale, 207.99996948242188 * scale, 126.85067749023438 * scale, 222.99996948242188 * scale, 100.85067749023438 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(170.99996948242188 * scale, 157.85067749023438 * scale);
    ctx.bezierCurveTo(193.99996948242188 * scale, 160.85067749023438 * scale, 210.99996948242188 * scale, 151.85067749023438 * scale, 232.99996948242188 * scale, 139.85067749023438 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(169.99996948242188 * scale, 168.85067749023438 * scale);
    ctx.bezierCurveTo(192.99996948242188 * scale, 175.85067749023438 * scale, 203.99996948242188 * scale, 177.85067749023438 * scale, 245.99996948242188 * scale, 168.85067749023438 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(167.99996948242188 * scale, 168.85067749023438 * scale);
    ctx.bezierCurveTo(183.99996948242188 * scale, 189.85067749023438 * scale, 191.99996948242188 * scale, 193.85067749023438 * scale, 220.99996948242188 * scale, 196.85067749023438 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(176.99996948242188 * scale, 117.85067749023438 * scale);
    ctx.bezierCurveTo(181.99996948242188 * scale, 120.85067749023438 * scale, 181.99996948242188 * scale, 120.85067749023438 * scale, 186.99996948242188 * scale, 123.85067749023438 * scale);
    ctx.bezierCurveTo(183.99996948242188 * scale, 137.85067749023438 * scale, 185.99996948242188 * scale, 136.85067749023438 * scale, 190.99996948242188 * scale, 136.85067749023438 * scale);
    ctx.bezierCurveTo(186.99996948242188 * scale, 147.85067749023438 * scale, 189.99996948242188 * scale, 152.85067749023438 * scale, 193.99996948242188 * scale, 155.85067749023438 * scale);
    ctx.bezierCurveTo(187.99996948242188 * scale, 165.85067749023438 * scale, 190.99996948242188 * scale, 169.85067749023438 * scale, 190.99996948242188 * scale, 172.85067749023438 * scale);
    ctx.bezierCurveTo(186.99996948242188 * scale, 183.85067749023438 * scale, 186.99996948242188 * scale, 185.85067749023438 * scale, 189.99996948242188 * scale, 188.85067749023438 * scale);
    ctx.bezierCurveTo(182.49996948242188 * scale, 195.35067749023438 * scale, 182.49996948242188 * scale, 195.35067749023438 * scale, 174.99996948242188 * scale, 201.85067749023438 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(176.99996948242188 * scale, 112.18402099609375 * scale);
    ctx.bezierCurveTo(183.99996948242188 * scale, 119.18402099609375 * scale, 186.99996948242188 * scale, 117.18402099609375 * scale, 192.99996948242188 * scale, 116.18402099609375 * scale);
    ctx.bezierCurveTo(191.99996948242188 * scale, 126.18402099609375 * scale, 193.99996948242188 * scale, 130.18402099609375 * scale, 199.99996948242188 * scale, 130.18402099609375 * scale);
    ctx.bezierCurveTo(194.99996948242188 * scale, 145.18402099609375 * scale, 197.99996948242188 * scale, 147.18402099609375 * scale, 201.99996948242188 * scale, 153.18402099609375 * scale);
    ctx.bezierCurveTo(196.99996948242188 * scale, 164.18402099609375 * scale, 197.99996948242188 * scale, 169.18402099609375 * scale, 201.99996948242188 * scale, 174.18402099609375 * scale);
    ctx.bezierCurveTo(194.99996948242188 * scale, 184.18402099609375 * scale, 196.99996948242188 * scale, 187.18402099609375 * scale, 200.99996948242188 * scale, 193.18402099609375 * scale);
    ctx.bezierCurveTo(185.99996948242188 * scale, 195.18402099609375 * scale, 181.99996948242188 * scale, 201.18402099609375 * scale, 174.99996948242188 * scale, 210.18402099609375 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(176.99996948242188 * scale, 101.29513549804688 * scale);
    ctx.bezierCurveTo(181.99996948242188 * scale, 108.29513549804688 * scale, 189.99996948242188 * scale, 110.29513549804688 * scale, 195.99996948242188 * scale, 107.29513549804688 * scale);
    ctx.bezierCurveTo(197.99996948242188 * scale, 121.29513549804688 * scale, 200.99996948242188 * scale, 122.29513549804688 * scale, 206.99996948242188 * scale, 122.29513549804688 * scale);
    ctx.bezierCurveTo(201.99996948242188 * scale, 138.29513549804688 * scale, 204.99996948242188 * scale, 142.29513549804688 * scale, 211.99996948242188 * scale, 148.29513549804688 * scale);
    ctx.bezierCurveTo(201.99996948242188 * scale, 156.29513549804688 * scale, 205.99996948242188 * scale, 167.29513549804688 * scale, 213.99996948242188 * scale, 173.29513549804688 * scale);
    ctx.bezierCurveTo(204.99996948242188 * scale, 181.29513549804688 * scale, 204.99996948242188 * scale, 187.29513549804688 * scale, 205.99996948242188 * scale, 193.29513549804688 * scale);
    ctx.bezierCurveTo(190.99996948242188 * scale, 198.29513549804688 * scale, 181.99996948242188 * scale, 205.29513549804688 * scale, 174.99996948242188 * scale, 214.29513549804688 * scale);
    fill_path(ctx, undefined, color[4], 3 * scale);
    ctx.restore();
  }
  ctx.translate(can.width / 2, can.height / 2);
  if (!i) {
    ctx.globalAlpha = 0.5;
    round_rect(ctx, -wt2, -ht2, wt, ht + shadow, round);
    fill_path(ctx, color[0]);
    if (rotate)
      ctx.rotate(Math.PI);

    ctx.globalAlpha = 1;
    round_rect(ctx, -wt2, -ht2, wt, ht, round);
    fill_path(ctx, color[1], color[2], width);
    ctx.globalAlpha = 1;
    round_rect(ctx, -wt2 + (35 * scale), -ht2 + (20 * scale), wt - (50 * scale), ht - (50 * scale), round - (10 * scale));
    fill_path(ctx, color[3]);
  }
  if (i == 3) {
    ctx.translate(-can.width / 2, -can.height / 2);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(121 * scale, 190 * scale);
    ctx.bezierCurveTo(129 * scale, 186 * scale, 137 * scale, 183 * scale, 135 * scale, 163 * scale);
    ctx.bezierCurveTo(131 * scale, 135 * scale, 153 * scale, 127 * scale, 177 * scale, 124 * scale);
    ctx.bezierCurveTo(198 * scale, 120 * scale, 208 * scale, 122 * scale, 226 * scale, 128 * scale);
    ctx.bezierCurveTo(261 * scale, 112 * scale, 271 * scale, 126 * scale, 287 * scale, 147 * scale);
    ctx.bezierCurveTo(310 * scale, 163 * scale, 304 * scale, 183 * scale, 283 * scale, 196 * scale);
    ctx.bezierCurveTo(296 * scale, 249 * scale, 278 * scale, 262 * scale, 253 * scale, 263 * scale);
    ctx.bezierCurveTo(210 * scale, 264 * scale, 188 * scale, 252 * scale, 177 * scale, 234 * scale);
    ctx.bezierCurveTo(133 * scale, 242 * scale, 123 * scale, 241 * scale, 115 * scale, 225 * scale);
    ctx.bezierCurveTo(109 * scale, 206 * scale, 115 * scale, 193 * scale, 121 * scale, 190 * scale);
    ctx.closePath();
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(219 * scale, 144 * scale);
    ctx.bezierCurveTo(251 * scale, 121 * scale, 277 * scale, 136 * scale, 276 * scale, 159 * scale);
    ctx.bezierCurveTo(276 * scale, 176 * scale, 273 * scale, 191 * scale, 242 * scale, 193 * scale);
    ctx.bezierCurveTo(226 * scale, 228 * scale, 155 * scale, 219 * scale, 150 * scale, 183 * scale);
    ctx.bezierCurveTo(142 * scale, 144 * scale, 174 * scale, 127 * scale, 219 * scale, 144 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(123 * scale, 214 * scale);
    ctx.bezierCurveTo(119 * scale, 198 * scale, 129 * scale, 189 * scale, 146 * scale, 194 * scale);
    ctx.bezierCurveTo(158 * scale, 201 * scale, 165 * scale, 218 * scale, 147 * scale, 226 * scale);
    ctx.bezierCurveTo(135 * scale, 230 * scale, 125 * scale, 222 * scale, 123 * scale, 214 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(257 * scale, 199 * scale);
    ctx.bezierCurveTo(264 * scale, 199 * scale, 275 * scale, 213 * scale, 261 * scale, 220 * scale);
    ctx.bezierCurveTo(246 * scale, 225 * scale, 235 * scale, 200 * scale, 257 * scale, 199 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.translate(-5 * scale, 55 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(186 * scale, 123 * scale);
    ctx.bezierCurveTo(198 * scale, 115 * scale, 219 * scale, 110 * scale, 219 * scale, 123 * scale);
    ctx.bezierCurveTo(216 * scale, 135 * scale, 171 * scale, 143 * scale, 186 * scale, 123 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.translate(5 * scale, -55 * scale);
    ctx.translate(-5 * scale, 15 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(171 * scale, 241 * scale);
    ctx.bezierCurveTo(189 * scale, 234 * scale, 200 * scale, 248 * scale, 189 * scale, 254 * scale);
    ctx.bezierCurveTo(179 * scale, 260 * scale, 158 * scale, 246 * scale, 171 * scale, 241 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
  } else if (i == 4) {
    ctx.translate(-can.width / 2, -can.height / 2);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(30 * scale, 167 * scale);
    ctx.bezierCurveTo(47 * scale, 144 * scale, 64 * scale, 140 * scale, 80 * scale, 147 * scale);
    ctx.bezierCurveTo(95 * scale, 154 * scale, 95 * scale, 159 * scale, 100 * scale, 179 * scale);
    ctx.bezierCurveTo(105 * scale, 202 * scale, 95 * scale, 218 * scale, 69 * scale, 218 * scale);
    ctx.bezierCurveTo(48 * scale, 236 * scale, 26 * scale, 223 * scale, 28 * scale, 213 * scale);
    ctx.bezierCurveTo(28 * scale, 205 * scale, 29 * scale, 199 * scale, 32 * scale, 195 * scale);
    ctx.bezierCurveTo(21 * scale, 183 * scale, 27 * scale, 173 * scale, 30 * scale, 167 * scale);
    ctx.closePath();
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(26 * scale, 145 * scale);
    ctx.bezierCurveTo(32 * scale, 138 * scale, 37 * scale, 137 * scale, 40 * scale, 139 * scale);
    ctx.bezierCurveTo(43 * scale, 140 * scale, 41 * scale, 150 * scale, 31 * scale, 159 * scale);
    ctx.bezierCurveTo(23 * scale, 166 * scale, 17 * scale, 158 * scale, 26 * scale, 145 * scale);
    ctx.closePath();
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(13 * scale, 193 * scale);
    ctx.bezierCurveTo(21 * scale, 187 * scale, 30 * scale, 190 * scale, 20 * scale, 202 * scale);
    ctx.bezierCurveTo(13 * scale, 208 * scale, 7 * scale, 202 * scale, 13 * scale, 193 * scale);
    ctx.closePath();
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(121 * scale, 190 * scale);
    ctx.bezierCurveTo(129 * scale, 186 * scale, 137 * scale, 183 * scale, 135 * scale, 163 * scale);
    ctx.bezierCurveTo(131 * scale, 135 * scale, 153 * scale, 127 * scale, 177 * scale, 124 * scale);
    ctx.bezierCurveTo(198 * scale, 120 * scale, 208 * scale, 122 * scale, 226 * scale, 128 * scale);
    ctx.bezierCurveTo(261 * scale, 112 * scale, 271 * scale, 126 * scale, 287 * scale, 147 * scale);
    ctx.bezierCurveTo(310 * scale, 163 * scale, 304 * scale, 183 * scale, 283 * scale, 196 * scale);
    ctx.bezierCurveTo(296 * scale, 249 * scale, 278 * scale, 262 * scale, 253 * scale, 263 * scale);
    ctx.bezierCurveTo(210 * scale, 264 * scale, 188 * scale, 252 * scale, 177 * scale, 234 * scale);
    ctx.bezierCurveTo(133 * scale, 242 * scale, 123 * scale, 241 * scale, 115 * scale, 225 * scale);
    ctx.bezierCurveTo(109 * scale, 206 * scale, 115 * scale, 193 * scale, 121 * scale, 190 * scale);
    ctx.closePath();
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(335 * scale, 196 * scale);
    ctx.bezierCurveTo(312 * scale, 208 * scale, 300 * scale, 185 * scale, 309 * scale, 167 * scale);
    ctx.bezierCurveTo(314 * scale, 141 * scale, 339 * scale, 127 * scale, 359 * scale, 144 * scale);
    ctx.bezierCurveTo(363 * scale, 148 * scale, 364 * scale, 150 * scale, 364 * scale, 150 * scale);
    ctx.bezierCurveTo(392 * scale, 143 * scale, 396 * scale, 183 * scale, 378 * scale, 204 * scale);
    ctx.bezierCurveTo(367 * scale, 215 * scale, 339 * scale, 208 * scale, 335 * scale, 196 * scale);
    ctx.closePath();
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(349 * scale, 212 * scale);
    ctx.bezierCurveTo(339 * scale, 216 * scale, 334 * scale, 208 * scale, 341 * scale, 203 * scale);
    ctx.bezierCurveTo(353 * scale, 198 * scale, 361 * scale, 205 * scale, 349 * scale, 212 * scale);
    ctx.closePath();
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(46 * scale, 165 * scale);
    ctx.bezierCurveTo(55 * scale, 148 * scale, 85 * scale, 157 * scale, 83 * scale, 175 * scale);
    ctx.bezierCurveTo(99 * scale, 185 * scale, 89 * scale, 212 * scale, 66 * scale, 204 * scale);
    ctx.bezierCurveTo(55 * scale, 212 * scale, 43 * scale, 212 * scale, 41 * scale, 202 * scale);
    ctx.bezierCurveTo(39 * scale, 194 * scale, 42 * scale, 187 * scale, 49 * scale, 185 * scale);
    ctx.bezierCurveTo(44 * scale, 175 * scale, 45 * scale, 172 * scale, 46 * scale, 165 * scale);
    ctx.closePath();
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(219 * scale, 144 * scale);
    ctx.bezierCurveTo(251 * scale, 121 * scale, 277 * scale, 136 * scale, 276 * scale, 159 * scale);
    ctx.bezierCurveTo(276 * scale, 176 * scale, 273 * scale, 191 * scale, 242 * scale, 193 * scale);
    ctx.bezierCurveTo(226 * scale, 228 * scale, 155 * scale, 219 * scale, 150 * scale, 183 * scale);
    ctx.bezierCurveTo(142 * scale, 144 * scale, 174 * scale, 127 * scale, 219 * scale, 144 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(123 * scale, 214 * scale);
    ctx.bezierCurveTo(119 * scale, 198 * scale, 129 * scale, 189 * scale, 146 * scale, 194 * scale);
    ctx.bezierCurveTo(158 * scale, 201 * scale, 165 * scale, 218 * scale, 147 * scale, 226 * scale);
    ctx.bezierCurveTo(135 * scale, 230 * scale, 125 * scale, 222 * scale, 123 * scale, 214 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(257 * scale, 199 * scale);
    ctx.bezierCurveTo(264 * scale, 199 * scale, 275 * scale, 213 * scale, 261 * scale, 220 * scale);
    ctx.bezierCurveTo(246 * scale, 225 * scale, 235 * scale, 200 * scale, 257 * scale, 199 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.translate(-5 * scale, 55 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(186 * scale, 123 * scale);
    ctx.bezierCurveTo(198 * scale, 115 * scale, 219 * scale, 110 * scale, 219 * scale, 123 * scale);
    ctx.bezierCurveTo(216 * scale, 135 * scale, 171 * scale, 143 * scale, 186 * scale, 123 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.translate(5 * scale, -55 * scale);
    ctx.translate(-5 * scale, 15 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(171 * scale, 241 * scale);
    ctx.bezierCurveTo(189 * scale, 234 * scale, 200 * scale, 248 * scale, 189 * scale, 254 * scale);
    ctx.bezierCurveTo(179 * scale, 260 * scale, 158 * scale, 246 * scale, 171 * scale, 241 * scale);
    ctx.closePath();
    fill_path(ctx, color[5]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(367 * scale, 164 * scale);
    ctx.bezierCurveTo(380 * scale, 160 * scale, 391 * scale, 185 * scale, 371 * scale, 189 * scale);
    ctx.bezierCurveTo(362 * scale, 192 * scale, 354 * scale, 191 * scale, 350 * scale, 185 * scale);
    ctx.bezierCurveTo(326 * scale, 205 * scale, 314 * scale, 182 * scale, 316 * scale, 171 * scale);
    ctx.bezierCurveTo(317 * scale, 150 * scale, 332 * scale, 143 * scale, 347 * scale, 147 * scale);
    ctx.bezierCurveTo(361 * scale, 151 * scale, 366 * scale, 158 * scale, 367 * scale, 164 * scale);
    ctx.closePath();
    fill_path(ctx, color[4]);
  }
  return can;
};

function create_music_button(scale, color, i, on) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 121 * scale;
  can.height = 130 * scale;
  ctx.translate(0, 20 * scale);
  if (i == 1) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(6 * scale, 23 * scale);
    ctx.bezierCurveTo(6 * scale, 46 * scale, 6 * scale, 46 * scale, 6 * scale, 69 * scale);
    ctx.bezierCurveTo(21 * scale, 69 * scale, 21 * scale, 69 * scale, 36 * scale, 69 * scale);
    ctx.bezierCurveTo(45.5 * scale, 78.5 * scale, 45.5 * scale, 78.5 * scale, 55 * scale, 88 * scale);
    ctx.bezierCurveTo(55.5 * scale, 45.5 * scale, 55.5 * scale, 45.5 * scale, 56 * scale, 3 * scale);
    ctx.bezierCurveTo(47 * scale, 14 * scale, 47 * scale, 14 * scale, 38 * scale, 25 * scale);
    ctx.bezierCurveTo(23 * scale, 25 * scale, 23 * scale, 25 * scale, 6 * scale, 23 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[3], 13 * scale);
  }
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(6 * scale, 23 * scale);
  ctx.bezierCurveTo(6 * scale, 46 * scale, 6 * scale, 46 * scale, 6 * scale, 69 * scale);
  ctx.bezierCurveTo(21 * scale, 69 * scale, 21 * scale, 69 * scale, 36 * scale, 69 * scale);
  ctx.bezierCurveTo(45.5 * scale, 78.5 * scale, 45.5 * scale, 78.5 * scale, 55 * scale, 88 * scale);
  ctx.bezierCurveTo(55.5 * scale, 45.5 * scale, 55.5 * scale, 45.5 * scale, 56 * scale, 3 * scale);
  ctx.bezierCurveTo(47 * scale, 14 * scale, 47 * scale, 14 * scale, 38 * scale, 25 * scale);
  ctx.bezierCurveTo(23 * scale, 25 * scale, 23 * scale, 25 * scale, 6 * scale, 23 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  if (on == 1) {
    ctx.translate(0, 5 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(67 * scale, 30 * scale);
    ctx.bezierCurveTo(73 * scale, 47 * scale, 69 * scale, 45 * scale, 67 * scale, 58 * scale);
    fill_path(ctx, undefined, color[0], 10 * scale);
    ctx.translate(3, 0 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(70 * scale, 17 * scale);
    ctx.bezierCurveTo(83 * scale, 45 * scale, 76 * scale, 55 * scale, 70 * scale, 69 * scale);
    fill_path(ctx, undefined, color[0], 10 * scale);
    ctx.translate(3, 0 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(76 * scale, 8 * scale);
    ctx.bezierCurveTo(88 * scale, 31 * scale, 89 * scale, 55 * scale, 76 * scale, 79 * scale);
    fill_path(ctx, undefined, color[0], 10 * scale);
    if (i == 1) {
      ctx.translate(-6 * scale, -5 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(67 * scale, 30 * scale);
      ctx.bezierCurveTo(73 * scale, 47 * scale, 69 * scale, 45 * scale, 67 * scale, 58 * scale);
      fill_path(ctx, undefined, color[3], 18 * scale);
      ctx.translate(3, 0 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(70 * scale, 17 * scale);
      ctx.bezierCurveTo(83 * scale, 45 * scale, 76 * scale, 55 * scale, 70 * scale, 69 * scale);
      fill_path(ctx, undefined, color[3], 18 * scale);
      ctx.translate(3, 0 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(76 * scale, 8 * scale);
      ctx.bezierCurveTo(88 * scale, 31 * scale, 89 * scale, 55 * scale, 76 * scale, 79 * scale);
      fill_path(ctx, undefined, color[3], 18 * scale);
      ctx.translate(-6, 0 * scale);
    } else {
      ctx.translate(-6 * scale, -5 * scale);
    }
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(67 * scale, 30 * scale);
    ctx.bezierCurveTo(73 * scale, 47 * scale, 69 * scale, 45 * scale, 67 * scale, 58 * scale);
    fill_path(ctx, undefined, color[2], 10 * scale);
    ctx.translate(3, 0 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(70 * scale, 17 * scale);
    ctx.bezierCurveTo(83 * scale, 45 * scale, 76 * scale, 55 * scale, 70 * scale, 69 * scale);
    fill_path(ctx, undefined, color[2], 10 * scale);
    ctx.translate(3, 0 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(76 * scale, 8 * scale);
    ctx.bezierCurveTo(88 * scale, 31 * scale, 89 * scale, 55 * scale, 76 * scale, 79 * scale);
    fill_path(ctx, undefined, color[2], 10 * scale);
  } else {
    if (i == 1) {
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(108 * scale, 27 * scale);
      ctx.bezierCurveTo(94 * scale, 45.5 * scale, 94 * scale, 45.5 * scale, 80 * scale, 64 * scale);
      ctx.closePath();
      fill_path(ctx, undefined, color[3], 18 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(79 * scale, 30 * scale);
      ctx.bezierCurveTo(93 * scale, 47 * scale, 93 * scale, 47 * scale, 107 * scale, 64 * scale);
      ctx.closePath();
      fill_path(ctx, undefined, color[3], 18 * scale);
    } else {
      ctx.translate(0, -5 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(108 * scale, 27 * scale);
      ctx.bezierCurveTo(94 * scale, 45.5 * scale, 94 * scale, 45.5 * scale, 80 * scale, 64 * scale);
      ctx.closePath();
      fill_path(ctx, undefined, color[0], 7 * scale);
      ctx.beginPath();
      ctx.lineCap = "round";
      ctx.lineJoin = "round";
      ctx.moveTo(79 * scale, 30 * scale);
      ctx.bezierCurveTo(93 * scale, 47 * scale, 93 * scale, 47 * scale, 107 * scale, 64 * scale);
      ctx.closePath();
      fill_path(ctx, undefined, color[0], 7 * scale);
      ctx.translate(0, 5 * scale);
    }
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(108 * scale, 27 * scale);
    ctx.bezierCurveTo(94 * scale, 45.5 * scale, 94 * scale, 45.5 * scale, 80 * scale, 64 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[2], 7 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(79 * scale, 30 * scale);
    ctx.bezierCurveTo(93 * scale, 47 * scale, 93 * scale, 47 * scale, 107 * scale, 64 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[2], 7 * scale);
  }
  return can;
};

function create_tree_snow(scale, color, rotate) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  ctx.rotate(Math.PI / 2);
};

function create_tree_branch(scale, color, rotate) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 450;
  var h = scale * 145;
  var w2 = w / 2;
  var h2 = h / 2;
  var round = scale * 10;
  var shadow = scale * 20;
  var wt = scale * 300;
  var ht = scale * 30;
  var r = scale * 80;
  var wt2 = wt / 2;
  var ht2 = ht / 2;
  var width = 4;
  if (rotate) {
    var w = scale * 145;
    var h = scale * 450;
    can.width = w;
    can.height = h;
    ctx.rotate(Math.PI / 2);
    ctx.save();
    ctx.globalAlpha = 0.5;
    round_rect(ctx, 100 * scale, -110 * scale, wt, ht, round);
    fill_path(ctx, color[0]);
    ctx.translate(178 * scale, -98 * scale);
    round_rect(ctx, -wt2, -ht2 - (6 * scale), 100 * scale, 100 * scale, round);
    fill_path(ctx, color[0]);
    ctx.translate(-50 * scale, 5 * scale);
    round_rect(ctx, 220 * scale, -15 * scale, 90 * scale, 90 * scale, round);
    fill_path(ctx, color[0]);
    ctx.restore();
    ctx.save();
    ctx.globalAlpha = 1;
    ctx.translate(250 * scale, -63 * scale);
    round_rect(ctx, -wt2 - (20 * scale), -ht2, wt, ht, round);
    fill_path(ctx, color[1], color[2], width);
    ctx.translate(-70 * scale, -40 * scale);
    round_rect(ctx, -wt2 - (20 * scale), -ht2, 100 * scale, 100 * scale, round);
    fill_path(ctx, color[3], color[4], width);
    ctx.translate(-70 * scale, 15 * scale);
    round_rect(ctx, 220 * scale, -22 * scale, 90 * scale, 90 * scale, round);
    fill_path(ctx, color[3], color[4], width);
    round_rect(ctx, 230 * scale, -12 * scale, 55 * scale, 55 * scale, round);
    fill_path(ctx, color[5]);
    ctx.translate(-70 * scale, 0);
    round_rect(ctx, -15 * scale, -2 * scale, 60 * scale, 60 * scale, round);
    fill_path(ctx, color[5]);
    ctx.restore();
  } else {
    can.width = w;
    can.height = h;
    ctx.save();
    ctx.globalAlpha = 0.5;
    ctx.translate(w2, h2 + (10 * scale));
    round_rect(ctx, -wt2, -ht2, wt, ht, round);
    fill_path(ctx, color[0]);
    ctx.translate(-65 * scale, -25 * scale);
    round_rect(ctx, -wt2, -ht2 - (6 * scale), 100 * scale, 100 * scale, 15 * scale);
    fill_path(ctx, color[0]);
    ctx.translate(-35 * scale, -5 * scale);
    round_rect(ctx, 220 * scale, -15 * scale, 90 * scale, 90 * scale, 15 * scale);
    fill_path(ctx, color[0]);
    ctx.restore();
    ctx.save();
    ctx.globalAlpha = 1;
    ctx.translate(240 * scale, 70 * scale);
    round_rect(ctx, -wt2, -ht2, wt, ht, round);
    fill_path(ctx, color[1], color[2], width);
    ctx.translate(-60 * scale, -40 * scale);
    round_rect(ctx, -wt2 - (20 * scale), -ht2, 100 * scale, 100 * scale, 15 * scale);
    fill_path(ctx, color[3], color[4], width);
    ctx.translate(-55 * scale, 10 * scale);
    round_rect(ctx, 220 * scale, -22 * scale, 90 * scale, 90 * scale, 15 * scale);
    fill_path(ctx, color[3], color[4], width);
    round_rect(ctx, 240 * scale, -12 * scale, 55 * scale, 55 * scale, 12 * scale);
    fill_path(ctx, color[5]);
    ctx.translate(45 * scale, 0 * scale);
    round_rect(ctx, -145 * scale, -2 * scale, 60 * scale, 60 * scale, 12 * scale);
    fill_path(ctx, color[5]);
    ctx.restore();
  }
  return can;
};

function create_apricot_forest(branch, tree) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = Math.max(tree.width, branch.width);
  var h = Math.max(tree.height, branch.height);
  can.width = w;
  can.height = h;
  ctx.drawImage(branch, (w - branch.width) / 2, (h - branch.height) / 2);
  ctx.drawImage(tree, (w - tree.width) / 2, (h - tree.height) / 2);
  return can;
};

function create_pickaxe(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 105;
  var h = scale * 125;
  var width = scale * 4;
  var w2 = w / 2;
  var h2 = h / 2;
  var round = scale * 10;
  var shadow = scale * 5;
  var wa = scale * 10;
  var ha = scale * 110;
  var wa2 = wa / 2;
  var ha2 = ha / 2;
  can.width = w;
  can.height = h;
  ctx.save();
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate((w / 2) + (8 * scale), (h / 2) + shadow);
  round_rect(ctx, -wa2, -ha2, wa, ha, round);
  if (draw_shadow) {
    fill_path(ctx, color[0]);
  } else {
    fill_path(ctx, color[1]);
  };
  ctx.translate((-130 * scale) + shadow, (-128 * scale) + shadow);
  ctx.beginPath();
  ctx.bezierCurveTo(159 * scale, 93 * scale, 156 * scale, 99 * scale, 154 * scale, 102 * scale);
  ctx.bezierCurveTo(128 * scale, 92 * scale, 90 * scale, 93 * scale, 72 * scale, 96 * scale);
  ctx.bezierCurveTo(68 * scale, 84 * scale, 143 * scale, 73 * scale, 162 * scale, 86 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.restore();
  ctx.translate((w / 2) + 8, h / 2);
  ctx.globalAlpha = 1;
  round_rect(ctx, -wa2, -ha2, wa, ha, round);
  fill_path(ctx, color[3], color[4], width);
  ctx.translate(-130 * scale, -125 * scale);
  ctx.beginPath();
  ctx.bezierCurveTo(159 * scale, 93 * scale, 156 * scale, 99 * scale, 154 * scale, 102 * scale);
  ctx.bezierCurveTo(128 * scale, 92 * scale, 90 * scale, 93 * scale, 72 * scale, 96 * scale);
  ctx.bezierCurveTo(68 * scale, 84 * scale, 143 * scale, 73 * scale, 162 * scale, 86 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], width);
  return can;
};

function create_sword_wood(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 170 * scale;
  can.height = 469 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(20 * scale, 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(88 * scale, 30 * scale);
  ctx.bezierCurveTo(96 * scale, 49.5 * scale, 96 * scale, 49.5 * scale, 104 * scale, 69 * scale);
  ctx.bezierCurveTo(105.5 * scale, 41.5 * scale, 105.5 * scale, 41.5 * scale, 107 * scale, 14 * scale);
  ctx.bezierCurveTo(114 * scale, 9.5 * scale, 114 * scale, 9.5 * scale, 121 * scale, 5 * scale);
  ctx.bezierCurveTo(135.5 * scale, 27.5 * scale, 135.5 * scale, 27.5 * scale, 150 * scale, 50 * scale);
  ctx.bezierCurveTo(110.5 * scale, 286 * scale, 110.5 * scale, 286 * scale, 103 * scale, 331 * scale);
  ctx.bezierCurveTo(69.5 * scale, 325 * scale, 69.5 * scale, 325 * scale, 36 * scale, 319 * scale);
  ctx.bezierCurveTo(56.5 * scale, 180 * scale, 56.5 * scale, 180 * scale, 77 * scale, 41 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(118 * scale, 31 * scale);
  ctx.bezierCurveTo(125 * scale, 43 * scale, 125 * scale, 43 * scale, 132 * scale, 55 * scale);
  ctx.bezierCurveTo(109.5 * scale, 185.5 * scale, 109.5 * scale, 185.5 * scale, 87 * scale, 316 * scale);
  ctx.bezierCurveTo(72 * scale, 313.5 * scale, 72 * scale, 313.5 * scale, 57 * scale, 311 * scale);
  ctx.bezierCurveTo(76.5 * scale, 181 * scale, 76.5 * scale, 181 * scale, 96 * scale, 51 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56 * scale, 328 * scale);
  ctx.bezierCurveTo(47 * scale, 385.5 * scale, 47 * scale, 385.5 * scale, 38 * scale, 443 * scale);
  ctx.bezierCurveTo(52 * scale, 446 * scale, 52 * scale, 446 * scale, 66 * scale, 449 * scale);
  ctx.bezierCurveTo(76.5 * scale, 388.5 * scale, 76.5 * scale, 388.5 * scale, 87 * scale, 328 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(74 * scale, 302 * scale);
  ctx.bezierCurveTo(104 * scale, 316.5 * scale, 104 * scale, 316.5 * scale, 134 * scale, 331 * scale);
  ctx.bezierCurveTo(133 * scale, 341 * scale, 133 * scale, 341 * scale, 132 * scale, 351 * scale);
  ctx.bezierCurveTo(69.5 * scale, 342 * scale, 69.5 * scale, 342 * scale, 7 * scale, 333 * scale);
  ctx.bezierCurveTo(8 * scale, 323 * scale, 8 * scale, 323 * scale, 9 * scale, 313 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(51.5 * scale, 440.5 * scale);
  ctx.rotate(0.2);
  round_rect(ctx, -20.5 * scale, -18.5 * scale, 41 * scale, 37 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(73 * scale, 316 * scale);
  ctx.bezierCurveTo(90 * scale, 324.5 * scale, 90 * scale, 324.5 * scale, 107 * scale, 333 * scale);
  ctx.bezierCurveTo(70 * scale, 327.5 * scale, 70 * scale, 327.5 * scale, 33 * scale, 322 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-20 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(88 * scale, 30 * scale);
  ctx.bezierCurveTo(96 * scale, 49.5 * scale, 96 * scale, 49.5 * scale, 104 * scale, 69 * scale);
  ctx.bezierCurveTo(105.5 * scale, 41.5 * scale, 105.5 * scale, 41.5 * scale, 107 * scale, 14 * scale);
  ctx.bezierCurveTo(114 * scale, 9.5 * scale, 114 * scale, 9.5 * scale, 121 * scale, 5 * scale);
  ctx.bezierCurveTo(135.5 * scale, 27.5 * scale, 135.5 * scale, 27.5 * scale, 150 * scale, 50 * scale);
  ctx.bezierCurveTo(110.5 * scale, 286 * scale, 110.5 * scale, 286 * scale, 103 * scale, 331 * scale);
  ctx.bezierCurveTo(69.5 * scale, 325 * scale, 69.5 * scale, 325 * scale, 36 * scale, 319 * scale);
  ctx.bezierCurveTo(56.5 * scale, 180 * scale, 56.5 * scale, 180 * scale, 77 * scale, 41 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(118 * scale, 31 * scale);
  ctx.bezierCurveTo(125 * scale, 43 * scale, 125 * scale, 43 * scale, 132 * scale, 55 * scale);
  ctx.bezierCurveTo(109.5 * scale, 185.5 * scale, 109.5 * scale, 185.5 * scale, 87 * scale, 316 * scale);
  ctx.bezierCurveTo(72 * scale, 313.5 * scale, 72 * scale, 313.5 * scale, 57 * scale, 311 * scale);
  ctx.bezierCurveTo(76.5 * scale, 181 * scale, 76.5 * scale, 181 * scale, 96 * scale, 51 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(88 * scale, 30 * scale);
  ctx.bezierCurveTo(96 * scale, 49.5 * scale, 96 * scale, 49.5 * scale, 104 * scale, 69 * scale);
  ctx.bezierCurveTo(105.5 * scale, 41.5 * scale, 105.5 * scale, 41.5 * scale, 107 * scale, 14 * scale);
  ctx.bezierCurveTo(114 * scale, 9.5 * scale, 114 * scale, 9.5 * scale, 121 * scale, 5 * scale);
  ctx.bezierCurveTo(135.5 * scale, 27.5 * scale, 135.5 * scale, 27.5 * scale, 150 * scale, 50 * scale);
  ctx.bezierCurveTo(110.5 * scale, 286 * scale, 110.5 * scale, 286 * scale, 103 * scale, 331 * scale);
  ctx.bezierCurveTo(69.5 * scale, 325 * scale, 69.5 * scale, 325 * scale, 36 * scale, 319 * scale);
  ctx.bezierCurveTo(56.5 * scale, 180 * scale, 56.5 * scale, 180 * scale, 77 * scale, 41 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56 * scale, 328 * scale);
  ctx.bezierCurveTo(47 * scale, 385.5 * scale, 47 * scale, 385.5 * scale, 38 * scale, 443 * scale);
  ctx.bezierCurveTo(52 * scale, 446 * scale, 52 * scale, 446 * scale, 66 * scale, 449 * scale);
  ctx.bezierCurveTo(76.5 * scale, 388.5 * scale, 76.5 * scale, 388.5 * scale, 87 * scale, 328 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(74 * scale, 302 * scale);
  ctx.bezierCurveTo(104 * scale, 316.5 * scale, 104 * scale, 316.5 * scale, 134 * scale, 331 * scale);
  ctx.bezierCurveTo(133 * scale, 341 * scale, 133 * scale, 341 * scale, 132 * scale, 351 * scale);
  ctx.bezierCurveTo(69.5 * scale, 342 * scale, 69.5 * scale, 342 * scale, 7 * scale, 333 * scale);
  ctx.bezierCurveTo(8 * scale, 323 * scale, 8 * scale, 323 * scale, 9 * scale, 313 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 7 * scale);
  ctx.save();
  ctx.translate(51.5 * scale, 440.5 * scale);
  ctx.rotate(0.2);
  round_rect(ctx, -20.5 * scale, -18.5 * scale, 41 * scale, 37 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[5], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(73 * scale, 316 * scale);
  ctx.bezierCurveTo(90 * scale, 324.5 * scale, 90 * scale, 324.5 * scale, 107 * scale, 333 * scale);
  ctx.bezierCurveTo(70 * scale, 327.5 * scale, 70 * scale, 327.5 * scale, 33 * scale, 322 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  return can;
};

function create_pirate_sword(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 424 * scale;
  can.height = 788 * scale;
  ctx.translate(25 * scale, 25 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(193.5 * scale, 602.5 * scale);
  ctx.rotate(-0.12);
  round_rect(ctx, -26.5 * scale, -97.5 * scale, 53 * scale, 195 * scale, 25 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(137 * scale, 519 * scale);
  ctx.bezierCurveTo(182 * scale, 513 * scale, 182 * scale, 513 * scale, 227 * scale, 507 * scale);
  ctx.bezierCurveTo(214 * scale, 417 * scale, 189 * scale, 304 * scale, 221 * scale, 180 * scale);
  ctx.bezierCurveTo(191 * scale, 126 * scale, 192 * scale, 105 * scale, 198 * scale, 64 * scale);
  ctx.bezierCurveTo(123 * scale, 102 * scale, 99 * scale, 285 * scale, 137 * scale, 517 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(175 * scale, 119 * scale);
  ctx.bezierCurveTo(176 * scale, 142 * scale, 184 * scale, 165 * scale, 197 * scale, 183 * scale);
  ctx.bezierCurveTo(167 * scale, 325 * scale, 191 * scale, 405 * scale, 202 * scale, 502 * scale);
  ctx.bezierCurveTo(180 * scale, 503 * scale, 180 * scale, 503 * scale, 158 * scale, 504 * scale);
  ctx.bezierCurveTo(135 * scale, 396 * scale, 134 * scale, 185 * scale, 175 * scale, 119 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(110 * scale, 518 * scale);
  ctx.bezierCurveTo(111.5 * scale, 533 * scale, 111.5 * scale, 533 * scale, 113 * scale, 548 * scale);
  ctx.bezierCurveTo(162.5 * scale, 544 * scale, 162.5 * scale, 544 * scale, 212 * scale, 540 * scale);
  ctx.bezierCurveTo(312 * scale, 535 * scale, 281 * scale, 665 * scale, 225 * scale, 665 * scale);
  ctx.bezierCurveTo(227 * scale, 686.5 * scale, 227 * scale, 686.5 * scale, 229 * scale, 708 * scale);
  ctx.bezierCurveTo(343 * scale, 684 * scale, 354 * scale, 496 * scale, 222 * scale, 498 * scale);
  ctx.bezierCurveTo(165.5 * scale, 503 * scale, 165.5 * scale, 503 * scale, 109 * scale, 508 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  circle(ctx, 204 * scale, 693 * scale, 36.013886210738214 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 105 * scale, 518 * scale, 30 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(171 * scale, 535 * scale);
  ctx.bezierCurveTo(139.5 * scale, 537.5 * scale, 139.5 * scale, 537.5 * scale, 108 * scale, 540 * scale);
  ctx.bezierCurveTo(110 * scale, 527.5 * scale, 110 * scale, 527.5 * scale, 112 * scale, 515 * scale);
  ctx.bezierCurveTo(148 * scale, 513 * scale, 148 * scale, 513 * scale, 184 * scale, 511 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(244 * scale, 669 * scale);
  ctx.bezierCurveTo(248.5 * scale, 680 * scale, 248.5 * scale, 680 * scale, 253 * scale, 691 * scale);
  ctx.bezierCurveTo(239.5 * scale, 697 * scale, 239.5 * scale, 697 * scale, 226 * scale, 703 * scale);
  ctx.bezierCurveTo(223 * scale, 691.5 * scale, 223 * scale, 691.5 * scale, 220 * scale, 680 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(-25 * scale, -25 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(193.5 * scale, 602.5 * scale);
  ctx.rotate(-0.12);
  round_rect(ctx, -26.5 * scale, -97.5 * scale, 53 * scale, 195 * scale, 25 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 16 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(137 * scale, 519 * scale);
  ctx.bezierCurveTo(182 * scale, 513 * scale, 182 * scale, 513 * scale, 227 * scale, 507 * scale);
  ctx.bezierCurveTo(214 * scale, 417 * scale, 189 * scale, 304 * scale, 221 * scale, 180 * scale);
  ctx.bezierCurveTo(191 * scale, 126 * scale, 192 * scale, 105 * scale, 198 * scale, 64 * scale);
  ctx.bezierCurveTo(123 * scale, 102 * scale, 99 * scale, 285 * scale, 137 * scale, 517 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 16 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(175 * scale, 119 * scale);
  ctx.bezierCurveTo(176 * scale, 142 * scale, 184 * scale, 165 * scale, 197 * scale, 183 * scale);
  ctx.bezierCurveTo(167 * scale, 325 * scale, 191 * scale, 405 * scale, 202 * scale, 502 * scale);
  ctx.bezierCurveTo(180 * scale, 503 * scale, 180 * scale, 503 * scale, 158 * scale, 504 * scale);
  ctx.bezierCurveTo(135 * scale, 396 * scale, 134 * scale, 185 * scale, 175 * scale, 119 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(110 * scale, 518 * scale);
  ctx.bezierCurveTo(111.5 * scale, 533 * scale, 111.5 * scale, 533 * scale, 113 * scale, 548 * scale);
  ctx.bezierCurveTo(162.5 * scale, 544 * scale, 162.5 * scale, 544 * scale, 212 * scale, 540 * scale);
  ctx.bezierCurveTo(312 * scale, 535 * scale, 281 * scale, 665 * scale, 225 * scale, 665 * scale);
  ctx.bezierCurveTo(227 * scale, 686.5 * scale, 227 * scale, 686.5 * scale, 229 * scale, 708 * scale);
  ctx.bezierCurveTo(343 * scale, 684 * scale, 354 * scale, 496 * scale, 222 * scale, 498 * scale);
  ctx.bezierCurveTo(165.5 * scale, 503 * scale, 165.5 * scale, 503 * scale, 109 * scale, 508 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[4], 16 * scale);
  circle(ctx, 204 * scale, 693 * scale, 36.013886210738214 * scale);
  fill_path(ctx, color[6], color[4], 16 * scale);
  circle(ctx, 105 * scale, 518 * scale, 30 * scale);
  fill_path(ctx, color[6], color[4], 16 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(171 * scale, 535 * scale);
  ctx.bezierCurveTo(139.5 * scale, 537.5 * scale, 139.5 * scale, 537.5 * scale, 108 * scale, 540 * scale);
  ctx.bezierCurveTo(110 * scale, 527.5 * scale, 110 * scale, 527.5 * scale, 112 * scale, 515 * scale);
  ctx.bezierCurveTo(148 * scale, 513 * scale, 148 * scale, 513 * scale, 184 * scale, 511 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(244 * scale, 669 * scale);
  ctx.bezierCurveTo(248.5 * scale, 680 * scale, 248.5 * scale, 680 * scale, 253 * scale, 691 * scale);
  ctx.bezierCurveTo(239.5 * scale, 697 * scale, 239.5 * scale, 697 * scale, 226 * scale, 703 * scale);
  ctx.bezierCurveTo(223 * scale, 691.5 * scale, 223 * scale, 691.5 * scale, 220 * scale, 680 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  circle(ctx, 204 * scale, 693 * scale, 17.029386365926403 * scale);
  fill_path(ctx, color[7]);
  circle(ctx, 106 * scale, 518 * scale, 12 * scale);
  fill_path(ctx, color[7]);
  return can;
};

function create_sword(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 100 * scale;
  can.height = 250 * scale;
  ctx.translate(-135 * scale, -75 * scale);
  ctx.globalAlpha = draw_shadow ? 0.8 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(178.5 * scale, 238.03125 * scale);
  ctx.bezierCurveTo(177 * scale, 175.03125 * scale, 177 * scale, 175.03125 * scale, 175.5 * scale, 112.03125 * scale);
  ctx.bezierCurveTo(184.5 * scale, 100.53125 * scale, 184.5 * scale, 100.53125 * scale, 193.5 * scale, 89.03125 * scale);
  ctx.bezierCurveTo(202 * scale, 100.03125 * scale, 202 * scale, 100.03125 * scale, 210.5 * scale, 111.03125 * scale);
  ctx.bezierCurveTo(209.5 * scale, 174.03125 * scale, 209.5 * scale, 174.03125 * scale, 208.5 * scale, 237.03125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(155.5 * scale, 239.03125 * scale);
  ctx.bezierCurveTo(194 * scale, 238.53125 * scale, 194 * scale, 238.53125 * scale, 232.5 * scale, 238.03125 * scale);
  ctx.bezierCurveTo(232.5 * scale, 243.03125 * scale, 232.5 * scale, 243.03125 * scale, 232.5 * scale, 248.03125 * scale);
  ctx.bezierCurveTo(194 * scale, 248.53125 * scale, 194 * scale, 248.53125 * scale, 155.5 * scale, 249.03125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  circle(ctx, 160.5 * scale, 243.03125 * scale, 7 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 227.5 * scale, 242.03125 * scale, 7 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(185.5 * scale, 253.03125 * scale);
  ctx.bezierCurveTo(193.5 * scale, 253.03125 * scale, 193.5 * scale, 253.03125 * scale, 201.5 * scale, 253.03125 * scale);
  ctx.bezierCurveTo(201.5 * scale, 276.03125 * scale, 201.5 * scale, 276.03125 * scale, 201.5 * scale, 299.03125 * scale);
  ctx.bezierCurveTo(194.5 * scale, 299.03125 * scale, 194.5 * scale, 299.03125 * scale, 187.5 * scale, 299.03125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 5 * scale);
  circle(ctx, 194 * scale, 298 * scale, 9 * scale);
  fill_path(ctx, color[0], color[0], 5 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(-10 * scale, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(178.5 * scale, 238.03125 * scale);
  ctx.bezierCurveTo(177 * scale, 175.03125 * scale, 177 * scale, 175.03125 * scale, 175.5 * scale, 112.03125 * scale);
  ctx.bezierCurveTo(184.5 * scale, 100.53125 * scale, 184.5 * scale, 100.53125 * scale, 193.5 * scale, 89.03125 * scale);
  ctx.bezierCurveTo(202 * scale, 100.03125 * scale, 202 * scale, 100.03125 * scale, 210.5 * scale, 111.03125 * scale);
  ctx.bezierCurveTo(209.5 * scale, 174.03125 * scale, 209.5 * scale, 174.03125 * scale, 208.5 * scale, 237.03125 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(155.5 * scale, 239.03125 * scale);
  ctx.bezierCurveTo(194 * scale, 238.53125 * scale, 194 * scale, 238.53125 * scale, 232.5 * scale, 238.03125 * scale);
  ctx.bezierCurveTo(232.5 * scale, 243.03125 * scale, 232.5 * scale, 243.03125 * scale, 232.5 * scale, 248.03125 * scale);
  ctx.bezierCurveTo(194 * scale, 248.53125 * scale, 194 * scale, 248.53125 * scale, 155.5 * scale, 249.03125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 5 * scale);
  circle(ctx, 160.5 * scale, 243.03125 * scale, 7 * scale);
  fill_path(ctx, color[1], color[2], 5 * scale);
  circle(ctx, 227.5 * scale, 242.03125 * scale, 7 * scale);
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(185.5 * scale, 253.03125 * scale);
  ctx.bezierCurveTo(193.5 * scale, 253.03125 * scale, 193.5 * scale, 253.03125 * scale, 201.5 * scale, 253.03125 * scale);
  ctx.bezierCurveTo(201.5 * scale, 276.03125 * scale, 201.5 * scale, 276.03125 * scale, 201.5 * scale, 299.03125 * scale);
  ctx.bezierCurveTo(194.5 * scale, 299.03125 * scale, 194.5 * scale, 299.03125 * scale, 187.5 * scale, 299.03125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 7 * scale);
  circle(ctx, 194 * scale, 298 * scale, 9 * scale);
  fill_path(ctx, color[1], color[2], 7 * scale);
  return can;
};

function create_stonesword(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 290 * scale;
  can.height = 525 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(20 * scale, 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111 * scale, 351 * scale);
  ctx.bezierCurveTo(129 * scale, 218 * scale, 129 * scale, 218 * scale, 147 * scale, 85 * scale);
  ctx.bezierCurveTo(167 * scale, 65.5 * scale, 167 * scale, 65.5 * scale, 187 * scale, 46 * scale);
  ctx.bezierCurveTo(201.5 * scale, 70.5 * scale, 201.5 * scale, 70.5 * scale, 216 * scale, 95 * scale);
  ctx.bezierCurveTo(194.5 * scale, 227.5 * scale, 194.5 * scale, 227.5 * scale, 173 * scale, 360 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(131 * scale, 425.5 * scale);
  ctx.rotate(0.16);
  round_rect(ctx, -14 * scale, -56.5 * scale, 28 * scale, 113 * scale, 8 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  circle(ctx, 122 * scale, 480 * scale, 18.439088914585774 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(79 * scale, 371 * scale);
  ctx.bezierCurveTo(131 * scale, 373 * scale, 145 * scale, 378 * scale, 197 * scale, 388 * scale);
  ctx.bezierCurveTo(205 * scale, 382.5 * scale, 205 * scale, 382.5 * scale, 213 * scale, 377 * scale);
  ctx.bezierCurveTo(167 * scale, 352 * scale, 117 * scale, 345 * scale, 69 * scale, 355 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-20 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111 * scale, 351 * scale);
  ctx.bezierCurveTo(129 * scale, 218 * scale, 129 * scale, 218 * scale, 147 * scale, 85 * scale);
  ctx.bezierCurveTo(167 * scale, 65.5 * scale, 167 * scale, 65.5 * scale, 187 * scale, 46 * scale);
  ctx.bezierCurveTo(201.5 * scale, 70.5 * scale, 201.5 * scale, 70.5 * scale, 216 * scale, 95 * scale);
  ctx.bezierCurveTo(194.5 * scale, 227.5 * scale, 194.5 * scale, 227.5 * scale, 173 * scale, 360 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12.5 * scale);
  ctx.save();
  ctx.translate(131 * scale, 425.5 * scale);
  ctx.rotate(0.16);
  round_rect(ctx, -14 * scale, -56.5 * scale, 28 * scale, 113 * scale, 8 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[5], 12.5 * scale);
  circle(ctx, 122 * scale, 480 * scale, 18.439088914585774 * scale);
  fill_path(ctx, color[4], color[5], 12.5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(79 * scale, 371 * scale);
  ctx.bezierCurveTo(131 * scale, 373 * scale, 145 * scale, 378 * scale, 197 * scale, 388 * scale);
  ctx.bezierCurveTo(205 * scale, 382.5 * scale, 205 * scale, 382.5 * scale, 213 * scale, 377 * scale);
  ctx.bezierCurveTo(167 * scale, 352 * scale, 117 * scale, 345 * scale, 69 * scale, 355 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 12.5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(128 * scale, 345 * scale);
  ctx.bezierCurveTo(142 * scale, 345 * scale, 147 * scale, 346 * scale, 158 * scale, 349 * scale);
  ctx.bezierCurveTo(177.5 * scale, 224.5 * scale, 177.5 * scale, 224.5 * scale, 197 * scale, 100 * scale);
  ctx.bezierCurveTo(190.5 * scale, 84.5 * scale, 190.5 * scale, 84.5 * scale, 184 * scale, 69 * scale);
  ctx.bezierCurveTo(173.5 * scale, 82 * scale, 173.5 * scale, 82 * scale, 163 * scale, 95 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  return can;
};

function create_crab(scale, useless, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 283 * scale;
  can.height = 224 * scale;
  ctx.translate(0, 15 * scale);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 55 * scale);
  ctx.bezierCurveTo(127 * scale, 27 * scale, 195 * scale, 42 * scale, 213 * scale, 78 * scale);
  ctx.bezierCurveTo(254 * scale, 134 * scale, 226 * scale, 198 * scale, 153 * scale, 197 * scale);
  ctx.bezierCurveTo(59 * scale, 204 * scale, 56 * scale, 158 * scale, 51 * scale, 115 * scale);
  ctx.bezierCurveTo(50 * scale, 93 * scale, 81 * scale, 62 * scale, 90 * scale, 57 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100 * scale, 33 * scale);
  ctx.bezierCurveTo(85 * scale, 62 * scale, 102 * scale, 66 * scale, 110 * scale, 83 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(181 * scale, 32 * scale);
  ctx.bezierCurveTo(196 * scale, 62 * scale, 181 * scale, 68 * scale, 178 * scale, 69 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(225 * scale, 52 * scale);
  ctx.bezierCurveTo(228 * scale, 78 * scale, 207 * scale, 77 * scale, 192 * scale, 88 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(34 * scale, 134 * scale);
  ctx.bezierCurveTo(46 * scale, 111 * scale, 57 * scale, 111 * scale, 79 * scale, 109 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(249 * scale, 135 * scale);
  ctx.bezierCurveTo(233 * scale, 107 * scale, 212 * scale, 112 * scale, 202 * scale, 115 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56 * scale, 50 * scale);
  ctx.bezierCurveTo(56 * scale, 82 * scale, 73 * scale, 82 * scale, 93 * scale, 89 * scale);
  fill_path(ctx, color[0]);
  ctx.translate(0, -15 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100 * scale, 33 * scale);
  ctx.bezierCurveTo(85 * scale, 62 * scale, 102 * scale, 66 * scale, 110 * scale, 83 * scale);
  fill_path(ctx, undefined, color[2], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(181 * scale, 32 * scale);
  ctx.bezierCurveTo(196 * scale, 62 * scale, 181 * scale, 68 * scale, 178 * scale, 69 * scale);
  fill_path(ctx, undefined, color[2], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(225 * scale, 52 * scale);
  ctx.bezierCurveTo(228 * scale, 78 * scale, 207 * scale, 77 * scale, 192 * scale, 88 * scale);
  fill_path(ctx, undefined, color[2], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(34 * scale, 134 * scale);
  ctx.bezierCurveTo(46 * scale, 111 * scale, 57 * scale, 111 * scale, 79 * scale, 109 * scale);
  fill_path(ctx, undefined, color[2], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(249 * scale, 135 * scale);
  ctx.bezierCurveTo(233 * scale, 107 * scale, 212 * scale, 112 * scale, 202 * scale, 115 * scale);
  fill_path(ctx, undefined, color[2], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56 * scale, 50 * scale);
  ctx.bezierCurveTo(56 * scale, 82 * scale, 73 * scale, 82 * scale, 93 * scale, 89 * scale);
  fill_path(ctx, undefined, color[2], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 55 * scale);
  ctx.bezierCurveTo(127 * scale, 27 * scale, 195 * scale, 42 * scale, 213 * scale, 78 * scale);
  ctx.bezierCurveTo(254 * scale, 134 * scale, 226 * scale, 198 * scale, 153 * scale, 197 * scale);
  ctx.bezierCurveTo(59 * scale, 204 * scale, 56 * scale, 158 * scale, 51 * scale, 115 * scale);
  ctx.bezierCurveTo(50 * scale, 93 * scale, 81 * scale, 62 * scale, 90 * scale, 57 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100 * scale, 33 * scale);
  ctx.bezierCurveTo(85 * scale, 62 * scale, 102 * scale, 66 * scale, 110 * scale, 83 * scale);
  fill_path(ctx, undefined, color[1], 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(181 * scale, 32 * scale);
  ctx.bezierCurveTo(196 * scale, 62 * scale, 181 * scale, 68 * scale, 178 * scale, 69 * scale);
  fill_path(ctx, undefined, color[1], 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(225 * scale, 52 * scale);
  ctx.bezierCurveTo(228 * scale, 78 * scale, 207 * scale, 77 * scale, 192 * scale, 88 * scale);
  fill_path(ctx, undefined, color[1], 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(34 * scale, 134 * scale);
  ctx.bezierCurveTo(46 * scale, 111 * scale, 57 * scale, 111 * scale, 79 * scale, 109 * scale);
  fill_path(ctx, undefined, color[1], 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(249 * scale, 135 * scale);
  ctx.bezierCurveTo(233 * scale, 107 * scale, 212 * scale, 112 * scale, 202 * scale, 115 * scale);
  fill_path(ctx, undefined, color[1], 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56 * scale, 50 * scale);
  ctx.bezierCurveTo(56 * scale, 82 * scale, 73 * scale, 82 * scale, 93 * scale, 89 * scale);
  fill_path(ctx, undefined, color[1], 20 * scale);
  circle(ctx, 101 * scale, 155 * scale, 20.591260281974 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 180 * scale, 155 * scale, 20.591260281974 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 95 * scale, 148 * scale, 7.211102550927978 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 173 * scale, 148 * scale, 7.211102550927978 * scale);
  fill_path(ctx, color[4]);
  if (i === 1) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(191 * scale, 107 * scale);
    ctx.bezierCurveTo(180 * scale, 104 * scale, 175 * scale, 101 * scale, 180 * scale, 95 * scale);
    ctx.bezierCurveTo(180 * scale, 95 * scale, 181 * scale, 99 * scale, 188 * scale, 103 * scale);
    ctx.bezierCurveTo(191 * scale, 101 * scale, 191 * scale, 95 * scale, 190 * scale, 91 * scale);
    ctx.bezierCurveTo(190 * scale, 91 * scale, 196 * scale, 89 * scale, 195 * scale, 99 * scale);
    ctx.closePath();
    fill_path(ctx, color[2]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(206 * scale, 98 * scale);
    ctx.bezierCurveTo(203 * scale, 95 * scale, 200 * scale, 93 * scale, 198 * scale, 101 * scale);
    ctx.bezierCurveTo(194 * scale, 109 * scale, 193 * scale, 109 * scale, 196 * scale, 110 * scale);
    ctx.bezierCurveTo(206 * scale, 115 * scale, 209 * scale, 114 * scale, 211 * scale, 111 * scale);
    ctx.bezierCurveTo(211 * scale, 106 * scale, 208 * scale, 108 * scale, 203 * scale, 108 * scale);
    ctx.bezierCurveTo(193 * scale, 107 * scale, 204 * scale, 101 * scale, 206 * scale, 99 * scale);
    ctx.closePath();
    fill_path(ctx, color[2]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(172 * scale, 111 * scale);
    ctx.bezierCurveTo(172 * scale, 106 * scale, 174 * scale, 105 * scale, 185 * scale, 109 * scale);
    ctx.bezierCurveTo(190 * scale, 109 * scale, 189 * scale, 114 * scale, 185 * scale, 120 * scale);
    ctx.bezierCurveTo(181 * scale, 125 * scale, 180 * scale, 126 * scale, 176 * scale, 122 * scale);
    ctx.bezierCurveTo(182 * scale, 119 * scale, 187 * scale, 110 * scale, 182 * scale, 112 * scale);
    ctx.closePath();
    fill_path(ctx, color[2]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(202 * scale, 125 * scale);
    ctx.bezierCurveTo(197 * scale, 117 * scale, 193 * scale, 116 * scale, 193 * scale, 120 * scale);
    ctx.bezierCurveTo(192.5 * scale, 124.5 * scale, 192.5 * scale, 124.5 * scale, 192 * scale, 129 * scale);
    ctx.bezierCurveTo(188 * scale, 129 * scale, 187 * scale, 124 * scale, 189 * scale, 120 * scale);
    ctx.bezierCurveTo(191 * scale, 110 * scale, 192 * scale, 110 * scale, 200 * scale, 116 * scale);
    ctx.bezierCurveTo(208 * scale, 120 * scale, 207 * scale, 123 * scale, 202 * scale, 125 * scale);
    ctx.closePath();
    fill_path(ctx, color[2]);
  }
  return can;
};

function create_hurt_crab(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 283 * scale;
  can.height = 224 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100 * scale, 33 * scale);
  ctx.bezierCurveTo(85 * scale, 62 * scale, 102 * scale, 66 * scale, 110 * scale, 83 * scale);
  fill_path(ctx, undefined, color[0], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(181 * scale, 32 * scale);
  ctx.bezierCurveTo(196 * scale, 62 * scale, 181 * scale, 68 * scale, 178 * scale, 69 * scale);
  fill_path(ctx, undefined, color[0], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(225 * scale, 52 * scale);
  ctx.bezierCurveTo(228 * scale, 78 * scale, 207 * scale, 77 * scale, 192 * scale, 88 * scale);
  fill_path(ctx, undefined, color[0], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(34 * scale, 134 * scale);
  ctx.bezierCurveTo(46 * scale, 111 * scale, 57 * scale, 111 * scale, 79 * scale, 109 * scale);
  fill_path(ctx, undefined, color[0], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(249 * scale, 135 * scale);
  ctx.bezierCurveTo(233 * scale, 107 * scale, 212 * scale, 112 * scale, 202 * scale, 115 * scale);
  fill_path(ctx, undefined, color[0], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56 * scale, 50 * scale);
  ctx.bezierCurveTo(56 * scale, 82 * scale, 73 * scale, 82 * scale, 93 * scale, 89 * scale);
  fill_path(ctx, undefined, color[0], 40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 55 * scale);
  ctx.bezierCurveTo(124 * scale, 29 * scale, 179 * scale, 44 * scale, 188 * scale, 52 * scale);
  ctx.bezierCurveTo(207 * scale, 64 * scale, 226 * scale, 94 * scale, 231 * scale, 118 * scale);
  ctx.bezierCurveTo(236 * scale, 145 * scale, 222 * scale, 184 * scale, 193 * scale, 192 * scale);
  ctx.bezierCurveTo(147 * scale, 201 * scale, 116 * scale, 200 * scale, 93 * scale, 193 * scale);
  ctx.bezierCurveTo(61 * scale, 180 * scale, 48 * scale, 147 * scale, 50 * scale, 123 * scale);
  ctx.bezierCurveTo(50 * scale, 93 * scale, 76 * scale, 66 * scale, 92 * scale, 56 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_crab_claw_left(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 131 * scale;
  can.height = 121 * scale;
  ctx.translate(0, 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(110 * scale, 59 * scale);
  ctx.bezierCurveTo(93 * scale, 61.5 * scale, 93 * scale, 61.5 * scale, 76 * scale, 64 * scale);
  ctx.bezierCurveTo(84.5 * scale, 78.5 * scale, 84.5 * scale, 78.5 * scale, 93 * scale, 93 * scale);
  ctx.bezierCurveTo(70 * scale, 111 * scale, 43 * scale, 103 * scale, 30 * scale, 82 * scale);
  ctx.bezierCurveTo(17 * scale, 61 * scale, 25 * scale, 30 * scale, 51 * scale, 21 * scale);
  ctx.bezierCurveTo(66 * scale, 15 * scale, 83 * scale, 18 * scale, 96 * scale, 29 * scale);
  ctx.bezierCurveTo(104 * scale, 35 * scale, 109 * scale, 47 * scale, 110 * scale, 58 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(110 * scale, 59 * scale);
  ctx.bezierCurveTo(93 * scale, 61.5 * scale, 93 * scale, 61.5 * scale, 76 * scale, 64 * scale);
  ctx.bezierCurveTo(84.5 * scale, 78.5 * scale, 84.5 * scale, 78.5 * scale, 93 * scale, 93 * scale);
  ctx.bezierCurveTo(70 * scale, 111 * scale, 43 * scale, 103 * scale, 30 * scale, 82 * scale);
  ctx.bezierCurveTo(17 * scale, 61 * scale, 25 * scale, 30 * scale, 51 * scale, 21 * scale);
  ctx.bezierCurveTo(66 * scale, 15 * scale, 83 * scale, 18 * scale, 96 * scale, 29 * scale);
  ctx.bezierCurveTo(104 * scale, 35 * scale, 109 * scale, 47 * scale, 110 * scale, 58 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  return can;
};

function create_crab_claw_right(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 104 * scale;
  can.height = 112 * scale;
  ctx.translate(0, 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(16 * scale, 44 * scale);
  ctx.bezierCurveTo(30.5 * scale, 48 * scale, 30.5 * scale, 48 * scale, 45 * scale, 52 * scale);
  ctx.bezierCurveTo(36.5 * scale, 63 * scale, 36.5 * scale, 63 * scale, 28 * scale, 74 * scale);
  ctx.bezierCurveTo(32 * scale, 86 * scale, 61 * scale, 92 * scale, 78 * scale, 76 * scale);
  ctx.bezierCurveTo(93 * scale, 62 * scale, 92 * scale, 40 * scale, 80 * scale, 26 * scale);
  ctx.bezierCurveTo(65 * scale, 11 * scale, 42 * scale, 16 * scale, 34 * scale, 21 * scale);
  ctx.bezierCurveTo(22 * scale, 27 * scale, 16 * scale, 39 * scale, 16 * scale, 44 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(16 * scale, 44 * scale);
  ctx.bezierCurveTo(30.5 * scale, 48 * scale, 30.5 * scale, 48 * scale, 45 * scale, 52 * scale);
  ctx.bezierCurveTo(36.5 * scale, 63 * scale, 36.5 * scale, 63 * scale, 28 * scale, 74 * scale);
  ctx.bezierCurveTo(32 * scale, 86 * scale, 61 * scale, 92 * scale, 78 * scale, 76 * scale);
  ctx.bezierCurveTo(93 * scale, 62 * scale, 92 * scale, 40 * scale, 80 * scale, 26 * scale);
  ctx.bezierCurveTo(65 * scale, 11 * scale, 42 * scale, 16 * scale, 34 * scale, 21 * scale);
  ctx.bezierCurveTo(22 * scale, 27 * scale, 16 * scale, 39 * scale, 16 * scale, 44 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  return can;
};

function create_crab_stick(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 321 * scale;
  can.height = 284 * scale;
  ctx.translate(100 * scale, 30 * scale);
  ctx.translate(5 * scale, 10 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58 * scale, 33 * scale);
  ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
  ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
  ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
  ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
  ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
  ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58 * scale, 33 * scale);
  ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
  ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
  ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
  ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
  ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
  ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(167 * scale, 120 * scale);
  ctx.bezierCurveTo(196 * scale, 106 * scale, 207 * scale, 111 * scale, 199 * scale, 135 * scale);
  ctx.bezierCurveTo(185 * scale, 172 * scale, 166 * scale, 187 * scale, 145 * scale, 179 * scale);
  ctx.bezierCurveTo(118 * scale, 166 * scale, 127 * scale, 139 * scale, 166 * scale, 121 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(25 * scale, 64 * scale);
  ctx.bezierCurveTo(59 * scale, 96 * scale, 97 * scale, 128 * scale, 129 * scale, 151 * scale);
  ctx.bezierCurveTo(126 * scale, 163 * scale, 134 * scale, 174 * scale, 142 * scale, 180 * scale);
  ctx.bezierCurveTo(114 * scale, 170 * scale, 68 * scale, 134 * scale, 31 * scale, 85 * scale);
  ctx.bezierCurveTo(24 * scale, 71 * scale, 24 * scale, 70 * scale, 25 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(161 * scale, 141 * scale);
  ctx.bezierCurveTo(181 * scale, 131 * scale, 186 * scale, 135 * scale, 173 * scale, 152 * scale);
  ctx.bezierCurveTo(163 * scale, 163 * scale, 155 * scale, 161 * scale, 151 * scale, 150 * scale);
  ctx.bezierCurveTo(147 * scale, 140 * scale, 155 * scale, 131 * scale, 175 * scale, 125 * scale);
  ctx.bezierCurveTo(190 * scale, 120 * scale, 196 * scale, 121 * scale, 189 * scale, 143 * scale);
  ctx.bezierCurveTo(182 * scale, 167 * scale, 169 * scale, 174 * scale, 157 * scale, 174 * scale);
  ctx.bezierCurveTo(138 * scale, 172 * scale, 139 * scale, 162 * scale, 140 * scale, 156 * scale);
  fill_path(ctx, undefined, color[4], 4 * scale);
  ctx.translate(-100 * scale, -30 * scale);
  ctx.translate(10 * scale, 70 * scale);
  ctx.translate(5 * scale, 10 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58 * scale, 33 * scale);
  ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
  ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
  ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
  ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
  ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
  ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58 * scale, 33 * scale);
  ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
  ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
  ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
  ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
  ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
  ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(167 * scale, 120 * scale);
  ctx.bezierCurveTo(196 * scale, 106 * scale, 207 * scale, 111 * scale, 199 * scale, 135 * scale);
  ctx.bezierCurveTo(185 * scale, 172 * scale, 166 * scale, 187 * scale, 145 * scale, 179 * scale);
  ctx.bezierCurveTo(118 * scale, 166 * scale, 127 * scale, 139 * scale, 166 * scale, 121 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(25 * scale, 64 * scale);
  ctx.bezierCurveTo(59 * scale, 96 * scale, 97 * scale, 128 * scale, 129 * scale, 151 * scale);
  ctx.bezierCurveTo(126 * scale, 163 * scale, 134 * scale, 174 * scale, 142 * scale, 180 * scale);
  ctx.bezierCurveTo(114 * scale, 170 * scale, 68 * scale, 134 * scale, 31 * scale, 85 * scale);
  ctx.bezierCurveTo(24 * scale, 71 * scale, 24 * scale, 70 * scale, 25 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(161 * scale, 141 * scale);
  ctx.bezierCurveTo(181 * scale, 131 * scale, 186 * scale, 135 * scale, 173 * scale, 152 * scale);
  ctx.bezierCurveTo(163 * scale, 163 * scale, 155 * scale, 161 * scale, 151 * scale, 150 * scale);
  ctx.bezierCurveTo(147 * scale, 140 * scale, 155 * scale, 131 * scale, 175 * scale, 125 * scale);
  ctx.bezierCurveTo(190 * scale, 120 * scale, 196 * scale, 121 * scale, 189 * scale, 143 * scale);
  ctx.bezierCurveTo(182 * scale, 167 * scale, 169 * scale, 174 * scale, 157 * scale, 174 * scale);
  ctx.bezierCurveTo(138 * scale, 172 * scale, 139 * scale, 162 * scale, 140 * scale, 156 * scale);
  fill_path(ctx, undefined, color[4], 4 * scale);
  ctx.translate(20 * scale, -80 * scale);
  ctx.translate(5 * scale, 10 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58 * scale, 33 * scale);
  ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
  ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
  ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
  ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
  ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
  ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58 * scale, 33 * scale);
  ctx.bezierCurveTo(81 * scale, 22 * scale, 93 * scale, 26 * scale, 123 * scale, 47 * scale);
  ctx.bezierCurveTo(160 * scale, 73 * scale, 169 * scale, 80 * scale, 191 * scale, 99 * scale);
  ctx.bezierCurveTo(202 * scale, 107 * scale, 211 * scale, 118 * scale, 195 * scale, 151 * scale);
  ctx.bezierCurveTo(181 * scale, 183 * scale, 157 * scale, 192 * scale, 129 * scale, 174 * scale);
  ctx.bezierCurveTo(78 * scale, 140 * scale, 68 * scale, 129 * scale, 37 * scale, 94 * scale);
  ctx.bezierCurveTo(15 * scale, 68 * scale, 25 * scale, 52 * scale, 56 * scale, 34 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(167 * scale, 120 * scale);
  ctx.bezierCurveTo(196 * scale, 106 * scale, 207 * scale, 111 * scale, 199 * scale, 135 * scale);
  ctx.bezierCurveTo(185 * scale, 172 * scale, 166 * scale, 187 * scale, 145 * scale, 179 * scale);
  ctx.bezierCurveTo(118 * scale, 166 * scale, 127 * scale, 139 * scale, 166 * scale, 121 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(25 * scale, 64 * scale);
  ctx.bezierCurveTo(59 * scale, 96 * scale, 97 * scale, 128 * scale, 129 * scale, 151 * scale);
  ctx.bezierCurveTo(126 * scale, 163 * scale, 134 * scale, 174 * scale, 142 * scale, 180 * scale);
  ctx.bezierCurveTo(114 * scale, 170 * scale, 68 * scale, 134 * scale, 31 * scale, 85 * scale);
  ctx.bezierCurveTo(24 * scale, 71 * scale, 24 * scale, 70 * scale, 25 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(161 * scale, 141 * scale);
  ctx.bezierCurveTo(181 * scale, 131 * scale, 186 * scale, 135 * scale, 173 * scale, 152 * scale);
  ctx.bezierCurveTo(163 * scale, 163 * scale, 155 * scale, 161 * scale, 151 * scale, 150 * scale);
  ctx.bezierCurveTo(147 * scale, 140 * scale, 155 * scale, 131 * scale, 175 * scale, 125 * scale);
  ctx.bezierCurveTo(190 * scale, 120 * scale, 196 * scale, 121 * scale, 189 * scale, 143 * scale);
  ctx.bezierCurveTo(182 * scale, 167 * scale, 169 * scale, 174 * scale, 157 * scale, 174 * scale);
  ctx.bezierCurveTo(138 * scale, 172 * scale, 139 * scale, 162 * scale, 140 * scale, 156 * scale);
  fill_path(ctx, undefined, color[4], 4 * scale);
  return can;
};

function create_goldsword(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 290 * scale;
  can.height = 525 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(20 * scale, 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111 * scale, 351 * scale);
  ctx.bezierCurveTo(128.5 * scale, 218.5 * scale, 128.5 * scale, 218.5 * scale, 146 * scale, 86 * scale);
  ctx.bezierCurveTo(166.5 * scale, 66.5 * scale, 166.5 * scale, 66.5 * scale, 187 * scale, 47 * scale);
  ctx.bezierCurveTo(201 * scale, 71.5 * scale, 201 * scale, 71.5 * scale, 215 * scale, 96 * scale);
  ctx.bezierCurveTo(193 * scale, 228.5 * scale, 193 * scale, 228.5 * scale, 171 * scale, 361 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(129.5 * scale, 424 * scale);
  ctx.rotate(0.16);
  round_rect(ctx, -15.5 * scale, -63 * scale, 31 * scale, 126 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  circle(ctx, 121 * scale, 480 * scale, 20.396078054371138 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90 * scale, 311 * scale);
  ctx.bezierCurveTo(95 * scale, 324 * scale, 95 * scale, 324 * scale, 100 * scale, 337 * scale);
  ctx.bezierCurveTo(141.5 * scale, 345.5 * scale, 141.5 * scale, 345.5 * scale, 183 * scale, 354 * scale);
  ctx.bezierCurveTo(193.5 * scale, 342.5 * scale, 193.5 * scale, 342.5 * scale, 204 * scale, 331 * scale);
  ctx.bezierCurveTo(202 * scale, 354 * scale, 202 * scale, 354 * scale, 200 * scale, 377 * scale);
  ctx.bezierCurveTo(147 * scale, 388 * scale, 106 * scale, 371 * scale, 79 * scale, 356 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-20 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111 * scale, 351 * scale);
  ctx.bezierCurveTo(128.5 * scale, 218.5 * scale, 128.5 * scale, 218.5 * scale, 146 * scale, 86 * scale);
  ctx.bezierCurveTo(166.5 * scale, 66.5 * scale, 166.5 * scale, 66.5 * scale, 187 * scale, 47 * scale);
  ctx.bezierCurveTo(201 * scale, 71.5 * scale, 201 * scale, 71.5 * scale, 215 * scale, 96 * scale);
  ctx.bezierCurveTo(193 * scale, 228.5 * scale, 193 * scale, 228.5 * scale, 171 * scale, 361 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12.5 * scale);
  ctx.save();
  ctx.translate(129.5 * scale, 424 * scale);
  ctx.rotate(0.16);
  round_rect(ctx, -15.5 * scale, -63 * scale, 31 * scale, 126 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[5], 12.5 * scale);
  circle(ctx, 121 * scale, 480 * scale, 20.396078054371138 * scale);
  fill_path(ctx, color[4], color[5], 12.5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90 * scale, 311 * scale);
  ctx.bezierCurveTo(95 * scale, 324 * scale, 95 * scale, 324 * scale, 100 * scale, 337 * scale);
  ctx.bezierCurveTo(141.5 * scale, 345.5 * scale, 141.5 * scale, 345.5 * scale, 183 * scale, 354 * scale);
  ctx.bezierCurveTo(193.5 * scale, 342.5 * scale, 193.5 * scale, 342.5 * scale, 204 * scale, 331 * scale);
  ctx.bezierCurveTo(202 * scale, 354 * scale, 202 * scale, 354 * scale, 200 * scale, 377 * scale);
  ctx.bezierCurveTo(147 * scale, 388 * scale, 106 * scale, 371 * scale, 79 * scale, 356 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12.5 * scale);
  return can;
};

function create_diamondsword(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 290 * scale;
  can.height = 525 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(20 * scale, 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(112 * scale, 356 * scale);
  ctx.bezierCurveTo(124 * scale, 220.5 * scale, 124 * scale, 220.5 * scale, 136 * scale, 85 * scale);
  ctx.bezierCurveTo(162.5 * scale, 65.5 * scale, 162.5 * scale, 65.5 * scale, 189 * scale, 46 * scale);
  ctx.bezierCurveTo(208.5 * scale, 72.5 * scale, 208.5 * scale, 72.5 * scale, 228 * scale, 99 * scale);
  ctx.bezierCurveTo(200 * scale, 232 * scale, 200 * scale, 232 * scale, 172 * scale, 365 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(131 * scale, 423 * scale);
  ctx.rotate(0.16);
  round_rect(ctx, -14 * scale, -53 * scale, 28 * scale, 106 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(122 * scale, 480 * scale);
  ctx.rotate(1.72);
  round_regular_polygon(ctx, 4, 26.476404589747453 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(210 * scale, 387 * scale);
  ctx.bezierCurveTo(138 * scale, 376 * scale, 138 * scale, 376 * scale, 66 * scale, 365 * scale);
  ctx.bezierCurveTo(76 * scale, 355 * scale, 76 * scale, 355 * scale, 86 * scale, 345 * scale);
  ctx.bezierCurveTo(99 * scale, 346.5 * scale, 99 * scale, 346.5 * scale, 112 * scale, 348 * scale);
  ctx.bezierCurveTo(128.5 * scale, 344 * scale, 128.5 * scale, 344 * scale, 145 * scale, 340 * scale);
  ctx.bezierCurveTo(158 * scale, 348 * scale, 158 * scale, 348 * scale, 171 * scale, 356 * scale);
  ctx.bezierCurveTo(184 * scale, 358 * scale, 184 * scale, 358 * scale, 197 * scale, 360 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(129 * scale, 338 * scale);
  ctx.bezierCurveTo(137 * scale, 336 * scale, 137 * scale, 336 * scale, 145 * scale, 334 * scale);
  ctx.bezierCurveTo(152.5 * scale, 338 * scale, 152.5 * scale, 338 * scale, 160 * scale, 342 * scale);
  ctx.bezierCurveTo(184 * scale, 224 * scale, 184 * scale, 224 * scale, 208 * scale, 106 * scale);
  ctx.bezierCurveTo(197 * scale, 88 * scale, 187 * scale, 70 * scale, 186 * scale, 70 * scale);
  ctx.bezierCurveTo(169.5 * scale, 83 * scale, 169.5 * scale, 83 * scale, 153 * scale, 96 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-20 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(112 * scale, 356 * scale);
  ctx.bezierCurveTo(124 * scale, 220.5 * scale, 124 * scale, 220.5 * scale, 136 * scale, 85 * scale);
  ctx.bezierCurveTo(162.5 * scale, 65.5 * scale, 162.5 * scale, 65.5 * scale, 189 * scale, 46 * scale);
  ctx.bezierCurveTo(208.5 * scale, 72.5 * scale, 208.5 * scale, 72.5 * scale, 228 * scale, 99 * scale);
  ctx.bezierCurveTo(200 * scale, 232 * scale, 200 * scale, 232 * scale, 172 * scale, 365 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12.5 * scale);
  ctx.save();
  ctx.translate(131 * scale, 423 * scale);
  ctx.rotate(0.16);
  round_rect(ctx, -14 * scale, -53 * scale, 28 * scale, 106 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[5], 12.5 * scale);
  ctx.save();
  ctx.translate(122 * scale, 480 * scale);
  ctx.rotate(1.72);
  round_regular_polygon(ctx, 4, 26.476404589747453 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 12.5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(210 * scale, 387 * scale);
  ctx.bezierCurveTo(138 * scale, 376 * scale, 138 * scale, 376 * scale, 66 * scale, 365 * scale);
  ctx.bezierCurveTo(76 * scale, 355 * scale, 76 * scale, 355 * scale, 86 * scale, 345 * scale);
  ctx.bezierCurveTo(99 * scale, 346.5 * scale, 99 * scale, 346.5 * scale, 112 * scale, 348 * scale);
  ctx.bezierCurveTo(128.5 * scale, 344 * scale, 128.5 * scale, 344 * scale, 145 * scale, 340 * scale);
  ctx.bezierCurveTo(158 * scale, 348 * scale, 158 * scale, 348 * scale, 171 * scale, 356 * scale);
  ctx.bezierCurveTo(184 * scale, 358 * scale, 184 * scale, 358 * scale, 197 * scale, 360 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12.5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(129 * scale, 338 * scale);
  ctx.bezierCurveTo(137 * scale, 336 * scale, 137 * scale, 336 * scale, 145 * scale, 334 * scale);
  ctx.bezierCurveTo(152.5 * scale, 338 * scale, 152.5 * scale, 338 * scale, 160 * scale, 342 * scale);
  ctx.bezierCurveTo(184 * scale, 224 * scale, 184 * scale, 224 * scale, 208 * scale, 106 * scale);
  ctx.bezierCurveTo(197 * scale, 88 * scale, 187 * scale, 70 * scale, 186 * scale, 70 * scale);
  ctx.bezierCurveTo(169.5 * scale, 83 * scale, 169.5 * scale, 83 * scale, 153 * scale, 96 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  return can;
};

function create_amesword(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 290 * scale;
  can.height = 525 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(20 * scale, 20 * scale);
  ctx.translate(-20 * scale, -20 * scale);
  ctx.save();
  ctx.translate(132 * scale, 423 * scale);
  ctx.rotate(0.16);
  round_rect(ctx, -14 * scale, -61 * scale, 28 * scale, 122 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100 * scale, 344 * scale);
  ctx.bezierCurveTo(123 * scale, 214 * scale, 123 * scale, 214 * scale, 146 * scale, 84 * scale);
  ctx.bezierCurveTo(166.5 * scale, 65 * scale, 166.5 * scale, 65 * scale, 187 * scale, 46 * scale);
  ctx.bezierCurveTo(201 * scale, 71 * scale, 201 * scale, 71 * scale, 215 * scale, 96 * scale);
  ctx.bezierCurveTo(199.5 * scale, 226.5 * scale, 199.5 * scale, 226.5 * scale, 184 * scale, 357 * scale);
  ctx.bezierCurveTo(162.5 * scale, 362.5 * scale, 162.5 * scale, 362.5 * scale, 141 * scale, 368 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(75 * scale, 328 * scale);
  ctx.bezierCurveTo(88 * scale, 336.5 * scale, 88 * scale, 336.5 * scale, 101 * scale, 345 * scale);
  ctx.bezierCurveTo(123.5 * scale, 337.5 * scale, 123.5 * scale, 337.5 * scale, 146 * scale, 330 * scale);
  ctx.bezierCurveTo(165 * scale, 343.5 * scale, 165 * scale, 343.5 * scale, 184 * scale, 357 * scale);
  ctx.bezierCurveTo(198.5 * scale, 353 * scale, 198.5 * scale, 353 * scale, 213 * scale, 349 * scale);
  ctx.bezierCurveTo(200.5 * scale, 364.5 * scale, 200.5 * scale, 364.5 * scale, 188 * scale, 380 * scale);
  ctx.bezierCurveTo(163 * scale, 380.5 * scale, 163 * scale, 380.5 * scale, 138 * scale, 381 * scale);
  ctx.bezierCurveTo(112 * scale, 373.5 * scale, 112 * scale, 373.5 * scale, 86 * scale, 366 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(121 * scale, 332 * scale);
  ctx.bezierCurveTo(133.5 * scale, 327.5 * scale, 133.5 * scale, 327.5 * scale, 146 * scale, 323 * scale);
  ctx.bezierCurveTo(157 * scale, 330.5 * scale, 157 * scale, 330.5 * scale, 168 * scale, 338 * scale);
  ctx.bezierCurveTo(182.5 * scale, 219.5 * scale, 182.5 * scale, 219.5 * scale, 197 * scale, 101 * scale);
  ctx.bezierCurveTo(190 * scale, 84.5 * scale, 190 * scale, 84.5 * scale, 183 * scale, 68 * scale);
  ctx.bezierCurveTo(172.5 * scale, 81 * scale, 172.5 * scale, 81 * scale, 162 * scale, 94 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105 * scale, 463 * scale);
  ctx.bezierCurveTo(124.5 * scale, 466 * scale, 124.5 * scale, 466 * scale, 144 * scale, 469 * scale);
  ctx.bezierCurveTo(145.5 * scale, 478.5 * scale, 145.5 * scale, 478.5 * scale, 147 * scale, 488 * scale);
  ctx.bezierCurveTo(133.5 * scale, 495.5 * scale, 133.5 * scale, 495.5 * scale, 120 * scale, 503 * scale);
  ctx.bezierCurveTo(108.5 * scale, 492 * scale, 108.5 * scale, 492 * scale, 97 * scale, 481 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-20 * scale, -20 * scale);
  ctx.save();
  ctx.translate(132 * scale, 423 * scale);
  ctx.rotate(0.16);
  round_rect(ctx, -14 * scale, -61 * scale, 28 * scale, 122 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[5], 12.5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100 * scale, 344 * scale);
  ctx.bezierCurveTo(123 * scale, 214 * scale, 123 * scale, 214 * scale, 146 * scale, 84 * scale);
  ctx.bezierCurveTo(166.5 * scale, 65 * scale, 166.5 * scale, 65 * scale, 187 * scale, 46 * scale);
  ctx.bezierCurveTo(201 * scale, 71 * scale, 201 * scale, 71 * scale, 215 * scale, 96 * scale);
  ctx.bezierCurveTo(199.5 * scale, 226.5 * scale, 199.5 * scale, 226.5 * scale, 184 * scale, 357 * scale);
  ctx.bezierCurveTo(162.5 * scale, 362.5 * scale, 162.5 * scale, 362.5 * scale, 141 * scale, 368 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12.5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(75 * scale, 328 * scale);
  ctx.bezierCurveTo(88 * scale, 336.5 * scale, 88 * scale, 336.5 * scale, 101 * scale, 345 * scale);
  ctx.bezierCurveTo(123.5 * scale, 337.5 * scale, 123.5 * scale, 337.5 * scale, 146 * scale, 330 * scale);
  ctx.bezierCurveTo(165 * scale, 343.5 * scale, 165 * scale, 343.5 * scale, 184 * scale, 357 * scale);
  ctx.bezierCurveTo(198.5 * scale, 353 * scale, 198.5 * scale, 353 * scale, 213 * scale, 349 * scale);
  ctx.bezierCurveTo(200.5 * scale, 364.5 * scale, 200.5 * scale, 364.5 * scale, 188 * scale, 380 * scale);
  ctx.bezierCurveTo(163 * scale, 380.5 * scale, 163 * scale, 380.5 * scale, 138 * scale, 381 * scale);
  ctx.bezierCurveTo(112 * scale, 373.5 * scale, 112 * scale, 373.5 * scale, 86 * scale, 366 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12.5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(121 * scale, 332 * scale);
  ctx.bezierCurveTo(133.5 * scale, 327.5 * scale, 133.5 * scale, 327.5 * scale, 146 * scale, 323 * scale);
  ctx.bezierCurveTo(157 * scale, 330.5 * scale, 157 * scale, 330.5 * scale, 168 * scale, 338 * scale);
  ctx.bezierCurveTo(182.5 * scale, 219.5 * scale, 182.5 * scale, 219.5 * scale, 197 * scale, 101 * scale);
  ctx.bezierCurveTo(190 * scale, 84.5 * scale, 190 * scale, 84.5 * scale, 183 * scale, 68 * scale);
  ctx.bezierCurveTo(172.5 * scale, 81 * scale, 172.5 * scale, 81 * scale, 162 * scale, 94 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105 * scale, 463 * scale);
  ctx.bezierCurveTo(124.5 * scale, 466 * scale, 124.5 * scale, 466 * scale, 144 * scale, 469 * scale);
  ctx.bezierCurveTo(145.5 * scale, 478.5 * scale, 145.5 * scale, 478.5 * scale, 147 * scale, 488 * scale);
  ctx.bezierCurveTo(133.5 * scale, 495.5 * scale, 133.5 * scale, 495.5 * scale, 120 * scale, 503 * scale);
  ctx.bezierCurveTo(108.5 * scale, 492 * scale, 108.5 * scale, 492 * scale, 97 * scale, 481 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12.5 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(143 * scale, 346 * scale);
  ctx.bezierCurveTo(125 * scale, 352 * scale, 125 * scale, 352 * scale, 107 * scale, 358 * scale);
  ctx.bezierCurveTo(124 * scale, 363 * scale, 140 * scale, 368 * scale, 141 * scale, 368 * scale);
  ctx.bezierCurveTo(156.5 * scale, 367 * scale, 156.5 * scale, 367 * scale, 172 * scale, 366 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  return can;
};

function create_sugar_can(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 154 * scale;
  can.height = 261 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125 * scale, 69 * scale);
  ctx.bezierCurveTo(123.5 * scale, 141.5 * scale, 123.5 * scale, 141.5 * scale, 122 * scale, 214 * scale);
  ctx.bezierCurveTo(123 * scale, 228 * scale, 119 * scale, 239 * scale, 102 * scale, 239 * scale);
  ctx.bezierCurveTo(90 * scale, 238 * scale, 86 * scale, 225 * scale, 89 * scale, 197 * scale);
  ctx.bezierCurveTo(92 * scale, 159 * scale, 92 * scale, 141 * scale, 94 * scale, 84 * scale);
  ctx.bezierCurveTo(94 * scale, 58 * scale, 87 * scale, 50 * scale, 73 * scale, 52 * scale);
  ctx.bezierCurveTo(53 * scale, 54 * scale, 54 * scale, 92 * scale, 34 * scale, 87 * scale);
  ctx.bezierCurveTo(13 * scale, 85 * scale, 22 * scale, 58 * scale, 34 * scale, 40 * scale);
  ctx.bezierCurveTo(44 * scale, 24 * scale, 68 * scale, 17 * scale, 86 * scale, 21 * scale);
  ctx.bezierCurveTo(111 * scale, 23 * scale, 123 * scale, 39 * scale, 125 * scale, 67 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125 * scale, 69 * scale);
  ctx.bezierCurveTo(123.5 * scale, 141.5 * scale, 123.5 * scale, 141.5 * scale, 122 * scale, 214 * scale);
  ctx.bezierCurveTo(123 * scale, 228 * scale, 119 * scale, 239 * scale, 102 * scale, 239 * scale);
  ctx.bezierCurveTo(90 * scale, 238 * scale, 86 * scale, 225 * scale, 89 * scale, 197 * scale);
  ctx.bezierCurveTo(92 * scale, 159 * scale, 92 * scale, 141 * scale, 94 * scale, 84 * scale);
  ctx.bezierCurveTo(94 * scale, 58 * scale, 87 * scale, 50 * scale, 73 * scale, 52 * scale);
  ctx.bezierCurveTo(53 * scale, 54 * scale, 54 * scale, 92 * scale, 34 * scale, 87 * scale);
  ctx.bezierCurveTo(13 * scale, 85 * scale, 22 * scale, 58 * scale, 34 * scale, 40 * scale);
  ctx.bezierCurveTo(44 * scale, 24 * scale, 68 * scale, 17 * scale, 86 * scale, 21 * scale);
  ctx.bezierCurveTo(111 * scale, 23 * scale, 123 * scale, 39 * scale, 125 * scale, 67 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 43 * scale);
  ctx.bezierCurveTo(31 * scale, 61 * scale, 43 * scale, 70 * scale, 51 * scale, 75 * scale);
  ctx.bezierCurveTo(48 * scale, 84 * scale, 41 * scale, 89 * scale, 33 * scale, 86 * scale);
  ctx.bezierCurveTo(23 * scale, 88 * scale, 20 * scale, 76 * scale, 23 * scale, 62 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(45 * scale, 29 * scale);
  ctx.bezierCurveTo(49 * scale, 45 * scale, 61 * scale, 54 * scale, 64 * scale, 55 * scale);
  ctx.bezierCurveTo(67.5 * scale, 53 * scale, 67.5 * scale, 53 * scale, 71 * scale, 51 * scale);
  ctx.bezierCurveTo(80 * scale, 44 * scale, 83 * scale, 33 * scale, 82 * scale, 20 * scale);
  ctx.bezierCurveTo(59 * scale, 17 * scale, 51 * scale, 23 * scale, 45 * scale, 30 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(86 * scale, 56 * scale);
  ctx.bezierCurveTo(90 * scale, 33 * scale, 103 * scale, 25 * scale, 105 * scale, 27 * scale);
  ctx.bezierCurveTo(116 * scale, 31 * scale, 121 * scale, 45 * scale, 122 * scale, 50 * scale);
  ctx.bezierCurveTo(112 * scale, 62 * scale, 103 * scale, 63 * scale, 91 * scale, 62 * scale);
  ctx.bezierCurveTo(89 * scale, 59.5 * scale, 89 * scale, 59.5 * scale, 87 * scale, 57 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 81 * scale);
  ctx.bezierCurveTo(109 * scale, 82 * scale, 123 * scale, 70 * scale, 124 * scale, 63 * scale);
  ctx.bezierCurveTo(124 * scale, 75.5 * scale, 124 * scale, 75.5 * scale, 124 * scale, 88 * scale);
  ctx.bezierCurveTo(119 * scale, 99 * scale, 103 * scale, 103 * scale, 94 * scale, 103 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 124 * scale);
  ctx.bezierCurveTo(108 * scale, 125 * scale, 122 * scale, 113 * scale, 124 * scale, 106 * scale);
  ctx.bezierCurveTo(124 * scale, 119 * scale, 124 * scale, 129 * scale, 124 * scale, 132 * scale);
  ctx.bezierCurveTo(110 * scale, 147 * scale, 94 * scale, 148 * scale, 90 * scale, 147 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90 * scale, 170 * scale);
  ctx.bezierCurveTo(104 * scale, 166 * scale, 122 * scale, 158 * scale, 122 * scale, 151 * scale);
  ctx.bezierCurveTo(122 * scale, 162.5 * scale, 122 * scale, 162.5 * scale, 122 * scale, 174 * scale);
  ctx.bezierCurveTo(111 * scale, 191 * scale, 97 * scale, 191 * scale, 89 * scale, 191 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(88 * scale, 208 * scale);
  ctx.bezierCurveTo(100 * scale, 209 * scale, 115 * scale, 205 * scale, 122 * scale, 193 * scale);
  ctx.bezierCurveTo(122 * scale, 205.5 * scale, 122 * scale, 205.5 * scale, 122 * scale, 218 * scale);
  ctx.bezierCurveTo(115 * scale, 229 * scale, 103 * scale, 235 * scale, 90 * scale, 228 * scale);
  ctx.bezierCurveTo(88 * scale, 224 * scale, 88 * scale, 217 * scale, 88 * scale, 211 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.globalAlpha = 0.4;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(22 * scale, 81 * scale);
  ctx.bezierCurveTo(32 * scale, 84 * scale, 41 * scale, 81 * scale, 45 * scale, 68 * scale);
  ctx.bezierCurveTo(50 * scale, 50 * scale, 62 * scale, 40 * scale, 79 * scale, 43 * scale);
  ctx.bezierCurveTo(95 * scale, 45 * scale, 102 * scale, 58 * scale, 101 * scale, 81 * scale);
  ctx.bezierCurveTo(99.5 * scale, 120.5 * scale, 99.5 * scale, 120.5 * scale, 98 * scale, 160 * scale);
  ctx.bezierCurveTo(96.5 * scale, 191.5 * scale, 96.5 * scale, 191.5 * scale, 95 * scale, 223 * scale);
  ctx.bezierCurveTo(93 * scale, 232 * scale, 101 * scale, 235 * scale, 108 * scale, 238 * scale);
  ctx.bezierCurveTo(100 * scale, 240 * scale, 90 * scale, 233 * scale, 90 * scale, 224 * scale);
  ctx.bezierCurveTo(92 * scale, 157 * scale, 92 * scale, 157 * scale, 94 * scale, 90 * scale);
  ctx.bezierCurveTo(94 * scale, 56 * scale, 89 * scale, 53 * scale, 77 * scale, 51 * scale);
  ctx.bezierCurveTo(58 * scale, 50 * scale, 54 * scale, 59 * scale, 49 * scale, 75 * scale);
  ctx.bezierCurveTo(44 * scale, 91 * scale, 28 * scale, 90 * scale, 23 * scale, 81 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(82 * scale, 123 * scale);
  ctx.bezierCurveTo(88 * scale, 130 * scale, 88 * scale, 127 * scale, 94 * scale, 128 * scale);
  ctx.bezierCurveTo(91 * scale, 136 * scale, 94 * scale, 137 * scale, 99 * scale, 142 * scale);
  ctx.bezierCurveTo(97 * scale, 149 * scale, 99 * scale, 152 * scale, 105 * scale, 155 * scale);
  ctx.bezierCurveTo(107 * scale, 159 * scale, 113 * scale, 159 * scale, 120 * scale, 158 * scale);
  ctx.bezierCurveTo(121 * scale, 160 * scale, 125 * scale, 163 * scale, 132 * scale, 163 * scale);
  ctx.bezierCurveTo(133 * scale, 166 * scale, 136 * scale, 169 * scale, 138 * scale, 170 * scale);
  ctx.bezierCurveTo(133 * scale, 171 * scale, 132 * scale, 172 * scale, 129 * scale, 174 * scale);
  ctx.bezierCurveTo(122 * scale, 170 * scale, 120 * scale, 170 * scale, 116 * scale, 174 * scale);
  ctx.bezierCurveTo(108 * scale, 170.5 * scale, 108 * scale, 170.5 * scale, 100 * scale, 167 * scale);
  ctx.bezierCurveTo(95 * scale, 172 * scale, 94 * scale, 179 * scale, 95 * scale, 184 * scale);
  ctx.bezierCurveTo(87 * scale, 185 * scale, 87 * scale, 189 * scale, 88 * scale, 194 * scale);
  ctx.bezierCurveTo(82 * scale, 194 * scale, 81 * scale, 195 * scale, 79 * scale, 197 * scale);
  ctx.bezierCurveTo(78 * scale, 192 * scale, 78 * scale, 191 * scale, 77 * scale, 189 * scale);
  ctx.bezierCurveTo(81 * scale, 185 * scale, 82 * scale, 183 * scale, 80 * scale, 176 * scale);
  ctx.bezierCurveTo(89 * scale, 170 * scale, 92 * scale, 168 * scale, 95 * scale, 163 * scale);
  ctx.bezierCurveTo(91 * scale, 151 * scale, 88 * scale, 151 * scale, 82 * scale, 147 * scale);
  ctx.bezierCurveTo(85 * scale, 142 * scale, 85 * scale, 137 * scale, 81 * scale, 133 * scale);
  ctx.bezierCurveTo(84 * scale, 127 * scale, 84 * scale, 125 * scale, 82 * scale, 124 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  circle(ctx, 107 * scale, 152 * scale, 9 * scale);
  fill_path(ctx, color[6]);
  circle(ctx, 105 * scale, 173 * scale, 9 * scale);
  fill_path(ctx, color[6]);
  circle(ctx, 87 * scale, 161 * scale, 9 * scale);
  fill_path(ctx, color[6]);
  circle(ctx, 106 * scale, 147 * scale, 4 * scale);
  fill_path(ctx, color[7]);
  circle(ctx, 104 * scale, 167 * scale, 4 * scale);
  fill_path(ctx, color[7]);
  circle(ctx, 86 * scale, 154 * scale, 4 * scale);
  fill_path(ctx, color[7]);
  return can;
};

function create_cookie(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 350 * scale;
  can.height = 140 * scale;
  ctx.translate(-50 * scale, -150 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(184.5 * scale, 222.0625 * scale);
  ctx.bezierCurveTo(185.5 * scale, 184.0625 * scale, 302.5 * scale, 171.0625 * scale, 313.5 * scale, 222.0625 * scale);
  ctx.bezierCurveTo(330.5 * scale, 263.0625 * scale, 181.5 * scale, 274.0625 * scale, 184.5 * scale, 223.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(131.5 * scale, 241.0625 * scale);
  ctx.bezierCurveTo(144.5 * scale, 278.0625 * scale, 270.5 * scale, 209.0625 * scale, 228.5 * scale, 174.0625 * scale);
  ctx.bezierCurveTo(196.5 * scale, 147.0625 * scale, 117.5 * scale, 196.0625 * scale, 131.5 * scale, 240.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 8 * scale);
  circle(ctx, 270.5 * scale, 225.0625 * scale, 15.811388300841896 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 243.5 * scale, 225.0625 * scale, 6.082762530298219 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 255.5 * scale, 210.0625 * scale, 10.816653826391969 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 167.5 * scale, 215.0625 * scale, 15.297058540778355 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 176.5 * scale, 204.0625 * scale, 7.280109889280518 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 206.5 * scale, 189.0625 * scale, 7.280109889280518 * scale);
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(151.5 * scale, 212.0625 * scale);
  ctx.bezierCurveTo(161.5 * scale, 204.0625 * scale, 173.5 * scale, 214.0625 * scale, 158.5 * scale, 221.0625 * scale);
  ctx.bezierCurveTo(145.5 * scale, 228.0625 * scale, 144.5 * scale, 216.0625 * scale, 151.5 * scale, 212.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(194.5 * scale, 209.0625 * scale);
  ctx.bezierCurveTo(205.5 * scale, 202.0625 * scale, 215.5 * scale, 207.0625 * scale, 199.5 * scale, 217.0625 * scale);
  ctx.bezierCurveTo(187.5 * scale, 224.0625 * scale, 182.5 * scale, 217.0625 * scale, 194.5 * scale, 209.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(188.5 * scale, 183.0625 * scale);
  ctx.bezierCurveTo(201.5 * scale, 176.0625 * scale, 213.5 * scale, 187.0625 * scale, 193.5 * scale, 193.0625 * scale);
  ctx.bezierCurveTo(185.5 * scale, 194.0625 * scale, 175.5 * scale, 189.0625 * scale, 188.5 * scale, 183.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(261.5 * scale, 202.0625 * scale);
  ctx.bezierCurveTo(274.5 * scale, 201.0625 * scale, 282.5 * scale, 214.0625 * scale, 261.5 * scale, 215.0625 * scale);
  ctx.bezierCurveTo(246.5 * scale, 214.0625 * scale, 248.5 * scale, 203.0625 * scale, 261.5 * scale, 202.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(240.5 * scale, 231.0625 * scale);
  ctx.bezierCurveTo(255.5 * scale, 231.0625 * scale, 254.5 * scale, 243.0625 * scale, 240.5 * scale, 242.0625 * scale);
  ctx.bezierCurveTo(225.5 * scale, 239.0625 * scale, 225.5 * scale, 232.0625 * scale, 240.5 * scale, 231.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  return can;
};

function create_candy(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 217 * scale;
  can.height = 215 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(79 * scale, 113 * scale);
  ctx.bezierCurveTo(135 * scale, 98 * scale, 136 * scale, 96 * scale, 142 * scale, 97 * scale);
  ctx.bezierCurveTo(167 * scale, 106 * scale, 167 * scale, 106 * scale, 171 * scale, 109 * scale);
  ctx.bezierCurveTo(173 * scale, 120 * scale, 173 * scale, 134 * scale, 169 * scale, 141 * scale);
  ctx.bezierCurveTo(140 * scale, 149.5 * scale, 140 * scale, 149.5 * scale, 111 * scale, 158 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(154 * scale, 103 * scale);
  ctx.bezierCurveTo(167 * scale, 91 * scale, 175 * scale, 87 * scale, 176 * scale, 94 * scale);
  ctx.bezierCurveTo(175 * scale, 102 * scale, 176 * scale, 102 * scale, 186 * scale, 103 * scale);
  ctx.bezierCurveTo(191 * scale, 104 * scale, 192 * scale, 105 * scale, 185 * scale, 116 * scale);
  ctx.bezierCurveTo(183 * scale, 120 * scale, 191 * scale, 124 * scale, 189 * scale, 129 * scale);
  ctx.bezierCurveTo(185 * scale, 139 * scale, 178 * scale, 134 * scale, 166 * scale, 131 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(60 * scale, 46 * scale);
  ctx.bezierCurveTo(60 * scale, 34 * scale, 60 * scale, 29 * scale, 56 * scale, 19 * scale);
  ctx.bezierCurveTo(52 * scale, 12 * scale, 52 * scale, 16 * scale, 49 * scale, 24 * scale);
  ctx.bezierCurveTo(48 * scale, 27 * scale, 46 * scale, 28 * scale, 39 * scale, 27 * scale);
  ctx.bezierCurveTo(33 * scale, 26 * scale, 34 * scale, 31 * scale, 35 * scale, 37 * scale);
  ctx.bezierCurveTo(36 * scale, 41 * scale, 27 * scale, 46 * scale, 29 * scale, 52 * scale);
  ctx.bezierCurveTo(36 * scale, 55 * scale, 35 * scale, 56 * scale, 31 * scale, 59 * scale);
  ctx.bezierCurveTo(27 * scale, 65 * scale, 32 * scale, 64 * scale, 35 * scale, 62 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(46 * scale, 50 * scale);
  ctx.bezierCurveTo(51 * scale, 35 * scale, 70 * scale, 32 * scale, 78 * scale, 29 * scale);
  ctx.bezierCurveTo(84 * scale, 27 * scale, 113 * scale, 36 * scale, 127 * scale, 41 * scale);
  ctx.bezierCurveTo(140 * scale, 47 * scale, 147 * scale, 69 * scale, 137 * scale, 73 * scale);
  ctx.bezierCurveTo(124 * scale, 92 * scale, 117 * scale, 92 * scale, 109 * scale, 94 * scale);
  ctx.bezierCurveTo(101 * scale, 96 * scale, 89 * scale, 92 * scale, 65 * scale, 83 * scale);
  ctx.bezierCurveTo(54 * scale, 80 * scale, 46 * scale, 58 * scale, 46 * scale, 51 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(51 * scale, 40 * scale);
  ctx.bezierCurveTo(49 * scale, 34 * scale, 49 * scale, 34 * scale, 47 * scale, 28 * scale);
  ctx.bezierCurveTo(38 * scale, 28 * scale, 34 * scale, 27 * scale, 37 * scale, 37 * scale);
  ctx.bezierCurveTo(43 * scale, 40.5 * scale, 43 * scale, 40.5 * scale, 49 * scale, 44 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(29 * scale, 48 * scale);
  ctx.bezierCurveTo(38 * scale, 49 * scale, 38 * scale, 49 * scale, 47 * scale, 50 * scale);
  ctx.bezierCurveTo(46.5 * scale, 51.5 * scale, 46.5 * scale, 51.5 * scale, 46 * scale, 53 * scale);
  ctx.bezierCurveTo(40 * scale, 53.5 * scale, 40 * scale, 53.5 * scale, 34 * scale, 54 * scale);
  ctx.bezierCurveTo(29 * scale, 51 * scale, 32 * scale, 51.5 * scale, 30 * scale, 49 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(89 * scale, 61 * scale);
  ctx.bezierCurveTo(101 * scale, 70 * scale, 109 * scale, 90 * scale, 102 * scale, 90 * scale);
  ctx.bezierCurveTo(97 * scale, 91 * scale, 87 * scale, 91 * scale, 60 * scale, 80 * scale);
  ctx.bezierCurveTo(48 * scale, 65 * scale, 46 * scale, 56 * scale, 48 * scale, 53 * scale);
  ctx.bezierCurveTo(50 * scale, 52 * scale, 66 * scale, 56 * scale, 89 * scale, 61 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(99 * scale, 59 * scale);
  ctx.bezierCurveTo(115 * scale, 45 * scale, 125 * scale, 42 * scale, 129 * scale, 47 * scale);
  ctx.bezierCurveTo(138 * scale, 56 * scale, 140 * scale, 63 * scale, 138 * scale, 67 * scale);
  ctx.bezierCurveTo(131 * scale, 80 * scale, 122 * scale, 87 * scale, 114 * scale, 90 * scale);
  ctx.bezierCurveTo(105 * scale, 80 * scale, 95 * scale, 62 * scale, 98 * scale, 61 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(118 * scale, 62 * scale);
  ctx.bezierCurveTo(139 * scale, 45 * scale, 153 * scale, 40 * scale, 150 * scale, 48 * scale);
  ctx.bezierCurveTo(145 * scale, 57 * scale, 157 * scale, 63 * scale, 157 * scale, 70 * scale);
  ctx.bezierCurveTo(157 * scale, 74 * scale, 142 * scale, 77 * scale, 142 * scale, 85 * scale);
  ctx.bezierCurveTo(143 * scale, 91 * scale, 141 * scale, 92 * scale, 135 * scale, 90 * scale);
  ctx.bezierCurveTo(132 * scale, 90 * scale, 132 * scale, 96 * scale, 124 * scale, 99 * scale);
  ctx.bezierCurveTo(118 * scale, 93 * scale, 116 * scale, 77 * scale, 116 * scale, 64 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90 * scale, 130 * scale);
  ctx.bezierCurveTo(157 * scale, 115 * scale, 165 * scale, 111 * scale, 167 * scale, 115 * scale);
  ctx.bezierCurveTo(170 * scale, 117 * scale, 171 * scale, 135 * scale, 167 * scale, 141 * scale);
  ctx.bezierCurveTo(135.5 * scale, 149.5 * scale, 135.5 * scale, 149.5 * scale, 104 * scale, 158 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(53 * scale, 119 * scale);
  ctx.bezierCurveTo(46 * scale, 120 * scale, 40 * scale, 118 * scale, 34 * scale, 116 * scale);
  ctx.bezierCurveTo(28 * scale, 111 * scale, 41 * scale, 112 * scale, 39 * scale, 108 * scale);
  ctx.bezierCurveTo(36 * scale, 100 * scale, 49 * scale, 102 * scale, 53 * scale, 95 * scale);
  ctx.bezierCurveTo(57 * scale, 84 * scale, 58 * scale, 85 * scale, 63 * scale, 93 * scale);
  ctx.bezierCurveTo(68 * scale, 96 * scale, 72 * scale, 94 * scale, 80 * scale, 88 * scale);
  ctx.bezierCurveTo(80 * scale, 96 * scale, 78 * scale, 107 * scale, 66 * scale, 115 * scale);
  ctx.closePath();
  fill_path(ctx, color[9], color[10], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(118 * scale, 64 * scale);
  ctx.bezierCurveTo(133.5 * scale, 57 * scale, 133.5 * scale, 57 * scale, 149 * scale, 50 * scale);
  ctx.bezierCurveTo(145 * scale, 54 * scale, 154 * scale, 65 * scale, 157 * scale, 68 * scale);
  ctx.bezierCurveTo(138.5 * scale, 66.5 * scale, 138.5 * scale, 66.5 * scale, 120 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(118 * scale, 65 * scale);
  ctx.bezierCurveTo(129 * scale, 77 * scale, 129 * scale, 77 * scale, 140 * scale, 89 * scale);
  ctx.bezierCurveTo(131 * scale, 89 * scale, 130 * scale, 92 * scale, 128 * scale, 96 * scale);
  ctx.bezierCurveTo(123.5 * scale, 82 * scale, 123.5 * scale, 82 * scale, 119 * scale, 68 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(51 * scale, 112 * scale);
  ctx.bezierCurveTo(63 * scale, 108 * scale, 78 * scale, 111 * scale, 88 * scale, 112 * scale);
  ctx.bezierCurveTo(98 * scale, 122 * scale, 117 * scale, 136 * scale, 125 * scale, 157 * scale);
  ctx.bezierCurveTo(123 * scale, 180 * scale, 123 * scale, 185 * scale, 118 * scale, 186 * scale);
  ctx.bezierCurveTo(101 * scale, 190 * scale, 89 * scale, 191 * scale, 79 * scale, 187 * scale);
  ctx.bezierCurveTo(53 * scale, 165 * scale, 50 * scale, 153 * scale, 47 * scale, 144 * scale);
  ctx.bezierCurveTo(46 * scale, 128 * scale, 46 * scale, 124 * scale, 50 * scale, 112 * scale);
  ctx.closePath();
  fill_path(ctx, color[9], color[10], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(50 * scale, 114 * scale);
  ctx.bezierCurveTo(81 * scale, 149 * scale, 80 * scale, 147 * scale, 80 * scale, 149 * scale);
  ctx.bezierCurveTo(82 * scale, 155 * scale, 80 * scale, 182 * scale, 74 * scale, 182 * scale);
  ctx.bezierCurveTo(60 * scale, 172 * scale, 52 * scale, 157 * scale, 47 * scale, 144 * scale);
  ctx.closePath();
  fill_path(ctx, color[11], color[11], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(85 * scale, 152 * scale);
  ctx.bezierCurveTo(99 * scale, 150 * scale, 109 * scale, 152 * scale, 119 * scale, 156 * scale);
  ctx.bezierCurveTo(122 * scale, 163 * scale, 122 * scale, 174 * scale, 117 * scale, 182 * scale);
  ctx.closePath();
  ctx.bezierCurveTo(93 * scale, 188 * scale, 82 * scale, 187 * scale, 83 * scale, 179 * scale);
  fill_path(ctx, color[11], color[11], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(104 * scale, 166 * scale);
  ctx.bezierCurveTo(133 * scale, 165 * scale, 142 * scale, 168 * scale, 137 * scale, 173 * scale);
  ctx.bezierCurveTo(127 * scale, 177 * scale, 137 * scale, 195 * scale, 126 * scale, 196 * scale);
  ctx.bezierCurveTo(112 * scale, 195 * scale, 112 * scale, 194 * scale, 109 * scale, 199 * scale);
  ctx.bezierCurveTo(105 * scale, 205 * scale, 102 * scale, 195 * scale, 96 * scale, 197 * scale);
  ctx.bezierCurveTo(84 * scale, 201 * scale, 88 * scale, 198 * scale, 90 * scale, 187 * scale);
  ctx.bezierCurveTo(96 * scale, 171 * scale, 97 * scale, 170 * scale, 103 * scale, 167 * scale);
  ctx.closePath();
  fill_path(ctx, color[9], color[10], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105 * scale, 168 * scale);
  ctx.bezierCurveTo(118 * scale, 172.5 * scale, 118 * scale, 172.5 * scale, 131 * scale, 177 * scale);
  ctx.bezierCurveTo(133 * scale, 190 * scale, 132 * scale, 199 * scale, 116 * scale, 194 * scale);
  ctx.bezierCurveTo(110 * scale, 182 * scale, 110 * scale, 182 * scale, 104 * scale, 170 * scale);
  ctx.closePath();
  fill_path(ctx, color[10]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102 * scale, 169 * scale);
  ctx.bezierCurveTo(100.5 * scale, 182 * scale, 100.5 * scale, 182 * scale, 99 * scale, 195 * scale);
  ctx.bezierCurveTo(93.5 * scale, 196.5 * scale, 93.5 * scale, 196.5 * scale, 88 * scale, 198 * scale);
  ctx.bezierCurveTo(94 * scale, 176 * scale, 96 * scale, 174 * scale, 101 * scale, 168 * scale);
  ctx.closePath();
  fill_path(ctx, color[9], color[9], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(64 * scale, 107 * scale);
  ctx.bezierCurveTo(64 * scale, 101 * scale, 64 * scale, 101 * scale, 64 * scale, 95 * scale);
  ctx.bezierCurveTo(57 * scale, 86 * scale, 57 * scale, 84 * scale, 53 * scale, 97 * scale);
  ctx.bezierCurveTo(55 * scale, 103.5 * scale, 55 * scale, 103.5 * scale, 57 * scale, 110 * scale);
  ctx.closePath();
  fill_path(ctx, color[11], color[11], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(40 * scale, 108 * scale);
  ctx.bezierCurveTo(46.5 * scale, 111 * scale, 46.5 * scale, 111 * scale, 53 * scale, 114 * scale);
  ctx.bezierCurveTo(50.5 * scale, 117 * scale, 50.5 * scale, 117 * scale, 48 * scale, 120 * scale);
  ctx.bezierCurveTo(40.5 * scale, 117.5 * scale, 40.5 * scale, 117.5 * scale, 33 * scale, 115 * scale);
  ctx.bezierCurveTo(36 * scale, 112 * scale, 36 * scale, 112 * scale, 39 * scale, 109 * scale);
  ctx.closePath();
  fill_path(ctx, color[11], color[11], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(189 * scale, 106 * scale);
  ctx.bezierCurveTo(178.5 * scale, 110.5 * scale, 178.5 * scale, 110.5 * scale, 168 * scale, 115 * scale);
  ctx.bezierCurveTo(168.5 * scale, 119 * scale, 168.5 * scale, 119 * scale, 169 * scale, 123 * scale);
  ctx.bezierCurveTo(179 * scale, 124.5 * scale, 179 * scale, 124.5 * scale, 189 * scale, 126 * scale);
  ctx.bezierCurveTo(182 * scale, 118 * scale, 183 * scale, 115 * scale, 188 * scale, 106 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(69 * scale, 178 * scale);
  ctx.bezierCurveTo(69 * scale, 141 * scale, 70 * scale, 136 * scale, 77 * scale, 137 * scale);
  ctx.bezierCurveTo(88 * scale, 133 * scale, 101 * scale, 134 * scale, 108 * scale, 137 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 161 * scale);
  ctx.bezierCurveTo(54 * scale, 124 * scale, 55 * scale, 119 * scale, 62 * scale, 119 * scale);
  ctx.bezierCurveTo(74 * scale, 117 * scale, 85 * scale, 117 * scale, 93 * scale, 119 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(91 * scale, 29 * scale);
  ctx.bezierCurveTo(74 * scale, 33 * scale, 62 * scale, 46 * scale, 57 * scale, 54 * scale);
  ctx.bezierCurveTo(57 * scale, 63 * scale, 68 * scale, 76 * scale, 77 * scale, 87 * scale);
  fill_path(ctx, undefined, color[6], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107 * scale, 33 * scale);
  ctx.bezierCurveTo(82 * scale, 51 * scale, 80 * scale, 52 * scale, 79 * scale, 59 * scale);
  ctx.bezierCurveTo(78 * scale, 65 * scale, 93 * scale, 86 * scale, 101 * scale, 93 * scale);
  fill_path(ctx, undefined, color[6], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130 * scale, 98 * scale);
  ctx.bezierCurveTo(126.5 * scale, 103 * scale, 126.5 * scale, 103 * scale, 123 * scale, 108 * scale);
  ctx.bezierCurveTo(133.5 * scale, 107 * scale, 133.5 * scale, 107 * scale, 144 * scale, 106 * scale);
  ctx.bezierCurveTo(138.5 * scale, 110 * scale, 138.5 * scale, 110 * scale, 133 * scale, 114 * scale);
  ctx.bezierCurveTo(142 * scale, 114 * scale, 142 * scale, 114 * scale, 151 * scale, 114 * scale);
  ctx.bezierCurveTo(146.5 * scale, 119.5 * scale, 146.5 * scale, 119.5 * scale, 142 * scale, 125 * scale);
  ctx.bezierCurveTo(146.5 * scale, 127 * scale, 146.5 * scale, 127 * scale, 151 * scale, 129 * scale);
  ctx.bezierCurveTo(147.5 * scale, 132 * scale, 147.5 * scale, 132 * scale, 144 * scale, 135 * scale);
  ctx.bezierCurveTo(148 * scale, 137 * scale, 148 * scale, 137 * scale, 152 * scale, 139 * scale);
  ctx.bezierCurveTo(149 * scale, 142.5 * scale, 149 * scale, 142.5 * scale, 146 * scale, 146 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  return can;
};

function create_ferrero_rocher(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 118 * scale;
  can.height = 114 * scale;
  ctx.translate(0, 10 * scale);
  circle(ctx, 42 * scale, 43 * scale, 24.758836806279895 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(65 * scale, 90 * scale);
  ctx.bezierCurveTo(72 * scale, 91 * scale, 75 * scale, 92 * scale, 71 * scale, 96 * scale);
  ctx.bezierCurveTo(65 * scale, 98 * scale, 65 * scale, 94 * scale, 65 * scale, 91 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87 * scale, 45 * scale);
  ctx.bezierCurveTo(108 * scale, 59 * scale, 100 * scale, 86 * scale, 85 * scale, 91 * scale);
  ctx.bezierCurveTo(80 * scale, 96 * scale, 68 * scale, 95 * scale, 58 * scale, 87 * scale);
  ctx.bezierCurveTo(53 * scale, 80 * scale, 61 * scale, 64 * scale, 66 * scale, 58 * scale);
  ctx.bezierCurveTo(73 * scale, 48 * scale, 78 * scale, 44 * scale, 87 * scale, 45 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, -10 * scale);
  circle(ctx, 42 * scale, 43 * scale, 24.758836806279895 * scale);
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(65 * scale, 90 * scale);
  ctx.bezierCurveTo(72 * scale, 91 * scale, 75 * scale, 92 * scale, 71 * scale, 96 * scale);
  ctx.bezierCurveTo(65 * scale, 98 * scale, 65 * scale, 94 * scale, 65 * scale, 91 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87 * scale, 45 * scale);
  ctx.bezierCurveTo(108 * scale, 59 * scale, 100 * scale, 86 * scale, 85 * scale, 91 * scale);
  ctx.bezierCurveTo(80 * scale, 96 * scale, 68 * scale, 95 * scale, 58 * scale, 87 * scale);
  ctx.bezierCurveTo(53 * scale, 80 * scale, 61 * scale, 64 * scale, 66 * scale, 58 * scale);
  ctx.bezierCurveTo(73 * scale, 48 * scale, 78 * scale, 44 * scale, 87 * scale, 45 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 16 * scale);
  ctx.bezierCurveTo(55 * scale, 19 * scale, 54 * scale, 20 * scale, 55 * scale, 22 * scale);
  ctx.bezierCurveTo(52 * scale, 24.5 * scale, 52 * scale, 24.5 * scale, 49 * scale, 27 * scale);
  ctx.bezierCurveTo(45 * scale, 25 * scale, 45 * scale, 25 * scale, 41 * scale, 23 * scale);
  ctx.bezierCurveTo(45 * scale, 19 * scale, 48 * scale, 16 * scale, 52 * scale, 16 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(62 * scale, 30 * scale);
  ctx.bezierCurveTo(66 * scale, 29 * scale, 64 * scale, 30 * scale, 66 * scale, 30 * scale);
  ctx.bezierCurveTo(67 * scale, 31 * scale, 67 * scale, 31 * scale, 68 * scale, 32 * scale);
  ctx.bezierCurveTo(66.5 * scale, 33.5 * scale, 66.5 * scale, 33.5 * scale, 65 * scale, 35 * scale);
  ctx.bezierCurveTo(63.5 * scale, 32.5 * scale, 63.5 * scale, 32.5 * scale, 62 * scale, 30 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(29 * scale, 21 * scale);
  ctx.bezierCurveTo(31 * scale, 22 * scale, 31 * scale, 26 * scale, 29 * scale, 29 * scale);
  ctx.bezierCurveTo(26 * scale, 28.5 * scale, 26 * scale, 28.5 * scale, 23 * scale, 28 * scale);
  ctx.bezierCurveTo(23 * scale, 26.5 * scale, 23 * scale, 26.5 * scale, 23 * scale, 25 * scale);
  ctx.bezierCurveTo(25 * scale, 23 * scale, 25 * scale, 23 * scale, 27 * scale, 21 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(18 * scale, 36 * scale);
  ctx.bezierCurveTo(23 * scale, 36 * scale, 24 * scale, 42 * scale, 19 * scale, 46 * scale);
  ctx.bezierCurveTo(12 * scale, 39 * scale, 15 * scale, 38 * scale, 18 * scale, 37 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 34 * scale);
  ctx.bezierCurveTo(35 * scale, 36 * scale, 36 * scale, 39 * scale, 32 * scale, 45 * scale);
  ctx.bezierCurveTo(25 * scale, 46 * scale, 25 * scale, 44 * scale, 30 * scale, 34 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(59 * scale, 35 * scale);
  ctx.bezierCurveTo(58 * scale, 27 * scale, 57 * scale, 27 * scale, 52 * scale, 31 * scale);
  ctx.bezierCurveTo(50 * scale, 36 * scale, 53 * scale, 38 * scale, 58 * scale, 36 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(63 * scale, 46 * scale);
  ctx.bezierCurveTo(64.5 * scale, 46.5 * scale, 64.5 * scale, 46.5 * scale, 66 * scale, 47 * scale);
  ctx.bezierCurveTo(70 * scale, 50 * scale, 70 * scale, 53 * scale, 61 * scale, 55 * scale);
  ctx.bezierCurveTo(62 * scale, 50.5 * scale, 62 * scale, 50.5 * scale, 63 * scale, 46 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(41 * scale, 42 * scale);
  ctx.bezierCurveTo(47 * scale, 41 * scale, 53 * scale, 47 * scale, 46 * scale, 51 * scale);
  ctx.bezierCurveTo(38 * scale, 49 * scale, 39 * scale, 46 * scale, 41 * scale, 43 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 57 * scale);
  ctx.bezierCurveTo(54 * scale, 57 * scale, 54 * scale, 58 * scale, 55 * scale, 61 * scale);
  ctx.bezierCurveTo(54 * scale, 63 * scale, 52 * scale, 64 * scale, 48 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(20 * scale, 52 * scale);
  ctx.bezierCurveTo(25 * scale, 51 * scale, 27 * scale, 50 * scale, 28 * scale, 54 * scale);
  ctx.bezierCurveTo(27 * scale, 58 * scale, 24 * scale, 58 * scale, 22 * scale, 58 * scale);
  ctx.bezierCurveTo(21 * scale, 55.5 * scale, 21 * scale, 55.5 * scale, 20 * scale, 53 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 61 * scale);
  ctx.bezierCurveTo(37 * scale, 61 * scale, 39 * scale, 63 * scale, 39 * scale, 68 * scale);
  ctx.bezierCurveTo(36 * scale, 68.5 * scale, 36 * scale, 68.5 * scale, 33 * scale, 69 * scale);
  ctx.bezierCurveTo(30.5 * scale, 67.5 * scale, 30.5 * scale, 67.5 * scale, 28 * scale, 66 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(88 * scale, 45 * scale);
  ctx.bezierCurveTo(90 * scale, 46.5 * scale, 90 * scale, 46.5 * scale, 92 * scale, 48 * scale);
  ctx.bezierCurveTo(92 * scale, 50 * scale, 92 * scale, 50 * scale, 92 * scale, 52 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(96 * scale, 53 * scale);
  ctx.bezierCurveTo(97.5 * scale, 55 * scale, 97.5 * scale, 55 * scale, 99 * scale, 57 * scale);
  ctx.bezierCurveTo(97.5 * scale, 59.5 * scale, 97.5 * scale, 59.5 * scale, 96 * scale, 62 * scale);
  ctx.bezierCurveTo(93.5 * scale, 60.5 * scale, 93.5 * scale, 60.5 * scale, 91 * scale, 59 * scale);
  ctx.bezierCurveTo(91.5 * scale, 57 * scale, 91.5 * scale, 57 * scale, 92 * scale, 55 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(92 * scale, 71 * scale);
  ctx.bezierCurveTo(94.5 * scale, 70.5 * scale, 94.5 * scale, 70.5 * scale, 97 * scale, 70 * scale);
  ctx.bezierCurveTo(98.5 * scale, 72.5 * scale, 98.5 * scale, 72.5 * scale, 100 * scale, 75 * scale);
  ctx.bezierCurveTo(97 * scale, 76.5 * scale, 97 * scale, 76.5 * scale, 94 * scale, 78 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(95 * scale, 82 * scale);
  ctx.bezierCurveTo(96 * scale, 83 * scale, 96 * scale, 83 * scale, 97 * scale, 84 * scale);
  ctx.bezierCurveTo(97 * scale, 85.5 * scale, 97 * scale, 85.5 * scale, 97 * scale, 87 * scale);
  ctx.bezierCurveTo(93.5 * scale, 87.5 * scale, 93.5 * scale, 87.5 * scale, 90 * scale, 88 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(86 * scale, 72 * scale);
  ctx.bezierCurveTo(89 * scale, 76 * scale, 88 * scale, 81 * scale, 85 * scale, 82 * scale);
  ctx.bezierCurveTo(80 * scale, 80 * scale, 82 * scale, 78 * scale, 85 * scale, 72 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80 * scale, 86 * scale);
  ctx.bezierCurveTo(84 * scale, 88 * scale, 86 * scale, 88 * scale, 85 * scale, 93 * scale);
  ctx.bezierCurveTo(80 * scale, 96 * scale, 79 * scale, 96 * scale, 76 * scale, 91 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84 * scale, 46 * scale);
  ctx.bezierCurveTo(93 * scale, 51 * scale, 91 * scale, 62 * scale, 80 * scale, 78 * scale);
  ctx.bezierCurveTo(74 * scale, 86 * scale, 66 * scale, 90 * scale, 60 * scale, 86 * scale);
  ctx.bezierCurveTo(55 * scale, 79 * scale, 57 * scale, 73 * scale, 67 * scale, 57 * scale);
  ctx.bezierCurveTo(71 * scale, 51 * scale, 79 * scale, 44 * scale, 84 * scale, 46 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(76 * scale, 60 * scale);
  ctx.bezierCurveTo(80 * scale, 66 * scale, 75 * scale, 74 * scale, 68 * scale, 74 * scale);
  ctx.bezierCurveTo(60 * scale, 64 * scale, 68 * scale, 59 * scale, 76 * scale, 59 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 5 * scale);
  return can;
};

function create_seed(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 70;
  var h = scale * 90;
  var width = scale * 4;
  var shadow = scale * 5;
  var w2 = w / 2;
  var h2 = h / 2;
  var round = scale * 10;
  var wr = scale * 100;
  var hr = scale * 100;
  var wr2 = wr / 2;
  var hr2 = hr / 2;
  can.width = w;
  can.height = h;
  ctx.save();
  ctx.translate(-80 * scale, (-70 * scale) + shadow);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.bezierCurveTo(130 * scale, 79 * scale, 132 * scale, 86 * scale, 130 * scale, 93 * scale);
  ctx.bezierCurveTo(128 * scale, 100 * scale, 121 * scale, 107 * scale, 120 * scale, 107 * scale);
  ctx.bezierCurveTo(120 * scale, 107 * scale, 115 * scale, 98 * scale, 115 * scale, 92 * scale);
  ctx.bezierCurveTo(115 * scale, 86 * scale, 119 * scale, 76 * scale, 127 * scale, 73 * scale);
  ctx.closePath();
  fill_path(ctx, "#0d1b1c");
  ctx.restore();
  ctx.save();
  ctx.translate(-80 * scale, (-70 * scale) + shadow);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.bezierCurveTo(112 * scale, 109 * scale, 111 * scale, 100 * scale, 106 * scale, 93 * scale);
  ctx.bezierCurveTo(104 * scale, 90 * scale, 91 * scale, 87 * scale, 91 * scale, 87 * scale);
  ctx.bezierCurveTo(91 * scale, 88 * scale, 91 * scale, 96 * scale, 94 * scale, 102 * scale);
  ctx.bezierCurveTo(97 * scale, 108 * scale, 106 * scale, 112 * scale, 113 * scale, 112 * scale);
  ctx.closePath();
  fill_path(ctx, "#0d1b1c");
  ctx.restore();
  ctx.save();
  ctx.translate(-80 * scale, (-70 * scale) + shadow);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.bezierCurveTo(108 * scale, 120 * scale, 100 * scale, 119 * scale, 91 * scale, 127 * scale);
  ctx.bezierCurveTo(83 * scale, 134 * scale, 82 * scale, 146 * scale, 83 * scale, 146 * scale);
  ctx.bezierCurveTo(84 * scale, 146 * scale, 98 * scale, 142 * scale, 103 * scale, 138 * scale);
  ctx.bezierCurveTo(107 * scale, 135 * scale, 110 * scale, 130 * scale, 112 * scale, 121 * scale);
  ctx.closePath();
  fill_path(ctx, "#0d1b1c");
  ctx.restore();
  ctx.save();
  ctx.translate(3 * scale, (-93 * scale) + shadow);
  ctx.rotate(Math.PI / 5);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.bezierCurveTo(130 * scale, 79 * scale, 132 * scale, 86 * scale, 130 * scale, 93 * scale);
  ctx.bezierCurveTo(128 * scale, 100 * scale, 121 * scale, 107 * scale, 120 * scale, 107 * scale);
  ctx.bezierCurveTo(120 * scale, 107 * scale, 115 * scale, 98 * scale, 115 * scale, 92 * scale);
  ctx.bezierCurveTo(115 * scale, 86 * scale, 119 * scale, 76 * scale, 127 * scale, 73 * scale);
  ctx.closePath();
  fill_path(ctx, "#0d1b1c");
  ctx.restore();
  ctx.save();
  ctx.translate(-80 * scale, -70 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.bezierCurveTo(130 * scale, 79 * scale, 132 * scale, 86 * scale, 130 * scale, 93 * scale);
  ctx.bezierCurveTo(128 * scale, 100 * scale, 121 * scale, 107 * scale, 120 * scale, 107 * scale);
  ctx.bezierCurveTo(120 * scale, 107 * scale, 115 * scale, 98 * scale, 115 * scale, 92 * scale);
  ctx.bezierCurveTo(115 * scale, 86 * scale, 119 * scale, 76 * scale, 127 * scale, 73 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], width);
  ctx.restore();
  ctx.save();
  ctx.translate(-80 * scale, -70 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.bezierCurveTo(112 * scale, 109 * scale, 111 * scale, 100 * scale, 106 * scale, 93 * scale);
  ctx.bezierCurveTo(104 * scale, 90 * scale, 91 * scale, 87 * scale, 91 * scale, 87 * scale);
  ctx.bezierCurveTo(91 * scale, 88 * scale, 91 * scale, 96 * scale, 94 * scale, 102 * scale);
  ctx.bezierCurveTo(97 * scale, 108 * scale, 106 * scale, 112 * scale, 113 * scale, 112 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], width);
  ctx.restore();
  ctx.save();
  ctx.translate(-80 * scale, -70 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.bezierCurveTo(108 * scale, 120 * scale, 100 * scale, 119 * scale, 91 * scale, 127 * scale);
  ctx.bezierCurveTo(83 * scale, 134 * scale, 82 * scale, 146 * scale, 83 * scale, 146 * scale);
  ctx.bezierCurveTo(84 * scale, 146 * scale, 98 * scale, 142 * scale, 103 * scale, 138 * scale);
  ctx.bezierCurveTo(107 * scale, 135 * scale, 110 * scale, 130 * scale, 112 * scale, 121 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], width);
  ctx.restore();
  ctx.save();
  ctx.translate(3 * scale, -93 * scale);
  ctx.rotate(Math.PI / 5);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.bezierCurveTo(130 * scale, 79 * scale, 132 * scale, 86 * scale, 130 * scale, 93 * scale);
  ctx.bezierCurveTo(128 * scale, 100 * scale, 121 * scale, 107 * scale, 120 * scale, 107 * scale);
  ctx.bezierCurveTo(120 * scale, 107 * scale, 115 * scale, 98 * scale, 115 * scale, 92 * scale);
  ctx.bezierCurveTo(115 * scale, 86 * scale, 119 * scale, 76 * scale, 127 * scale, 73 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], width);
  ctx.restore();
  return can;
};

function create_info_box(inv) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var text = LANG[inv];
  ctx.font = "20px Baloo Paaji";
  var max_size = 0;
  if (text.length >= 1)
    max_size = Math.max(0, ctx.measureText(text[0]).width);

  ctx.font = "17px Baloo Paaji";
  if (text.length >= 2)
    max_size = Math.max(max_size, ctx.measureText(text[1]).width);

  ctx.font = "14px Baloo Paaji";
  for (i = 2; i < text.length; i++)
    max_size = Math.max(max_size, ctx.measureText(text[i]).width);
  var width = max_size + 35;
  var text_height = 26;
  var height = 0;
  if (text.length === 1)
    height = 55;
  else if (text.length === 2)
    height = 85;
  else
    height = ((text.length - 2) * text_height) + 85;
  can.width = width;
  can.height = height;
  round_rect(ctx, 0, 0, width, height, 10);
  ctx.fillStyle = "#000000";
  ctx.globalAlpha = 0.5;
  ctx.fill();
  if (text.length >= 1) {
    ctx.textBaseline = "middle", ctx.font = "20px Baloo Paaji";
    ctx.globalAlpha = 1;
    ctx.fillStyle = "#e2c340";
    ctx.fillText(text[0], 15, 28);
  }
  if (text.length >= 2) {
    ctx.font = "17px Baloo Paaji";
    ctx.fillStyle = "#ffffff";
    ctx.fillText(text[1], 15, 55);
    height = 55;
  }
  if (text.length >= 3) {
    ctx.font = "14px Baloo Paaji";
    ctx.globalAlpha = 0.7;
    for (i = 2; i < text.length; i++) {
      ctx.fillText(text[i], 15, height + 28);
      height += text_height;
    }
  }
  return can;
};

function create_welcome_text(text) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  ctx.lineJoin = "round";
  while (text.indexOf("\\n") !== -1)
    text = text.replace("\\n", '\x0a');
  text = text.split('\x0a');
  color = [];
  var h = 14;
  var height = (text.length * (h + 4)) + 10;
  var width = 0;
  ctx.font = h + "px Baloo Paaji";
  for (var i = 0; i < text.length; i++) {
    if (text[i].charAt(0) === "#") {
      color[i] = text[i].substring(0, 7);
      text[i] = text[i].substring(8);
    } else
      color[i] = "#FFFFFF";
    width = Math.max(ctx.measureText(text[i]).width + 16, width);
  }
  can.height = height;
  can.width = width;
  for (var i = 0; i < text.length; i++) {
    var img = create_text(1, text[i], h, color[i], null, null, null, null, null, "#000", 6);
    ctx.drawImage(img, 8, (i * (h + 4)) + 5);
  }
  return can;
};;

function create_text(scale, text, h, color, shadow, dist, rounded, radius, max, stroke, line) {
  if (line === undefined)
    line = 0;

  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  dist = !dist ? 0 : (dist * scale);
  var height = Math.floor(scale * h);
  ctx.font = height + "px Baloo Paaji";
  ctx.lineJoin = "round";
  radius = radius * scale;
  var gap = rounded ? (radius * 2) : 0;
  if (max)
    var width = Math.min((ctx.measureText(text).width + (2 * scale)) + gap, max);
  else
    var width = ((ctx.measureText(text).width + (2 * scale)) + gap) + ((line * scale) * 2);
  var height = (((height + dist) + line) * scale) + gap;
  can.width = width;
  can.height = height;
  if (rounded) {
    ctx.fillStyle = rounded;
    round_rect(ctx, 0, 0, width, height, radius * 2);
    ctx.fill();
    ctx.translate(radius, radius);
  }
  ctx.textBaseline = "middle", ctx.font = h + "px Baloo Paaji";
  ctx.lineJoin = "round";
  if (shadow) {
    ctx.beginPath();
    ctx.fillStyle = shadow;
    ctx.fillText(text, 0, ((height / 2) + dist) - (gap / 2), width);
  }
  ctx.beginPath();
  if (stroke) {
    ctx.strokeStyle = stroke;
    ctx.lineWidth = line;
    ctx.strokeText(text, line, (height - gap) / 2, width);
  }
  ctx.fillStyle = color;
  ctx.fillText(text, line, (height - gap) / 2, width);
  return can;
};

function create_stone(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 220;
  var h = scale * 230;
  var r = scale * 100;
  var round = r / 4;
  var shadow = scale * 20;
  can.width = w;
  can.height = h;
  ctx.translate(w / 2, (h / 2) + shadow);
  ctx.globalAlpha = 0.5;
  round_regular_polygon(ctx, 7, r, round);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -shadow);
  round_regular_polygon(ctx, 7, r, round);
  fill_path(ctx, color[1]);
  round_regular_polygon(ctx, 6, r * 0.65, round * 0.65);
  fill_path(ctx, color[2]);
  return can;
};

function create_cave_stone(scale, draw_shadow, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 220;
  var h = scale * 220;
  var r = scale * 100;
  var round = r / 4;
  var shadow = scale * 20;
  can.width = w;
  can.height = h;
  ctx.translate(w / 2, h / 2);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  if (!draw_shadow)
    ctx.translate(0 * scale, -8 * scale);

  round_regular_polygon(ctx, 7, r, round);
  if (draw_shadow) {
    fill_path(ctx, color[0]);
  } else {
    fill_path(ctx, color[1]);
  }
  ctx.globalAlpha = 1;
  if (i == 0) {
    round_regular_polygon(ctx, 6, r * 0.65, round * 0.65);
    fill_path(ctx, color[2]);
  } else if (i == 1) {
    ctx.translate(20 * scale, 20 * scale);
    round_regular_polygon(ctx, 6, r * 0.45, round * 0.4);
    fill_path(ctx, color[2]);
  }
  return can;
};

function create_gold(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 120;
  var h = scale * 150;
  var r = scale * 60;
  var round = r / 4;
  var shadow = scale * 15;
  can.width = w;
  can.height = h;
  ctx.save();
  ctx.translate((w / 2) + (0 * scale), ((h / 2) + (0 * scale)) + shadow);
  ctx.rotate(Math.PI / 3);
  ctx.globalAlpha = 0.5;
  round_regular_polygon(ctx, 8, r, round);
  fill_path(ctx, color[0]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) - (11 * scale), (h / 2) + (12 * scale));
  ctx.globalAlpha = 1;
  ctx.rotate(Math.PI / 3);
  ctx.translate(0, -shadow);
  round_regular_polygon(ctx, 8, r, round);
  fill_path(ctx, color[1]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) - (9 * scale), (h / 2) - (12 * scale));
  ctx.rotate(Math.PI / 2.8);
  round_regular_polygon(ctx, 5, r * 0.5, round * 0.4);
  fill_path(ctx, color[2]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) + (19 * scale), (h / 2) + (5 * scale));
  ctx.rotate(Math.PI / 1);
  round_regular_polygon(ctx, 5, r * 0.5, round * 0.4);
  fill_path(ctx, color[2]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) - (8 * scale), (h / 2) + (20 * scale));
  ctx.rotate(Math.PI / 2.25);
  round_regular_polygon(ctx, 5, r * 0.5, round * 0.4);
  fill_path(ctx, color[2]);
  ctx.restore();
  return can;
};

function create_diamond(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 180;
  var h = scale * 210;
  var r = scale * 60;
  var round = r / 4;
  var shadow = scale * 20;
  can.width = w;
  can.height = h;
  ctx.save();
  ctx.translate((w / 2) - (0 * scale), ((h / 2) - (35 * scale)) + shadow);
  ctx.rotate(Math.PI / -1.8);
  ctx.globalAlpha = 0.5;
  ctx.translate(0 * scale, -20 * scale);
  round_regular_polygon(ctx, 5, r, round);
  fill_path(ctx, color[0]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) + (10 * scale), ((h / 2) + (15 * scale)) + shadow);
  ctx.rotate(Math.PI / 2);
  ctx.globalAlpha = 0.5;
  ctx.translate(0 * scale, -20 * scale);
  round_regular_polygon(ctx, 5, r, round);
  fill_path(ctx, color[0]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) - (50 * scale), ((h / 2) + (40 * scale)) + shadow);
  ctx.rotate(Math.PI / 3);
  ctx.globalAlpha = 0.5;
  ctx.translate(0, -20 * scale);
  round_regular_polygon(ctx, 5, r, round);
  fill_path(ctx, color[0]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) - (0 * scale), (h / 2) - (35 * scale));
  ctx.rotate(Math.PI / -1.8);
  ctx.globalAlpha = 1;
  ctx.translate(0 * scale, -20 * scale);
  round_regular_polygon(ctx, 5, r, round);
  fill_path(ctx, color[1]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) + (10 * scale), (h / 2) + (15 * scale));
  ctx.rotate(Math.PI / 2);
  ctx.globalAlpha = 1;
  ctx.translate(0, -20 * scale);
  round_regular_polygon(ctx, 5, r, round);
  fill_path(ctx, color[1]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) - (50 * scale), (h / 2) + (40 * scale));
  ctx.rotate(Math.PI / 3);
  ctx.globalAlpha = 1;
  ctx.translate(0, -20 * scale);
  round_regular_polygon(ctx, 5, r, round);
  fill_path(ctx, color[1]);
  ctx.restore();
  var r = scale * 30;
  var round = r / 4;
  ctx.save();
  ctx.translate((w / 2) + (5 * scale), (h / 2) - (20 * scale));
  ctx.rotate(Math.PI / -1.8);
  ctx.globalAlpha = 1;
  ctx.translate(0, -20 * scale);
  round_regular_polygon(ctx, 5, r, round);
  fill_path(ctx, color[2]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) + (0 * scale), (h / 2) + (10 * scale));
  ctx.rotate(Math.PI / 2);
  ctx.globalAlpha = 1;
  ctx.translate(0, -20 * scale);
  round_regular_polygon(ctx, 5, r, round);
  fill_path(ctx, color[2]);
  ctx.restore();
  ctx.save();
  ctx.translate((w / 2) - (45 * scale), (h / 2) + (35 * scale));
  ctx.rotate(Math.PI / 3);
  ctx.globalAlpha = 1;
  ctx.translate(0, -20 * scale);
  round_regular_polygon(ctx, 5, r, round);
  fill_path(ctx, color[2]);
  ctx.restore();
  circle(ctx, (w / 2) - (7 * scale), (h / 2) + (7 * scale), 5);
  fill_path(ctx, color[2]);
  return can;
};

function create_plant(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 140;
  var h = scale * 150;
  var shadow = scale * 10;
  var width = scale * 4;
  can.width = w;
  can.height = h;
  ctx.translate(-50 * scale, (-38 * scale) + shadow);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.bezierCurveTo(160 * scale, 65 * scale, 160 * scale, 85 * scale, 152 * scale, 95 * scale);
  ctx.bezierCurveTo(152 * scale, 95 * scale, 173 * scale, 94 * scale, 187 * scale, 102 * scale);
  ctx.bezierCurveTo(187 * scale, 102 * scale, 180 * scale, 120 * scale, 155 * scale, 126 * scale);
  ctx.bezierCurveTo(154 * scale, 126 * scale, 166 * scale, 138 * scale, 169 * scale, 148 * scale);
  ctx.bezierCurveTo(169 * scale, 148 * scale, 148 * scale, 152 * scale, 133 * scale, 140 * scale);
  ctx.bezierCurveTo(133 * scale, 140 * scale, 134 * scale, 160 * scale, 122 * scale, 175 * scale);
  ctx.bezierCurveTo(122 * scale, 175 * scale, 107 * scale, 162 * scale, 107 * scale, 144 * scale);
  ctx.bezierCurveTo(107 * scale, 144 * scale, 98 * scale, 164 * scale, 73 * scale, 167 * scale);
  ctx.bezierCurveTo(73 * scale, 167 * scale, 72 * scale, 134 * scale, 90 * scale, 127 * scale);
  ctx.bezierCurveTo(90 * scale, 127 * scale, 70 * scale, 134 * scale, 55 * scale, 123 * scale);
  ctx.bezierCurveTo(55 * scale, 123 * scale, 58 * scale, 115 * scale, 75 * scale, 104 * scale);
  ctx.bezierCurveTo(75 * scale, 104 * scale, 66 * scale, 96 * scale, 61 * scale, 77 * scale);
  ctx.bezierCurveTo(61 * scale, 77 * scale, 83 * scale, 74 * scale, 102 * scale, 89 * scale);
  ctx.bezierCurveTo(102 * scale, 89 * scale, 92 * scale, 66 * scale, 110 * scale, 41 * scale);
  ctx.bezierCurveTo(111 * scale, 40 * scale, 130 * scale, 54 * scale, 130 * scale, 82 * scale);
  ctx.bezierCurveTo(130 * scale, 82 * scale, 143 * scale, 67 * scale, 159 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, 0 - shadow);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.bezierCurveTo(160 * scale, 65 * scale, 160 * scale, 85 * scale, 152 * scale, 95 * scale);
  ctx.bezierCurveTo(152 * scale, 95 * scale, 173 * scale, 94 * scale, 187 * scale, 102 * scale);
  ctx.bezierCurveTo(187 * scale, 102 * scale, 180 * scale, 120 * scale, 155 * scale, 126 * scale);
  ctx.bezierCurveTo(154 * scale, 126 * scale, 166 * scale, 138 * scale, 169 * scale, 148 * scale);
  ctx.bezierCurveTo(169 * scale, 148 * scale, 148 * scale, 152 * scale, 133 * scale, 140 * scale);
  ctx.bezierCurveTo(133 * scale, 140 * scale, 134 * scale, 160 * scale, 122 * scale, 175 * scale);
  ctx.bezierCurveTo(122 * scale, 175 * scale, 107 * scale, 162 * scale, 107 * scale, 144 * scale);
  ctx.bezierCurveTo(107 * scale, 144 * scale, 98 * scale, 164 * scale, 73 * scale, 167 * scale);
  ctx.bezierCurveTo(73 * scale, 167 * scale, 72 * scale, 134 * scale, 90 * scale, 127 * scale);
  ctx.bezierCurveTo(90 * scale, 127 * scale, 70 * scale, 134 * scale, 55 * scale, 123 * scale);
  ctx.bezierCurveTo(55 * scale, 123 * scale, 58 * scale, 115 * scale, 75 * scale, 104 * scale);
  ctx.bezierCurveTo(75 * scale, 104 * scale, 66 * scale, 96 * scale, 61 * scale, 77 * scale);
  ctx.bezierCurveTo(61 * scale, 77 * scale, 83 * scale, 74 * scale, 102 * scale, 89 * scale);
  ctx.bezierCurveTo(102 * scale, 89 * scale, 92 * scale, 66 * scale, 110 * scale, 41 * scale);
  ctx.bezierCurveTo(111 * scale, 40 * scale, 130 * scale, 54 * scale, 130 * scale, 82 * scale);
  ctx.bezierCurveTo(130 * scale, 82 * scale, 143 * scale, 67 * scale, 159 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], width);
  return can;
};

function create_fruit(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 18;
  var h = scale * 18;
  can.width = w;
  can.height = h;
  var x = scale * 9;
  var y = scale * 9;
  var r = scale * 8;
  ctx.save();
  ctx.translate(x, y);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[0]);
  var r = 3 * scale;
  var x = 0;
  var y = -3 * scale;
  ctx.translate(x, y);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, r);
  fill_path(ctx, color[1]);
  ctx.restore();
  return can;
};

function create_leaf(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 80 * scale;
  can.height = 100 * scale;
  ctx.scale(0.5, 0.5);
  ctx.translate(10, 15);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(47 * scale, 5 * scale);
  ctx.bezierCurveTo(19 * scale, 30 * scale, 12 * scale, 42 * scale, 10 * scale, 55 * scale);
  ctx.bezierCurveTo(11 * scale, 75 * scale, 27 * scale, 76 * scale, 36 * scale, 72 * scale);
  ctx.bezierCurveTo(52 * scale, 60 * scale, 53 * scale, 46 * scale, 54 * scale, 31 * scale);
  ctx.bezierCurveTo(53 * scale, 14 * scale, 50 * scale, 9 * scale, 48 * scale, 6 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(17 * scale, 70 * scale);
  ctx.bezierCurveTo(18 * scale, 77 * scale, 10 * scale, 83 * scale, 4 * scale, 87 * scale);
  fill_path(ctx, undefined, color[0], scale * 10);
  ctx.translate(0, -10);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(47 * scale, 5 * scale);
  ctx.bezierCurveTo(19 * scale, 30 * scale, 12 * scale, 42 * scale, 10 * scale, 55 * scale);
  ctx.bezierCurveTo(11 * scale, 75 * scale, 27 * scale, 76 * scale, 36 * scale, 72 * scale);
  ctx.bezierCurveTo(52 * scale, 60 * scale, 53 * scale, 46 * scale, 54 * scale, 31 * scale);
  ctx.bezierCurveTo(53 * scale, 14 * scale, 50 * scale, 9 * scale, 48 * scale, 6 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(17 * scale, 70 * scale);
  ctx.bezierCurveTo(18 * scale, 77 * scale, 10 * scale, 83 * scale, 4 * scale, 87 * scale);
  fill_path(ctx, undefined, color[2], 8 * scale);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(17 * scale, 70 * scale);
  ctx.bezierCurveTo(33 * scale, 52 * scale, 39 * scale, 33 * scale, 48 * scale, 7 * scale);
  fill_path(ctx, undefined, color[2], 8 * scale);
  return can;
};

function create_leaf(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 234 * scale;
  can.height = 183 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(76 * scale, 25 * scale);
  ctx.bezierCurveTo(150 * scale, 3 * scale, 181 * scale, 22 * scale, 203 * scale, 41 * scale);
  ctx.bezierCurveTo(225 * scale, 63 * scale, 225 * scale, 105 * scale, 198 * scale, 133 * scale);
  ctx.bezierCurveTo(179 * scale, 157 * scale, 134 * scale, 178 * scale, 81 * scale, 164 * scale);
  ctx.bezierCurveTo(19 * scale, 148 * scale, 6 * scale, 95 * scale, 21 * scale, 66 * scale);
  ctx.bezierCurveTo(34 * scale, 39 * scale, 52 * scale, 33 * scale, 75 * scale, 25 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 4 * scale);
  return can;
};

function create_herb(scale, useless, color, i, a) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  if (i == 0) {
    var w = scale * 270;
    var h = scale * 250;
    can.width = w;
    can.height = h;
    ctx.beginPath();
    ctx.moveTo(140 * scale, 3 * scale);
    ctx.translate(-25 * scale, -20 * scale);
    ctx.bezierCurveTo(218 * scale, 31 * scale, 251 * scale, 61 * scale, 265 * scale, 85 * scale);
    ctx.bezierCurveTo(278 * scale, 108 * scale, 295 * scale, 160 * scale, 285 * scale, 195 * scale);
    ctx.bezierCurveTo(271 * scale, 242 * scale, 213 * scale, 268 * scale, 188 * scale, 266 * scale);
    ctx.bezierCurveTo(139 * scale, 262 * scale, 70 * scale, 244 * scale, 47 * scale, 204 * scale);
    ctx.bezierCurveTo(20 * scale, 158 * scale, 35 * scale, 78 * scale, 59 * scale, 56 * scale);
    ctx.bezierCurveTo(90 * scale, 28 * scale, 124 * scale, 23 * scale, 140 * scale, 23 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else if (i == 1) {
    var w = scale * 430;
    var h = scale * 350;
    can.width = w;
    can.height = h;
    ctx.beginPath();
    ctx.moveTo(180 * scale, 5 * scale);
    ctx.translate(-30 * scale, -60 * scale);
    ctx.bezierCurveTo(283 * scale, 60 * scale, 265 * scale, 163 * scale, 335 * scale, 206 * scale);
    ctx.bezierCurveTo(376 * scale, 231 * scale, 492 * scale, 299 * scale, 434 * scale, 357 * scale);
    ctx.bezierCurveTo(371 * scale, 421 * scale, 289 * scale, 394 * scale, 255 * scale, 386 * scale);
    ctx.bezierCurveTo(218 * scale, 377 * scale, 91 * scale, 359 * scale, 50 * scale, 272 * scale);
    ctx.bezierCurveTo(12 * scale, 192 * scale, 107 * scale, 75 * scale, 178 * scale, 69 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else if (i == 2) {
    var w = scale * 400;
    var h = scale * 300;
    can.width = w;
    can.height = h;
    ctx.beginPath();
    ctx.moveTo(80 * scale, 52 * scale);
    ctx.translate(-40 * scale, -30 * scale);
    ctx.bezierCurveTo(124 * scale, 77 * scale, 241 * scale, 22 * scale, 311 * scale, 65 * scale);
    ctx.bezierCurveTo(352 * scale, 90 * scale, 404 * scale, 176 * scale, 346 * scale, 234 * scale);
    ctx.bezierCurveTo(283 * scale, 298 * scale, 179 * scale, 299 * scale, 145 * scale, 291 * scale);
    ctx.bezierCurveTo(108 * scale, 282 * scale, 100 * scale, 239 * scale, 63 * scale, 205 * scale);
    ctx.bezierCurveTo(37 * scale, 181 * scale, 45 * scale, 131 * scale, 80 * scale, 107 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  }
  return can;
};

function create_flake(scale, r, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = (scale * r) * 2;
  var h = (scale * r) * 2;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  ctx.translate(x, y);
  circle(ctx, 0, 0, r * scale, 0);
  fill_path(ctx, color);
  return can;
};

function create_divingmask(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 373 * scale;
  can.height = 314 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(184.048583984375 * scale, 69.1805419921875 * scale);
  round_rect(ctx, -40 * scale, -28.5 * scale, 80 * scale, 57 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(185.048583984375 * scale, 61.6805419921875 * scale);
  ctx.bezierCurveTo(145.048583984375 * scale, 59.6805419921875 * scale, 138.048583984375 * scale, 41.6805419921875 * scale, 148.048583984375 * scale, 33.6805419921875 * scale);
  ctx.bezierCurveTo(169.048583984375 * scale, 17.6805419921875 * scale, 194.048583984375 * scale, 20.6805419921875 * scale, 210.048583984375 * scale, 27.6805419921875 * scale);
  ctx.bezierCurveTo(234.048583984375 * scale, 40.6805419921875 * scale, 225.048583984375 * scale, 57.6805419921875 * scale, 186.048583984375 * scale, 61.6805419921875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(224.048583984375 * scale, 56.6805419921875 * scale);
  ctx.bezierCurveTo(326.048583984375 * scale, 69.6805419921875 * scale, 363.048583984375 * scale, 148.6805419921875 * scale, 349.048583984375 * scale, 206.6805419921875 * scale);
  ctx.bezierCurveTo(329.048583984375 * scale, 278.6805419921875 * scale, 252.048583984375 * scale, 283.6805419921875 * scale, 206.048583984375 * scale, 275.6805419921875 * scale);
  ctx.bezierCurveTo(206.548583984375 * scale, 266.6805419921875 * scale, 206.548583984375 * scale, 266.6805419921875 * scale, 207.048583984375 * scale, 257.6805419921875 * scale);
  ctx.bezierCurveTo(276.048583984375 * scale, 268.6805419921875 * scale, 308.048583984375 * scale, 239.6805419921875 * scale, 323.048583984375 * scale, 208.6805419921875 * scale);
  ctx.bezierCurveTo(352.048583984375 * scale, 145.6805419921875 * scale, 292.048583984375 * scale, 86.6805419921875 * scale, 223.048583984375 * scale, 74.6805419921875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 6 * scale);
  ctx.save();
  ctx.translate(183.548583984375 * scale, 119.6805419921875 * scale);
  round_rect(ctx, -121.5 * scale, -45 * scale, 243 * scale, 90 * scale, 40 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 6 * scale);
  ctx.save();
  ctx.translate(183.048583984375 * scale, 155.6805419921875 * scale);
  round_rect(ctx, -121 * scale, -52 * scale, 242 * scale, 104 * scale, 40 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 6 * scale);
  ctx.save();
  ctx.translate(183.048583984375 * scale, 205.1805419921875 * scale);
  round_rect(ctx, -121 * scale, -50.5 * scale, 242 * scale, 101 * scale, 40 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 6 * scale);
  ctx.save();
  ctx.translate(185.048583984375 * scale, 204.1805419921875 * scale);
  round_rect(ctx, -100 * scale, -34.5 * scale, 200 * scale, 69 * scale, 40 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 6 * scale);
  circle(ctx, 185.048583984375 * scale, 257.6805419921875 * scale, 27.018512172212592 * scale);
  fill_path(ctx, color[0], color[0], 6 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(224.048583984375 * scale, 56.6805419921875 * scale);
  ctx.bezierCurveTo(326.048583984375 * scale, 69.6805419921875 * scale, 363.048583984375 * scale, 148.6805419921875 * scale, 349.048583984375 * scale, 206.6805419921875 * scale);
  ctx.bezierCurveTo(329.048583984375 * scale, 278.6805419921875 * scale, 252.048583984375 * scale, 283.6805419921875 * scale, 206.048583984375 * scale, 275.6805419921875 * scale);
  ctx.bezierCurveTo(206.548583984375 * scale, 266.6805419921875 * scale, 206.548583984375 * scale, 266.6805419921875 * scale, 207.048583984375 * scale, 257.6805419921875 * scale);
  ctx.bezierCurveTo(276.048583984375 * scale, 268.6805419921875 * scale, 308.048583984375 * scale, 239.6805419921875 * scale, 323.048583984375 * scale, 208.6805419921875 * scale);
  ctx.bezierCurveTo(352.048583984375 * scale, 145.6805419921875 * scale, 292.048583984375 * scale, 86.6805419921875 * scale, 223.048583984375 * scale, 74.6805419921875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.save();
  ctx.translate(184.048583984375 * scale, 69.1805419921875 * scale);
  round_rect(ctx, -40 * scale, -28.5 * scale, 80 * scale, 57 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(185.048583984375 * scale, 61.6805419921875 * scale);
  ctx.bezierCurveTo(145.048583984375 * scale, 59.6805419921875 * scale, 138.048583984375 * scale, 41.6805419921875 * scale, 148.048583984375 * scale, 33.6805419921875 * scale);
  ctx.bezierCurveTo(169.048583984375 * scale, 17.6805419921875 * scale, 194.048583984375 * scale, 20.6805419921875 * scale, 210.048583984375 * scale, 27.6805419921875 * scale);
  ctx.bezierCurveTo(234.048583984375 * scale, 40.6805419921875 * scale, 225.048583984375 * scale, 57.6805419921875 * scale, 186.048583984375 * scale, 61.6805419921875 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 6 * scale);
  ctx.save();
  ctx.translate(183.548583984375 * scale, 119.6805419921875 * scale);
  round_rect(ctx, -121.5 * scale, -45 * scale, 243 * scale, 90 * scale, 40 * scale);
  ctx.restore();
  fill_path(ctx, color[5], color[4], 6 * scale);
  ctx.save();
  ctx.translate(183.048583984375 * scale, 155.6805419921875 * scale);
  round_rect(ctx, -121 * scale, -52 * scale, 242 * scale, 104 * scale, 40 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.save();
  ctx.translate(183.048583984375 * scale, 205.1805419921875 * scale);
  round_rect(ctx, -121 * scale, -50.5 * scale, 242 * scale, 101 * scale, 40 * scale);
  ctx.restore();
  fill_path(ctx, color[6], color[4], 6 * scale);
  ctx.globalCompositeOperation = "destination-out";
  ctx.save();
  ctx.translate(185.048583984375 * scale, 204.1805419921875 * scale);
  round_rect(ctx, -100 * scale, -34.5 * scale, 200 * scale, 69 * scale, 40 * scale);
  ctx.restore();
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.globalCompositeOperation = "source-over";
  ctx.globalAlpha = 0.5;
  ctx.save();
  ctx.translate(185.048583984375 * scale, 204.1805419921875 * scale);
  round_rect(ctx, -100 * scale, -34.5 * scale, 200 * scale, 69 * scale, 40 * scale);
  ctx.restore();
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  circle(ctx, 185.048583984375 * scale, 257.6805419921875 * scale, 27.018512172212592 * scale);
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.restore();
  return can;
};

function create_superdivingsuit(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 220 * scale;
  can.height = 180 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(-90 * scale, -150 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(104 * scale, 237.8000030517578 * scale);
  ctx.bezierCurveTo(110 * scale, 237.8000030517578 * scale, 110 * scale, 237.8000030517578 * scale, 116 * scale, 237.8000030517578 * scale);
  ctx.bezierCurveTo(116 * scale, 241.8000030517578 * scale, 116 * scale, 241.8000030517578 * scale, 116 * scale, 245.8000030517578 * scale);
  ctx.bezierCurveTo(115 * scale, 245.3000030517578 * scale, 115 * scale, 245.3000030517578 * scale, 114 * scale, 244.8000030517578 * scale);
  ctx.bezierCurveTo(109.5 * scale, 244.8000030517578 * scale, 109.5 * scale, 244.8000030517578 * scale, 105 * scale, 244.8000030517578 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 211.20000457763672 * scale);
  ctx.bezierCurveTo(106 * scale, 216.20000457763672 * scale, 101 * scale, 234.20000457763672 * scale, 102 * scale, 241.20000457763672 * scale);
  ctx.bezierCurveTo(102 * scale, 260.2000045776367 * scale, 115 * scale, 269.2000045776367 * scale, 115 * scale, 269.2000045776367 * scale);
  ctx.bezierCurveTo(116 * scale, 265.2000045776367 * scale, 115.5 * scale, 265.2000045776367 * scale, 116 * scale, 261.2000045776367 * scale);
  ctx.bezierCurveTo(112 * scale, 264 * scale, 108 * scale, 254 * scale, 106 * scale, 242 * scale);
  ctx.bezierCurveTo(105 * scale, 232 * scale, 110 * scale, 222 * scale, 115 * scale, 218 * scale);
  ctx.bezierCurveTo(116 * scale, 216.75 * scale, 115.5 * scale, 217.375 * scale, 116 * scale, 216.75 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(120 * scale, 207 * scale);
  ctx.bezierCurveTo(115 * scale, 206 * scale, 114 * scale, 209 * scale, 114 * scale, 211 * scale);
  ctx.bezierCurveTo(114 * scale, 268 * scale, 114 * scale, 241 * scale, 114 * scale, 271 * scale);
  ctx.bezierCurveTo(115 * scale, 276 * scale, 118 * scale, 276 * scale, 120 * scale, 276 * scale);
  ctx.bezierCurveTo(122 * scale, 273 * scale, 120.5 * scale, 274.5 * scale, 121 * scale, 273 * scale);
  ctx.bezierCurveTo(121 * scale, 241 * scale, 121 * scale, 241 * scale, 121 * scale, 209 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(284 * scale, 238 * scale);
  ctx.bezierCurveTo(289.5 * scale, 238 * scale, 289.5 * scale, 238 * scale, 295 * scale, 238 * scale);
  ctx.bezierCurveTo(295 * scale, 241.5 * scale, 295 * scale, 241.5 * scale, 295 * scale, 245 * scale);
  ctx.bezierCurveTo(289.5 * scale, 245 * scale, 289.5 * scale, 245 * scale, 284 * scale, 245 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(283 * scale, 211 * scale);
  ctx.bezierCurveTo(293 * scale, 216 * scale, 297 * scale, 231 * scale, 297 * scale, 241 * scale);
  ctx.bezierCurveTo(298 * scale, 254 * scale, 290 * scale, 265 * scale, 284 * scale, 269 * scale);
  ctx.bezierCurveTo(283 * scale, 266 * scale, 283.5 * scale, 266 * scale, 283 * scale, 263 * scale);
  ctx.bezierCurveTo(290 * scale, 260 * scale, 292 * scale, 251 * scale, 293 * scale, 242 * scale);
  ctx.bezierCurveTo(292 * scale, 223 * scale, 289 * scale, 224 * scale, 284 * scale, 218 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(280 * scale, 206 * scale);
  ctx.bezierCurveTo(284 * scale, 206 * scale, 285 * scale, 208 * scale, 285 * scale, 211 * scale);
  ctx.bezierCurveTo(285 * scale, 241.5 * scale, 285 * scale, 241.5 * scale, 285 * scale, 272 * scale);
  ctx.bezierCurveTo(284 * scale, 275 * scale, 284 * scale, 275 * scale, 280 * scale, 275 * scale);
  ctx.bezierCurveTo(279 * scale, 273.5 * scale, 279 * scale, 273.5 * scale, 278 * scale, 272 * scale);
  ctx.bezierCurveTo(278 * scale, 240.5 * scale, 278 * scale, 240.5 * scale, 278 * scale, 209 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(138 * scale, 298.40000915527344 * scale);
  ctx.bezierCurveTo(141 * scale, 311.40000915527344 * scale, 151 * scale, 314.40000915527344 * scale, 162 * scale, 316.40000915527344 * scale);
  ctx.bezierCurveTo(224 * scale, 316.40000915527344 * scale, 200 * scale, 315.90000915527344 * scale, 238 * scale, 315.40000915527344 * scale);
  ctx.bezierCurveTo(254 * scale, 316.40000915527344 * scale, 261 * scale, 306.40000915527344 * scale, 264 * scale, 298.40000915527344 * scale);
  ctx.bezierCurveTo(255 * scale, 304.40000915527344 * scale, 250 * scale, 306.40000915527344 * scale, 244 * scale, 306.40000915527344 * scale);
  ctx.bezierCurveTo(201 * scale, 306.90000915527344 * scale, 201 * scale, 306.90000915527344 * scale, 158 * scale, 307.40000915527344 * scale);
  ctx.bezierCurveTo(150 * scale, 306.40000915527344 * scale, 148 * scale, 306.40000915527344 * scale, 139 * scale, 300.40000915527344 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(161 * scale, 177.5999984741211 * scale);
  ctx.bezierCurveTo(130 * scale, 175.5999984741211 * scale, 123 * scale, 190.5999984741211 * scale, 122 * scale, 205.5999984741211 * scale);
  ctx.bezierCurveTo(121 * scale, 277.5999984741211 * scale, 122 * scale, 242.5999984741211 * scale, 122 * scale, 279.5999984741211 * scale);
  ctx.bezierCurveTo(128 * scale, 297.5999984741211 * scale, 137 * scale, 299.5999984741211 * scale, 143 * scale, 300.5999984741211 * scale);
  ctx.bezierCurveTo(163 * scale, 301.0999984741211 * scale, 163 * scale, 301.0999984741211 * scale, 183 * scale, 301.5999984741211 * scale);
  ctx.bezierCurveTo(150 * scale, 300.5999984741211 * scale, 135 * scale, 290.5999984741211 * scale, 134 * scale, 267.5999984741211 * scale);
  ctx.bezierCurveTo(133 * scale, 245.5999984741211 * scale, 146 * scale, 235.5999984741211 * scale, 164 * scale, 235.5999984741211 * scale);
  ctx.bezierCurveTo(206 * scale, 236.0999984741211 * scale, 206 * scale, 236.0999984741211 * scale, 248 * scale, 236.5999984741211 * scale);
  ctx.bezierCurveTo(266 * scale, 243.5999984741211 * scale, 268 * scale, 259.5999984741211 * scale, 267 * scale, 266.5999984741211 * scale);
  ctx.bezierCurveTo(266 * scale, 288.5999984741211 * scale, 251 * scale, 294.5999984741211 * scale, 244 * scale, 297.5999984741211 * scale);
  ctx.bezierCurveTo(228.5 * scale, 299.5999984741211 * scale, 228.5 * scale, 299.5999984741211 * scale, 213 * scale, 301.5999984741211 * scale);
  ctx.bezierCurveTo(236 * scale, 301.0999984741211 * scale, 236 * scale, 301.0999984741211 * scale, 259 * scale, 300.5999984741211 * scale);
  ctx.bezierCurveTo(272 * scale, 295.5999984741211 * scale, 277 * scale, 288.5999984741211 * scale, 278 * scale, 271.5999984741211 * scale);
  ctx.bezierCurveTo(277.5 * scale, 236.5999984741211 * scale, 277.5 * scale, 236.5999984741211 * scale, 277 * scale, 201.5999984741211 * scale);
  ctx.bezierCurveTo(276 * scale, 186.5999984741211 * scale, 265 * scale, 178.5999984741211 * scale, 254 * scale, 177.5999984741211 * scale);
  ctx.bezierCurveTo(247.5 * scale, 177.5999984741211 * scale, 247.5 * scale, 177.5999984741211 * scale, 241 * scale, 177.5999984741211 * scale);
  ctx.bezierCurveTo(255 * scale, 202.5999984741211 * scale, 214 * scale, 217.5999984741211 * scale, 201 * scale, 215.5999984741211 * scale);
  ctx.bezierCurveTo(170 * scale, 215.5999984741211 * scale, 152 * scale, 197.5999984741211 * scale, 161 * scale, 178.5999984741211 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(162 * scale, 175.5999984741211 * scale);
  ctx.bezierCurveTo(153 * scale, 176.0999984741211 * scale, 153 * scale, 176.0999984741211 * scale, 144 * scale, 176.5999984741211 * scale);
  ctx.bezierCurveTo(125 * scale, 178.5999984741211 * scale, 121 * scale, 196.5999984741211 * scale, 121 * scale, 207.5999984741211 * scale);
  ctx.bezierCurveTo(121 * scale, 243.20000076293945 * scale, 121 * scale, 243.20000076293945 * scale, 121 * scale, 278.8000030517578 * scale);
  ctx.bezierCurveTo(126 * scale, 298.8000030517578 * scale, 137 * scale, 300.8000030517578 * scale, 146 * scale, 302.8000030517578 * scale);
  ctx.bezierCurveTo(200.5 * scale, 302.8000030517578 * scale, 200.5 * scale, 302.8000030517578 * scale, 255 * scale, 302.8000030517578 * scale);
  ctx.bezierCurveTo(271 * scale, 301.8000030517578 * scale, 279 * scale, 288.8000030517578 * scale, 279 * scale, 273.8000030517578 * scale);
  ctx.bezierCurveTo(279 * scale, 236.8000030517578 * scale, 279 * scale, 236.8000030517578 * scale, 279 * scale, 199.8000030517578 * scale);
  ctx.bezierCurveTo(274 * scale, 178.8000030517578 * scale, 263 * scale, 177.8000030517578 * scale, 255 * scale, 175.8000030517578 * scale);
  ctx.bezierCurveTo(248 * scale, 175.8000030517578 * scale, 248 * scale, 175.8000030517578 * scale, 241 * scale, 175.8000030517578 * scale);
  ctx.bezierCurveTo(240 * scale, 175.8000030517578 * scale, 240 * scale, 175.8000030517578 * scale, 239 * scale, 175.8000030517578 * scale);
  ctx.bezierCurveTo(254 * scale, 200.8000030517578 * scale, 222 * scale, 211.8000030517578 * scale, 202 * scale, 212.8000030517578 * scale);
  ctx.bezierCurveTo(168 * scale, 213.8000030517578 * scale, 151 * scale, 190.8000030517578 * scale, 163 * scale, 176.8000030517578 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(198 * scale, 161.4000015258789 * scale);
  ctx.bezierCurveTo(198 * scale, 186.9000015258789 * scale, 198 * scale, 186.9000015258789 * scale, 198 * scale, 212.4000015258789 * scale);
  ctx.bezierCurveTo(201 * scale, 212.4000015258789 * scale, 201 * scale, 212.4000015258789 * scale, 204 * scale, 212.4000015258789 * scale);
  ctx.bezierCurveTo(204 * scale, 186.9000015258789 * scale, 204 * scale, 186.9000015258789 * scale, 204 * scale, 161.4000015258789 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(161 * scale, 194 * scale);
  ctx.bezierCurveTo(188 * scale, 169 * scale, 231 * scale, 179 * scale, 241 * scale, 194 * scale);
  ctx.bezierCurveTo(239.5 * scale, 196 * scale, 239.5 * scale, 196 * scale, 238 * scale, 198 * scale);
  ctx.bezierCurveTo(221 * scale, 179 * scale, 182 * scale, 182 * scale, 165 * scale, 198 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(157 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(162 * scale, 150.80000019073486 * scale, 241 * scale, 150.80000019073486 * scale, 245 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(242 * scale, 224.80000019073486 * scale, 162 * scale, 228.80000019073486 * scale, 157 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(159 * scale, 188.80000019073486 * scale, 159 * scale, 188.80000019073486 * scale, 161 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(168 * scale, 216.80000019073486 * scale, 231 * scale, 218.80000019073486 * scale, 241 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(236 * scale, 156.80000019073486 * scale, 169 * scale, 152.80000019073486 * scale, 161 * scale, 188.80000019073486 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(156 * scale, 188 * scale);
  ctx.bezierCurveTo(160 * scale, 164 * scale, 183 * scale, 159 * scale, 201 * scale, 158 * scale);
  ctx.bezierCurveTo(232 * scale, 159 * scale, 244 * scale, 174 * scale, 246 * scale, 188 * scale);
  ctx.bezierCurveTo(245 * scale, 212 * scale, 213 * scale, 219 * scale, 201 * scale, 218 * scale);
  ctx.bezierCurveTo(181 * scale, 221 * scale, 158 * scale, 207 * scale, 156 * scale, 190 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(162 * scale, 189 * scale);
  ctx.bezierCurveTo(166 * scale, 170 * scale, 185 * scale, 165 * scale, 201 * scale, 164 * scale);
  ctx.bezierCurveTo(227 * scale, 165 * scale, 240 * scale, 178 * scale, 239 * scale, 188 * scale);
  ctx.bezierCurveTo(239 * scale, 204 * scale, 210 * scale, 210 * scale, 201 * scale, 210 * scale);
  ctx.bezierCurveTo(182 * scale, 211 * scale, 166 * scale, 200 * scale, 162 * scale, 190 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(131 * scale, 262 * scale);
  ctx.bezierCurveTo(136 * scale, 241 * scale, 144 * scale, 236 * scale, 158 * scale, 233 * scale);
  ctx.bezierCurveTo(200.5 * scale, 233 * scale, 229 * scale, 232 * scale, 243 * scale, 233 * scale);
  ctx.bezierCurveTo(259 * scale, 235 * scale, 267 * scale, 248 * scale, 269 * scale, 260 * scale);
  ctx.bezierCurveTo(269 * scale, 266.5 * scale, 269 * scale, 266.5 * scale, 269 * scale, 273 * scale);
  ctx.bezierCurveTo(265 * scale, 290 * scale, 251 * scale, 297 * scale, 242 * scale, 298 * scale);
  ctx.bezierCurveTo(202 * scale, 298 * scale, 202 * scale, 298 * scale, 162 * scale, 298 * scale);
  ctx.bezierCurveTo(148 * scale, 298 * scale, 136 * scale, 289 * scale, 132 * scale, 273 * scale);
  ctx.bezierCurveTo(131.5 * scale, 268 * scale, 131.5 * scale, 268 * scale, 131 * scale, 263 * scale);
  ctx.bezierCurveTo(135 * scale, 263 * scale, 135 * scale, 263 * scale, 139 * scale, 263 * scale);
  ctx.bezierCurveTo(139 * scale, 281 * scale, 151 * scale, 287 * scale, 160 * scale, 290 * scale);
  ctx.bezierCurveTo(200.5 * scale, 290 * scale, 200.5 * scale, 290 * scale, 241 * scale, 290 * scale);
  ctx.bezierCurveTo(252 * scale, 290 * scale, 257 * scale, 281 * scale, 262 * scale, 271 * scale);
  ctx.bezierCurveTo(261.5 * scale, 267 * scale, 261.5 * scale, 267 * scale, 261 * scale, 263 * scale);
  ctx.bezierCurveTo(260 * scale, 249 * scale, 251 * scale, 242 * scale, 241 * scale, 241 * scale);
  ctx.bezierCurveTo(240.5 * scale, 240.5 * scale, 240.5 * scale, 240.5 * scale, 240 * scale, 240 * scale);
  ctx.bezierCurveTo(200 * scale, 240 * scale, 200 * scale, 240 * scale, 160 * scale, 240 * scale);
  ctx.bezierCurveTo(145 * scale, 244 * scale, 142 * scale, 250 * scale, 139 * scale, 264 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130 * scale, 264 * scale);
  ctx.bezierCurveTo(132 * scale, 244 * scale, 144 * scale, 235 * scale, 157 * scale, 232 * scale);
  ctx.bezierCurveTo(245 * scale, 232 * scale, 201 * scale, 232 * scale, 245 * scale, 232 * scale);
  ctx.bezierCurveTo(264 * scale, 235 * scale, 269 * scale, 251 * scale, 270 * scale, 264 * scale);
  ctx.bezierCurveTo(272 * scale, 291 * scale, 248 * scale, 299 * scale, 242 * scale, 299 * scale);
  ctx.bezierCurveTo(200 * scale, 299 * scale, 200 * scale, 299 * scale, 158 * scale, 299 * scale);
  ctx.bezierCurveTo(139 * scale, 298 * scale, 130 * scale, 276 * scale, 130 * scale, 265 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(140 * scale, 265.33333587646484 * scale);
  ctx.bezierCurveTo(141 * scale, 250.33333587646484 * scale, 148 * scale, 244.33333587646484 * scale, 160 * scale, 241.33333587646484 * scale);
  ctx.bezierCurveTo(200 * scale, 241.33333587646484 * scale, 200 * scale, 241.33333587646484 * scale, 240 * scale, 241.33333587646484 * scale);
  ctx.bezierCurveTo(256 * scale, 243.33333587646484 * scale, 260 * scale, 255.33333587646484 * scale, 260 * scale, 265.33333587646484 * scale);
  ctx.bezierCurveTo(261 * scale, 281.33333587646484 * scale, 247 * scale, 289.33333587646484 * scale, 240 * scale, 289.33333587646484 * scale);
  ctx.bezierCurveTo(161 * scale, 289.33333587646484 * scale, 200.5 * scale, 289.33333587646484 * scale, 161 * scale, 289.33333587646484 * scale);
  ctx.bezierCurveTo(149 * scale, 288.33333587646484 * scale, 142 * scale, 278.33333587646484 * scale, 140 * scale, 266.33333587646484 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.globalAlpha = 0.5;
  ctx.scale(1, 1);
  ctx.translate(105 * scale, 155 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(59.27557373046875 * scale, 20.406280517578125 * scale);
  ctx.bezierCurveTo(74.27557373046875 * scale, 5.406280517578125 * scale, 90.27557373046875 * scale, 6.406280517578125 * scale, 99.27557373046875 * scale, 5.406280517578125 * scale);
  ctx.bezierCurveTo(120.27557373046875 * scale, 5.406280517578125 * scale, 126.27557373046875 * scale, 10.406280517578125 * scale, 136.27557373046875 * scale, 20.406280517578125 * scale);
  ctx.bezierCurveTo(157.77557373046875 * scale, 37.906280517578125 * scale, 157.77557373046875 * scale, 37.906280517578125 * scale, 179.27557373046875 * scale, 55.406280517578125 * scale);
  ctx.bezierCurveTo(190.27557373046875 * scale, 63.406280517578125 * scale, 192.27557373046875 * scale, 77.40628051757812 * scale, 189.27557373046875 * scale, 91.40628051757812 * scale);
  ctx.bezierCurveTo(183.27557373046875 * scale, 108.40628051757812 * scale, 176.27557373046875 * scale, 110.40628051757812 * scale, 169.27557373046875 * scale, 118.40628051757812 * scale);
  ctx.bezierCurveTo(152.27557373046875 * scale, 133.40628051757812 * scale, 152.27557373046875 * scale, 133.40628051757812 * scale, 135.27557373046875 * scale, 148.40628051757812 * scale);
  ctx.bezierCurveTo(87.27557373046875 * scale, 143.40628051757812 * scale, 87.27557373046875 * scale, 143.40628051757812 * scale, 39.27557373046875 * scale, 138.40628051757812 * scale);
  ctx.bezierCurveTo(26.77557373046875 * scale, 123.40628051757812 * scale, 26.77557373046875 * scale, 123.40628051757812 * scale, 14.27557373046875 * scale, 108.40628051757812 * scale);
  ctx.bezierCurveTo(2.27557373046875 * scale, 95.40628051757812 * scale, 2.27557373046875 * scale, 92.40628051757812 * scale, 3.27557373046875 * scale, 83.40628051757812 * scale);
  ctx.bezierCurveTo(4.27557373046875 * scale, 63.406280517578125 * scale, 12.27557373046875 * scale, 60.406280517578125 * scale, 24.27557373046875 * scale, 40.406280517578125 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[5], 4 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(-110 * scale, -155 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(104 * scale, 237.8000030517578 * scale);
  ctx.bezierCurveTo(110 * scale, 237.8000030517578 * scale, 110 * scale, 237.8000030517578 * scale, 116 * scale, 237.8000030517578 * scale);
  ctx.bezierCurveTo(116 * scale, 241.8000030517578 * scale, 116 * scale, 241.8000030517578 * scale, 116 * scale, 245.8000030517578 * scale);
  ctx.bezierCurveTo(115 * scale, 245.3000030517578 * scale, 115 * scale, 245.3000030517578 * scale, 114 * scale, 244.8000030517578 * scale);
  ctx.bezierCurveTo(109.5 * scale, 244.8000030517578 * scale, 109.5 * scale, 244.8000030517578 * scale, 105 * scale, 244.8000030517578 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 211.20000457763672 * scale);
  ctx.bezierCurveTo(106 * scale, 216.20000457763672 * scale, 101 * scale, 234.20000457763672 * scale, 102 * scale, 241.20000457763672 * scale);
  ctx.bezierCurveTo(102 * scale, 260.2000045776367 * scale, 115 * scale, 269.2000045776367 * scale, 115 * scale, 269.2000045776367 * scale);
  ctx.bezierCurveTo(116 * scale, 265.2000045776367 * scale, 115.5 * scale, 265.2000045776367 * scale, 116 * scale, 261.2000045776367 * scale);
  ctx.bezierCurveTo(112 * scale, 264 * scale, 108 * scale, 254 * scale, 106 * scale, 242 * scale);
  ctx.bezierCurveTo(105 * scale, 232 * scale, 110 * scale, 222 * scale, 115 * scale, 218 * scale);
  ctx.bezierCurveTo(116 * scale, 216.75 * scale, 115.5 * scale, 217.375 * scale, 116 * scale, 216.75 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(120 * scale, 207 * scale);
  ctx.bezierCurveTo(115 * scale, 206 * scale, 114 * scale, 209 * scale, 114 * scale, 211 * scale);
  ctx.bezierCurveTo(114 * scale, 268 * scale, 114 * scale, 241 * scale, 114 * scale, 271 * scale);
  ctx.bezierCurveTo(115 * scale, 276 * scale, 118 * scale, 276 * scale, 120 * scale, 276 * scale);
  ctx.bezierCurveTo(122 * scale, 273 * scale, 120.5 * scale, 274.5 * scale, 121 * scale, 273 * scale);
  ctx.bezierCurveTo(121 * scale, 241 * scale, 121 * scale, 241 * scale, 121 * scale, 209 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(284 * scale, 238 * scale);
  ctx.bezierCurveTo(289.5 * scale, 238 * scale, 289.5 * scale, 238 * scale, 295 * scale, 238 * scale);
  ctx.bezierCurveTo(295 * scale, 241.5 * scale, 295 * scale, 241.5 * scale, 295 * scale, 245 * scale);
  ctx.bezierCurveTo(289.5 * scale, 245 * scale, 289.5 * scale, 245 * scale, 284 * scale, 245 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(283 * scale, 211 * scale);
  ctx.bezierCurveTo(293 * scale, 216 * scale, 297 * scale, 231 * scale, 297 * scale, 241 * scale);
  ctx.bezierCurveTo(298 * scale, 254 * scale, 290 * scale, 265 * scale, 284 * scale, 269 * scale);
  ctx.bezierCurveTo(283 * scale, 266 * scale, 283.5 * scale, 266 * scale, 283 * scale, 263 * scale);
  ctx.bezierCurveTo(290 * scale, 260 * scale, 292 * scale, 251 * scale, 293 * scale, 242 * scale);
  ctx.bezierCurveTo(292 * scale, 223 * scale, 289 * scale, 224 * scale, 284 * scale, 218 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(280 * scale, 206 * scale);
  ctx.bezierCurveTo(284 * scale, 206 * scale, 285 * scale, 208 * scale, 285 * scale, 211 * scale);
  ctx.bezierCurveTo(285 * scale, 241.5 * scale, 285 * scale, 241.5 * scale, 285 * scale, 272 * scale);
  ctx.bezierCurveTo(284 * scale, 275 * scale, 284 * scale, 275 * scale, 280 * scale, 275 * scale);
  ctx.bezierCurveTo(279 * scale, 273.5 * scale, 279 * scale, 273.5 * scale, 278 * scale, 272 * scale);
  ctx.bezierCurveTo(278 * scale, 240.5 * scale, 278 * scale, 240.5 * scale, 278 * scale, 209 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(138 * scale, 298.40000915527344 * scale);
  ctx.bezierCurveTo(141 * scale, 311.40000915527344 * scale, 151 * scale, 314.40000915527344 * scale, 162 * scale, 316.40000915527344 * scale);
  ctx.bezierCurveTo(224 * scale, 316.40000915527344 * scale, 200 * scale, 315.90000915527344 * scale, 238 * scale, 315.40000915527344 * scale);
  ctx.bezierCurveTo(254 * scale, 316.40000915527344 * scale, 261 * scale, 306.40000915527344 * scale, 264 * scale, 298.40000915527344 * scale);
  ctx.bezierCurveTo(255 * scale, 304.40000915527344 * scale, 250 * scale, 306.40000915527344 * scale, 244 * scale, 306.40000915527344 * scale);
  ctx.bezierCurveTo(201 * scale, 306.90000915527344 * scale, 201 * scale, 306.90000915527344 * scale, 158 * scale, 307.40000915527344 * scale);
  ctx.bezierCurveTo(150 * scale, 306.40000915527344 * scale, 148 * scale, 306.40000915527344 * scale, 139 * scale, 300.40000915527344 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(161 * scale, 177.5999984741211 * scale);
  ctx.bezierCurveTo(130 * scale, 175.5999984741211 * scale, 123 * scale, 190.5999984741211 * scale, 122 * scale, 205.5999984741211 * scale);
  ctx.bezierCurveTo(121 * scale, 277.5999984741211 * scale, 122 * scale, 242.5999984741211 * scale, 122 * scale, 279.5999984741211 * scale);
  ctx.bezierCurveTo(128 * scale, 297.5999984741211 * scale, 137 * scale, 299.5999984741211 * scale, 143 * scale, 300.5999984741211 * scale);
  ctx.bezierCurveTo(163 * scale, 301.0999984741211 * scale, 163 * scale, 301.0999984741211 * scale, 183 * scale, 301.5999984741211 * scale);
  ctx.bezierCurveTo(150 * scale, 300.5999984741211 * scale, 135 * scale, 290.5999984741211 * scale, 134 * scale, 267.5999984741211 * scale);
  ctx.bezierCurveTo(133 * scale, 245.5999984741211 * scale, 146 * scale, 235.5999984741211 * scale, 164 * scale, 235.5999984741211 * scale);
  ctx.bezierCurveTo(206 * scale, 236.0999984741211 * scale, 206 * scale, 236.0999984741211 * scale, 248 * scale, 236.5999984741211 * scale);
  ctx.bezierCurveTo(266 * scale, 243.5999984741211 * scale, 268 * scale, 259.5999984741211 * scale, 267 * scale, 266.5999984741211 * scale);
  ctx.bezierCurveTo(266 * scale, 288.5999984741211 * scale, 251 * scale, 294.5999984741211 * scale, 244 * scale, 297.5999984741211 * scale);
  ctx.bezierCurveTo(228.5 * scale, 299.5999984741211 * scale, 228.5 * scale, 299.5999984741211 * scale, 213 * scale, 301.5999984741211 * scale);
  ctx.bezierCurveTo(236 * scale, 301.0999984741211 * scale, 236 * scale, 301.0999984741211 * scale, 259 * scale, 300.5999984741211 * scale);
  ctx.bezierCurveTo(272 * scale, 295.5999984741211 * scale, 277 * scale, 288.5999984741211 * scale, 278 * scale, 271.5999984741211 * scale);
  ctx.bezierCurveTo(277.5 * scale, 236.5999984741211 * scale, 277.5 * scale, 236.5999984741211 * scale, 277 * scale, 201.5999984741211 * scale);
  ctx.bezierCurveTo(276 * scale, 186.5999984741211 * scale, 265 * scale, 178.5999984741211 * scale, 254 * scale, 177.5999984741211 * scale);
  ctx.bezierCurveTo(247.5 * scale, 177.5999984741211 * scale, 247.5 * scale, 177.5999984741211 * scale, 241 * scale, 177.5999984741211 * scale);
  ctx.bezierCurveTo(255 * scale, 202.5999984741211 * scale, 214 * scale, 217.5999984741211 * scale, 201 * scale, 215.5999984741211 * scale);
  ctx.bezierCurveTo(170 * scale, 215.5999984741211 * scale, 152 * scale, 197.5999984741211 * scale, 161 * scale, 178.5999984741211 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(162 * scale, 175.5999984741211 * scale);
  ctx.bezierCurveTo(153 * scale, 176.0999984741211 * scale, 153 * scale, 176.0999984741211 * scale, 144 * scale, 176.5999984741211 * scale);
  ctx.bezierCurveTo(125 * scale, 178.5999984741211 * scale, 121 * scale, 196.5999984741211 * scale, 121 * scale, 207.5999984741211 * scale);
  ctx.bezierCurveTo(121 * scale, 243.20000076293945 * scale, 121 * scale, 243.20000076293945 * scale, 121 * scale, 278.8000030517578 * scale);
  ctx.bezierCurveTo(126 * scale, 298.8000030517578 * scale, 137 * scale, 300.8000030517578 * scale, 146 * scale, 302.8000030517578 * scale);
  ctx.bezierCurveTo(200.5 * scale, 302.8000030517578 * scale, 200.5 * scale, 302.8000030517578 * scale, 255 * scale, 302.8000030517578 * scale);
  ctx.bezierCurveTo(271 * scale, 301.8000030517578 * scale, 279 * scale, 288.8000030517578 * scale, 279 * scale, 273.8000030517578 * scale);
  ctx.bezierCurveTo(279 * scale, 236.8000030517578 * scale, 279 * scale, 236.8000030517578 * scale, 279 * scale, 199.8000030517578 * scale);
  ctx.bezierCurveTo(274 * scale, 178.8000030517578 * scale, 263 * scale, 177.8000030517578 * scale, 255 * scale, 175.8000030517578 * scale);
  ctx.bezierCurveTo(248 * scale, 175.8000030517578 * scale, 248 * scale, 175.8000030517578 * scale, 241 * scale, 175.8000030517578 * scale);
  ctx.bezierCurveTo(240 * scale, 175.8000030517578 * scale, 240 * scale, 175.8000030517578 * scale, 239 * scale, 175.8000030517578 * scale);
  ctx.bezierCurveTo(254 * scale, 200.8000030517578 * scale, 222 * scale, 211.8000030517578 * scale, 202 * scale, 212.8000030517578 * scale);
  ctx.bezierCurveTo(168 * scale, 213.8000030517578 * scale, 151 * scale, 190.8000030517578 * scale, 163 * scale, 176.8000030517578 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[3], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(198 * scale, 161.4000015258789 * scale);
  ctx.bezierCurveTo(198 * scale, 186.9000015258789 * scale, 198 * scale, 186.9000015258789 * scale, 198 * scale, 212.4000015258789 * scale);
  ctx.bezierCurveTo(201 * scale, 212.4000015258789 * scale, 201 * scale, 212.4000015258789 * scale, 204 * scale, 212.4000015258789 * scale);
  ctx.bezierCurveTo(204 * scale, 186.9000015258789 * scale, 204 * scale, 186.9000015258789 * scale, 204 * scale, 161.4000015258789 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(161 * scale, 194 * scale);
  ctx.bezierCurveTo(188 * scale, 169 * scale, 231 * scale, 179 * scale, 241 * scale, 194 * scale);
  ctx.bezierCurveTo(239.5 * scale, 196 * scale, 239.5 * scale, 196 * scale, 238 * scale, 198 * scale);
  ctx.bezierCurveTo(221 * scale, 179 * scale, 182 * scale, 182 * scale, 165 * scale, 198 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(157 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(162 * scale, 150.80000019073486 * scale, 241 * scale, 150.80000019073486 * scale, 245 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(242 * scale, 224.80000019073486 * scale, 162 * scale, 228.80000019073486 * scale, 157 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(159 * scale, 188.80000019073486 * scale, 159 * scale, 188.80000019073486 * scale, 161 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(168 * scale, 216.80000019073486 * scale, 231 * scale, 218.80000019073486 * scale, 241 * scale, 188.80000019073486 * scale);
  ctx.bezierCurveTo(236 * scale, 156.80000019073486 * scale, 169 * scale, 152.80000019073486 * scale, 161 * scale, 188.80000019073486 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(156 * scale, 188 * scale);
  ctx.bezierCurveTo(160 * scale, 164 * scale, 183 * scale, 159 * scale, 201 * scale, 158 * scale);
  ctx.bezierCurveTo(232 * scale, 159 * scale, 244 * scale, 174 * scale, 246 * scale, 188 * scale);
  ctx.bezierCurveTo(245 * scale, 212 * scale, 213 * scale, 219 * scale, 201 * scale, 218 * scale);
  ctx.bezierCurveTo(181 * scale, 221 * scale, 158 * scale, 207 * scale, 156 * scale, 190 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(162 * scale, 189 * scale);
  ctx.bezierCurveTo(166 * scale, 170 * scale, 185 * scale, 165 * scale, 201 * scale, 164 * scale);
  ctx.bezierCurveTo(227 * scale, 165 * scale, 240 * scale, 178 * scale, 239 * scale, 188 * scale);
  ctx.bezierCurveTo(239 * scale, 204 * scale, 210 * scale, 210 * scale, 201 * scale, 210 * scale);
  ctx.bezierCurveTo(182 * scale, 211 * scale, 166 * scale, 200 * scale, 162 * scale, 190 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(131 * scale, 262 * scale);
  ctx.bezierCurveTo(136 * scale, 241 * scale, 144 * scale, 236 * scale, 158 * scale, 233 * scale);
  ctx.bezierCurveTo(200.5 * scale, 233 * scale, 229 * scale, 232 * scale, 243 * scale, 233 * scale);
  ctx.bezierCurveTo(259 * scale, 235 * scale, 267 * scale, 248 * scale, 269 * scale, 260 * scale);
  ctx.bezierCurveTo(269 * scale, 266.5 * scale, 269 * scale, 266.5 * scale, 269 * scale, 273 * scale);
  ctx.bezierCurveTo(265 * scale, 290 * scale, 251 * scale, 297 * scale, 242 * scale, 298 * scale);
  ctx.bezierCurveTo(202 * scale, 298 * scale, 202 * scale, 298 * scale, 162 * scale, 298 * scale);
  ctx.bezierCurveTo(148 * scale, 298 * scale, 136 * scale, 289 * scale, 132 * scale, 273 * scale);
  ctx.bezierCurveTo(131.5 * scale, 268 * scale, 131.5 * scale, 268 * scale, 131 * scale, 263 * scale);
  ctx.bezierCurveTo(135 * scale, 263 * scale, 135 * scale, 263 * scale, 139 * scale, 263 * scale);
  ctx.bezierCurveTo(139 * scale, 281 * scale, 151 * scale, 287 * scale, 160 * scale, 290 * scale);
  ctx.bezierCurveTo(200.5 * scale, 290 * scale, 200.5 * scale, 290 * scale, 241 * scale, 290 * scale);
  ctx.bezierCurveTo(252 * scale, 290 * scale, 257 * scale, 281 * scale, 262 * scale, 271 * scale);
  ctx.bezierCurveTo(261.5 * scale, 267 * scale, 261.5 * scale, 267 * scale, 261 * scale, 263 * scale);
  ctx.bezierCurveTo(260 * scale, 249 * scale, 251 * scale, 242 * scale, 241 * scale, 241 * scale);
  ctx.bezierCurveTo(240.5 * scale, 240.5 * scale, 240.5 * scale, 240.5 * scale, 240 * scale, 240 * scale);
  ctx.bezierCurveTo(200 * scale, 240 * scale, 200 * scale, 240 * scale, 160 * scale, 240 * scale);
  ctx.bezierCurveTo(145 * scale, 244 * scale, 142 * scale, 250 * scale, 139 * scale, 264 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130 * scale, 264 * scale);
  ctx.bezierCurveTo(132 * scale, 244 * scale, 144 * scale, 235 * scale, 157 * scale, 232 * scale);
  ctx.bezierCurveTo(245 * scale, 232 * scale, 201 * scale, 232 * scale, 245 * scale, 232 * scale);
  ctx.bezierCurveTo(264 * scale, 235 * scale, 269 * scale, 251 * scale, 270 * scale, 264 * scale);
  ctx.bezierCurveTo(272 * scale, 291 * scale, 248 * scale, 299 * scale, 242 * scale, 299 * scale);
  ctx.bezierCurveTo(200 * scale, 299 * scale, 200 * scale, 299 * scale, 158 * scale, 299 * scale);
  ctx.bezierCurveTo(139 * scale, 298 * scale, 130 * scale, 276 * scale, 130 * scale, 265 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 2 * scale);
  return can;
};

function create_windmill_chest(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 243 * scale;
  can.height = 172 * scale;
  circle(ctx, 119.5 * scale, 140.125 * scale, 19 * scale);
  fill_path(ctx, undefined, color[1], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36.5 * scale, 20.125 * scale);
  ctx.bezierCurveTo(119.5 * scale, 20.625 * scale, 119.5 * scale, 20.625 * scale, 202.5 * scale, 21.125 * scale);
  ctx.bezierCurveTo(214.5 * scale, 22.125 * scale, 216.5 * scale, 26.125 * scale, 217.5 * scale, 35.125 * scale);
  ctx.bezierCurveTo(221 * scale, 76.125 * scale, 221 * scale, 76.125 * scale, 224.5 * scale, 117.125 * scale);
  ctx.bezierCurveTo(225.5 * scale, 127.125 * scale, 221.5 * scale, 131.125 * scale, 210.5 * scale, 132.125 * scale);
  ctx.bezierCurveTo(117.5 * scale, 132.125 * scale, 117.5 * scale, 132.125 * scale, 24.5 * scale, 132.125 * scale);
  ctx.bezierCurveTo(14.5 * scale, 131.125 * scale, 13.5 * scale, 126.125 * scale, 16.5 * scale, 111.125 * scale);
  ctx.bezierCurveTo(19.5 * scale, 73.125 * scale, 19.5 * scale, 73.125 * scale, 22.5 * scale, 35.125 * scale);
  ctx.bezierCurveTo(23.5 * scale, 23.125 * scale, 29.5 * scale, 21.125 * scale, 36.5 * scale, 20.125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(15.5 * scale, 138.625 * scale);
  ctx.bezierCurveTo(120 * scale, 138.625 * scale, 120 * scale, 138.625 * scale, 224.5 * scale, 138.625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(13.5 * scale, 131.625 * scale);
  ctx.bezierCurveTo(119.5 * scale, 131.625 * scale, 119.5 * scale, 131.625 * scale, 225.5 * scale, 131.625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[3], 10 * scale);
  circle(ctx, 119.5 * scale, 140.125 * scale, 14.866068747318506 * scale);
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(106.5 * scale, 146.625 * scale);
  ctx.bezierCurveTo(116.5 * scale, 137.625 * scale, 118.5 * scale, 136.625 * scale, 123.5 * scale, 138.625 * scale);
  ctx.bezierCurveTo(131.5 * scale, 145.625 * scale, 133.5 * scale, 148.625 * scale, 127.5 * scale, 152.625 * scale);
  ctx.bezierCurveTo(115.5 * scale, 158.625 * scale, 111.5 * scale, 153.625 * scale, 106.5 * scale, 147.625 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105.5 * scale, 146.625 * scale);
  ctx.bezierCurveTo(116.5 * scale, 159.625 * scale, 124.5 * scale, 156.625 * scale, 132.5 * scale, 146.625 * scale);
  fill_path(ctx, undefined, color[8], 5 * scale);
  ctx.save();
  ctx.translate(75.5 * scale, 80.125 * scale);
  round_rect(ctx, -39 * scale, -40 * scale, 78 * scale, 78 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[9]);
  ctx.save();
  ctx.translate(167 * scale, 80.125 * scale);
  round_rect(ctx, -38.5 * scale, -39 * scale, 78 * scale, 78 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[9]);
  return can;
};

function create_cake(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(96.5 * scale, 277.34375 * scale);
  ctx.bezierCurveTo(197.5 * scale, 259.84375 * scale, 197.5 * scale, 259.84375 * scale, 298.5 * scale, 242.34375 * scale);
  ctx.bezierCurveTo(311.5 * scale, 231.34375 * scale, 307.5 * scale, 168.34375 * scale, 298.5 * scale, 150.34375 * scale);
  ctx.bezierCurveTo(198 * scale, 170.34375 * scale, 198 * scale, 170.34375 * scale, 97.5 * scale, 190.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(98.5 * scale, 214.34375 * scale);
  ctx.bezierCurveTo(199 * scale, 196.34375 * scale, 199 * scale, 196.34375 * scale, 299.5 * scale, 178.34375 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(98.5 * scale, 247.34375 * scale);
  ctx.bezierCurveTo(201.5 * scale, 229.34375 * scale, 201.5 * scale, 229.34375 * scale, 304.5 * scale, 211.34375 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(97.5 * scale, 189.34375 * scale);
  ctx.bezierCurveTo(97 * scale, 199.84375 * scale, 97 * scale, 199.84375 * scale, 96.5 * scale, 210.34375 * scale);
  ctx.bezierCurveTo(110.5 * scale, 204.34375 * scale, 110.5 * scale, 204.34375 * scale, 124.5 * scale, 198.34375 * scale);
  ctx.bezierCurveTo(137.5 * scale, 203.84375 * scale, 137.5 * scale, 203.84375 * scale, 150.5 * scale, 209.34375 * scale);
  ctx.bezierCurveTo(172 * scale, 197.84375 * scale, 172 * scale, 197.84375 * scale, 193.5 * scale, 186.34375 * scale);
  ctx.bezierCurveTo(211.5 * scale, 189.84375 * scale, 211.5 * scale, 189.84375 * scale, 229.5 * scale, 193.34375 * scale);
  ctx.bezierCurveTo(240.5 * scale, 193.34375 * scale, 240.5 * scale, 193.34375 * scale, 251.5 * scale, 193.34375 * scale);
  ctx.bezierCurveTo(261 * scale, 182.84375 * scale, 261 * scale, 182.84375 * scale, 270.5 * scale, 172.34375 * scale);
  ctx.bezierCurveTo(287.5 * scale, 169.34375 * scale, 287.5 * scale, 169.34375 * scale, 304.5 * scale, 166.34375 * scale);
  ctx.bezierCurveTo(304.5 * scale, 156.34375 * scale, 300.5 * scale, 145.34375 * scale, 298.5 * scale, 147.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(300.5 * scale, 147.34375 * scale);
  ctx.bezierCurveTo(293.5 * scale, 121.34375 * scale, 278.5 * scale, 106.34375 * scale, 256.5 * scale, 101.34375 * scale);
  ctx.bezierCurveTo(176.5 * scale, 145.34375 * scale, 176.5 * scale, 145.34375 * scale, 96.5 * scale, 189.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 12 * scale);
  circle(ctx, 252.5 * scale, 129.34375 * scale, 18.027756377319946 * scale);
  fill_path(ctx, color[7]);
  circle(ctx, 248.5 * scale, 121.34375 * scale, 8.246211251235321 * scale);
  fill_path(ctx, color[8]);
  return can;
};

function create_fishfood(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(10 * scale, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100.5 * scale, 126.34375 * scale);
  ctx.bezierCurveTo(151.5 * scale, 104.34375 * scale, 279.5 * scale, 188.34375 * scale, 297.5 * scale, 292.34375 * scale);
  ctx.bezierCurveTo(222.5 * scale, 307.34375 * scale, 106.5 * scale, 196.34375 * scale, 100.5 * scale, 127.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(106.5 * scale, 131.34375 * scale);
  ctx.bezierCurveTo(140.5 * scale, 142.34375 * scale, 225.5 * scale, 184.34375 * scale, 290.5 * scale, 287.34375 * scale);
  ctx.bezierCurveTo(270.5 * scale, 188.34375 * scale, 152.5 * scale, 118.34375 * scale, 107.5 * scale, 131.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(157.5 * scale, 137.34375 * scale);
  ctx.bezierCurveTo(161.5 * scale, 138.34375 * scale, 164.5 * scale, 140.34375 * scale, 168.5 * scale, 142.34375 * scale);
  ctx.bezierCurveTo(165.5 * scale, 156.34375 * scale, 141.5 * scale, 176.34375 * scale, 126.5 * scale, 179.34375 * scale);
  ctx.bezierCurveTo(123.5 * scale, 173.34375 * scale, 120.5 * scale, 169.34375 * scale, 120.5 * scale, 169.34375 * scale);
  ctx.bezierCurveTo(141.5 * scale, 161.34375 * scale, 156.5 * scale, 145.34375 * scale, 155.5 * scale, 136.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(196.5 * scale, 151.34375 * scale);
  ctx.bezierCurveTo(211.5 * scale, 158.34375 * scale, 224.5 * scale, 171.34375 * scale, 229.5 * scale, 176.34375 * scale);
  ctx.bezierCurveTo(246.5 * scale, 163.34375 * scale, 259.5 * scale, 166.34375 * scale, 272.5 * scale, 168.34375 * scale);
  ctx.bezierCurveTo(254.5 * scale, 146.34375 * scale, 214.5 * scale, 145.34375 * scale, 198.5 * scale, 151.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(154.5 * scale, 222.34375 * scale);
  ctx.bezierCurveTo(164.5 * scale, 234.34375 * scale, 173.5 * scale, 242.34375 * scale, 178.5 * scale, 245.34375 * scale);
  ctx.bezierCurveTo(174.5 * scale, 265.34375 * scale, 180.5 * scale, 274.34375 * scale, 186.5 * scale, 283.34375 * scale);
  ctx.bezierCurveTo(165.5 * scale, 277.34375 * scale, 151.5 * scale, 245.34375 * scale, 155.5 * scale, 224.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(279.5 * scale, 294.34375 * scale);
  ctx.bezierCurveTo(286.5 * scale, 285.84375 * scale, 286.5 * scale, 285.84375 * scale, 293.5 * scale, 277.34375 * scale);
  ctx.bezierCurveTo(315.5 * scale, 280.34375 * scale, 315.5 * scale, 280.34375 * scale, 337.5 * scale, 283.34375 * scale);
  ctx.bezierCurveTo(340.5 * scale, 311.34375 * scale, 317.5 * scale, 326.34375 * scale, 307.5 * scale, 331.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(-10 * scale, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100.5 * scale, 126.34375 * scale);
  ctx.bezierCurveTo(151.5 * scale, 104.34375 * scale, 279.5 * scale, 188.34375 * scale, 297.5 * scale, 292.34375 * scale);
  ctx.bezierCurveTo(222.5 * scale, 307.34375 * scale, 106.5 * scale, 196.34375 * scale, 100.5 * scale, 127.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(106.5 * scale, 131.34375 * scale);
  ctx.bezierCurveTo(140.5 * scale, 142.34375 * scale, 225.5 * scale, 184.34375 * scale, 290.5 * scale, 287.34375 * scale);
  ctx.bezierCurveTo(270.5 * scale, 188.34375 * scale, 152.5 * scale, 118.34375 * scale, 107.5 * scale, 131.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(157.5 * scale, 137.34375 * scale);
  ctx.bezierCurveTo(161.5 * scale, 138.34375 * scale, 164.5 * scale, 140.34375 * scale, 168.5 * scale, 142.34375 * scale);
  ctx.bezierCurveTo(165.5 * scale, 156.34375 * scale, 141.5 * scale, 176.34375 * scale, 126.5 * scale, 179.34375 * scale);
  ctx.bezierCurveTo(123.5 * scale, 173.34375 * scale, 120.5 * scale, 169.34375 * scale, 120.5 * scale, 169.34375 * scale);
  ctx.bezierCurveTo(141.5 * scale, 161.34375 * scale, 156.5 * scale, 145.34375 * scale, 155.5 * scale, 136.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[4]);
  circle(ctx, 125.5 * scale, 140.34375 * scale, 11.180339887498949 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 122.5 * scale, 135.34375 * scale, 5.0990195135927845 * scale);
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(196.5 * scale, 151.34375 * scale);
  ctx.bezierCurveTo(211.5 * scale, 158.34375 * scale, 224.5 * scale, 171.34375 * scale, 229.5 * scale, 176.34375 * scale);
  ctx.bezierCurveTo(246.5 * scale, 163.34375 * scale, 259.5 * scale, 166.34375 * scale, 272.5 * scale, 168.34375 * scale);
  ctx.bezierCurveTo(254.5 * scale, 146.34375 * scale, 214.5 * scale, 145.34375 * scale, 198.5 * scale, 151.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(154.5 * scale, 222.34375 * scale);
  ctx.bezierCurveTo(164.5 * scale, 234.34375 * scale, 173.5 * scale, 242.34375 * scale, 178.5 * scale, 245.34375 * scale);
  ctx.bezierCurveTo(174.5 * scale, 265.34375 * scale, 180.5 * scale, 274.34375 * scale, 186.5 * scale, 283.34375 * scale);
  ctx.bezierCurveTo(165.5 * scale, 277.34375 * scale, 151.5 * scale, 245.34375 * scale, 155.5 * scale, 224.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(279.5 * scale, 294.34375 * scale);
  ctx.bezierCurveTo(286.5 * scale, 285.84375 * scale, 286.5 * scale, 285.84375 * scale, 293.5 * scale, 277.34375 * scale);
  ctx.bezierCurveTo(315.5 * scale, 280.34375 * scale, 315.5 * scale, 280.34375 * scale, 337.5 * scale, 283.34375 * scale);
  ctx.bezierCurveTo(340.5 * scale, 311.34375 * scale, 317.5 * scale, 326.34375 * scale, 307.5 * scale, 331.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(296.5 * scale, 287.34375 * scale);
  ctx.bezierCurveTo(311.5 * scale, 291.34375 * scale, 311.5 * scale, 291.34375 * scale, 326.5 * scale, 295.34375 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[9], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(294.5 * scale, 289.34375 * scale);
  ctx.bezierCurveTo(308.5 * scale, 297.34375 * scale, 308.5 * scale, 297.34375 * scale, 322.5 * scale, 305.34375 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[9], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(294.5 * scale, 291.34375 * scale);
  ctx.bezierCurveTo(304 * scale, 303.34375 * scale, 304 * scale, 303.34375 * scale, 313.5 * scale, 315.34375 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[9], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(226.5 * scale, 161.34375 * scale);
  ctx.bezierCurveTo(230.5 * scale, 160.34375 * scale, 236.5 * scale, 158.34375 * scale, 238.5 * scale, 161.34375 * scale);
  ctx.bezierCurveTo(238.5 * scale, 157.34375 * scale, 228.5 * scale, 159.34375 * scale, 227.5 * scale, 161.34375 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[9], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(167.5 * scale, 248.34375 * scale);
  ctx.bezierCurveTo(165.5 * scale, 251.34375 * scale, 168.5 * scale, 256.34375 * scale, 168.5 * scale, 253.34375 * scale);
  ctx.bezierCurveTo(166.5 * scale, 252.34375 * scale, 168.5 * scale, 246.34375 * scale, 166.5 * scale, 247.34375 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[9], 3 * scale);
  return can;
};

function create_fishfood_cooked(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 309 * scale;
  can.height = 287 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(10 * scale, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(34.5 * scale, 38.53125 * scale);
  ctx.bezierCurveTo(91.5 * scale, 30.53125 * scale, 138.5 * scale, 68.53125 * scale, 169.5 * scale, 93.53125 * scale);
  ctx.bezierCurveTo(208.5 * scale, 128.53125 * scale, 226.5 * scale, 157.53125 * scale, 233.5 * scale, 209.53125 * scale);
  ctx.bezierCurveTo(195.5 * scale, 218.53125 * scale, 138.5 * scale, 191.53125 * scale, 105.5 * scale, 157.53125 * scale);
  ctx.bezierCurveTo(54.5 * scale, 112.53125 * scale, 41.5 * scale, 80.53125 * scale, 33.5 * scale, 38.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(143.5 * scale, 74.53125 * scale);
  ctx.bezierCurveTo(164.5 * scale, 73.53125 * scale, 159 * scale, 74.53125 * scale, 174.5 * scale, 74.53125 * scale);
  ctx.bezierCurveTo(186 * scale, 86.53125 * scale, 186 * scale, 86.53125 * scale, 197.5 * scale, 98.53125 * scale);
  ctx.bezierCurveTo(186 * scale, 97.03125 * scale, 186 * scale, 97.03125 * scale, 174.5 * scale, 95.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87.5 * scale, 142.53125 * scale);
  ctx.bezierCurveTo(92 * scale, 160.03125 * scale, 92 * scale, 160.03125 * scale, 96.5 * scale, 177.53125 * scale);
  ctx.bezierCurveTo(108 * scale, 181.53125 * scale, 108 * scale, 181.53125 * scale, 119.5 * scale, 185.53125 * scale);
  ctx.bezierCurveTo(116.5 * scale, 175.53125 * scale, 116.5 * scale, 175.53125 * scale, 113.5 * scale, 165.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(236.5 * scale, 189.53125 * scale);
  ctx.bezierCurveTo(274.5 * scale, 197.53125 * scale, 255.5 * scale, 194.03125 * scale, 274.5 * scale, 198.53125 * scale);
  ctx.bezierCurveTo(272.5 * scale, 236.53125 * scale, 261.5 * scale, 237.53125 * scale, 242.5 * scale, 248.53125 * scale);
  ctx.bezierCurveTo(230.5 * scale, 231.03125 * scale, 230.5 * scale, 231.03125 * scale, 218.5 * scale, 213.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(-10 * scale, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(34.5 * scale, 38.53125 * scale);
  ctx.bezierCurveTo(91.5 * scale, 30.53125 * scale, 138.5 * scale, 68.53125 * scale, 169.5 * scale, 93.53125 * scale);
  ctx.bezierCurveTo(208.5 * scale, 128.53125 * scale, 226.5 * scale, 157.53125 * scale, 233.5 * scale, 209.53125 * scale);
  ctx.bezierCurveTo(195.5 * scale, 218.53125 * scale, 138.5 * scale, 191.53125 * scale, 105.5 * scale, 157.53125 * scale);
  ctx.bezierCurveTo(54.5 * scale, 112.53125 * scale, 41.5 * scale, 80.53125 * scale, 33.5 * scale, 38.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(143.5 * scale, 74.53125 * scale);
  ctx.bezierCurveTo(164.5 * scale, 73.53125 * scale, 159 * scale, 74.53125 * scale, 174.5 * scale, 74.53125 * scale);
  ctx.bezierCurveTo(186 * scale, 86.53125 * scale, 186 * scale, 86.53125 * scale, 197.5 * scale, 98.53125 * scale);
  ctx.bezierCurveTo(186 * scale, 97.03125 * scale, 186 * scale, 97.03125 * scale, 174.5 * scale, 95.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87.5 * scale, 142.53125 * scale);
  ctx.bezierCurveTo(92 * scale, 160.03125 * scale, 92 * scale, 160.03125 * scale, 96.5 * scale, 177.53125 * scale);
  ctx.bezierCurveTo(108 * scale, 181.53125 * scale, 108 * scale, 181.53125 * scale, 119.5 * scale, 185.53125 * scale);
  ctx.bezierCurveTo(116.5 * scale, 175.53125 * scale, 116.5 * scale, 175.53125 * scale, 113.5 * scale, 165.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(236.5 * scale, 189.53125 * scale);
  ctx.bezierCurveTo(274.5 * scale, 197.53125 * scale, 255.5 * scale, 194.03125 * scale, 274.5 * scale, 198.53125 * scale);
  ctx.bezierCurveTo(272.5 * scale, 236.53125 * scale, 261.5 * scale, 237.53125 * scale, 242.5 * scale, 248.53125 * scale);
  ctx.bezierCurveTo(230.5 * scale, 231.03125 * scale, 230.5 * scale, 231.03125 * scale, 218.5 * scale, 213.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(109.5 * scale, 51.53125 * scale);
  ctx.bezierCurveTo(107.5 * scale, 92.53125 * scale, 91.5 * scale, 95.53125 * scale, 59.5 * scale, 101.53125 * scale);
  fill_path(ctx, color[1], color[2], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72.5 * scale, 51.53125 * scale);
  ctx.bezierCurveTo(71 * scale, 64.53125 * scale, 69.5 * scale, 76.53125 * scale, 69.5 * scale, 77.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84.5 * scale, 63.53125 * scale);
  ctx.bezierCurveTo(70.5 * scale, 65.03125 * scale, 70.5 * scale, 65.03125 * scale, 56.5 * scale, 66.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125.5 * scale, 84.53125 * scale);
  ctx.bezierCurveTo(125.5 * scale, 110.03125 * scale, 125.5 * scale, 110.03125 * scale, 125.5 * scale, 135.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(149.5 * scale, 108.53125 * scale);
  ctx.bezierCurveTo(150 * scale, 137.03125 * scale, 150 * scale, 137.03125 * scale, 150.5 * scale, 165.53125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 7 * scale);
  return can;
};

function create_wall(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 130;
  var h = scale * 142;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  ctx.translate(x, y + (7 * scale));
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  circle(ctx, 0, 0, 60 * scale);
  fill_path(ctx, color[0]);
  ctx.translate(0, -7 * scale);
  ctx.globalAlpha = 1;
  circle(ctx, 0, 0, 60 * scale, 0);
  fill_path(ctx, color[1], color[2], 4 * scale);
  circle(ctx, 0, 0, 40 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 0, 0, 25 * scale);
  fill_path(ctx, color[4], color[5], 8 * scale);
  return can;
};

function create_delay_wall(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 130;
  var h = scale * 142;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  circle(ctx, x, y, 40 * scale, 0);
  fill_path(ctx, undefined, color[0], 7 * scale);
  circle(ctx, x, y, 30 * scale, 0);
  fill_path(ctx, undefined, color[0], 7 * scale);
  circle(ctx, x, y, 20 * scale, 0);
  fill_path(ctx, color[0]);
  return can;
};

function create_wall_diamond(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 130 * scale;
  can.height = 142 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(65 * scale, 80 * scale);
  ctx.rotate(0.2);
  round_regular_polygon(ctx, 9, 60 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(65 * scale, 71 * scale);
  ctx.rotate(0.2);
  round_regular_polygon(ctx, 9, 60 * scale, 10 * scale);
  fill_path(ctx, color[1], color[2], 4);
  ctx.rotate(-0.32);
  round_regular_polygon(ctx, 9, 38 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4);
  ctx.rotate(0.68);
  round_regular_polygon(ctx, 9, 20 * scale, 8 * scale);
  fill_path(ctx, color[5], color[6], 6);
  ctx.restore();
  return can;
};

function create_palm(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 372 * scale;
  can.height = 375 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(15 * scale, 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(313.0000305175781 * scale, 76.58523559570312 * scale);
  ctx.bezierCurveTo(308.0000305175781 * scale, 130.58523559570312 * scale, 279.0000305175781 * scale, 158.58523559570312 * scale, 254.00003051757812 * scale, 175.58523559570312 * scale);
  ctx.bezierCurveTo(287.0000305175781 * scale, 182.58523559570312 * scale, 274.0000305175781 * scale, 181.08523559570312 * scale, 294.0000305175781 * scale, 186.58523559570312 * scale);
  ctx.bezierCurveTo(293.5000305175781 * scale, 196.08523559570312 * scale, 293.5000305175781 * scale, 196.08523559570312 * scale, 293.0000305175781 * scale, 205.58523559570312 * scale);
  ctx.bezierCurveTo(304.0000305175781 * scale, 201.08523559570312 * scale, 304.0000305175781 * scale, 201.08523559570312 * scale, 315.0000305175781 * scale, 196.58523559570312 * scale);
  ctx.bezierCurveTo(350.0000305175781 * scale, 219.58523559570312 * scale, 343.0000305175781 * scale, 221.58523559570312 * scale, 351.0000305175781 * scale, 230.58523559570312 * scale);
  ctx.bezierCurveTo(296.0000305175781 * scale, 260.5852355957031 * scale, 264.0000305175781 * scale, 256.5852355957031 * scale, 220.00003051757812 * scale, 236.58523559570312 * scale);
  ctx.bezierCurveTo(233.00003051757812 * scale, 266.5852355957031 * scale, 232.00003051757812 * scale, 279.5852355957031 * scale, 231.00003051757812 * scale, 295.5852355957031 * scale);
  ctx.bezierCurveTo(222.00003051757812 * scale, 297.5852355957031 * scale, 222.00003051757812 * scale, 297.5852355957031 * scale, 213.00003051757812 * scale, 299.5852355957031 * scale);
  ctx.bezierCurveTo(219.50003051757812 * scale, 308.0852355957031 * scale, 219.50003051757812 * scale, 308.0852355957031 * scale, 226.00003051757812 * scale, 316.5852355957031 * scale);
  ctx.bezierCurveTo(223.00003051757812 * scale, 344.5852355957031 * scale, 216.00003051757812 * scale, 350.5852355957031 * scale, 209.00003051757812 * scale, 363.5852355957031 * scale);
  ctx.bezierCurveTo(154.00003051757812 * scale, 318.5852355957031 * scale, 156.00003051757812 * scale, 268.5852355957031 * scale, 160.00003051757812 * scale, 238.58523559570312 * scale);
  ctx.bezierCurveTo(135.00003051757812 * scale, 268.5852355957031 * scale, 125.00003051757812 * scale, 267.5852355957031 * scale, 112.00003051757812 * scale, 272.5852355957031 * scale);
  ctx.bezierCurveTo(104.50003051757812 * scale, 266.5852355957031 * scale, 104.50003051757812 * scale, 266.5852355957031 * scale, 97.00003051757812 * scale, 260.5852355957031 * scale);
  ctx.bezierCurveTo(93.00003051757812 * scale, 271.0852355957031 * scale, 93.00003051757812 * scale, 271.0852355957031 * scale, 89.00003051757812 * scale, 281.5852355957031 * scale);
  ctx.bezierCurveTo(66.00003051757812 * scale, 288.5852355957031 * scale, 59.000030517578125 * scale, 288.5852355957031 * scale, 39.000030517578125 * scale, 285.5852355957031 * scale);
  ctx.bezierCurveTo(56.000030517578125 * scale, 216.58523559570312 * scale, 91.00003051757812 * scale, 204.58523559570312 * scale, 129.00003051757812 * scale, 189.58523559570312 * scale);
  ctx.bezierCurveTo(90.00003051757812 * scale, 176.58523559570312 * scale, 89.00003051757812 * scale, 173.58523559570312 * scale, 79.00003051757812 * scale, 166.58523559570312 * scale);
  ctx.bezierCurveTo(82.00003051757812 * scale, 155.08523559570312 * scale, 82.00003051757812 * scale, 155.08523559570312 * scale, 85.00003051757812 * scale, 143.58523559570312 * scale);
  ctx.bezierCurveTo(75.50003051757812 * scale, 147.58523559570312 * scale, 75.50003051757812 * scale, 147.58523559570312 * scale, 66.00003051757812 * scale, 151.58523559570312 * scale);
  ctx.bezierCurveTo(44.000030517578125 * scale, 133.58523559570312 * scale, 41.000030517578125 * scale, 124.58523559570312 * scale, 34.000030517578125 * scale, 102.58523559570312 * scale);
  ctx.bezierCurveTo(100.00003051757812 * scale, 81.58523559570312 * scale, 134.00003051757812 * scale, 118.58523559570312 * scale, 150.00003051757812 * scale, 128.58523559570312 * scale);
  ctx.bezierCurveTo(144.00003051757812 * scale, 102.58523559570312 * scale, 147.00003051757812 * scale, 90.58523559570312 * scale, 150.00003051757812 * scale, 80.58523559570312 * scale);
  ctx.bezierCurveTo(159.50003051757812 * scale, 79.08523559570312 * scale, 159.50003051757812 * scale, 79.08523559570312 * scale, 169.00003051757812 * scale, 77.58523559570312 * scale);
  ctx.bezierCurveTo(163.00003051757812 * scale, 72.58523559570312 * scale, 163.00003051757812 * scale, 72.58523559570312 * scale, 157.00003051757812 * scale, 67.58523559570312 * scale);
  ctx.bezierCurveTo(162.00003051757812 * scale, 42.585235595703125 * scale, 169.00003051757812 * scale, 29.585235595703125 * scale, 182.00003051757812 * scale, 14.585235595703125 * scale);
  ctx.bezierCurveTo(219.00003051757812 * scale, 48.585235595703125 * scale, 222.00003051757812 * scale, 92.58523559570312 * scale, 218.00003051757812 * scale, 112.58523559570312 * scale);
  ctx.bezierCurveTo(239.00003051757812 * scale, 95.58523559570312 * scale, 242.00003051757812 * scale, 97.58523559570312 * scale, 249.00003051757812 * scale, 94.58523559570312 * scale);
  ctx.bezierCurveTo(255.00003051757812 * scale, 103.08523559570312 * scale, 255.00003051757812 * scale, 103.08523559570312 * scale, 261.0000305175781 * scale, 111.58523559570312 * scale);
  ctx.bezierCurveTo(261.5000305175781 * scale, 99.58523559570312 * scale, 261.5000305175781 * scale, 99.58523559570312 * scale, 262.0000305175781 * scale, 87.58523559570312 * scale);
  ctx.bezierCurveTo(282.0000305175781 * scale, 77.58523559570312 * scale, 301.0000305175781 * scale, 74.58523559570312 * scale, 314.0000305175781 * scale, 76.58523559570312 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-15 * scale, -15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(313.0000305175781 * scale, 76.58523559570312 * scale);
  ctx.bezierCurveTo(308.0000305175781 * scale, 130.58523559570312 * scale, 279.0000305175781 * scale, 158.58523559570312 * scale, 254.00003051757812 * scale, 175.58523559570312 * scale);
  ctx.bezierCurveTo(287.0000305175781 * scale, 182.58523559570312 * scale, 274.0000305175781 * scale, 181.08523559570312 * scale, 294.0000305175781 * scale, 186.58523559570312 * scale);
  ctx.bezierCurveTo(293.5000305175781 * scale, 196.08523559570312 * scale, 293.5000305175781 * scale, 196.08523559570312 * scale, 293.0000305175781 * scale, 205.58523559570312 * scale);
  ctx.bezierCurveTo(304.0000305175781 * scale, 201.08523559570312 * scale, 304.0000305175781 * scale, 201.08523559570312 * scale, 315.0000305175781 * scale, 196.58523559570312 * scale);
  ctx.bezierCurveTo(350.0000305175781 * scale, 219.58523559570312 * scale, 343.0000305175781 * scale, 221.58523559570312 * scale, 351.0000305175781 * scale, 230.58523559570312 * scale);
  ctx.bezierCurveTo(296.0000305175781 * scale, 260.5852355957031 * scale, 264.0000305175781 * scale, 256.5852355957031 * scale, 220.00003051757812 * scale, 236.58523559570312 * scale);
  ctx.bezierCurveTo(233.00003051757812 * scale, 266.5852355957031 * scale, 232.00003051757812 * scale, 279.5852355957031 * scale, 231.00003051757812 * scale, 295.5852355957031 * scale);
  ctx.bezierCurveTo(222.00003051757812 * scale, 297.5852355957031 * scale, 222.00003051757812 * scale, 297.5852355957031 * scale, 213.00003051757812 * scale, 299.5852355957031 * scale);
  ctx.bezierCurveTo(219.50003051757812 * scale, 308.0852355957031 * scale, 219.50003051757812 * scale, 308.0852355957031 * scale, 226.00003051757812 * scale, 316.5852355957031 * scale);
  ctx.bezierCurveTo(223.00003051757812 * scale, 344.5852355957031 * scale, 216.00003051757812 * scale, 350.5852355957031 * scale, 209.00003051757812 * scale, 363.5852355957031 * scale);
  ctx.bezierCurveTo(154.00003051757812 * scale, 318.5852355957031 * scale, 156.00003051757812 * scale, 268.5852355957031 * scale, 160.00003051757812 * scale, 238.58523559570312 * scale);
  ctx.bezierCurveTo(135.00003051757812 * scale, 268.5852355957031 * scale, 125.00003051757812 * scale, 267.5852355957031 * scale, 112.00003051757812 * scale, 272.5852355957031 * scale);
  ctx.bezierCurveTo(104.50003051757812 * scale, 266.5852355957031 * scale, 104.50003051757812 * scale, 266.5852355957031 * scale, 97.00003051757812 * scale, 260.5852355957031 * scale);
  ctx.bezierCurveTo(93.00003051757812 * scale, 271.0852355957031 * scale, 93.00003051757812 * scale, 271.0852355957031 * scale, 89.00003051757812 * scale, 281.5852355957031 * scale);
  ctx.bezierCurveTo(66.00003051757812 * scale, 288.5852355957031 * scale, 59.000030517578125 * scale, 288.5852355957031 * scale, 39.000030517578125 * scale, 285.5852355957031 * scale);
  ctx.bezierCurveTo(56.000030517578125 * scale, 216.58523559570312 * scale, 91.00003051757812 * scale, 204.58523559570312 * scale, 129.00003051757812 * scale, 189.58523559570312 * scale);
  ctx.bezierCurveTo(90.00003051757812 * scale, 176.58523559570312 * scale, 89.00003051757812 * scale, 173.58523559570312 * scale, 79.00003051757812 * scale, 166.58523559570312 * scale);
  ctx.bezierCurveTo(82.00003051757812 * scale, 155.08523559570312 * scale, 82.00003051757812 * scale, 155.08523559570312 * scale, 85.00003051757812 * scale, 143.58523559570312 * scale);
  ctx.bezierCurveTo(75.50003051757812 * scale, 147.58523559570312 * scale, 75.50003051757812 * scale, 147.58523559570312 * scale, 66.00003051757812 * scale, 151.58523559570312 * scale);
  ctx.bezierCurveTo(44.000030517578125 * scale, 133.58523559570312 * scale, 41.000030517578125 * scale, 124.58523559570312 * scale, 34.000030517578125 * scale, 102.58523559570312 * scale);
  ctx.bezierCurveTo(100.00003051757812 * scale, 81.58523559570312 * scale, 134.00003051757812 * scale, 118.58523559570312 * scale, 150.00003051757812 * scale, 128.58523559570312 * scale);
  ctx.bezierCurveTo(144.00003051757812 * scale, 102.58523559570312 * scale, 147.00003051757812 * scale, 90.58523559570312 * scale, 150.00003051757812 * scale, 80.58523559570312 * scale);
  ctx.bezierCurveTo(159.50003051757812 * scale, 79.08523559570312 * scale, 159.50003051757812 * scale, 79.08523559570312 * scale, 169.00003051757812 * scale, 77.58523559570312 * scale);
  ctx.bezierCurveTo(163.00003051757812 * scale, 72.58523559570312 * scale, 163.00003051757812 * scale, 72.58523559570312 * scale, 157.00003051757812 * scale, 67.58523559570312 * scale);
  ctx.bezierCurveTo(162.00003051757812 * scale, 42.585235595703125 * scale, 169.00003051757812 * scale, 29.585235595703125 * scale, 182.00003051757812 * scale, 14.585235595703125 * scale);
  ctx.bezierCurveTo(219.00003051757812 * scale, 48.585235595703125 * scale, 222.00003051757812 * scale, 92.58523559570312 * scale, 218.00003051757812 * scale, 112.58523559570312 * scale);
  ctx.bezierCurveTo(239.00003051757812 * scale, 95.58523559570312 * scale, 242.00003051757812 * scale, 97.58523559570312 * scale, 249.00003051757812 * scale, 94.58523559570312 * scale);
  ctx.bezierCurveTo(255.00003051757812 * scale, 103.08523559570312 * scale, 255.00003051757812 * scale, 103.08523559570312 * scale, 261.0000305175781 * scale, 111.58523559570312 * scale);
  ctx.bezierCurveTo(261.5000305175781 * scale, 99.58523559570312 * scale, 261.5000305175781 * scale, 99.58523559570312 * scale, 262.0000305175781 * scale, 87.58523559570312 * scale);
  ctx.bezierCurveTo(282.0000305175781 * scale, 77.58523559570312 * scale, 301.0000305175781 * scale, 74.58523559570312 * scale, 314.0000305175781 * scale, 76.58523559570312 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(186.00003051757812 * scale, 192.94886779785156 * scale);
  ctx.bezierCurveTo(185.00003051757812 * scale, 66.94886779785156 * scale, 184.50003051757812 * scale, 104.94886779785156 * scale, 183.00003051757812 * scale, 16.948867797851562 * scale);
  ctx.bezierCurveTo(216.00003051757812 * scale, 47.94886779785156 * scale, 219.00003051757812 * scale, 80.94886779785156 * scale, 218.00003051757812 * scale, 113.94886779785156 * scale);
  ctx.bezierCurveTo(209.00003051757812 * scale, 165.94886779785156 * scale, 200.00003051757812 * scale, 176.94886779785156 * scale, 189.00003051757812 * scale, 192.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(190.00003051757812 * scale, 191.94886779785156 * scale);
  ctx.bezierCurveTo(207.00003051757812 * scale, 348.94886779785156 * scale, 205.00003051757812 * scale, 323.94886779785156 * scale, 209.00003051757812 * scale, 358.94886779785156 * scale);
  ctx.bezierCurveTo(171.00003051757812 * scale, 334.94886779785156 * scale, 167.00003051757812 * scale, 302.94886779785156 * scale, 161.00003051757812 * scale, 268.94886779785156 * scale);
  ctx.bezierCurveTo(160.00003051757812 * scale, 218.94886779785156 * scale, 181.00003051757812 * scale, 191.94886779785156 * scale, 189.00003051757812 * scale, 186.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(194.00003051757812 * scale, 195.94886779785156 * scale);
  ctx.bezierCurveTo(116.00003051757812 * scale, 150.94886779785156 * scale, 116.00003051757812 * scale, 150.94886779785156 * scale, 38.000030517578125 * scale, 105.94886779785156 * scale);
  ctx.bezierCurveTo(67.00003051757812 * scale, 90.94886779785156 * scale, 96.00003051757812 * scale, 99.94886779785156 * scale, 123.00003051757812 * scale, 111.94886779785156 * scale);
  ctx.bezierCurveTo(183.00003051757812 * scale, 152.94886779785156 * scale, 179.00003051757812 * scale, 180.94886779785156 * scale, 193.00003051757812 * scale, 194.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(189.00003051757812 * scale, 190.94886779785156 * scale);
  ctx.bezierCurveTo(250.00003051757812 * scale, 133.94886779785156 * scale, 311.0000305175781 * scale, 78.94886779785156 * scale, 311.0000305175781 * scale, 76.94886779785156 * scale);
  ctx.bezierCurveTo(306.0000305175781 * scale, 127.94886779785156 * scale, 283.0000305175781 * scale, 148.94886779785156 * scale, 261.0000305175781 * scale, 166.94886779785156 * scale);
  ctx.bezierCurveTo(220.00003051757812 * scale, 197.94886779785156 * scale, 191.00003051757812 * scale, 194.94886779785156 * scale, 189.00003051757812 * scale, 195.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(189.00003051757812 * scale, 194.94886779785156 * scale);
  ctx.bezierCurveTo(268.5000305175781 * scale, 211.94886779785156 * scale, 268.5000305175781 * scale, 211.94886779785156 * scale, 348.0000305175781 * scale, 228.94886779785156 * scale);
  ctx.bezierCurveTo(316.0000305175781 * scale, 247.94886779785156 * scale, 298.0000305175781 * scale, 256.94886779785156 * scale, 250.00003051757812 * scale, 246.94886779785156 * scale);
  ctx.bezierCurveTo(197.00003051757812 * scale, 229.94886779785156 * scale, 189.00003051757812 * scale, 202.94886779785156 * scale, 188.00003051757812 * scale, 199.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(192.00003051757812 * scale, 191.94886779785156 * scale);
  ctx.bezierCurveTo(116.50003051757812 * scale, 238.44886779785156 * scale, 116.50003051757812 * scale, 238.44886779785156 * scale, 41.000030517578125 * scale, 284.94886779785156 * scale);
  ctx.bezierCurveTo(49.000030517578125 * scale, 252.94886779785156 * scale, 56.000030517578125 * scale, 242.94886779785156 * scale, 80.00003051757812 * scale, 215.94886779785156 * scale);
  ctx.bezierCurveTo(125.00003051757812 * scale, 181.94886779785156 * scale, 174.00003051757812 * scale, 183.94886779785156 * scale, 192.00003051757812 * scale, 191.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(313.0000305175781 * scale, 76.58523559570312 * scale);
  ctx.bezierCurveTo(308.0000305175781 * scale, 130.58523559570312 * scale, 279.0000305175781 * scale, 158.58523559570312 * scale, 254.00003051757812 * scale, 175.58523559570312 * scale);
  ctx.bezierCurveTo(287.0000305175781 * scale, 182.58523559570312 * scale, 274.0000305175781 * scale, 181.08523559570312 * scale, 294.0000305175781 * scale, 186.58523559570312 * scale);
  ctx.bezierCurveTo(293.5000305175781 * scale, 196.08523559570312 * scale, 293.5000305175781 * scale, 196.08523559570312 * scale, 293.0000305175781 * scale, 205.58523559570312 * scale);
  ctx.bezierCurveTo(304.0000305175781 * scale, 201.08523559570312 * scale, 304.0000305175781 * scale, 201.08523559570312 * scale, 315.0000305175781 * scale, 196.58523559570312 * scale);
  ctx.bezierCurveTo(350.0000305175781 * scale, 219.58523559570312 * scale, 343.0000305175781 * scale, 221.58523559570312 * scale, 351.0000305175781 * scale, 230.58523559570312 * scale);
  ctx.bezierCurveTo(296.0000305175781 * scale, 260.5852355957031 * scale, 264.0000305175781 * scale, 256.5852355957031 * scale, 220.00003051757812 * scale, 236.58523559570312 * scale);
  ctx.bezierCurveTo(233.00003051757812 * scale, 266.5852355957031 * scale, 232.00003051757812 * scale, 279.5852355957031 * scale, 231.00003051757812 * scale, 295.5852355957031 * scale);
  ctx.bezierCurveTo(222.00003051757812 * scale, 297.5852355957031 * scale, 222.00003051757812 * scale, 297.5852355957031 * scale, 213.00003051757812 * scale, 299.5852355957031 * scale);
  ctx.bezierCurveTo(219.50003051757812 * scale, 308.0852355957031 * scale, 219.50003051757812 * scale, 308.0852355957031 * scale, 226.00003051757812 * scale, 316.5852355957031 * scale);
  ctx.bezierCurveTo(223.00003051757812 * scale, 344.5852355957031 * scale, 216.00003051757812 * scale, 350.5852355957031 * scale, 209.00003051757812 * scale, 363.5852355957031 * scale);
  ctx.bezierCurveTo(154.00003051757812 * scale, 318.5852355957031 * scale, 156.00003051757812 * scale, 268.5852355957031 * scale, 160.00003051757812 * scale, 238.58523559570312 * scale);
  ctx.bezierCurveTo(135.00003051757812 * scale, 268.5852355957031 * scale, 125.00003051757812 * scale, 267.5852355957031 * scale, 112.00003051757812 * scale, 272.5852355957031 * scale);
  ctx.bezierCurveTo(104.50003051757812 * scale, 266.5852355957031 * scale, 104.50003051757812 * scale, 266.5852355957031 * scale, 97.00003051757812 * scale, 260.5852355957031 * scale);
  ctx.bezierCurveTo(93.00003051757812 * scale, 271.0852355957031 * scale, 93.00003051757812 * scale, 271.0852355957031 * scale, 89.00003051757812 * scale, 281.5852355957031 * scale);
  ctx.bezierCurveTo(66.00003051757812 * scale, 288.5852355957031 * scale, 59.000030517578125 * scale, 288.5852355957031 * scale, 39.000030517578125 * scale, 285.5852355957031 * scale);
  ctx.bezierCurveTo(56.000030517578125 * scale, 216.58523559570312 * scale, 91.00003051757812 * scale, 204.58523559570312 * scale, 129.00003051757812 * scale, 189.58523559570312 * scale);
  ctx.bezierCurveTo(90.00003051757812 * scale, 176.58523559570312 * scale, 89.00003051757812 * scale, 173.58523559570312 * scale, 79.00003051757812 * scale, 166.58523559570312 * scale);
  ctx.bezierCurveTo(82.00003051757812 * scale, 155.08523559570312 * scale, 82.00003051757812 * scale, 155.08523559570312 * scale, 85.00003051757812 * scale, 143.58523559570312 * scale);
  ctx.bezierCurveTo(75.50003051757812 * scale, 147.58523559570312 * scale, 75.50003051757812 * scale, 147.58523559570312 * scale, 66.00003051757812 * scale, 151.58523559570312 * scale);
  ctx.bezierCurveTo(44.000030517578125 * scale, 133.58523559570312 * scale, 41.000030517578125 * scale, 124.58523559570312 * scale, 34.000030517578125 * scale, 102.58523559570312 * scale);
  ctx.bezierCurveTo(100.00003051757812 * scale, 81.58523559570312 * scale, 134.00003051757812 * scale, 118.58523559570312 * scale, 150.00003051757812 * scale, 128.58523559570312 * scale);
  ctx.bezierCurveTo(144.00003051757812 * scale, 102.58523559570312 * scale, 147.00003051757812 * scale, 90.58523559570312 * scale, 150.00003051757812 * scale, 80.58523559570312 * scale);
  ctx.bezierCurveTo(159.50003051757812 * scale, 79.08523559570312 * scale, 159.50003051757812 * scale, 79.08523559570312 * scale, 169.00003051757812 * scale, 77.58523559570312 * scale);
  ctx.bezierCurveTo(163.00003051757812 * scale, 72.58523559570312 * scale, 163.00003051757812 * scale, 72.58523559570312 * scale, 157.00003051757812 * scale, 67.58523559570312 * scale);
  ctx.bezierCurveTo(162.00003051757812 * scale, 42.585235595703125 * scale, 169.00003051757812 * scale, 29.585235595703125 * scale, 182.00003051757812 * scale, 14.585235595703125 * scale);
  ctx.bezierCurveTo(219.00003051757812 * scale, 48.585235595703125 * scale, 222.00003051757812 * scale, 92.58523559570312 * scale, 218.00003051757812 * scale, 112.58523559570312 * scale);
  ctx.bezierCurveTo(239.00003051757812 * scale, 95.58523559570312 * scale, 242.00003051757812 * scale, 97.58523559570312 * scale, 249.00003051757812 * scale, 94.58523559570312 * scale);
  ctx.bezierCurveTo(255.00003051757812 * scale, 103.08523559570312 * scale, 255.00003051757812 * scale, 103.08523559570312 * scale, 261.0000305175781 * scale, 111.58523559570312 * scale);
  ctx.bezierCurveTo(261.5000305175781 * scale, 99.58523559570312 * scale, 261.5000305175781 * scale, 99.58523559570312 * scale, 262.0000305175781 * scale, 87.58523559570312 * scale);
  ctx.bezierCurveTo(282.0000305175781 * scale, 77.58523559570312 * scale, 301.0000305175781 * scale, 74.58523559570312 * scale, 314.0000305175781 * scale, 76.58523559570312 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 4 * scale);
  return can;
};

function create_special_fur(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 248 * scale;
  can.height = 128 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(137 * scale, 7 * scale);
  ctx.bezierCurveTo(169 * scale, 14 * scale, 212 * scale, 9 * scale, 241 * scale, 5 * scale);
  ctx.bezierCurveTo(211 * scale, 63 * scale, 158 * scale, 92 * scale, 103 * scale, 109 * scale);
  ctx.bezierCurveTo(73 * scale, 126 * scale, 54 * scale, 124 * scale, 6 * scale, 99 * scale);
  ctx.bezierCurveTo(82 * scale, 63 * scale, 113 * scale, 35 * scale, 137 * scale, 8 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 14 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(73 * scale, 124 * scale);
  ctx.bezierCurveTo(111 * scale, 126 * scale, 162 * scale, 97 * scale, 203 * scale, 61 * scale);
  ctx.bezierCurveTo(156 * scale, 98 * scale, 131 * scale, 106 * scale, 105 * scale, 109 * scale);
  ctx.bezierCurveTo(99 * scale, 121 * scale, 87 * scale, 124 * scale, 72 * scale, 124 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 1 * scale);
  return can;
};

function create_wall_stone(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 130 * scale;
  can.height = 148 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(65 * scale, 85 * scale);
  ctx.rotate(1.4);
  round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(65 * scale, 74 * scale);
  ctx.rotate(1.4);
  round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
  fill_path(ctx, color[1], color[2], 4);
  ctx.rotate(0.64);
  round_regular_polygon(ctx, 7, 40 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4);
  ctx.rotate(0.12);
  round_regular_polygon(ctx, 7, 23 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[5]);
  return can;
};

function create_wall_gold(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = scale * 125;
  can.height = scale * 139;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(63 * scale, 79 * scale);
  ctx.rotate(1);
  round_regular_polygon(ctx, 8, 60 * scale, 10 * scale);
  fill_path(ctx, color[0]);
  ctx.restore();
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(63 * scale, 69 * scale);
  ctx.rotate(1);
  round_regular_polygon(ctx, 8, 60 * scale, 10 * scale);
  fill_path(ctx, color[1], color[2], 4);
  ctx.rotate(0.56);
  round_regular_polygon(ctx, 8, 40 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4);
  ctx.rotate(0.28);
  round_regular_polygon(ctx, 8, 28 * scale, 8 * scale);
  fill_path(ctx, color[5]);
  ctx.restore();
  return can;
};

function create_door_wood(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 90 * scale;
  can.height = 101 * scale;
  ctx.translate(0 * scale, 5 * scale);
  if (i === 0) {
    ctx.globalAlpha = draw_shadow ? 0.5 : 1;
    circle(ctx, 44 * scale, 55 * scale, 41 * scale);
    fill_path(ctx, color[0]);
  }
  ctx.globalAlpha = 1;
  circle(ctx, 44 * scale, 45 * scale, 41 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  circle(ctx, 44 * scale, 45 * scale, 31 * scale);
  fill_path(ctx, color[3]);
  ctx.save();
  ctx.translate(45 * scale, 45 * scale);
  round_rect(ctx, -9 * scale, -25.5 * scale, 18 * scale, 51 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.save();
  ctx.translate(45 * scale, 45 * scale);
  round_rect(ctx, -26 * scale, -9 * scale, 52 * scale, 18 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[4], 2 * scale);
  circle(ctx, 45 * scale, 29 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 45 * scale, 61 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 28 * scale, 45 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 62 * scale, 45 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  return can;
};

function create_door_stone(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 90 * scale;
  can.height = 98 * scale;
  ctx.translate(0, 4 * scale);
  if (i === 0) {
    ctx.globalAlpha = draw_shadow ? 0.5 : 1;
    ctx.save();
    ctx.translate(44 * scale, 50 * scale);
    ctx.rotate(1.4);
    round_regular_polygon(ctx, 7, 41 * scale, 10 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
  }
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(44 * scale, 44 * scale);
  ctx.rotate(1.4);
  round_regular_polygon(ctx, 7, 41 * scale, 10 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  round_regular_polygon(ctx, 7, 35 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4 * scale);
  round_regular_polygon(ctx, 7, 23 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[5]);
  ctx.save();
  ctx.translate(45 * scale, 45 * scale);
  ctx.rotate(0);
  round_rect(ctx, -9 * scale, -25.5 * scale, 18 * scale, 51 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.save();
  ctx.translate(45 * scale, 45 * scale);
  ctx.rotate(0);
  round_rect(ctx, -26 * scale, -9 * scale, 52 * scale, 18 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[4], 2 * scale);
  circle(ctx, 45 * scale, 29 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 45 * scale, 61 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 28 * scale, 45 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 62 * scale, 45 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  return can;
};

function create_door_gold(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 90 * scale;
  can.height = 98 * scale;
  ctx.translate(0, 4 * scale);
  if (i === 0) {
    ctx.globalAlpha = draw_shadow ? 0.5 : 1;
    ctx.save();
    ctx.translate(44 * scale, 50 * scale);
    ctx.rotate(1);
    round_regular_polygon(ctx, 8, 41 * scale, 10 * scale);
    fill_path(ctx, color[0]);
    ctx.restore();
  }
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(44 * scale, 44 * scale);
  ctx.rotate(1);
  round_regular_polygon(ctx, 8, 41 * scale, 10 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.rotate(0.56);
  round_regular_polygon(ctx, 8, 33 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.rotate(0.28);
  round_regular_polygon(ctx, 8, 24 * scale, 8 * scale);
  fill_path(ctx, color[5]);
  ctx.restore();
  ctx.save();
  ctx.translate(45 * scale, 45 * scale);
  ctx.rotate(0);
  round_rect(ctx, -9 * scale, -25.5 * scale, 18 * scale, 51 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.save();
  ctx.translate(45 * scale, 45 * scale);
  ctx.rotate(0);
  round_rect(ctx, -26 * scale, -9 * scale, 52 * scale, 18 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[4], 2 * scale);
  circle(ctx, 45 * scale, 29 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 45 * scale, 61 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 28 * scale, 45 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 62 * scale, 45 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  return can;
};

function create_furnace_on(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 300 * scale;
  can.height = 300 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(150 * scale, 160 * scale);
  ctx.rotate(6.28);
  round_regular_polygon(ctx, 6, 146 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(150 * scale, 150 * scale);
  ctx.rotate(6.28);
  round_regular_polygon(ctx, 6, 146 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.save();
  ctx.translate(150 * scale, 150 * scale);
  ctx.rotate(0);
  round_regular_polygon(ctx, 6, 105 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.save();
  ctx.translate(150 * scale, 150 * scale);
  ctx.rotate(0);
  round_regular_polygon(ctx, 6, 66 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[2], 8 * scale);
  ctx.save();
  ctx.translate(150 * scale, 150 * scale);
  ctx.rotate(0);
  round_regular_polygon(ctx, 6, 31 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[5], color[6], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(150 * scale, 207 * scale);
  ctx.bezierCurveTo(150 * scale, 151 * scale, 150 * scale, 101 * scale, 150 * scale, 94 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(118 * scale, 100 * scale);
  ctx.bezierCurveTo(118 * scale, 205 * scale, 118 * scale, 207 * scale, 118 * scale, 200 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(183 * scale, 100 * scale);
  ctx.bezierCurveTo(183 * scale, 203 * scale, 183 * scale, 203 * scale, 183 * scale, 200 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 8 * scale);
  return can;
};

function create_furnace_off(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 300 * scale;
  can.height = 300 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(150 * scale, 160 * scale);
  ctx.rotate(6.28);
  round_regular_polygon(ctx, 6, 146 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(150 * scale, 150 * scale);
  ctx.rotate(6.28);
  round_regular_polygon(ctx, 6, 146 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.save();
  ctx.translate(150 * scale, 150 * scale);
  ctx.rotate(0);
  round_regular_polygon(ctx, 6, 105 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.save();
  ctx.translate(150 * scale, 150 * scale);
  ctx.rotate(0);
  round_regular_polygon(ctx, 6, 66 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[2], 8 * scale);
  ctx.save();
  ctx.translate(131 * scale, 116 * scale);
  round_regular_polygon(ctx, 7, 17 * scale, 8 * scale);
  ctx.restore();
  fill_path(ctx, color[6]);
  ctx.save();
  ctx.translate(163 * scale, 168 * scale);
  round_regular_polygon(ctx, 7, 25 * scale, 8 * scale);
  ctx.restore();
  fill_path(ctx, color[6]);
  ctx.save();
  ctx.translate(117 * scale, 151 * scale);
  round_regular_polygon(ctx, 7, 11 * scale, 8 * scale);
  ctx.restore();
  fill_path(ctx, color[6]);
  ctx.save();
  ctx.translate(167 * scale, 122 * scale);
  round_regular_polygon(ctx, 7, 12 * scale, 8 * scale);
  ctx.restore();
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(150 * scale, 207 * scale);
  ctx.bezierCurveTo(150 * scale, 151 * scale, 150 * scale, 101 * scale, 150 * scale, 94 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(118 * scale, 100 * scale);
  ctx.bezierCurveTo(118 * scale, 205 * scale, 118 * scale, 207 * scale, 118 * scale, 200 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(183 * scale, 100 * scale);
  ctx.bezierCurveTo(183 * scale, 203 * scale, 183 * scale, 203 * scale, 183 * scale, 200 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 8 * scale);
  return can;
};

function create_furnace_slot(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 118 * scale;
  can.height = 129 * scale;
  ctx.save();
  ctx.translate(90 * scale, 90 * scale);
  round_rect(ctx, -86.5 * scale, -86 * scale, 110 * scale, 110 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 4);
  return can;
};

function create_door_diamond(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 90 * scale;
  can.height = 98 * scale;
  ctx.translate(0, 4 * scale);
  if (i === 0) {
    ctx.globalAlpha = draw_shadow ? 0.5 : 1;
    ctx.save();
    ctx.translate(44 * scale, 50 * scale);
    ctx.rotate(0.2);
    round_regular_polygon(ctx, 9, 41 * scale, 10 * scale);
    ctx.restore();
    fill_path(ctx, color[0]);
  }
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(44 * scale, 44 * scale);
  ctx.rotate(0.2);
  round_regular_polygon(ctx, 9, 41 * scale, 10 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.rotate(-0.32);
  round_regular_polygon(ctx, 9, 32 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.rotate(0.68);
  round_regular_polygon(ctx, 9, 23 * scale, 8 * scale);
  fill_path(ctx, color[5], color[6], 6 * scale);
  ctx.restore();
  ctx.save();
  ctx.translate(45 * scale, 45 * scale);
  ctx.rotate(0);
  round_rect(ctx, -9 * scale, -25.5 * scale, 18 * scale, 51 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[4], 2 * scale);
  ctx.save();
  ctx.translate(45 * scale, 45 * scale);
  ctx.rotate(0);
  round_rect(ctx, -26 * scale, -9 * scale, 52 * scale, 18 * scale, 30 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[4], 2 * scale);
  circle(ctx, 45 * scale, 29 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 45 * scale, 61 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 28 * scale, 45 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 62 * scale, 45 * scale, 7 * scale);
  fill_path(ctx, color[5]);
  return can;
};

function create_coat(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 135 * scale;
  can.height = 120 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(3.5 * scale, 55.25 * scale);
  ctx.bezierCurveTo(3.5 * scale, 114.25 * scale, 2.5 * scale, 109.25 * scale, 3.5 * scale, 112.25 * scale);
  ctx.bezierCurveTo(5.5 * scale, 119.25 * scale, 8.5 * scale, 119.25 * scale, 11.5 * scale, 119.25 * scale);
  ctx.bezierCurveTo(15.5 * scale, 114.25 * scale, 13.5 * scale, 95.25 * scale, 14.5 * scale, 82.25 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(6.5 * scale, 43.25 * scale);
  ctx.bezierCurveTo(3.5 * scale, 27.25 * scale, 7.5 * scale, 20.25 * scale, 25.5 * scale, 11.25 * scale);
  ctx.bezierCurveTo(45.5 * scale, -0.75 * scale, 73.5 * scale, 1.25 * scale, 107.5 * scale, 10.25 * scale);
  ctx.bezierCurveTo(131.5 * scale, 21.25 * scale, 125.5 * scale, 34.25 * scale, 125.5 * scale, 36.25 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(120.5 * scale, 62.25 * scale);
  ctx.bezierCurveTo(121.5 * scale, 95.25 * scale, 120.5 * scale, 80.25 * scale, 120.5 * scale, 100.25 * scale);
  ctx.bezierCurveTo(118.5 * scale, 119.25 * scale, 123.5 * scale, 118.25 * scale, 129.5 * scale, 113.25 * scale);
  ctx.bezierCurveTo(133.5 * scale, 107.25 * scale, 130.5 * scale, 97.25 * scale, 130.5 * scale, 87.25 * scale);
  ctx.bezierCurveTo(129.5 * scale, 56.25 * scale, 130 * scale, 70.75 * scale, 129.5 * scale, 54.25 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(17.5 * scale, 27 * scale);
  ctx.bezierCurveTo(48.5 * scale, 5 * scale, 93.5 * scale, 14 * scale, 118.5 * scale, 26 * scale);
  ctx.bezierCurveTo(132.5 * scale, 35 * scale, 133.5 * scale, 52 * scale, 132.5 * scale, 68 * scale);
  ctx.bezierCurveTo(125.5 * scale, 87 * scale, 116.5 * scale, 84 * scale, 96.5 * scale, 75 * scale);
  ctx.bezierCurveTo(60.5 * scale, 66 * scale, 52.5 * scale, 74 * scale, 37.5 * scale, 78 * scale);
  ctx.bezierCurveTo(2.5 * scale, 86 * scale, 3.5 * scale, 78 * scale, 1.5 * scale, 61 * scale);
  ctx.bezierCurveTo(1.5 * scale, 37 * scale, 9.5 * scale, 32 * scale, 15.5 * scale, 28 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 7 * scale);
  return can;
};

function create_crab_crown(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 501 * scale;
  can.height = 309 * scale;
  ctx.translate(0, 6 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(126 * scale, 184 * scale);
  ctx.bezierCurveTo(169 * scale, 196 * scale, 194 * scale, 198 * scale, 227 * scale, 198 * scale);
  ctx.bezierCurveTo(235 * scale, 222 * scale, 236 * scale, 223 * scale, 241 * scale, 226 * scale);
  ctx.bezierCurveTo(245 * scale, 228 * scale, 257 * scale, 228 * scale, 263 * scale, 226 * scale);
  ctx.bezierCurveTo(267 * scale, 225 * scale, 270 * scale, 211 * scale, 275 * scale, 198 * scale);
  ctx.bezierCurveTo(332 * scale, 194 * scale, 347 * scale, 192 * scale, 372 * scale, 188 * scale);
  ctx.bezierCurveTo(366 * scale, 174.5 * scale, 366 * scale, 174.5 * scale, 360 * scale, 161 * scale);
  ctx.bezierCurveTo(253.5 * scale, 162 * scale, 253.5 * scale, 162 * scale, 147 * scale, 163 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100 * scale, 116 * scale);
  ctx.bezierCurveTo(90 * scale, 101 * scale, 96 * scale, 89 * scale, 106 * scale, 83 * scale);
  ctx.bezierCurveTo(86 * scale, 79 * scale, 86 * scale, 52 * scale, 93 * scale, 38 * scale);
  ctx.bezierCurveTo(99 * scale, 51 * scale, 107 * scale, 57 * scale, 122 * scale, 63 * scale);
  ctx.bezierCurveTo(130 * scale, 53 * scale, 141 * scale, 46 * scale, 161 * scale, 46 * scale);
  ctx.bezierCurveTo(157 * scale, 31 * scale, 158 * scale, 20 * scale, 169 * scale, 6 * scale);
  ctx.bezierCurveTo(171 * scale, 24 * scale, 186 * scale, 33 * scale, 198 * scale, 45 * scale);
  ctx.bezierCurveTo(252 * scale, 45 * scale, 252 * scale, 45 * scale, 306 * scale, 45 * scale);
  ctx.bezierCurveTo(323 * scale, 33 * scale, 332 * scale, 21 * scale, 335 * scale, 7 * scale);
  ctx.bezierCurveTo(349 * scale, 21 * scale, 347 * scale, 36 * scale, 345 * scale, 46 * scale);
  ctx.bezierCurveTo(364 * scale, 46 * scale, 369 * scale, 48 * scale, 377 * scale, 63 * scale);
  ctx.bezierCurveTo(398 * scale, 58 * scale, 403 * scale, 49 * scale, 409 * scale, 40 * scale);
  ctx.bezierCurveTo(419 * scale, 57 * scale, 411 * scale, 79 * scale, 398 * scale, 85 * scale);
  ctx.bezierCurveTo(405 * scale, 100 * scale, 405 * scale, 106 * scale, 401 * scale, 118 * scale);
  ctx.bezierCurveTo(332.5 * scale, 128.5 * scale, 332.5 * scale, 128.5 * scale, 264 * scale, 139 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(122 * scale, 191 * scale);
  ctx.bezierCurveTo(123 * scale, 237 * scale, 135 * scale, 245 * scale, 153 * scale, 259 * scale);
  ctx.bezierCurveTo(167 * scale, 269 * scale, 158 * scale, 281 * scale, 118 * scale, 276 * scale);
  ctx.bezierCurveTo(104 * scale, 273 * scale, 98 * scale, 268 * scale, 93 * scale, 242 * scale);
  ctx.bezierCurveTo(89 * scale, 220 * scale, 92 * scale, 201 * scale, 102 * scale, 179 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(403 * scale, 182 * scale);
  ctx.bezierCurveTo(414 * scale, 215 * scale, 412 * scale, 232 * scale, 403 * scale, 260 * scale);
  ctx.bezierCurveTo(395 * scale, 274 * scale, 375 * scale, 272 * scale, 356 * scale, 270 * scale);
  ctx.bezierCurveTo(345 * scale, 268 * scale, 339 * scale, 262 * scale, 354 * scale, 252 * scale);
  ctx.bezierCurveTo(370 * scale, 242 * scale, 380 * scale, 225 * scale, 384 * scale, 184 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(155 * scale, 157 * scale);
  ctx.bezierCurveTo(146 * scale, 189 * scale, 137 * scale, 198 * scale, 114 * scale, 219 * scale);
  ctx.bezierCurveTo(104 * scale, 212 * scale, 98 * scale, 203 * scale, 89 * scale, 189 * scale);
  ctx.bezierCurveTo(82 * scale, 178 * scale, 91 * scale, 164 * scale, 93 * scale, 136 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(347 * scale, 162 * scale);
  ctx.bezierCurveTo(357 * scale, 195 * scale, 376 * scale, 209 * scale, 387 * scale, 217 * scale);
  ctx.bezierCurveTo(409 * scale, 201 * scale, 420 * scale, 181 * scale, 416 * scale, 166 * scale);
  ctx.bezierCurveTo(410 * scale, 150 * scale, 412 * scale, 149 * scale, 408 * scale, 130 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(86 * scale, 134 * scale);
  ctx.bezierCurveTo(79 * scale, 102 * scale, 92 * scale, 84 * scale, 108 * scale, 92 * scale);
  ctx.bezierCurveTo(149 * scale, 108 * scale, 184 * scale, 111 * scale, 242 * scale, 111 * scale);
  ctx.bezierCurveTo(294 * scale, 108 * scale, 341 * scale, 105 * scale, 386 * scale, 98 * scale);
  ctx.bezierCurveTo(412 * scale, 91 * scale, 417 * scale, 86 * scale, 415 * scale, 133 * scale);
  ctx.bezierCurveTo(413 * scale, 160 * scale, 413 * scale, 160 * scale, 368 * scale, 174 * scale);
  ctx.bezierCurveTo(308 * scale, 184 * scale, 291 * scale, 185 * scale, 270 * scale, 186 * scale);
  ctx.bezierCurveTo(264 * scale, 206 * scale, 262 * scale, 215 * scale, 253 * scale, 215 * scale);
  ctx.bezierCurveTo(239 * scale, 217 * scale, 239 * scale, 211 * scale, 231 * scale, 186 * scale);
  ctx.bezierCurveTo(178 * scale, 184 * scale, 156 * scale, 179 * scale, 112 * scale, 162 * scale);
  ctx.bezierCurveTo(87 * scale, 151 * scale, 90 * scale, 144 * scale, 87 * scale, 137 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(63 * scale, 98 * scale);
  ctx.bezierCurveTo(84 * scale, 121 * scale, 109 * scale, 102 * scale, 124 * scale, 117 * scale);
  ctx.bezierCurveTo(138 * scale, 136 * scale, 123 * scale, 165 * scale, 94 * scale, 150 * scale);
  ctx.bezierCurveTo(66 * scale, 131 * scale, 64 * scale, 115 * scale, 63 * scale, 99 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(449 * scale, 97 * scale);
  ctx.bezierCurveTo(446 * scale, 143 * scale, 415 * scale, 151 * scale, 402 * scale, 155 * scale);
  ctx.bezierCurveTo(386 * scale, 157 * scale, 373 * scale, 133 * scale, 391 * scale, 116 * scale);
  ctx.bezierCurveTo(402 * scale, 106 * scale, 432 * scale, 124 * scale, 449 * scale, 97 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 10 * scale);
  return can;
};

function create_crab_loot(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 304 * scale;
  can.height = 278 * scale;
  ctx.translate(10 * scale, 25 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(128 * scale, 137 * scale);
  ctx.bezierCurveTo(155 * scale, 144 * scale, 223 * scale, 143 * scale, 256 * scale, 122 * scale);
  ctx.bezierCurveTo(249 * scale, 180 * scale, 210 * scale, 227 * scale, 164 * scale, 242 * scale);
  ctx.bezierCurveTo(74 * scale, 213 * scale, 99 * scale, 166 * scale, 127 * scale, 138 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(284 * scale, 52 * scale);
  ctx.bezierCurveTo(126 * scale, 112 * scale, 89 * scale, 177 * scale, 170 * scale, 241 * scale);
  ctx.bezierCurveTo(103 * scale, 275 * scale, 20 * scale, 239 * scale, 12 * scale, 159 * scale);
  ctx.bezierCurveTo(5 * scale, 76 * scale, 75 * scale, 4 * scale, 165 * scale, 13 * scale);
  ctx.bezierCurveTo(233 * scale, 15 * scale, 260 * scale, 33 * scale, 284 * scale, 52 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(-10 * scale, -25 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(128 * scale, 137 * scale);
  ctx.bezierCurveTo(155 * scale, 144 * scale, 223 * scale, 143 * scale, 256 * scale, 122 * scale);
  ctx.bezierCurveTo(249 * scale, 180 * scale, 210 * scale, 227 * scale, 164 * scale, 242 * scale);
  ctx.bezierCurveTo(74 * scale, 213 * scale, 99 * scale, 166 * scale, 127 * scale, 138 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(284 * scale, 52 * scale);
  ctx.bezierCurveTo(126 * scale, 112 * scale, 89 * scale, 177 * scale, 170 * scale, 241 * scale);
  ctx.bezierCurveTo(103 * scale, 275 * scale, 20 * scale, 239 * scale, 12 * scale, 159 * scale);
  ctx.bezierCurveTo(5 * scale, 76 * scale, 75 * scale, 4 * scale, 165 * scale, 13 * scale);
  ctx.bezierCurveTo(233 * scale, 15 * scale, 260 * scale, 33 * scale, 284 * scale, 52 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 15 * scale);
  return can;
};

function create_bed(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 175 * scale;
  can.height = 169 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(19 * scale, 139 * scale);
  ctx.bezierCurveTo(18 * scale, 163 * scale, 22 * scale, 156 * scale, 53 * scale, 157 * scale);
  ctx.bezierCurveTo(97.5 * scale, 157 * scale, 97.5 * scale, 157 * scale, 142 * scale, 157 * scale);
  ctx.bezierCurveTo(150 * scale, 157 * scale, 153 * scale, 156 * scale, 154 * scale, 142 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -3 * scale);
  ctx.save();
  ctx.translate(86.5 * scale, 81.5 * scale);
  round_rect(ctx, -66.5 * scale, -65.5 * scale, 133 * scale, 131 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.save();
  ctx.translate(84.5 * scale, 79 * scale);
  round_rect(ctx, -50.5 * scale, -49 * scale, 101 * scale, 98 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42 * scale, 54 * scale);
  ctx.bezierCurveTo(37 * scale, 48 * scale, 39 * scale, 44 * scale, 38 * scale, 41 * scale);
  ctx.bezierCurveTo(42 * scale, 40 * scale, 45 * scale, 40 * scale, 50 * scale, 41 * scale);
  ctx.bezierCurveTo(85 * scale, 36 * scale, 98 * scale, 37 * scale, 116 * scale, 42 * scale);
  ctx.bezierCurveTo(132 * scale, 39 * scale, 132 * scale, 39 * scale, 133 * scale, 56 * scale);
  ctx.bezierCurveTo(136 * scale, 73 * scale, 136 * scale, 84 * scale, 132 * scale, 106 * scale);
  ctx.bezierCurveTo(47 * scale, 113 * scale, 85.5 * scale, 106 * scale, 39 * scale, 106 * scale);
  ctx.bezierCurveTo(32 * scale, 81 * scale, 38 * scale, 60 * scale, 42 * scale, 55 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.save();
  ctx.translate(28 * scale, 24 * scale);
  ctx.rotate(0);
  round_rect(ctx, -14 * scale, -14 * scale, 28 * scale, 28 * scale, 4 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.save();
  ctx.translate(143 * scale, 23 * scale);
  ctx.rotate(0);
  round_rect(ctx, -14 * scale, -14 * scale, 28 * scale, 28 * scale, 4 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 80 * scale);
  ctx.bezierCurveTo(73 * scale, 78 * scale, 84 * scale, 74 * scale, 100 * scale, 64 * scale);
  ctx.bezierCurveTo(111 * scale, 57 * scale, 125 * scale, 67 * scale, 108 * scale, 84 * scale);
  ctx.bezierCurveTo(96 * scale, 95 * scale, 86 * scale, 96 * scale, 70 * scale, 88 * scale);
  ctx.bezierCurveTo(62.5 * scale, 84 * scale, 62.5 * scale, 84 * scale, 55 * scale, 80 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(17 * scale, 112 * scale);
  ctx.bezierCurveTo(14 * scale, 146 * scale, 27 * scale, 152 * scale, 37 * scale, 149 * scale);
  ctx.bezierCurveTo(78 * scale, 155 * scale, 128 * scale, 150 * scale, 146 * scale, 150 * scale);
  ctx.bezierCurveTo(158 * scale, 144 * scale, 158 * scale, 121 * scale, 153 * scale, 114 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[9], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(127 * scale, 111 * scale);
  ctx.bezierCurveTo(133 * scale, 136 * scale, 115 * scale, 149 * scale, 88 * scale, 150 * scale);
  ctx.bezierCurveTo(119.5 * scale, 151 * scale, 119.5 * scale, 151 * scale, 151 * scale, 152 * scale);
  ctx.bezierCurveTo(159 * scale, 136 * scale, 155 * scale, 126 * scale, 154 * scale, 113 * scale);
  ctx.closePath();
  fill_path(ctx, color[9]);
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(15 * scale, 117 * scale);
  ctx.bezierCurveTo(34 * scale, 109 * scale, 61 * scale, 106 * scale, 94 * scale, 109 * scale);
  ctx.bezierCurveTo(126 * scale, 110 * scale, 142 * scale, 113 * scale, 154 * scale, 119 * scale);
  ctx.bezierCurveTo(154 * scale, 123 * scale, 154 * scale, 123 * scale, 154 * scale, 127 * scale);
  ctx.bezierCurveTo(127 * scale, 118 * scale, 15 * scale, 122 * scale, 18 * scale, 129 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(14 * scale, 127 * scale);
  ctx.bezierCurveTo(13 * scale, 117 * scale, 12 * scale, 109 * scale, 15 * scale, 103 * scale);
  ctx.bezierCurveTo(16 * scale, 95 * scale, 21 * scale, 92 * scale, 60 * scale, 93 * scale);
  ctx.bezierCurveTo(91 * scale, 93 * scale, 118 * scale, 93 * scale, 143 * scale, 96 * scale);
  ctx.bezierCurveTo(151 * scale, 96 * scale, 155 * scale, 99 * scale, 156 * scale, 112 * scale);
  ctx.bezierCurveTo(157 * scale, 124 * scale, 157 * scale, 127 * scale, 156 * scale, 128 * scale);
  ctx.bezierCurveTo(138 * scale, 112 * scale, 100 * scale, 118 * scale, 84 * scale, 118 * scale);
  ctx.bezierCurveTo(28 * scale, 118 * scale, 20 * scale, 120 * scale, 16 * scale, 127 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.save();
  ctx.translate(27.5 * scale, 138.5 * scale);
  round_rect(ctx, -13.5 * scale, -14.5 * scale, 27 * scale, 29 * scale, 4 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.save();
  ctx.translate(143.5 * scale, 137 * scale);
  round_rect(ctx, -13.5 * scale, -14 * scale, 27 * scale, 28 * scale, 4 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 5 * scale);
  return can;
};

function create_bed_top(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 175 * scale;
  can.height = 169 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(17 * scale, 112 * scale);
  ctx.bezierCurveTo(14 * scale, 146 * scale, 27 * scale, 152 * scale, 37 * scale, 149 * scale);
  ctx.bezierCurveTo(78 * scale, 155 * scale, 128 * scale, 150 * scale, 146 * scale, 150 * scale);
  ctx.bezierCurveTo(158 * scale, 144 * scale, 158 * scale, 121 * scale, 153 * scale, 114 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[9], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(127 * scale, 111 * scale);
  ctx.bezierCurveTo(133 * scale, 136 * scale, 115 * scale, 149 * scale, 88 * scale, 150 * scale);
  ctx.bezierCurveTo(119.5 * scale, 151 * scale, 119.5 * scale, 151 * scale, 151 * scale, 152 * scale);
  ctx.bezierCurveTo(159 * scale, 136 * scale, 155 * scale, 126 * scale, 154 * scale, 113 * scale);
  ctx.closePath();
  fill_path(ctx, color[9]);
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(15 * scale, 117 * scale);
  ctx.bezierCurveTo(34 * scale, 109 * scale, 61 * scale, 106 * scale, 94 * scale, 109 * scale);
  ctx.bezierCurveTo(126 * scale, 110 * scale, 142 * scale, 113 * scale, 154 * scale, 119 * scale);
  ctx.bezierCurveTo(154 * scale, 123 * scale, 154 * scale, 123 * scale, 154 * scale, 127 * scale);
  ctx.bezierCurveTo(127 * scale, 118 * scale, 15 * scale, 122 * scale, 18 * scale, 129 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(14 * scale, 127 * scale);
  ctx.bezierCurveTo(13 * scale, 117 * scale, 12 * scale, 109 * scale, 15 * scale, 103 * scale);
  ctx.bezierCurveTo(16 * scale, 95 * scale, 21 * scale, 92 * scale, 60 * scale, 93 * scale);
  ctx.bezierCurveTo(91 * scale, 93 * scale, 118 * scale, 93 * scale, 143 * scale, 96 * scale);
  ctx.bezierCurveTo(151 * scale, 96 * scale, 155 * scale, 99 * scale, 156 * scale, 112 * scale);
  ctx.bezierCurveTo(157 * scale, 124 * scale, 157 * scale, 127 * scale, 156 * scale, 128 * scale);
  ctx.bezierCurveTo(138 * scale, 112 * scale, 100 * scale, 118 * scale, 84 * scale, 118 * scale);
  ctx.bezierCurveTo(28 * scale, 118 * scale, 20 * scale, 120 * scale, 16 * scale, 127 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.save();
  ctx.translate(27.5 * scale, 138.5 * scale);
  round_rect(ctx, -13.5 * scale, -14.5 * scale, 27 * scale, 29 * scale, 4 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.save();
  ctx.translate(143.5 * scale, 137 * scale);
  round_rect(ctx, -13.5 * scale, -14 * scale, 27 * scale, 28 * scale, 4 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 5 * scale);
  return can;
};

function create_crab_spear(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 115 * scale;
  can.height = 585 * scale;
  ctx.scale(-1, 1);
  ctx.translate(-110 * scale, 0);
  ctx.translate(10 * scale, 10 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(51.5 * scale, 342 * scale);
  round_rect(ctx, -14.5 * scale, -225 * scale, 29 * scale, 450 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(54 * scale, 83 * scale);
  ctx.bezierCurveTo(70 * scale, 69 * scale, 78 * scale, 62 * scale, 82 * scale, 40 * scale);
  ctx.bezierCurveTo(93 * scale, 48 * scale, 103 * scale, 64 * scale, 95 * scale, 102 * scale);
  ctx.bezierCurveTo(60 * scale, 114 * scale, 53 * scale, 103 * scale, 54 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(95 * scale, 97 * scale);
  ctx.bezierCurveTo(56 * scale, 102 * scale, 43 * scale, 77 * scale, 71 * scale, 6 * scale);
  ctx.bezierCurveTo(34 * scale, 10 * scale, 6 * scale, 43 * scale, 5 * scale, 76 * scale);
  ctx.bezierCurveTo(4 * scale, 98 * scale, 15 * scale, 130 * scale, 64 * scale, 130 * scale);
  ctx.bezierCurveTo(76 * scale, 129 * scale, 95 * scale, 113 * scale, 97 * scale, 97 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 176 * scale);
  ctx.bezierCurveTo(74 * scale, 175 * scale, 82 * scale, 169 * scale, 96 * scale, 155 * scale);
  ctx.bezierCurveTo(103 * scale, 183 * scale, 95 * scale, 214 * scale, 54 * scale, 219 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(50 * scale, 176 * scale);
  ctx.bezierCurveTo(25 * scale, 177 * scale, 16 * scale, 164 * scale, 7 * scale, 156 * scale);
  ctx.bezierCurveTo(0 * scale, 186 * scale, 10 * scale, 201 * scale, 43 * scale, 220 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 403 * scale);
  ctx.bezierCurveTo(47 * scale, 412 * scale, 58 * scale, 412 * scale, 67 * scale, 403 * scale);
  ctx.bezierCurveTo(66.5 * scale, 434 * scale, 66.5 * scale, 434 * scale, 66 * scale, 465 * scale);
  ctx.bezierCurveTo(56 * scale, 480 * scale, 40 * scale, 472 * scale, 36 * scale, 465 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(59 * scale, 67 * scale);
  ctx.bezierCurveTo(47 * scale, 97 * scale, 18 * scale, 117 * scale, 11 * scale, 110 * scale);
  ctx.bezierCurveTo(11 * scale, 115 * scale, 15 * scale, 122 * scale, 23 * scale, 124 * scale);
  ctx.bezierCurveTo(46 * scale, 118 * scale, 52 * scale, 113 * scale, 62 * scale, 86 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 125 * scale);
  ctx.bezierCurveTo(47 * scale, 136 * scale, 57 * scale, 134 * scale, 77 * scale, 127 * scale);
  ctx.bezierCurveTo(71 * scale, 158 * scale, 71 * scale, 159 * scale, 66 * scale, 159 * scale);
  ctx.bezierCurveTo(50.5 * scale, 156.5 * scale, 50.5 * scale, 156.5 * scale, 35 * scale, 154 * scale);
  ctx.bezierCurveTo(31 * scale, 145 * scale, 31 * scale, 136 * scale, 31 * scale, 125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 171 * scale);
  ctx.bezierCurveTo(32 * scale, 221 * scale, 43 * scale, 233 * scale, 70 * scale, 247 * scale);
  ctx.bezierCurveTo(75 * scale, 234 * scale, 75 * scale, 230 * scale, 72 * scale, 221 * scale);
  ctx.bezierCurveTo(48 * scale, 206 * scale, 54 * scale, 188 * scale, 50 * scale, 176 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(60 * scale, 68 * scale);
  ctx.bezierCurveTo(63 * scale, 69 * scale, 65 * scale, 71 * scale, 67 * scale, 77 * scale);
  ctx.bezierCurveTo(61 * scale, 123 * scale, 52 * scale, 137 * scale, 42 * scale, 150 * scale);
  ctx.bezierCurveTo(38 * scale, 151 * scale, 38 * scale, 151 * scale, 34 * scale, 152 * scale);
  ctx.bezierCurveTo(33 * scale, 146.5 * scale, 33 * scale, 146.5 * scale, 32 * scale, 141 * scale);
  ctx.bezierCurveTo(49 * scale, 118 * scale, 63 * scale, 87 * scale, 59 * scale, 68 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(71 * scale, 172 * scale);
  ctx.bezierCurveTo(56 * scale, 222 * scale, 49 * scale, 234 * scale, 35 * scale, 248 * scale);
  ctx.bezierCurveTo(30 * scale, 236 * scale, 30 * scale, 230 * scale, 31 * scale, 217 * scale);
  ctx.bezierCurveTo(44 * scale, 202 * scale, 49 * scale, 191 * scale, 52 * scale, 172 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 151 * scale);
  ctx.bezierCurveTo(27 * scale, 165 * scale, 31 * scale, 173 * scale, 36 * scale, 178 * scale);
  ctx.bezierCurveTo(56 * scale, 185 * scale, 73 * scale, 184 * scale, 71 * scale, 170 * scale);
  ctx.bezierCurveTo(72 * scale, 154 * scale, 71 * scale, 154 * scale, 63 * scale, 155 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(-10 * scale, -10 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(51.5 * scale, 342 * scale);
  round_rect(ctx, -14.5 * scale, -225 * scale, 29 * scale, 450 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(54 * scale, 83 * scale);
  ctx.bezierCurveTo(70 * scale, 69 * scale, 78 * scale, 62 * scale, 82 * scale, 40 * scale);
  ctx.bezierCurveTo(93 * scale, 48 * scale, 103 * scale, 64 * scale, 95 * scale, 102 * scale);
  ctx.bezierCurveTo(60 * scale, 114 * scale, 53 * scale, 103 * scale, 54 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(95 * scale, 97 * scale);
  ctx.bezierCurveTo(56 * scale, 102 * scale, 43 * scale, 77 * scale, 71 * scale, 6 * scale);
  ctx.bezierCurveTo(34 * scale, 10 * scale, 6 * scale, 43 * scale, 5 * scale, 76 * scale);
  ctx.bezierCurveTo(4 * scale, 98 * scale, 15 * scale, 130 * scale, 64 * scale, 130 * scale);
  ctx.bezierCurveTo(76 * scale, 129 * scale, 95 * scale, 113 * scale, 97 * scale, 97 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 403 * scale);
  ctx.bezierCurveTo(47 * scale, 412 * scale, 58 * scale, 412 * scale, 67 * scale, 403 * scale);
  ctx.bezierCurveTo(66.5 * scale, 434 * scale, 66.5 * scale, 434 * scale, 66 * scale, 465 * scale);
  ctx.bezierCurveTo(56 * scale, 480 * scale, 40 * scale, 472 * scale, 36 * scale, 465 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(37 * scale, 427 * scale);
  ctx.bezierCurveTo(47 * scale, 435 * scale, 55 * scale, 435 * scale, 67 * scale, 427 * scale);
  fill_path(ctx, undefined, color[8], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36 * scale, 448 * scale);
  ctx.bezierCurveTo(46 * scale, 454 * scale, 54 * scale, 457 * scale, 65 * scale, 449 * scale);
  fill_path(ctx, undefined, color[8], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 176 * scale);
  ctx.bezierCurveTo(74 * scale, 175 * scale, 82 * scale, 169 * scale, 96 * scale, 155 * scale);
  ctx.bezierCurveTo(103 * scale, 183 * scale, 95 * scale, 214 * scale, 54 * scale, 219 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(50 * scale, 176 * scale);
  ctx.bezierCurveTo(25 * scale, 177 * scale, 16 * scale, 164 * scale, 7 * scale, 156 * scale);
  ctx.bezierCurveTo(0 * scale, 186 * scale, 10 * scale, 201 * scale, 43 * scale, 220 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(59 * scale, 67 * scale);
  ctx.bezierCurveTo(47 * scale, 97 * scale, 18 * scale, 117 * scale, 11 * scale, 110 * scale);
  ctx.bezierCurveTo(11 * scale, 115 * scale, 15 * scale, 122 * scale, 23 * scale, 124 * scale);
  ctx.bezierCurveTo(46 * scale, 118 * scale, 52 * scale, 113 * scale, 62 * scale, 86 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 125 * scale);
  ctx.bezierCurveTo(47 * scale, 136 * scale, 57 * scale, 134 * scale, 77 * scale, 127 * scale);
  ctx.bezierCurveTo(71 * scale, 158 * scale, 71 * scale, 159 * scale, 66 * scale, 159 * scale);
  ctx.bezierCurveTo(50.5 * scale, 156.5 * scale, 50.5 * scale, 156.5 * scale, 35 * scale, 154 * scale);
  ctx.bezierCurveTo(31 * scale, 145 * scale, 31 * scale, 136 * scale, 31 * scale, 125 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 171 * scale);
  ctx.bezierCurveTo(32 * scale, 221 * scale, 43 * scale, 233 * scale, 70 * scale, 247 * scale);
  ctx.bezierCurveTo(75 * scale, 234 * scale, 75 * scale, 230 * scale, 72 * scale, 221 * scale);
  ctx.bezierCurveTo(48 * scale, 206 * scale, 54 * scale, 188 * scale, 50 * scale, 176 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(60 * scale, 68 * scale);
  ctx.bezierCurveTo(63 * scale, 69 * scale, 65 * scale, 71 * scale, 67 * scale, 77 * scale);
  ctx.bezierCurveTo(61 * scale, 123 * scale, 52 * scale, 137 * scale, 42 * scale, 150 * scale);
  ctx.bezierCurveTo(38 * scale, 151 * scale, 38 * scale, 151 * scale, 34 * scale, 152 * scale);
  ctx.bezierCurveTo(33 * scale, 146.5 * scale, 33 * scale, 146.5 * scale, 32 * scale, 141 * scale);
  ctx.bezierCurveTo(49 * scale, 118 * scale, 63 * scale, 87 * scale, 59 * scale, 68 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(71 * scale, 172 * scale);
  ctx.bezierCurveTo(56 * scale, 222 * scale, 49 * scale, 234 * scale, 35 * scale, 248 * scale);
  ctx.bezierCurveTo(30 * scale, 236 * scale, 30 * scale, 230 * scale, 31 * scale, 217 * scale);
  ctx.bezierCurveTo(44 * scale, 202 * scale, 49 * scale, 191 * scale, 52 * scale, 172 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 151 * scale);
  ctx.bezierCurveTo(27 * scale, 165 * scale, 31 * scale, 173 * scale, 36 * scale, 178 * scale);
  ctx.bezierCurveTo(56 * scale, 185 * scale, 73 * scale, 184 * scale, 71 * scale, 170 * scale);
  ctx.bezierCurveTo(72 * scale, 154 * scale, 71 * scale, 154 * scale, 63 * scale, 155 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(53 * scale, 113 * scale);
  ctx.bezierCurveTo(65 * scale, 140 * scale, 75 * scale, 166 * scale, 52 * scale, 169 * scale);
  ctx.bezierCurveTo(29 * scale, 168 * scale, 41 * scale, 143 * scale, 53 * scale, 112 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  return can;
};

function create_wood_spear(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 81 * scale;
  can.height = 626 * scale;
  ctx.translate(20 * scale, 20 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 565 * scale);
  ctx.bezierCurveTo(56 * scale, 586 * scale, 53 * scale, 591 * scale, 40 * scale, 592 * scale);
  ctx.bezierCurveTo(28 * scale, 591 * scale, 27 * scale, 583 * scale, 28 * scale, 557 * scale);
  ctx.bezierCurveTo(27.5 * scale, 346 * scale, 27.5 * scale, 346 * scale, 27 * scale, 135 * scale);
  ctx.bezierCurveTo(26 * scale, 74 * scale, 36 * scale, 26 * scale, 41 * scale, 15 * scale);
  ctx.bezierCurveTo(54 * scale, 51 * scale, 54 * scale, 81 * scale, 55 * scale, 128 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(-20 * scale, -20 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 565 * scale);
  ctx.bezierCurveTo(56 * scale, 586 * scale, 53 * scale, 591 * scale, 40 * scale, 592 * scale);
  ctx.bezierCurveTo(28 * scale, 591 * scale, 27 * scale, 583 * scale, 28 * scale, 557 * scale);
  ctx.bezierCurveTo(27.5 * scale, 346 * scale, 27.5 * scale, 346 * scale, 27 * scale, 135 * scale);
  ctx.bezierCurveTo(26 * scale, 74 * scale, 36 * scale, 26 * scale, 41 * scale, 15 * scale);
  ctx.bezierCurveTo(54 * scale, 51 * scale, 54 * scale, 81 * scale, 55 * scale, 128 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(27 * scale, 129 * scale);
  ctx.bezierCurveTo(32 * scale, 135 * scale, 48 * scale, 136 * scale, 53 * scale, 129 * scale);
  ctx.bezierCurveTo(56 * scale, 97 * scale, 53 * scale, 82 * scale, 52 * scale, 64 * scale);
  ctx.bezierCurveTo(49 * scale, 33 * scale, 44 * scale, 27 * scale, 41 * scale, 21 * scale);
  ctx.bezierCurveTo(31 * scale, 40 * scale, 28 * scale, 84 * scale, 27 * scale, 127 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55 * scale, 565 * scale);
  ctx.bezierCurveTo(56 * scale, 586 * scale, 53 * scale, 591 * scale, 40 * scale, 592 * scale);
  ctx.bezierCurveTo(28 * scale, 591 * scale, 27 * scale, 583 * scale, 28 * scale, 557 * scale);
  ctx.bezierCurveTo(27.5 * scale, 346 * scale, 27.5 * scale, 346 * scale, 27 * scale, 135 * scale);
  ctx.bezierCurveTo(26 * scale, 74 * scale, 36 * scale, 26 * scale, 41 * scale, 15 * scale);
  ctx.bezierCurveTo(54 * scale, 51 * scale, 54 * scale, 81 * scale, 55 * scale, 128 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(28 * scale, 475 * scale);
  ctx.bezierCurveTo(38 * scale, 482 * scale, 48 * scale, 480 * scale, 54 * scale, 474 * scale);
  ctx.bezierCurveTo(54 * scale, 509.5 * scale, 54 * scale, 509.5 * scale, 54 * scale, 545 * scale);
  ctx.bezierCurveTo(46 * scale, 554 * scale, 36 * scale, 552 * scale, 28 * scale, 545 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(28 * scale, 496 * scale);
  ctx.bezierCurveTo(39 * scale, 506 * scale, 49 * scale, 503 * scale, 54 * scale, 496 * scale);
  fill_path(ctx, undefined, color[5], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(28 * scale, 521 * scale);
  ctx.bezierCurveTo(41 * scale, 529 * scale, 49 * scale, 524 * scale, 54 * scale, 520 * scale);
  fill_path(ctx, undefined, color[5], 8 * scale);
  return can;
};

function create_stonespear(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 100 * scale;
  can.height = 648 * scale;
  ctx.translate(20 * scale, 20 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(50.5 * scale, 349.5 * scale);
  round_rect(ctx, -13.5 * scale, -249.5 * scale, 27 * scale, 499 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36 * scale, 538 * scale);
  ctx.bezierCurveTo(49.5 * scale, 538 * scale, 49.5 * scale, 538 * scale, 63 * scale, 538 * scale);
  ctx.bezierCurveTo(63.5 * scale, 568 * scale, 63.5 * scale, 568 * scale, 64 * scale, 598 * scale);
  ctx.bezierCurveTo(50 * scale, 598 * scale, 50 * scale, 598 * scale, 36 * scale, 598 * scale);
  ctx.bezierCurveTo(36 * scale, 568.5 * scale, 36 * scale, 568.5 * scale, 36 * scale, 539 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36 * scale, 554 * scale);
  ctx.bezierCurveTo(45 * scale, 561 * scale, 56 * scale, 558 * scale, 63 * scale, 554 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(32 * scale, 569 * scale);
  ctx.bezierCurveTo(44 * scale, 576 * scale, 58 * scale, 574 * scale, 68 * scale, 569 * scale);
  ctx.bezierCurveTo(68 * scale, 584 * scale, 68 * scale, 584 * scale, 68 * scale, 599 * scale);
  ctx.bezierCurveTo(68 * scale, 608 * scale, 65 * scale, 618 * scale, 49 * scale, 617 * scale);
  ctx.bezierCurveTo(34 * scale, 617 * scale, 32 * scale, 610 * scale, 32 * scale, 598 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(41 * scale, 581 * scale);
  ctx.bezierCurveTo(48 * scale, 584 * scale, 55 * scale, 583 * scale, 60 * scale, 581 * scale);
  ctx.bezierCurveTo(60 * scale, 589.5 * scale, 60 * scale, 589.5 * scale, 60 * scale, 598 * scale);
  ctx.bezierCurveTo(60 * scale, 604 * scale, 59 * scale, 609 * scale, 48 * scale, 608 * scale);
  ctx.bezierCurveTo(40 * scale, 607 * scale, 40 * scale, 606 * scale, 41 * scale, 581 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 106 * scale);
  ctx.bezierCurveTo(31 * scale, 124.5 * scale, 31 * scale, 124.5 * scale, 31 * scale, 143 * scale);
  ctx.bezierCurveTo(31 * scale, 163 * scale, 38 * scale, 169 * scale, 48 * scale, 168 * scale);
  ctx.bezierCurveTo(57 * scale, 168 * scale, 67 * scale, 165 * scale, 67 * scale, 148 * scale);
  ctx.bezierCurveTo(67 * scale, 123.5 * scale, 67 * scale, 123.5 * scale, 67 * scale, 99 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(49 * scale, 27 * scale);
  ctx.bezierCurveTo(64 * scale, 62.5 * scale, 64 * scale, 62.5 * scale, 79 * scale, 98 * scale);
  ctx.bezierCurveTo(74 * scale, 113 * scale, 63 * scale, 121 * scale, 50 * scale, 122 * scale);
  ctx.bezierCurveTo(35 * scale, 123 * scale, 22 * scale, 109 * scale, 20 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(49 * scale, 43 * scale);
  ctx.bezierCurveTo(61 * scale, 70 * scale, 61 * scale, 70 * scale, 73 * scale, 97 * scale);
  ctx.bezierCurveTo(66 * scale, 116 * scale, 43 * scale, 122 * scale, 26 * scale, 99 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(-20 * scale, -20 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(50.5 * scale, 349.5 * scale);
  round_rect(ctx, -13.5 * scale, -249.5 * scale, 27 * scale, 499 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36 * scale, 538 * scale);
  ctx.bezierCurveTo(49.5 * scale, 538 * scale, 49.5 * scale, 538 * scale, 63 * scale, 538 * scale);
  ctx.bezierCurveTo(63.5 * scale, 568 * scale, 63.5 * scale, 568 * scale, 64 * scale, 598 * scale);
  ctx.bezierCurveTo(50 * scale, 598 * scale, 50 * scale, 598 * scale, 36 * scale, 598 * scale);
  ctx.bezierCurveTo(36 * scale, 568.5 * scale, 36 * scale, 568.5 * scale, 36 * scale, 539 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36 * scale, 554 * scale);
  ctx.bezierCurveTo(45 * scale, 561 * scale, 56 * scale, 558 * scale, 63 * scale, 554 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(32 * scale, 569 * scale);
  ctx.bezierCurveTo(44 * scale, 576 * scale, 58 * scale, 574 * scale, 68 * scale, 569 * scale);
  ctx.bezierCurveTo(68 * scale, 584 * scale, 68 * scale, 584 * scale, 68 * scale, 599 * scale);
  ctx.bezierCurveTo(68 * scale, 608 * scale, 65 * scale, 618 * scale, 49 * scale, 617 * scale);
  ctx.bezierCurveTo(34 * scale, 617 * scale, 32 * scale, 610 * scale, 32 * scale, 598 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(41 * scale, 581 * scale);
  ctx.bezierCurveTo(48 * scale, 584 * scale, 55 * scale, 583 * scale, 60 * scale, 581 * scale);
  ctx.bezierCurveTo(60 * scale, 589.5 * scale, 60 * scale, 589.5 * scale, 60 * scale, 598 * scale);
  ctx.bezierCurveTo(60 * scale, 604 * scale, 59 * scale, 609 * scale, 48 * scale, 608 * scale);
  ctx.bezierCurveTo(40 * scale, 607 * scale, 40 * scale, 606 * scale, 41 * scale, 581 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 106 * scale);
  ctx.bezierCurveTo(31 * scale, 124.5 * scale, 31 * scale, 124.5 * scale, 31 * scale, 143 * scale);
  ctx.bezierCurveTo(31 * scale, 163 * scale, 38 * scale, 169 * scale, 48 * scale, 168 * scale);
  ctx.bezierCurveTo(57 * scale, 168 * scale, 67 * scale, 165 * scale, 67 * scale, 148 * scale);
  ctx.bezierCurveTo(67 * scale, 123.5 * scale, 67 * scale, 123.5 * scale, 67 * scale, 99 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 8 * scale);
  ctx.save();
  ctx.translate(-46 * scale, -50 * scale);
  ctx.scale(2, 2);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(51 * scale, 80 * scale);
  ctx.bezierCurveTo(51 * scale, 89.5 * scale, 51 * scale, 89.5 * scale, 51 * scale, 99 * scale);
  ctx.bezierCurveTo(49 * scale, 103 * scale, 46 * scale, 105 * scale, 44 * scale, 99 * scale);
  ctx.bezierCurveTo(44 * scale, 88.5 * scale, 44 * scale, 88.5 * scale, 44 * scale, 78 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.restore();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(49 * scale, 27 * scale);
  ctx.bezierCurveTo(64 * scale, 62.5 * scale, 64 * scale, 62.5 * scale, 79 * scale, 98 * scale);
  ctx.bezierCurveTo(74 * scale, 113 * scale, 63 * scale, 121 * scale, 50 * scale, 122 * scale);
  ctx.bezierCurveTo(35 * scale, 123 * scale, 22 * scale, 109 * scale, 20 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[9], 8 * scale);
  ctx.scale(2, 2);
  ctx.translate(-23 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(57 * scale, 69 * scale);
  ctx.bezierCurveTo(50 * scale, 76 * scale, 43 * scale, 75 * scale, 38 * scale, 69 * scale);
  ctx.bezierCurveTo(43 * scale, 57 * scale, 43 * scale, 57 * scale, 48 * scale, 45 * scale);
  ctx.closePath();
  fill_path(ctx, color[10]);
  return can;
};

function create_goldspear(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 88 * scale;
  can.height = 647 * scale;
  ctx.translate(20 * scale, 20 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(45 * scale, 384.5 * scale);
  round_rect(ctx, -15 * scale, -216.5 * scale, 30 * scale, 433 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(27 * scale, 572 * scale);
  ctx.bezierCurveTo(44 * scale, 580 * scale, 55 * scale, 576 * scale, 62 * scale, 572 * scale);
  ctx.bezierCurveTo(65 * scale, 585.5 * scale, 65 * scale, 585.5 * scale, 68 * scale, 599 * scale);
  ctx.bezierCurveTo(71 * scale, 612 * scale, 68 * scale, 618 * scale, 34 * scale, 616 * scale);
  ctx.bezierCurveTo(14 * scale, 615 * scale, 19 * scale, 607 * scale, 27 * scale, 573 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(32 * scale, 587 * scale);
  ctx.bezierCurveTo(39 * scale, 590 * scale, 48 * scale, 588 * scale, 54 * scale, 587 * scale);
  ctx.bezierCurveTo(57 * scale, 604 * scale, 59 * scale, 609 * scale, 46 * scale, 609 * scale);
  ctx.bezierCurveTo(27 * scale, 609 * scale, 28 * scale, 605 * scale, 33 * scale, 588 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 113 * scale);
  ctx.bezierCurveTo(27 * scale, 139 * scale, 27 * scale, 139 * scale, 23 * scale, 165 * scale);
  ctx.bezierCurveTo(18 * scale, 187 * scale, 39 * scale, 195 * scale, 57 * scale, 186 * scale);
  ctx.bezierCurveTo(68 * scale, 180 * scale, 65 * scale, 171 * scale, 62 * scale, 153 * scale);
  ctx.bezierCurveTo(58.5 * scale, 131 * scale, 58.5 * scale, 131 * scale, 55 * scale, 109 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39 * scale, 139 * scale);
  ctx.bezierCurveTo(43 * scale, 139 * scale, 43 * scale, 139 * scale, 47 * scale, 139 * scale);
  ctx.bezierCurveTo(51 * scale, 158 * scale, 56 * scale, 176 * scale, 44 * scale, 175 * scale);
  ctx.bezierCurveTo(33 * scale, 177 * scale, 34 * scale, 167 * scale, 39 * scale, 140 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 29 * scale);
  ctx.bezierCurveTo(57 * scale, 63 * scale, 57 * scale, 63 * scale, 70 * scale, 97 * scale);
  ctx.bezierCurveTo(60 * scale, 111 * scale, 60 * scale, 111 * scale, 50 * scale, 125 * scale);
  ctx.bezierCurveTo(45 * scale, 128 * scale, 41 * scale, 128 * scale, 35 * scale, 124 * scale);
  ctx.bezierCurveTo(26.5 * scale, 110 * scale, 26.5 * scale, 110 * scale, 18 * scale, 96 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 54 * scale);
  ctx.bezierCurveTo(50 * scale, 72 * scale, 50 * scale, 72 * scale, 56 * scale, 90 * scale);
  ctx.bezierCurveTo(58 * scale, 94 * scale, 59 * scale, 98 * scale, 53 * scale, 105 * scale);
  ctx.bezierCurveTo(47 * scale, 113 * scale, 43 * scale, 113 * scale, 36 * scale, 103 * scale);
  ctx.bezierCurveTo(29 * scale, 96 * scale, 31 * scale, 94 * scale, 35 * scale, 83 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(-20 * scale, -20 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(45 * scale, 384.5 * scale);
  round_rect(ctx, -15 * scale, -216.5 * scale, 30 * scale, 433 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(27 * scale, 572 * scale);
  ctx.bezierCurveTo(44 * scale, 580 * scale, 55 * scale, 576 * scale, 62 * scale, 572 * scale);
  ctx.bezierCurveTo(65 * scale, 585.5 * scale, 65 * scale, 585.5 * scale, 68 * scale, 599 * scale);
  ctx.bezierCurveTo(71 * scale, 612 * scale, 68 * scale, 618 * scale, 34 * scale, 616 * scale);
  ctx.bezierCurveTo(14 * scale, 615 * scale, 19 * scale, 607 * scale, 27 * scale, 573 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(32 * scale, 587 * scale);
  ctx.bezierCurveTo(39 * scale, 590 * scale, 48 * scale, 588 * scale, 54 * scale, 587 * scale);
  ctx.bezierCurveTo(57 * scale, 604 * scale, 59 * scale, 609 * scale, 46 * scale, 609 * scale);
  ctx.bezierCurveTo(27 * scale, 609 * scale, 28 * scale, 605 * scale, 33 * scale, 588 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 113 * scale);
  ctx.bezierCurveTo(27 * scale, 139 * scale, 27 * scale, 139 * scale, 23 * scale, 165 * scale);
  ctx.bezierCurveTo(18 * scale, 187 * scale, 39 * scale, 195 * scale, 57 * scale, 186 * scale);
  ctx.bezierCurveTo(68 * scale, 180 * scale, 65 * scale, 171 * scale, 62 * scale, 153 * scale);
  ctx.bezierCurveTo(58.5 * scale, 131 * scale, 58.5 * scale, 131 * scale, 55 * scale, 109 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39 * scale, 139 * scale);
  ctx.bezierCurveTo(43 * scale, 139 * scale, 43 * scale, 139 * scale, 47 * scale, 139 * scale);
  ctx.bezierCurveTo(51 * scale, 158 * scale, 56 * scale, 176 * scale, 44 * scale, 175 * scale);
  ctx.bezierCurveTo(33 * scale, 177 * scale, 34 * scale, 167 * scale, 39 * scale, 140 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 29 * scale);
  ctx.bezierCurveTo(57 * scale, 63 * scale, 57 * scale, 63 * scale, 70 * scale, 97 * scale);
  ctx.bezierCurveTo(60 * scale, 111 * scale, 60 * scale, 111 * scale, 50 * scale, 125 * scale);
  ctx.bezierCurveTo(45 * scale, 128 * scale, 41 * scale, 128 * scale, 35 * scale, 124 * scale);
  ctx.bezierCurveTo(26.5 * scale, 110 * scale, 26.5 * scale, 110 * scale, 18 * scale, 96 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 54 * scale);
  ctx.bezierCurveTo(50 * scale, 72 * scale, 50 * scale, 72 * scale, 56 * scale, 90 * scale);
  ctx.bezierCurveTo(58 * scale, 94 * scale, 59 * scale, 98 * scale, 53 * scale, 105 * scale);
  ctx.bezierCurveTo(47 * scale, 113 * scale, 43 * scale, 113 * scale, 36 * scale, 103 * scale);
  ctx.bezierCurveTo(29 * scale, 96 * scale, 31 * scale, 94 * scale, 35 * scale, 83 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  return can;
};

function create_diamondspear(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 106 * scale;
  can.height = 681 * scale;
  ctx.translate(20 * scale, 20 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(52.5 * scale, 395 * scale);
  ctx.rotate(0);
  round_rect(ctx, -11.5 * scale, -226 * scale, 23 * scale, 452 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 588 * scale);
  ctx.bezierCurveTo(47 * scale, 596 * scale, 61 * scale, 594 * scale, 69 * scale, 588 * scale);
  ctx.bezierCurveTo(79 * scale, 615 * scale, 78 * scale, 632 * scale, 59 * scale, 643 * scale);
  ctx.bezierCurveTo(41 * scale, 650 * scale, 27 * scale, 632 * scale, 30 * scale, 610 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 135 * scale);
  ctx.bezierCurveTo(61.5 * scale, 142 * scale, 61.5 * scale, 142 * scale, 71 * scale, 149 * scale);
  ctx.bezierCurveTo(69.5 * scale, 166 * scale, 69.5 * scale, 166 * scale, 68 * scale, 183 * scale);
  ctx.bezierCurveTo(60.5 * scale, 187.5 * scale, 60.5 * scale, 187.5 * scale, 53 * scale, 192 * scale);
  ctx.bezierCurveTo(45 * scale, 187.5 * scale, 45 * scale, 187.5 * scale, 37 * scale, 183 * scale);
  ctx.bezierCurveTo(35.5 * scale, 167 * scale, 35.5 * scale, 167 * scale, 34 * scale, 151 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(64 * scale, 150 * scale);
  ctx.bezierCurveTo(63 * scale, 164 * scale, 63 * scale, 164 * scale, 62 * scale, 178 * scale);
  ctx.bezierCurveTo(58 * scale, 181 * scale, 58 * scale, 181 * scale, 54 * scale, 184 * scale);
  ctx.bezierCurveTo(48.5 * scale, 181.5 * scale, 48.5 * scale, 181.5 * scale, 43 * scale, 179 * scale);
  ctx.bezierCurveTo(42 * scale, 164.5 * scale, 42 * scale, 164.5 * scale, 41 * scale, 150 * scale);
  ctx.bezierCurveTo(46 * scale, 152.5 * scale, 46 * scale, 152.5 * scale, 51 * scale, 155 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 39 * scale);
  ctx.bezierCurveTo(65.5 * scale, 82 * scale, 65.5 * scale, 82 * scale, 79 * scale, 125 * scale);
  ctx.bezierCurveTo(66 * scale, 137.5 * scale, 66 * scale, 137.5 * scale, 53 * scale, 150 * scale);
  ctx.bezierCurveTo(39 * scale, 138 * scale, 39 * scale, 138 * scale, 25 * scale, 126 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 64 * scale);
  ctx.bezierCurveTo(60 * scale, 92.5 * scale, 60 * scale, 92.5 * scale, 68 * scale, 121 * scale);
  ctx.bezierCurveTo(61 * scale, 127.5 * scale, 61 * scale, 127.5 * scale, 54 * scale, 134 * scale);
  ctx.bezierCurveTo(46.5 * scale, 127.5 * scale, 46.5 * scale, 127.5 * scale, 39 * scale, 121 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(-20 * scale, -20 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(52.5 * scale, 395 * scale);
  ctx.rotate(0);
  round_rect(ctx, -11.5 * scale, -226 * scale, 23 * scale, 452 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 588 * scale);
  ctx.bezierCurveTo(47 * scale, 596 * scale, 61 * scale, 594 * scale, 69 * scale, 588 * scale);
  ctx.bezierCurveTo(79 * scale, 615 * scale, 78 * scale, 632 * scale, 59 * scale, 643 * scale);
  ctx.bezierCurveTo(41 * scale, 650 * scale, 27 * scale, 632 * scale, 30 * scale, 610 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 135 * scale);
  ctx.bezierCurveTo(61.5 * scale, 142 * scale, 61.5 * scale, 142 * scale, 71 * scale, 149 * scale);
  ctx.bezierCurveTo(69.5 * scale, 166 * scale, 69.5 * scale, 166 * scale, 68 * scale, 183 * scale);
  ctx.bezierCurveTo(60.5 * scale, 187.5 * scale, 60.5 * scale, 187.5 * scale, 53 * scale, 192 * scale);
  ctx.bezierCurveTo(45 * scale, 187.5 * scale, 45 * scale, 187.5 * scale, 37 * scale, 183 * scale);
  ctx.bezierCurveTo(35.5 * scale, 167 * scale, 35.5 * scale, 167 * scale, 34 * scale, 151 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(64 * scale, 150 * scale);
  ctx.bezierCurveTo(63 * scale, 164 * scale, 63 * scale, 164 * scale, 62 * scale, 178 * scale);
  ctx.bezierCurveTo(58 * scale, 181 * scale, 58 * scale, 181 * scale, 54 * scale, 184 * scale);
  ctx.bezierCurveTo(48.5 * scale, 181.5 * scale, 48.5 * scale, 181.5 * scale, 43 * scale, 179 * scale);
  ctx.bezierCurveTo(42 * scale, 164.5 * scale, 42 * scale, 164.5 * scale, 41 * scale, 150 * scale);
  ctx.bezierCurveTo(46 * scale, 152.5 * scale, 46 * scale, 152.5 * scale, 51 * scale, 155 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 39 * scale);
  ctx.bezierCurveTo(65.5 * scale, 82 * scale, 65.5 * scale, 82 * scale, 79 * scale, 125 * scale);
  ctx.bezierCurveTo(66 * scale, 137.5 * scale, 66 * scale, 137.5 * scale, 53 * scale, 150 * scale);
  ctx.bezierCurveTo(39 * scale, 138 * scale, 39 * scale, 138 * scale, 25 * scale, 126 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 64 * scale);
  ctx.bezierCurveTo(60 * scale, 92.5 * scale, 60 * scale, 92.5 * scale, 68 * scale, 121 * scale);
  ctx.bezierCurveTo(61 * scale, 127.5 * scale, 61 * scale, 127.5 * scale, 54 * scale, 134 * scale);
  ctx.bezierCurveTo(46.5 * scale, 127.5 * scale, 46.5 * scale, 127.5 * scale, 39 * scale, 121 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  return can;
};

function create_amespear(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 108 * scale;
  can.height = 669 * scale;
  ctx.translate(20 * scale, 20 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(54 * scale, 389.5 * scale);
  round_rect(ctx, -15 * scale, -228.5 * scale, 30 * scale, 457 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 579 * scale);
  ctx.bezierCurveTo(47 * scale, 587 * scale, 61 * scale, 584 * scale, 71 * scale, 579 * scale);
  ctx.bezierCurveTo(75 * scale, 597.5 * scale, 75 * scale, 597.5 * scale, 79 * scale, 616 * scale);
  ctx.bezierCurveTo(66.5 * scale, 628 * scale, 66.5 * scale, 628 * scale, 54 * scale, 640 * scale);
  ctx.bezierCurveTo(41 * scale, 628.5 * scale, 41 * scale, 628.5 * scale, 28 * scale, 617 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 141 * scale);
  ctx.bezierCurveTo(40 * scale, 136 * scale, 40 * scale, 136 * scale, 50 * scale, 131 * scale);
  ctx.bezierCurveTo(63 * scale, 136 * scale, 63 * scale, 136 * scale, 76 * scale, 141 * scale);
  ctx.bezierCurveTo(72.5 * scale, 161.5 * scale, 72.5 * scale, 161.5 * scale, 69 * scale, 182 * scale);
  ctx.bezierCurveTo(61.5 * scale, 186.5 * scale, 61.5 * scale, 186.5 * scale, 54 * scale, 191 * scale);
  ctx.bezierCurveTo(45 * scale, 186.5 * scale, 45 * scale, 186.5 * scale, 36 * scale, 182 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42 * scale, 152 * scale);
  ctx.bezierCurveTo(53 * scale, 152 * scale, 53 * scale, 152 * scale, 64 * scale, 152 * scale);
  ctx.bezierCurveTo(62 * scale, 171 * scale, 62 * scale, 176 * scale, 55 * scale, 177 * scale);
  ctx.bezierCurveTo(42 * scale, 176 * scale, 45 * scale, 174 * scale, 42 * scale, 152 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 28 * scale);
  ctx.bezierCurveTo(67.5 * scale, 55 * scale, 67.5 * scale, 55 * scale, 83 * scale, 82 * scale);
  ctx.bezierCurveTo(80 * scale, 106.5 * scale, 80 * scale, 106.5 * scale, 77 * scale, 131 * scale);
  ctx.bezierCurveTo(58 * scale, 147 * scale, 44 * scale, 141 * scale, 29 * scale, 131 * scale);
  ctx.bezierCurveTo(26.5 * scale, 106.5 * scale, 26.5 * scale, 106.5 * scale, 24 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(53 * scale, 53 * scale);
  ctx.bezierCurveTo(61 * scale, 70 * scale, 61 * scale, 70 * scale, 69 * scale, 87 * scale);
  ctx.bezierCurveTo(67 * scale, 106 * scale, 67 * scale, 106 * scale, 65 * scale, 125 * scale);
  ctx.bezierCurveTo(54 * scale, 130 * scale, 51 * scale, 130 * scale, 41 * scale, 125 * scale);
  ctx.bezierCurveTo(39 * scale, 105 * scale, 39 * scale, 105 * scale, 37 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(-20 * scale, -20 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(54 * scale, 389.5 * scale);
  ctx.rotate(0);
  round_rect(ctx, -15 * scale, -228.5 * scale, 30 * scale, 457 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 579 * scale);
  ctx.bezierCurveTo(47 * scale, 587 * scale, 61 * scale, 584 * scale, 71 * scale, 579 * scale);
  ctx.bezierCurveTo(75 * scale, 597.5 * scale, 75 * scale, 597.5 * scale, 79 * scale, 616 * scale);
  ctx.bezierCurveTo(66.5 * scale, 628 * scale, 66.5 * scale, 628 * scale, 54 * scale, 640 * scale);
  ctx.bezierCurveTo(41 * scale, 628.5 * scale, 41 * scale, 628.5 * scale, 28 * scale, 617 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 141 * scale);
  ctx.bezierCurveTo(40 * scale, 136 * scale, 40 * scale, 136 * scale, 50 * scale, 131 * scale);
  ctx.bezierCurveTo(63 * scale, 136 * scale, 63 * scale, 136 * scale, 76 * scale, 141 * scale);
  ctx.bezierCurveTo(72.5 * scale, 161.5 * scale, 72.5 * scale, 161.5 * scale, 69 * scale, 182 * scale);
  ctx.bezierCurveTo(61.5 * scale, 186.5 * scale, 61.5 * scale, 186.5 * scale, 54 * scale, 191 * scale);
  ctx.bezierCurveTo(45 * scale, 186.5 * scale, 45 * scale, 186.5 * scale, 36 * scale, 182 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42 * scale, 152 * scale);
  ctx.bezierCurveTo(53 * scale, 152 * scale, 53 * scale, 152 * scale, 64 * scale, 152 * scale);
  ctx.bezierCurveTo(62 * scale, 171 * scale, 62 * scale, 176 * scale, 55 * scale, 177 * scale);
  ctx.bezierCurveTo(42 * scale, 176 * scale, 45 * scale, 174 * scale, 42 * scale, 152 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 28 * scale);
  ctx.bezierCurveTo(67.5 * scale, 55 * scale, 67.5 * scale, 55 * scale, 83 * scale, 82 * scale);
  ctx.bezierCurveTo(80 * scale, 106.5 * scale, 80 * scale, 106.5 * scale, 77 * scale, 131 * scale);
  ctx.bezierCurveTo(58 * scale, 147 * scale, 44 * scale, 141 * scale, 29 * scale, 131 * scale);
  ctx.bezierCurveTo(26.5 * scale, 106.5 * scale, 26.5 * scale, 106.5 * scale, 24 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(53 * scale, 53 * scale);
  ctx.bezierCurveTo(61 * scale, 70 * scale, 61 * scale, 70 * scale, 69 * scale, 87 * scale);
  ctx.bezierCurveTo(67 * scale, 106 * scale, 67 * scale, 106 * scale, 65 * scale, 125 * scale);
  ctx.bezierCurveTo(54 * scale, 130 * scale, 51 * scale, 130 * scale, 41 * scale, 125 * scale);
  ctx.bezierCurveTo(39 * scale, 105 * scale, 39 * scale, 105 * scale, 37 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  return can;
};

function create_spear(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 81 * scale;
  can.height = 350 * scale;
  ctx.globalAlpha = draw_shadow ? 0.6 : 1;
  ctx.translate(0, 5 * scale);
  ctx.save();
  ctx.translate(35 * scale, 160 * scale);
  ctx.rotate(0);
  round_rect(ctx, -6 * scale, -100.5 * scale, 12 * scale, 240 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.save();
  ctx.translate(-6 * scale, 11 * scale);
  ctx.moveTo(26.0714111328125 * scale, 50.9 * scale);
  ctx.bezierCurveTo(32.0714111328125 * scale, 35.892852783203125 * scale, 39.0714111328125 * scale, 18.892852783203125 * scale, 45.0714111328125 * scale, 7.892852783203125 * scale);
  ctx.bezierCurveTo(51.0714111328125 * scale, 13.892852783203125 * scale, 56.0714111328125 * scale, 36.892852783203125 * scale, 60.0714111328125 * scale, 50.892852783203125 * scale);
  ctx.bezierCurveTo(52.5714111328125 * scale, 58.892852783203125 * scale, 52.5714111328125 * scale, 58.892852783203125 * scale, 45.0714111328125 * scale, 66.89285278320312 * scale);
  ctx.bezierCurveTo(37.0714111328125 * scale, 58.892852783203125 * scale, 37.0714111328125 * scale, 58.892852783203125 * scale, 29.0714111328125 * scale, 50.892852783203125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.restore();
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(0, -10 * scale);
  ctx.translate(45.0714111328125 * scale, 149.39285278320312 * scale);
  ctx.rotate(0);
  round_rect(ctx, -6 * scale, -94.5 * scale, 12 * scale, 250 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 6 * scale);
  ctx.translate(0, 0 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(29.0714111328125 * scale, 50.9 * scale);
  ctx.bezierCurveTo(32.0714111328125 * scale, 35.892852783203125 * scale, 39.0714111328125 * scale, 18.892852783203125 * scale, 45.0714111328125 * scale, 7.892852783203125 * scale);
  ctx.bezierCurveTo(51.0714111328125 * scale, 13.892852783203125 * scale, 56.0714111328125 * scale, 36.892852783203125 * scale, 60.0714111328125 * scale, 50.892852783203125 * scale);
  ctx.bezierCurveTo(52.5714111328125 * scale, 58.892852783203125 * scale, 52.5714111328125 * scale, 58.892852783203125 * scale, 45.0714111328125 * scale, 66.89285278320312 * scale);
  ctx.bezierCurveTo(37.0714111328125 * scale, 58.892852783203125 * scale, 37.0714111328125 * scale, 58.892852783203125 * scale, 29.0714111328125 * scale, 50.892852783203125 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  return can;
};

function create_dragon_spear(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 43 * scale;
  can.height = 209 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(21 * scale, 102.5 * scale);
  round_rect(ctx, -4 * scale, -76.5 * scale, 8 * scale, 163 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.translate(0, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(20 * scale, 10 * scale);
  ctx.bezierCurveTo(25 * scale, 25.5 * scale, 25 * scale, 25.5 * scale, 30 * scale, 41 * scale);
  ctx.bezierCurveTo(25.5 * scale, 38.5 * scale, 25.5 * scale, 38.5 * scale, 21 * scale, 36 * scale);
  ctx.bezierCurveTo(16 * scale, 38.5 * scale, 16 * scale, 38.5 * scale, 11 * scale, 41 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(21 * scale, 1 * scale);
  ctx.bezierCurveTo(28 * scale, 18 * scale, 28 * scale, 18 * scale, 35 * scale, 35 * scale);
  ctx.bezierCurveTo(28.5 * scale, 32 * scale, 28.5 * scale, 32 * scale, 22 * scale, 29 * scale);
  ctx.bezierCurveTo(14.5 * scale, 32.5 * scale, 14.5 * scale, 32.5 * scale, 7 * scale, 36 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(14 * scale, 146 * scale);
  ctx.bezierCurveTo(21 * scale, 146 * scale, 21 * scale, 146 * scale, 28 * scale, 146 * scale);
  ctx.bezierCurveTo(27.5 * scale, 147.5 * scale, 27.5 * scale, 147.5 * scale, 27 * scale, 149 * scale);
  ctx.bezierCurveTo(27 * scale, 160 * scale, 27 * scale, 160 * scale, 27 * scale, 171 * scale);
  ctx.bezierCurveTo(27.5 * scale, 171.5 * scale, 27.5 * scale, 171.5 * scale, 28 * scale, 172 * scale);
  ctx.bezierCurveTo(21 * scale, 172 * scale, 21 * scale, 172 * scale, 14 * scale, 172 * scale);
  ctx.bezierCurveTo(14 * scale, 171.5 * scale, 14 * scale, 171.5 * scale, 14 * scale, 171 * scale);
  ctx.bezierCurveTo(14.5 * scale, 171.5 * scale, 14.5 * scale, 171.5 * scale, 15 * scale, 172 * scale);
  ctx.bezierCurveTo(15 * scale, 160.5 * scale, 15 * scale, 160.5 * scale, 15 * scale, 149 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(21 * scale, 6 * scale);
  ctx.bezierCurveTo(26.5 * scale, 18.5 * scale, 26.5 * scale, 18.5 * scale, 32 * scale, 31 * scale);
  ctx.bezierCurveTo(27 * scale, 29 * scale, 27 * scale, 29 * scale, 22 * scale, 27 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, -20 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, 10 * scale);
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(21 * scale, 102.5 * scale);
  round_rect(ctx, -4 * scale, -76.5 * scale, 8 * scale, 163 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.translate(0, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(20 * scale, 10 * scale);
  ctx.bezierCurveTo(25 * scale, 25.5 * scale, 25 * scale, 25.5 * scale, 30 * scale, 41 * scale);
  ctx.bezierCurveTo(25.5 * scale, 38.5 * scale, 25.5 * scale, 38.5 * scale, 21 * scale, 36 * scale);
  ctx.bezierCurveTo(16 * scale, 38.5 * scale, 16 * scale, 38.5 * scale, 11 * scale, 41 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(21 * scale, 1 * scale);
  ctx.bezierCurveTo(28 * scale, 18 * scale, 28 * scale, 18 * scale, 35 * scale, 35 * scale);
  ctx.bezierCurveTo(28.5 * scale, 32 * scale, 28.5 * scale, 32 * scale, 22 * scale, 29 * scale);
  ctx.bezierCurveTo(14.5 * scale, 32.5 * scale, 14.5 * scale, 32.5 * scale, 7 * scale, 36 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.translate(0, 0 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(14 * scale, 146 * scale);
  ctx.bezierCurveTo(21 * scale, 146 * scale, 21 * scale, 146 * scale, 28 * scale, 146 * scale);
  ctx.bezierCurveTo(27.5 * scale, 147.5 * scale, 27.5 * scale, 147.5 * scale, 27 * scale, 149 * scale);
  ctx.bezierCurveTo(27 * scale, 160 * scale, 27 * scale, 160 * scale, 27 * scale, 171 * scale);
  ctx.bezierCurveTo(27.5 * scale, 171.5 * scale, 27.5 * scale, 171.5 * scale, 28 * scale, 172 * scale);
  ctx.bezierCurveTo(21 * scale, 172 * scale, 21 * scale, 172 * scale, 14 * scale, 172 * scale);
  ctx.bezierCurveTo(14 * scale, 171.5 * scale, 14 * scale, 171.5 * scale, 14 * scale, 171 * scale);
  ctx.bezierCurveTo(14.5 * scale, 171.5 * scale, 14.5 * scale, 171.5 * scale, 15 * scale, 172 * scale);
  ctx.bezierCurveTo(15 * scale, 160.5 * scale, 15 * scale, 160.5 * scale, 15 * scale, 149 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(21 * scale, 6 * scale);
  ctx.bezierCurveTo(26.5 * scale, 18.5 * scale, 26.5 * scale, 18.5 * scale, 32 * scale, 31 * scale);
  ctx.bezierCurveTo(27 * scale, 29 * scale, 27 * scale, 29 * scale, 22 * scale, 27 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  return can;
};

function create_plus_chest(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 200 * scale;
  can.height = 200 * scale;
  ctx.save();
  ctx.translate(112 * scale, 158 * scale);
  round_rect(ctx, -86.5 * scale, -86 * scale, 150 * scale, 35 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(170 * scale, 100 * scale);
  round_rect(ctx, -86.5 * scale, -86 * scale, 35 * scale, 150 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  return can;
};

function create_chest_slot(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 118 * scale;
  can.height = 129 * scale;
  ctx.save();
  ctx.translate(90 * scale, 90 * scale);
  round_rect(ctx, -86.5 * scale, -86 * scale, 110 * scale, 110 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 4);
  ctx.save();
  round_rect(ctx, 30 * scale, 115 * scale, 60 * scale, 5 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 4);
  ctx.save();
  round_rect(ctx, 50 * scale, 117 * scale, 20 * scale, 10 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  return can;
};

function create_chest(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 165 * scale;
  can.height = 123 * scale;
  ctx.save();
  ctx.translate(81 * scale, 65 * scale);
  round_rect(ctx, -78 * scale, -54.5 * scale, 156 * scale, 109 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(81 * scale, 58 * scale);
  round_rect(ctx, -78 * scale, -54.5 * scale, 156 * scale, 109 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4);
  ctx.save();
  ctx.translate(81 * scale, 58 * scale);
  round_rect(ctx, -69 * scale, -47 * scale, 138 * scale, 93 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 4);
  ctx.save();
  ctx.translate(79 * scale, 54 * scale);
  round_rect(ctx, -34 * scale, -40 * scale, 68 * scale, 88 * scale, 13 * scale);
  ctx.restore();
  fill_path(ctx, undefined, color[5], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 13 * scale);
  ctx.bezierCurveTo(43.5 * scale, 55 * scale, 43.5 * scale, 55 * scale, 43 * scale, 101 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 13 * scale);
  ctx.bezierCurveTo(115 * scale, 56 * scale, 115 * scale, 56 * scale, 115 * scale, 101 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 6 * scale);
  ctx.bezierCurveTo(35 * scale, 56 * scale, 36 * scale, 109 * scale, 35 * scale, 110 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[7], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(123 * scale, 6 * scale);
  ctx.bezierCurveTo(123 * scale, 56 * scale, 123 * scale, 56 * scale, 123 * scale, 110 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[7], 4);
  ctx.save();
  ctx.translate(79 * scale, 113 * scale);
  round_rect(ctx, -18 * scale, -2 * scale, 36 * scale, 4 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, undefined, color[8], 4);
  ctx.save();
  ctx.translate(75 * scale, 118 * scale);
  round_rect(ctx, -6 * scale, -2.5 * scale, 20 * scale, 5 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[8]);
  return can;
};

function create_bag(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 86 * scale;
  can.height = 45 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(15 * scale, 15 * scale);
  ctx.bezierCurveTo(16 * scale, 15 * scale, 19.5 * scale, 9 * scale, 24 * scale, 2 * scale);
  ctx.bezierCurveTo(41 * scale, 2 * scale, 41 * scale, 2 * scale, 58 * scale, 2 * scale);
  ctx.bezierCurveTo(64 * scale, 13 * scale, 61 * scale, 8 * scale, 65 * scale, 13 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4);
  ctx.save();
  ctx.translate(43 * scale, 27 * scale);
  ctx.rotate(0);
  round_rect(ctx, -40 * scale, -15 * scale, 80 * scale, 30 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 4);
  ctx.save();
  ctx.translate(43 * scale, 33 * scale);
  ctx.rotate(0);
  round_rect(ctx, -17 * scale, -4.5 * scale, 34 * scale, 9 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 4);
  return can;
};

function create_fur(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 92 * scale;
  can.height = 108 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 10 * scale);
  ctx.bezierCurveTo(37 * scale, 2 * scale, 49 * scale, 0 * scale, 61 * scale, 15 * scale);
  ctx.bezierCurveTo(81 * scale, 31 * scale, 78 * scale, 25 * scale, 79 * scale, 37 * scale);
  ctx.bezierCurveTo(76 * scale, 44 * scale, 81 * scale, 56 * scale, 85 * scale, 63 * scale);
  ctx.bezierCurveTo(91 * scale, 71 * scale, 90 * scale, 78 * scale, 83 * scale, 84 * scale);
  ctx.bezierCurveTo(60 * scale, 98 * scale, 67 * scale, 95 * scale, 57 * scale, 102 * scale);
  ctx.bezierCurveTo(47 * scale, 106 * scale, 43 * scale, 106 * scale, 31 * scale, 98 * scale);
  ctx.bezierCurveTo(22 * scale, 91 * scale, 17 * scale, 89 * scale, 7 * scale, 84 * scale);
  ctx.bezierCurveTo(1 * scale, 77 * scale, 4 * scale, 73 * scale, 7 * scale, 60 * scale);
  ctx.bezierCurveTo(11 * scale, 50 * scale, 5 * scale, 32 * scale, 15 * scale, 27 * scale);
  ctx.bezierCurveTo(26 * scale, 18 * scale, 26 * scale, 24 * scale, 31 * scale, 10 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4);
  return can;
};

function create_verified(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 60 * scale;
  can.height = 60 * scale;
  ctx.translate(-25 * scale, -25 * scale);
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(24 * scale, 50 * scale);
  ctx.bezierCurveTo(32.5 * scale, 54.5 * scale, 32.5 * scale, 54.5 * scale, 41 * scale, 59 * scale);
  ctx.bezierCurveTo(57 * scale, 47 * scale, 57 * scale, 47 * scale, 73 * scale, 35 * scale);
  ctx.bezierCurveTo(57 * scale, 53 * scale, 57 * scale, 53 * scale, 41 * scale, 71 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(24 * scale, 50 * scale);
  ctx.bezierCurveTo(32.5 * scale, 54.5 * scale, 32.5 * scale, 54.5 * scale, 41 * scale, 59 * scale);
  ctx.bezierCurveTo(57 * scale, 47 * scale, 57 * scale, 47 * scale, 73 * scale, 35 * scale);
  ctx.bezierCurveTo(57 * scale, 53 * scale, 57 * scale, 53 * scale, 41 * scale, 71 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  return can;
};

function create_earmuff(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 151 * scale;
  can.height = 80 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 54 * scale);
  ctx.bezierCurveTo(136 * scale, 18 * scale, 129 * scale, 18 * scale, 114 * scale, 13 * scale);
  ctx.bezierCurveTo(51 * scale, 0 * scale, 36 * scale, 16 * scale, 34 * scale, 16 * scale);
  ctx.bezierCurveTo(8 * scale, 28 * scale, 22 * scale, 56 * scale, 21 * scale, 57 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130 * scale, 40 * scale);
  ctx.bezierCurveTo(132 * scale, 35 * scale, 132 * scale, 30 * scale, 132 * scale, 29 * scale);
  ctx.bezierCurveTo(145 * scale, 38 * scale, 144 * scale, 43 * scale, 137 * scale, 54 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(20 * scale, 33 * scale);
  ctx.bezierCurveTo(24 * scale, 44 * scale, 215 * scale, 39 * scale, 23 * scale, 44 * scale);
  ctx.bezierCurveTo(19 * scale, 49 * scale, 19 * scale, 49 * scale, 15 * scale, 54 * scale);
  ctx.bezierCurveTo(4 * scale, 43 * scale, 10 * scale, 35 * scale, 20 * scale, 32 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(18 * scale, 52 * scale);
  ctx.bezierCurveTo(24 * scale, 31 * scale, 34 * scale, 25 * scale, 75 * scale, 23 * scale);
  ctx.bezierCurveTo(130 * scale, 24 * scale, 129 * scale, 32 * scale, 134 * scale, 51 * scale);
  ctx.bezierCurveTo(138 * scale, 70 * scale, 126 * scale, 72 * scale, 90 * scale, 73 * scale);
  ctx.bezierCurveTo(18 * scale, 72 * scale, 15 * scale, 68 * scale, 18 * scale, 54 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4);
  return can;
};

function create_cap_scarf(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 138 * scale;
  can.height = 133 * scale;
  ctx.globalAlpha = draw_shadow ? 0.3 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(26 * scale, 79.640625 * scale);
  ctx.bezierCurveTo(13 * scale, 84.640625 * scale, 9 * scale, 86.640625 * scale, 7 * scale, 78.640625 * scale);
  ctx.bezierCurveTo(6 * scale, 69.640625 * scale, 15 * scale, 67.640625 * scale, 31 * scale, 62.640625 * scale);
  ctx.bezierCurveTo(63 * scale, 55.640625 * scale, 85 * scale, 57.640625 * scale, 104 * scale, 63.640625 * scale);
  ctx.bezierCurveTo(131 * scale, 69.640625 * scale, 132 * scale, 71.640625 * scale, 131 * scale, 78.640625 * scale);
  ctx.bezierCurveTo(131 * scale, 91.640625 * scale, 112 * scale, 80.640625 * scale, 91 * scale, 75.640625 * scale);
  ctx.bezierCurveTo(51 * scale, 70.640625 * scale, 45 * scale, 74.640625 * scale, 28 * scale, 78.640625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(8 * scale, 82.640625 * scale);
  ctx.bezierCurveTo(40 * scale, 107.640625 * scale, 53 * scale, 104.640625 * scale, 67 * scale, 106.640625 * scale);
  ctx.bezierCurveTo(101 * scale, 103.640625 * scale, 117 * scale, 93.640625 * scale, 127 * scale, 84.640625 * scale);
  ctx.bezierCurveTo(135 * scale, 95.640625 * scale, 131 * scale, 107.640625 * scale, 110 * scale, 118.640625 * scale);
  ctx.bezierCurveTo(78 * scale, 129.640625 * scale, 67 * scale, 130.640625 * scale, 27 * scale, 119.640625 * scale);
  ctx.bezierCurveTo(0 * scale, 105.640625 * scale, 8 * scale, 83.640625 * scale, 10 * scale, 84.640625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(8 * scale, 73.640625 * scale);
  ctx.bezierCurveTo(7 * scale, 23.640625 * scale, 33 * scale, 19.640625 * scale, 71 * scale, 17.640625 * scale);
  ctx.bezierCurveTo(129 * scale, 19.640625 * scale, 130 * scale, 45.640625 * scale, 130 * scale, 76.640625 * scale);
  ctx.bezierCurveTo(90 * scale, 63.640625 * scale, 85 * scale, 63.640625 * scale, 73 * scale, 63.640625 * scale);
  ctx.bezierCurveTo(38 * scale, 63.640625 * scale, 33 * scale, 66.640625 * scale, 8 * scale, 73.640625 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72 * scale, 28.640625 * scale);
  ctx.bezierCurveTo(51 * scale, 25.640625 * scale, 56 * scale, 7.640625 * scale, 70 * scale, 5.640625 * scale);
  ctx.bezierCurveTo(94 * scale, 7.640625 * scale, 87 * scale, 29.640625 * scale, 72 * scale, 28.640625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(51 * scale, 26.640625 * scale);
  ctx.bezierCurveTo(42 * scale, 29.640625 * scale, 43 * scale, 31.640625 * scale, 42 * scale, 37.640625 * scale);
  fill_path(ctx, undefined, color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(90 * scale, 26.640625 * scale);
  ctx.bezierCurveTo(100 * scale, 28.640625 * scale, 98 * scale, 34.640625 * scale, 99 * scale, 38.640625 * scale);
  fill_path(ctx, undefined, color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(26 * scale, 79.640625 * scale);
  ctx.bezierCurveTo(13 * scale, 84.640625 * scale, 9 * scale, 86.640625 * scale, 7 * scale, 78.640625 * scale);
  ctx.bezierCurveTo(6 * scale, 69.640625 * scale, 15 * scale, 67.640625 * scale, 31 * scale, 62.640625 * scale);
  ctx.bezierCurveTo(63 * scale, 55.640625 * scale, 85 * scale, 57.640625 * scale, 104 * scale, 63.640625 * scale);
  ctx.bezierCurveTo(131 * scale, 69.640625 * scale, 132 * scale, 71.640625 * scale, 131 * scale, 78.640625 * scale);
  ctx.bezierCurveTo(131 * scale, 91.640625 * scale, 112 * scale, 80.640625 * scale, 91 * scale, 75.640625 * scale);
  ctx.bezierCurveTo(51 * scale, 70.640625 * scale, 45 * scale, 74.640625 * scale, 28 * scale, 78.640625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(8 * scale, 82.640625 * scale);
  ctx.bezierCurveTo(40 * scale, 107.640625 * scale, 53 * scale, 104.640625 * scale, 67 * scale, 106.640625 * scale);
  ctx.bezierCurveTo(101 * scale, 103.640625 * scale, 117 * scale, 93.640625 * scale, 127 * scale, 84.640625 * scale);
  ctx.bezierCurveTo(135 * scale, 95.640625 * scale, 131 * scale, 107.640625 * scale, 110 * scale, 118.640625 * scale);
  ctx.bezierCurveTo(78 * scale, 129.640625 * scale, 67 * scale, 130.640625 * scale, 27 * scale, 119.640625 * scale);
  ctx.bezierCurveTo(0 * scale, 105.640625 * scale, 8 * scale, 83.640625 * scale, 10 * scale, 84.640625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  return can;
};

function create_spike(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 170;
  var h = scale * 172;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  ctx.translate(x, y + (7 * scale));
  ctx.globalAlpha = draw_shadow ? 0.5 : 0;
  circle(ctx, 0, 0, 60 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -7 * scale);
  ctx.save();
  for (var i = 0; i < 10; i++) {
    ctx.rotate(Math.PI / 5);
    ctx.save();
    ctx.translate(65 * scale, 0);
    round_regular_polygon(ctx, 3, 20 * scale, 4 * scale);
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.restore();
  }
  ctx.restore();
  circle(ctx, 0, 0, 60 * scale, 0);
  fill_path(ctx, color[3], color[4], 4 * scale);
  circle(ctx, 0, 0, 40 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 0, 0, 25 * scale);
  fill_path(ctx, color[6], color[7], 8 * scale);
  return can;
};

function create_spiketimer(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 170;
  var h = scale * 172;
  var x = w / 2;
  var y = h / 2;
  can.width = w;
  can.height = h;
  ctx.translate(x, y);
  ctx.save();
  for (var i = 0; i < 10; i++) {
    ctx.rotate(Math.PI / 5);
    ctx.save();
    ctx.translate(65 * scale, 0);
    round_regular_polygon(ctx, 3, 18 * scale, 4 * scale);
    fill_path(ctx, color[0]);
    ctx.restore();
  }
  ctx.restore();
  circle(ctx, 0, 0, 40 * scale, 0);
  fill_path(ctx, undefined, color[0], 6 * scale);
  circle(ctx, 0, 0, 20 * scale, 0);
  fill_path(ctx, color[0]);
  return can;
};

function create_spike_stone(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 170 * scale;
  can.height = 170 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.save();
  ctx.translate(85 * scale, 88 * scale);
  ctx.rotate(1.4);
  round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(85 * scale, 80 * scale);
  for (var i = 0; i < 10; i++) {
    ctx.rotate(Math.PI / 5);
    ctx.save();
    ctx.translate(65 * scale, 0);
    round_regular_polygon(ctx, 3, 21 * scale, 4 * scale);
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.restore();
  }
  ctx.save();
  ctx.translate(0 * scale, 0 * scale);
  ctx.rotate(1.4);
  round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.rotate(0.64);
  round_regular_polygon(ctx, 7, 40 * scale, 10 * scale);
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.rotate(0.12);
  round_regular_polygon(ctx, 7, 23 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[7]);
  return can;
};

function create_spike_gold(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 170 * scale;
  can.height = 170 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 3 * scale);
  ctx.save();
  ctx.translate(85 * scale, 95 * scale);
  ctx.rotate(1.4);
  round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(85 * scale, 82 * scale);
  for (var i = 0; i < 10; i++) {
    ctx.rotate(Math.PI / 5);
    ctx.save();
    ctx.translate(65 * scale, 0);
    round_regular_polygon(ctx, 3, 21 * scale, 4 * scale);
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.restore();
  }
  ctx.save();
  ctx.translate(0 * scale, 0 * scale);
  ctx.rotate(1);
  round_regular_polygon(ctx, 8, 60 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.rotate(0.56);
  round_regular_polygon(ctx, 8, 40 * scale, 10 * scale);
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.rotate(0.28);
  round_regular_polygon(ctx, 8, 28 * scale, 8 * scale);
  fill_path(ctx, color[7]);
  ctx.restore();
  return can;
};

function create_spike_diamond(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 170 * scale;
  can.height = 170 * scale;
  ctx.translate(0, 3 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(85 * scale, 95 * scale);
  ctx.rotate(1.4);
  round_regular_polygon(ctx, 7, 60 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(85 * scale, 82 * scale);
  for (var i = 0; i < 10; i++) {
    ctx.rotate(Math.PI / 5);
    ctx.save();
    ctx.translate(65 * scale, 0);
    round_regular_polygon(ctx, 3, 21 * scale, 4 * scale);
    fill_path(ctx, color[1], color[2], 4 * scale);
    ctx.restore();
  }
  ctx.save();
  ctx.translate(0 * scale, 0 * scale);
  ctx.rotate(0.2);
  round_regular_polygon(ctx, 9, 60 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.rotate(-0.32);
  round_regular_polygon(ctx, 9, 38 * scale, 10 * scale);
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.rotate(0.68);
  round_regular_polygon(ctx, 9, 20 * scale, 8 * scale);
  fill_path(ctx, color[7], color[8], 6 * scale);
  ctx.restore();
  return can;
};

function create_hammer(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 69 * scale;
  can.height = 120 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.save();
  ctx.translate(30 * scale, 84 * scale);
  round_rect(ctx, -6 * scale, -66.5 * scale, 8 * scale, 100 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(30 * scale, 45 * scale);
  round_rect(ctx, -9.5 * scale, -6.5 * scale, 16 * scale, 13 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(30 * scale, 17 * scale);
  round_rect(ctx, -7.5 * scale, -5.5 * scale, 12 * scale, 11 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(30 * scale, 31 * scale);
  round_rect(ctx, -26 * scale, -14.5 * scale, 52 * scale, 29 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(36 * scale, 79.140625 * scale);
  round_rect(ctx, -6 * scale, -66.5 * scale, 8 * scale, 100 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 3 * scale);
  ctx.save();
  ctx.translate(35 * scale, 40.140625 * scale);
  round_rect(ctx, -9.5 * scale, -6.5 * scale, 16 * scale, 13 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 3 * scale);
  ctx.save();
  ctx.translate(35 * scale, 12.140625 * scale);
  round_rect(ctx, -7.5 * scale, -5.5 * scale, 12 * scale, 11 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 3 * scale);
  ctx.save();
  ctx.translate(34.5 * scale, 26.140625 * scale);
  round_rect(ctx, -26 * scale, -14.5 * scale, 52 * scale, 29 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 3 * scale);
  return can;
};

function create_clock_day(scale) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 321 * scale;
  can.height = 345 * scale;
  ctx.translate(0, 5 * scale);
  ctx.translate(0, 20 * scale);
  circle(ctx, 160.5 * scale, 159.5 * scale, 156.39595138242822 * scale);
  fill_path(ctx, "#322413", "#322413", 4 * scale);
  ctx.translate(0, -20 * scale);
  circle(ctx, 160.5 * scale, 159.5 * scale, 156.39595138242822 * scale);
  fill_path(ctx, "#392C16", "#5E3E1A", 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31.999969482421875 * scale, 163.07290649414062 * scale);
  ctx.bezierCurveTo(22.999969482421875 * scale, 67.07290649414062 * scale, 106 * scale, 20.072906494140625 * scale, 162 * scale, 23.072906494140625 * scale);
  ctx.bezierCurveTo(269.9999694824219 * scale, 31.072906494140625 * scale, 292.9999694824219 * scale, 120.07290649414062 * scale, 294.9999694824219 * scale, 161.07290649414062 * scale);
  ctx.bezierCurveTo(165.49996948242188 * scale, 162.07290649414062 * scale, 165.49996948242188 * scale, 162.07290649414062 * scale, 35.999969482421875 * scale, 163.07290649414062 * scale);
  ctx.closePath();
  fill_path(ctx, "#12432D");
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(32.999969482421875 * scale, 165.07290649414062 * scale);
  ctx.bezierCurveTo(16.999969482421875 * scale, 221.07290649414062 * scale, 85 * scale, 289.0729064941406 * scale, 156 * scale, 294.0729064941406 * scale);
  ctx.bezierCurveTo(263.9999694824219 * scale, 293.0729064941406 * scale, 295.9999694824219 * scale, 199.07290649414062 * scale, 294.9999694824219 * scale, 159.07290649414062 * scale);
  ctx.closePath();
  fill_path(ctx, "#3A2A0D");
  circle(ctx, 161 * scale, 158.07290649414062 * scale, 133.4053971921676 * scale);
  fill_path(ctx, undefined, "#5E3E1A", 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31.999969482421875 * scale, 161.62844848632812 * scale);
  ctx.bezierCurveTo(162.49996948242188 * scale, 161.62844848632812 * scale, 162.49996948242188 * scale, 161.62844848632812 * scale, 292.9999694824219 * scale, 161.62844848632812 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3E1A", 12 * scale);
  ctx.translate(0, 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(66 * scale, 158.29513549804688 * scale);
  ctx.bezierCurveTo(86 * scale, 158.29513549804688 * scale, 86 * scale, 158.29513549804688 * scale, 106 * scale, 158.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#c7a726", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(57.999969482421875 * scale, 117.29513549804688 * scale);
  ctx.bezierCurveTo(85 * scale, 128.29513549804688 * scale, 85 * scale, 128.29513549804688 * scale, 113 * scale, 139.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#c7a726", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(95 * scale, 90.29513549804688 * scale);
  ctx.bezierCurveTo(112 * scale, 105.79513549804688 * scale, 112 * scale, 105.79513549804688 * scale, 129 * scale, 121.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#c7a726", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(116 * scale, 52.850677490234375 * scale);
  ctx.bezierCurveTo(130 * scale, 83.85067749023438 * scale, 130 * scale, 83.85067749023438 * scale, 144 * scale, 114.85067749023438 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#c7a726", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(159 * scale, 61.295135498046875 * scale);
  ctx.bezierCurveTo(160.49996948242188 * scale, 92.29513549804688 * scale, 160.49996948242188 * scale, 92.29513549804688 * scale, 160 * scale, 123.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#c7a726", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(203 * scale, 51.295135498046875 * scale);
  ctx.bezierCurveTo(190.49996948242188 * scale, 83.29513549804688 * scale, 190.49996948242188 * scale, 83.29513549804688 * scale, 176 * scale, 115.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#c7a726", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(225 * scale, 89.29513549804688 * scale);
  ctx.bezierCurveTo(210.49996948242188 * scale, 104.79513549804688 * scale, 210.49996948242188 * scale, 104.79513549804688 * scale, 194 * scale, 120.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#c7a726", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(266.9999694824219 * scale, 112.29513549804688 * scale);
  ctx.bezierCurveTo(233.49996948242188 * scale, 127.29513549804688 * scale, 233.49996948242188 * scale, 127.29513549804688 * scale, 199 * scale, 142.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#c7a726", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(256.9999694824219 * scale, 155.29513549804688 * scale);
  ctx.bezierCurveTo(238.49996948242188 * scale, 156.29513549804688 * scale, 238.49996948242188 * scale, 156.29513549804688 * scale, 219 * scale, 157.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#c7a726", 12 * scale);
  ctx.translate(0, -8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(66 * scale, 158.29513549804688 * scale);
  ctx.bezierCurveTo(86 * scale, 158.29513549804688 * scale, 86 * scale, 158.29513549804688 * scale, 106 * scale, 158.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(57.999969482421875 * scale, 117.29513549804688 * scale);
  ctx.bezierCurveTo(85 * scale, 128.29513549804688 * scale, 85 * scale, 128.29513549804688 * scale, 113 * scale, 139.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(95 * scale, 90.29513549804688 * scale);
  ctx.bezierCurveTo(112 * scale, 105.79513549804688 * scale, 112 * scale, 105.79513549804688 * scale, 129 * scale, 121.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(116 * scale, 52.850677490234375 * scale);
  ctx.bezierCurveTo(130 * scale, 83.85067749023438 * scale, 130 * scale, 83.85067749023438 * scale, 144 * scale, 114.85067749023438 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(159 * scale, 61.295135498046875 * scale);
  ctx.bezierCurveTo(160.49996948242188 * scale, 92.29513549804688 * scale, 160.49996948242188 * scale, 92.29513549804688 * scale, 160 * scale, 123.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(203 * scale, 51.295135498046875 * scale);
  ctx.bezierCurveTo(190.49996948242188 * scale, 83.29513549804688 * scale, 190.49996948242188 * scale, 83.29513549804688 * scale, 176 * scale, 115.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(225 * scale, 89.29513549804688 * scale);
  ctx.bezierCurveTo(210.49996948242188 * scale, 104.79513549804688 * scale, 210.49996948242188 * scale, 104.79513549804688 * scale, 194 * scale, 120.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(266.9999694824219 * scale, 112.29513549804688 * scale);
  ctx.bezierCurveTo(233.49996948242188 * scale, 127.29513549804688 * scale, 233.49996948242188 * scale, 127.29513549804688 * scale, 199 * scale, 142.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(256.9999694824219 * scale, 155.29513549804688 * scale);
  ctx.bezierCurveTo(238.49996948242188 * scale, 156.29513549804688 * scale, 238.49996948242188 * scale, 156.29513549804688 * scale, 219 * scale, 157.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#EDCE4F", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(94.00003051757812 * scale, 164.40341186523438 * scale);
  ctx.bezierCurveTo(162.50003051757812 * scale, 164.40341186523438 * scale, 230.00003051757812 * scale, 165.40341186523438 * scale, 231.00003051757812 * scale, 164.40341186523438 * scale);
  ctx.bezierCurveTo(214.00003051757812 * scale, 267.4034118652344 * scale, 92.00003051757812 * scale, 243.40341186523438 * scale, 93.00003051757812 * scale, 165.40341186523438 * scale);
  ctx.closePath();
  fill_path(ctx, "#704618", "#5D3D1A", 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(96 * scale, 166 * scale);
  ctx.bezierCurveTo(88 * scale, 117 * scale, 129 * scale, 92 * scale, 161 * scale, 91 * scale);
  ctx.bezierCurveTo(201 * scale, 90 * scale, 223 * scale, 121 * scale, 230 * scale, 161 * scale);
  ctx.closePath();
  fill_path(ctx, "#ECBE35", "#EDCE4F", 8 * scale);
  circle(ctx, 160.00003051757812 * scale, 166.49432373046875 * scale, 28.30194339616981 * scale);
  fill_path(ctx, "#392C16", "#5E3E1A", 10 * scale);
  return can;
};

function create_clock_night(scale) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 321 * scale;
  can.height = 345 * scale;
  ctx.translate(0, 5 * scale);
  ctx.translate(0, 20 * scale);
  circle(ctx, 160.5 * scale, 159.5 * scale, 156.39595138242822 * scale);
  fill_path(ctx, "#322413", "#322413", 4 * scale);
  ctx.translate(0, -20 * scale);
  circle(ctx, 160.5 * scale, 159.5 * scale, 156.39595138242822 * scale);
  fill_path(ctx, "#392C16", "#5E3E1A", 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31.999969482421875 * scale, 163.07290649414062 * scale);
  ctx.bezierCurveTo(22.999969482421875 * scale, 67.07290649414062 * scale, 106 * scale, 20.072906494140625 * scale, 162 * scale, 23.072906494140625 * scale);
  ctx.bezierCurveTo(269.9999694824219 * scale, 31.072906494140625 * scale, 292.9999694824219 * scale, 120.07290649414062 * scale, 294.9999694824219 * scale, 161.07290649414062 * scale);
  ctx.bezierCurveTo(165.49996948242188 * scale, 162.07290649414062 * scale, 165.49996948242188 * scale, 162.07290649414062 * scale, 35.999969482421875 * scale, 163.07290649414062 * scale);
  ctx.closePath();
  fill_path(ctx, "#3A2A0D");
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(32.999969482421875 * scale, 165.07290649414062 * scale);
  ctx.bezierCurveTo(16.999969482421875 * scale, 221.07290649414062 * scale, 85 * scale, 289.0729064941406 * scale, 156 * scale, 294.0729064941406 * scale);
  ctx.bezierCurveTo(263.9999694824219 * scale, 293.0729064941406 * scale, 295.9999694824219 * scale, 199.07290649414062 * scale, 294.9999694824219 * scale, 159.07290649414062 * scale);
  ctx.closePath();
  fill_path(ctx, "#071A1B");
  circle(ctx, 161 * scale, 158.07290649414062 * scale, 133.4053971921676 * scale);
  fill_path(ctx, undefined, "#5E3E1A", 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31.999969482421875 * scale, 161.62844848632812 * scale);
  ctx.bezierCurveTo(162.49996948242188 * scale, 161.62844848632812 * scale, 162.49996948242188 * scale, 161.62844848632812 * scale, 292.9999694824219 * scale, 161.62844848632812 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3E1A", 12 * scale);
  ctx.translate(0, 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(66 * scale, 158.29513549804688 * scale);
  ctx.bezierCurveTo(86 * scale, 158.29513549804688 * scale, 86 * scale, 158.29513549804688 * scale, 106 * scale, 158.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#281C08", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(57.999969482421875 * scale, 117.29513549804688 * scale);
  ctx.bezierCurveTo(85 * scale, 128.29513549804688 * scale, 85 * scale, 128.29513549804688 * scale, 113 * scale, 139.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#281C08", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(95 * scale, 90.29513549804688 * scale);
  ctx.bezierCurveTo(112 * scale, 105.79513549804688 * scale, 112 * scale, 105.79513549804688 * scale, 129 * scale, 121.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#281C08", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(116 * scale, 52.850677490234375 * scale);
  ctx.bezierCurveTo(130 * scale, 83.85067749023438 * scale, 130 * scale, 83.85067749023438 * scale, 144 * scale, 114.85067749023438 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#281C08", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(159 * scale, 61.295135498046875 * scale);
  ctx.bezierCurveTo(160.49996948242188 * scale, 92.29513549804688 * scale, 160.49996948242188 * scale, 92.29513549804688 * scale, 160 * scale, 123.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#281C08", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(203 * scale, 51.295135498046875 * scale);
  ctx.bezierCurveTo(190.49996948242188 * scale, 83.29513549804688 * scale, 190.49996948242188 * scale, 83.29513549804688 * scale, 176 * scale, 115.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#281C08", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(225 * scale, 89.29513549804688 * scale);
  ctx.bezierCurveTo(210.49996948242188 * scale, 104.79513549804688 * scale, 210.49996948242188 * scale, 104.79513549804688 * scale, 194 * scale, 120.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#281C08", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(266.9999694824219 * scale, 112.29513549804688 * scale);
  ctx.bezierCurveTo(233.49996948242188 * scale, 127.29513549804688 * scale, 233.49996948242188 * scale, 127.29513549804688 * scale, 199 * scale, 142.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#281C08", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(256.9999694824219 * scale, 155.29513549804688 * scale);
  ctx.bezierCurveTo(238.49996948242188 * scale, 156.29513549804688 * scale, 238.49996948242188 * scale, 156.29513549804688 * scale, 219 * scale, 157.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#281C08", 12 * scale);
  ctx.translate(0, -8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(66 * scale, 158.29513549804688 * scale);
  ctx.bezierCurveTo(86 * scale, 158.29513549804688 * scale, 86 * scale, 158.29513549804688 * scale, 106 * scale, 158.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3C10", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(57.999969482421875 * scale, 117.29513549804688 * scale);
  ctx.bezierCurveTo(85 * scale, 128.29513549804688 * scale, 85 * scale, 128.29513549804688 * scale, 113 * scale, 139.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3C10", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(95 * scale, 90.29513549804688 * scale);
  ctx.bezierCurveTo(112 * scale, 105.79513549804688 * scale, 112 * scale, 105.79513549804688 * scale, 129 * scale, 121.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3C10", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(116 * scale, 52.850677490234375 * scale);
  ctx.bezierCurveTo(130 * scale, 83.85067749023438 * scale, 130 * scale, 83.85067749023438 * scale, 144 * scale, 114.85067749023438 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3C10", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(159 * scale, 61.295135498046875 * scale);
  ctx.bezierCurveTo(160.49996948242188 * scale, 92.29513549804688 * scale, 160.49996948242188 * scale, 92.29513549804688 * scale, 160 * scale, 123.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3C10", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(203 * scale, 51.295135498046875 * scale);
  ctx.bezierCurveTo(190.49996948242188 * scale, 83.29513549804688 * scale, 190.49996948242188 * scale, 83.29513549804688 * scale, 176 * scale, 115.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3C10", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(225 * scale, 89.29513549804688 * scale);
  ctx.bezierCurveTo(210.49996948242188 * scale, 104.79513549804688 * scale, 210.49996948242188 * scale, 104.79513549804688 * scale, 194 * scale, 120.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3C10", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(266.9999694824219 * scale, 112.29513549804688 * scale);
  ctx.bezierCurveTo(233.49996948242188 * scale, 127.29513549804688 * scale, 233.49996948242188 * scale, 127.29513549804688 * scale, 199 * scale, 142.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3C10", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(256.9999694824219 * scale, 155.29513549804688 * scale);
  ctx.bezierCurveTo(238.49996948242188 * scale, 156.29513549804688 * scale, 238.49996948242188 * scale, 156.29513549804688 * scale, 219 * scale, 157.29513549804688 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, "#5E3C10", 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(96 * scale, 166 * scale);
  ctx.bezierCurveTo(88 * scale, 117 * scale, 129 * scale, 92 * scale, 161 * scale, 91 * scale);
  ctx.bezierCurveTo(201 * scale, 90 * scale, 223 * scale, 121 * scale, 230 * scale, 161 * scale);
  ctx.closePath();
  fill_path(ctx, "#704618", "#5D3D1A", 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(94.00003051757812 * scale, 164.40341186523438 * scale);
  ctx.bezierCurveTo(162.50003051757812 * scale, 164.40341186523438 * scale, 230.00003051757812 * scale, 165.40341186523438 * scale, 231.00003051757812 * scale, 164.40341186523438 * scale);
  ctx.bezierCurveTo(214.00003051757812 * scale, 267.4034118652344 * scale, 92.00003051757812 * scale, 243.40341186523438 * scale, 93.00003051757812 * scale, 165.40341186523438 * scale);
  ctx.closePath();
  fill_path(ctx, "#E1DDD5", "#EAE7E4", 8 * scale);
  circle(ctx, 160.00003051757812 * scale, 166.49432373046875 * scale, 28.30194339616981 * scale);
  fill_path(ctx, "#392C16", "#5E3E1A", 10 * scale);
  return can;
};

function create_arrow_clock(scale) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 321 * scale;
  can.height = 345 * scale;
  ctx.translate(0, 5 * scale);
  circle(ctx, 161.00003051757812 * scale, 165.40341186523438 * scale, 20.808652046684813 * scale);
  fill_path(ctx, "#C09D6F", "#A37943", 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(162.00003051757812 * scale, 48.403411865234375 * scale);
  ctx.bezierCurveTo(172.50003051757812 * scale, 67.40341186523438 * scale, 172.50003051757812 * scale, 67.40341186523438 * scale, 183.00003051757812 * scale, 86.40341186523438 * scale);
  ctx.bezierCurveTo(160.50003051757812 * scale, 86.40341186523438 * scale, 160.50003051757812 * scale, 86.40341186523438 * scale, 138.00003051757812 * scale, 86.40341186523438 * scale);
  ctx.closePath();
  fill_path(ctx, "#C09D6F", "#A37943", 10 * scale);
  ctx.save();
  ctx.translate(161.50003051757812 * scale, 117.90341186523438 * scale);
  round_rect(ctx, -5.5 * scale, -37.5 * scale, 11 * scale, 75 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, "#C09D6F", "#A37943", 10 * scale);
  ctx.save();
  ctx.translate(162.00003051757812 * scale, 78.90341186523438 * scale);
  round_rect(ctx, -10 * scale, -5.5 * scale, 20 * scale, 11 * scale, 1 * scale);
  ctx.restore();
  fill_path(ctx, "#C09D6F");
  circle(ctx, 161.00003051757812 * scale, 163.6761474609375 * scale, 17.08800749063506 * scale);
  fill_path(ctx, "#C09D6F");
  return can;
};

function create_island(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  if (i == 0) {
    can.width = 566 * scale;
    can.height = 429 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(312.625 * scale, 39.046875 * scale);
    ctx.bezierCurveTo(456.625 * scale, 60.046875 * scale, 521.625 * scale, 134.046875 * scale, 528.625 * scale, 199.046875 * scale);
    ctx.bezierCurveTo(540.625 * scale, 298.046875 * scale, 491.625 * scale, 364.046875 * scale, 405.625 * scale, 394.046875 * scale);
    ctx.bezierCurveTo(270.625 * scale, 429.046875 * scale, 182.625 * scale, 395.046875 * scale, 100.625 * scale, 344.046875 * scale);
    ctx.bezierCurveTo(15.625 * scale, 283.046875 * scale, 20.625 * scale, 195.046875 * scale, 33.625 * scale, 158.046875 * scale);
    ctx.bezierCurveTo(56.625 * scale, 80.046875 * scale, 102.625 * scale, 46.046875 * scale, 183.625 * scale, 33.046875 * scale);
    ctx.bezierCurveTo(225.625 * scale, 25.046875 * scale, 270.625 * scale, 30.046875 * scale, 312.625 * scale, 39.046875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else if (i == 1) {
    var can = document.createElement("canvas");
    var ctx = can.getContext("2d");
    can.width = 511 * scale;
    can.height = 408 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(141.625 * scale, 49.296875 * scale);
    ctx.bezierCurveTo(225.625 * scale, 10.296875 * scale, 320.625 * scale, 16.296875 * scale, 390.625 * scale, 39.296875 * scale);
    ctx.bezierCurveTo(476.625 * scale, 71.296875 * scale, 483.625 * scale, 142.296875 * scale, 486.625 * scale, 197.296875 * scale);
    ctx.bezierCurveTo(491.625 * scale, 289.296875 * scale, 462.625 * scale, 317.296875 * scale, 417.625 * scale, 351.296875 * scale);
    ctx.bezierCurveTo(367.625 * scale, 385.296875 * scale, 313.625 * scale, 404.296875 * scale, 218.625 * scale, 395.296875 * scale);
    ctx.bezierCurveTo(108.625 * scale, 381.296875 * scale, 81.625 * scale, 350.296875 * scale, 52.625 * scale, 305.296875 * scale);
    ctx.bezierCurveTo(16.625 * scale, 244.296875 * scale, 23.625 * scale, 171.296875 * scale, 37.625 * scale, 145.296875 * scale);
    ctx.bezierCurveTo(65.625 * scale, 84.296875 * scale, 97.625 * scale, 74.296875 * scale, 141.625 * scale, 49.296875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else if (i == 2) {
    var can = document.createElement("canvas");
    var ctx = can.getContext("2d");
    can.width = 504 * scale;
    can.height = 408 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(153.625 * scale, 46.296875 * scale);
    ctx.bezierCurveTo(271.625 * scale, 17.296875 * scale, 345.625 * scale, 35.296875 * scale, 410.625 * scale, 71.296875 * scale);
    ctx.bezierCurveTo(473.625 * scale, 109.296875 * scale, 478.625 * scale, 167.296875 * scale, 473.625 * scale, 205.296875 * scale);
    ctx.bezierCurveTo(462.625 * scale, 295.296875 * scale, 438.625 * scale, 316.296875 * scale, 388.625 * scale, 345.296875 * scale);
    ctx.bezierCurveTo(331.625 * scale, 374.296875 * scale, 273.625 * scale, 392.296875 * scale, 180.625 * scale, 387.296875 * scale);
    ctx.bezierCurveTo(111.625 * scale, 380.296875 * scale, 86.625 * scale, 360.296875 * scale, 51.625 * scale, 309.296875 * scale);
    ctx.bezierCurveTo(23.625 * scale, 267.296875 * scale, 25.625 * scale, 226.296875 * scale, 27.625 * scale, 175.296875 * scale);
    ctx.bezierCurveTo(37.625 * scale, 99.296875 * scale, 88.625 * scale, 57.296875 * scale, 153.625 * scale, 46.296875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  }
  return can;
};

function create_sign(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 450 * scale;
  can.height = 260 * scale;
  ctx.translate(10 * scale, 10 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(20 * scale, 20 * scale);
  round_rect(ctx, 0, 0, 400 * scale, 220 * scale, 30 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-20 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(9 * scale, 5 * scale);
  ctx.bezierCurveTo(381 * scale, 2 * scale, 197 * scale, 4.5 * scale, 385 * scale, 4 * scale);
  ctx.bezierCurveTo(397 * scale, 4 * scale, 401 * scale, 4 * scale, 399 * scale, 23 * scale);
  ctx.bezierCurveTo(367 * scale, 27 * scale, 367 * scale, 27 * scale, 335 * scale, 31 * scale);
  ctx.bezierCurveTo(366.5 * scale, 33.5 * scale, 366.5 * scale, 33.5 * scale, 398 * scale, 36 * scale);
  ctx.bezierCurveTo(398 * scale, 41.5 * scale, 398 * scale, 41.5 * scale, 398 * scale, 47 * scale);
  ctx.bezierCurveTo(398 * scale, 56 * scale, 399 * scale, 56 * scale, 386 * scale, 56 * scale);
  ctx.bezierCurveTo(200.5 * scale, 56.5 * scale, 200.5 * scale, 56.5 * scale, 15 * scale, 57 * scale);
  ctx.bezierCurveTo(2 * scale, 55 * scale, 4 * scale, 52 * scale, 4 * scale, 43 * scale);
  ctx.bezierCurveTo(4 * scale, 30.5 * scale, 4 * scale, 30.5 * scale, 4 * scale, 18 * scale);
  ctx.bezierCurveTo(16 * scale, 18.5 * scale, 16 * scale, 18.5 * scale, 28 * scale, 19 * scale);
  ctx.bezierCurveTo(18.5 * scale, 12 * scale, 18.5 * scale, 12 * scale, 9 * scale, 5 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(5 * scale, 70 * scale);
  ctx.bezierCurveTo(5 * scale, 58 * scale, 5 * scale, 55 * scale, 17 * scale, 57 * scale);
  ctx.bezierCurveTo(203 * scale, 57 * scale, 203 * scale, 57 * scale, 389 * scale, 57 * scale);
  ctx.bezierCurveTo(400 * scale, 57 * scale, 400 * scale, 59 * scale, 400 * scale, 69 * scale);
  ctx.bezierCurveTo(400.5 * scale, 83.5 * scale, 400.5 * scale, 83.5 * scale, 401 * scale, 98 * scale);
  ctx.bezierCurveTo(402 * scale, 108 * scale, 401 * scale, 108 * scale, 388 * scale, 108 * scale);
  ctx.bezierCurveTo(201.5 * scale, 108 * scale, 201.5 * scale, 108 * scale, 15 * scale, 108 * scale);
  ctx.bezierCurveTo(1 * scale, 106 * scale, 5 * scale, 106 * scale, 5 * scale, 87 * scale);
  ctx.bezierCurveTo(33 * scale, 84.5 * scale, 33 * scale, 84.5 * scale, 61 * scale, 82 * scale);
  ctx.bezierCurveTo(33.5 * scale, 76.5 * scale, 33.5 * scale, 76.5 * scale, 6 * scale, 71 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(19 * scale, 158 * scale);
  ctx.bezierCurveTo(2 * scale, 159 * scale, 4 * scale, 156 * scale, 5 * scale, 118 * scale);
  ctx.bezierCurveTo(4 * scale, 110 * scale, 6 * scale, 107 * scale, 26 * scale, 109 * scale);
  ctx.bezierCurveTo(206.5 * scale, 109 * scale, 206.5 * scale, 109 * scale, 387 * scale, 109 * scale);
  ctx.bezierCurveTo(400 * scale, 108 * scale, 400 * scale, 108 * scale, 398 * scale, 127 * scale);
  ctx.bezierCurveTo(384.5 * scale, 130 * scale, 384.5 * scale, 130 * scale, 371 * scale, 133 * scale);
  ctx.bezierCurveTo(385.5 * scale, 138 * scale, 385.5 * scale, 138 * scale, 400 * scale, 143 * scale);
  ctx.bezierCurveTo(402 * scale, 156 * scale, 402 * scale, 162 * scale, 385 * scale, 160 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(4 * scale, 183 * scale);
  ctx.bezierCurveTo(1 * scale, 163 * scale, 4 * scale, 158 * scale, 28 * scale, 161 * scale);
  ctx.bezierCurveTo(207.5 * scale, 161 * scale, 207.5 * scale, 161 * scale, 387 * scale, 161 * scale);
  ctx.bezierCurveTo(401 * scale, 159 * scale, 400 * scale, 164 * scale, 400 * scale, 177 * scale);
  ctx.bezierCurveTo(364.5 * scale, 184 * scale, 364.5 * scale, 184 * scale, 329 * scale, 191 * scale);
  ctx.bezierCurveTo(364.5 * scale, 192.5 * scale, 364.5 * scale, 192.5 * scale, 400 * scale, 194 * scale);
  ctx.bezierCurveTo(403 * scale, 209 * scale, 401 * scale, 214 * scale, 385 * scale, 213 * scale);
  ctx.bezierCurveTo(201.5 * scale, 213 * scale, 201.5 * scale, 213 * scale, 18 * scale, 213 * scale);
  ctx.bezierCurveTo(3 * scale, 213 * scale, 2 * scale, 213 * scale, 4 * scale, 198 * scale);
  ctx.bezierCurveTo(12.5 * scale, 193 * scale, 12.5 * scale, 193 * scale, 21 * scale, 188 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[1], 12 * scale);
  circle(ctx, 41 * scale, 30 * scale, 14.7648230602334 * scale);
  fill_path(ctx, color[3], color[1], 12 * scale);
  circle(ctx, 369 * scale, 30 * scale, 15.556349186104045 * scale);
  fill_path(ctx, color[3], color[1], 12 * scale);
  circle(ctx, 364 * scale, 190 * scale, 15.620499351813308 * scale);
  fill_path(ctx, color[3], color[1], 12 * scale);
  circle(ctx, 41 * scale, 186 * scale, 15.556349186104045 * scale);
  fill_path(ctx, color[3], color[1], 12 * scale);
  return can;
};

function create_sign_button(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 450 * scale;
  can.height = 260 * scale;
  ctx.translate(10 * scale, 10 * scale);
  if (i == 1) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(9 * scale, 5 * scale);
    ctx.bezierCurveTo(381 * scale, 2 * scale, 197 * scale, 4.5 * scale, 385 * scale, 4 * scale);
    ctx.bezierCurveTo(397 * scale, 4 * scale, 401 * scale, 4 * scale, 399 * scale, 23 * scale);
    ctx.bezierCurveTo(367 * scale, 27 * scale, 367 * scale, 27 * scale, 335 * scale, 31 * scale);
    ctx.bezierCurveTo(366.5 * scale, 33.5 * scale, 366.5 * scale, 33.5 * scale, 398 * scale, 36 * scale);
    ctx.bezierCurveTo(398 * scale, 41.5 * scale, 398 * scale, 41.5 * scale, 398 * scale, 47 * scale);
    ctx.bezierCurveTo(398 * scale, 56 * scale, 399 * scale, 56 * scale, 386 * scale, 56 * scale);
    ctx.bezierCurveTo(200.5 * scale, 56.5 * scale, 200.5 * scale, 56.5 * scale, 15 * scale, 57 * scale);
    ctx.bezierCurveTo(2 * scale, 55 * scale, 4 * scale, 52 * scale, 4 * scale, 43 * scale);
    ctx.bezierCurveTo(4 * scale, 30.5 * scale, 4 * scale, 30.5 * scale, 4 * scale, 18 * scale);
    ctx.bezierCurveTo(16 * scale, 18.5 * scale, 16 * scale, 18.5 * scale, 28 * scale, 19 * scale);
    ctx.bezierCurveTo(18.5 * scale, 12 * scale, 18.5 * scale, 12 * scale, 9 * scale, 5 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[3], 32 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(5 * scale, 70 * scale);
    ctx.bezierCurveTo(5 * scale, 58 * scale, 5 * scale, 55 * scale, 17 * scale, 57 * scale);
    ctx.bezierCurveTo(203 * scale, 57 * scale, 203 * scale, 57 * scale, 389 * scale, 57 * scale);
    ctx.bezierCurveTo(400 * scale, 57 * scale, 400 * scale, 59 * scale, 400 * scale, 69 * scale);
    ctx.bezierCurveTo(400.5 * scale, 83.5 * scale, 400.5 * scale, 83.5 * scale, 401 * scale, 98 * scale);
    ctx.bezierCurveTo(402 * scale, 108 * scale, 401 * scale, 108 * scale, 388 * scale, 108 * scale);
    ctx.bezierCurveTo(201.5 * scale, 108 * scale, 201.5 * scale, 108 * scale, 15 * scale, 108 * scale);
    ctx.bezierCurveTo(1 * scale, 106 * scale, 5 * scale, 106 * scale, 5 * scale, 87 * scale);
    ctx.bezierCurveTo(33 * scale, 84.5 * scale, 33 * scale, 84.5 * scale, 61 * scale, 82 * scale);
    ctx.bezierCurveTo(33.5 * scale, 76.5 * scale, 33.5 * scale, 76.5 * scale, 6 * scale, 71 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[3], 32 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(19 * scale, 158 * scale);
    ctx.bezierCurveTo(2 * scale, 159 * scale, 4 * scale, 156 * scale, 5 * scale, 118 * scale);
    ctx.bezierCurveTo(4 * scale, 110 * scale, 6 * scale, 107 * scale, 26 * scale, 109 * scale);
    ctx.bezierCurveTo(206.5 * scale, 109 * scale, 206.5 * scale, 109 * scale, 387 * scale, 109 * scale);
    ctx.bezierCurveTo(400 * scale, 108 * scale, 400 * scale, 108 * scale, 398 * scale, 127 * scale);
    ctx.bezierCurveTo(384.5 * scale, 130 * scale, 384.5 * scale, 130 * scale, 371 * scale, 133 * scale);
    ctx.bezierCurveTo(385.5 * scale, 138 * scale, 385.5 * scale, 138 * scale, 400 * scale, 143 * scale);
    ctx.bezierCurveTo(402 * scale, 156 * scale, 402 * scale, 162 * scale, 385 * scale, 160 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[3], 32 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(4 * scale, 183 * scale);
    ctx.bezierCurveTo(1 * scale, 163 * scale, 4 * scale, 158 * scale, 28 * scale, 161 * scale);
    ctx.bezierCurveTo(207.5 * scale, 161 * scale, 207.5 * scale, 161 * scale, 387 * scale, 161 * scale);
    ctx.bezierCurveTo(401 * scale, 159 * scale, 400 * scale, 164 * scale, 400 * scale, 177 * scale);
    ctx.bezierCurveTo(364.5 * scale, 184 * scale, 364.5 * scale, 184 * scale, 329 * scale, 191 * scale);
    ctx.bezierCurveTo(364.5 * scale, 192.5 * scale, 364.5 * scale, 192.5 * scale, 400 * scale, 194 * scale);
    ctx.bezierCurveTo(403 * scale, 209 * scale, 401 * scale, 214 * scale, 385 * scale, 213 * scale);
    ctx.bezierCurveTo(201.5 * scale, 213 * scale, 201.5 * scale, 213 * scale, 18 * scale, 213 * scale);
    ctx.bezierCurveTo(3 * scale, 213 * scale, 2 * scale, 213 * scale, 4 * scale, 198 * scale);
    ctx.bezierCurveTo(12.5 * scale, 193 * scale, 12.5 * scale, 193 * scale, 21 * scale, 188 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[3], 32 * scale);
    circle(ctx, 41 * scale, 30 * scale, 14.7648230602334 * scale);
    fill_path(ctx, color[3], color[3], 32 * scale);
    circle(ctx, 369 * scale, 30 * scale, 15.556349186104045 * scale);
    fill_path(ctx, color[3], color[3], 32 * scale);
    circle(ctx, 364 * scale, 190 * scale, 15.620499351813308 * scale);
    fill_path(ctx, color[3], color[3], 32 * scale);
    circle(ctx, 41 * scale, 186 * scale, 15.556349186104045 * scale);
    fill_path(ctx, color[3], color[3], 32 * scale);
  } else if (i == 2) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(9 * scale, 5 * scale);
    ctx.bezierCurveTo(381 * scale, 2 * scale, 197 * scale, 4.5 * scale, 385 * scale, 4 * scale);
    ctx.bezierCurveTo(397 * scale, 4 * scale, 401 * scale, 4 * scale, 399 * scale, 23 * scale);
    ctx.bezierCurveTo(367 * scale, 27 * scale, 367 * scale, 27 * scale, 335 * scale, 31 * scale);
    ctx.bezierCurveTo(366.5 * scale, 33.5 * scale, 366.5 * scale, 33.5 * scale, 398 * scale, 36 * scale);
    ctx.bezierCurveTo(398 * scale, 41.5 * scale, 398 * scale, 41.5 * scale, 398 * scale, 47 * scale);
    ctx.bezierCurveTo(398 * scale, 56 * scale, 399 * scale, 56 * scale, 386 * scale, 56 * scale);
    ctx.bezierCurveTo(200.5 * scale, 56.5 * scale, 200.5 * scale, 56.5 * scale, 15 * scale, 57 * scale);
    ctx.bezierCurveTo(2 * scale, 55 * scale, 4 * scale, 52 * scale, 4 * scale, 43 * scale);
    ctx.bezierCurveTo(4 * scale, 30.5 * scale, 4 * scale, 30.5 * scale, 4 * scale, 18 * scale);
    ctx.bezierCurveTo(16 * scale, 18.5 * scale, 16 * scale, 18.5 * scale, 28 * scale, 19 * scale);
    ctx.bezierCurveTo(18.5 * scale, 12 * scale, 18.5 * scale, 12 * scale, 9 * scale, 5 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[3], 32 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(5 * scale, 70 * scale);
    ctx.bezierCurveTo(5 * scale, 58 * scale, 5 * scale, 55 * scale, 17 * scale, 57 * scale);
    ctx.bezierCurveTo(203 * scale, 57 * scale, 203 * scale, 57 * scale, 389 * scale, 57 * scale);
    ctx.bezierCurveTo(400 * scale, 57 * scale, 400 * scale, 59 * scale, 400 * scale, 69 * scale);
    ctx.bezierCurveTo(400.5 * scale, 83.5 * scale, 400.5 * scale, 83.5 * scale, 401 * scale, 98 * scale);
    ctx.bezierCurveTo(402 * scale, 108 * scale, 401 * scale, 108 * scale, 388 * scale, 108 * scale);
    ctx.bezierCurveTo(201.5 * scale, 108 * scale, 201.5 * scale, 108 * scale, 15 * scale, 108 * scale);
    ctx.bezierCurveTo(1 * scale, 106 * scale, 5 * scale, 106 * scale, 5 * scale, 87 * scale);
    ctx.bezierCurveTo(33 * scale, 84.5 * scale, 33 * scale, 84.5 * scale, 61 * scale, 82 * scale);
    ctx.bezierCurveTo(33.5 * scale, 76.5 * scale, 33.5 * scale, 76.5 * scale, 6 * scale, 71 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[3], 32 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(19 * scale, 158 * scale);
    ctx.bezierCurveTo(2 * scale, 159 * scale, 4 * scale, 156 * scale, 5 * scale, 118 * scale);
    ctx.bezierCurveTo(4 * scale, 110 * scale, 6 * scale, 107 * scale, 26 * scale, 109 * scale);
    ctx.bezierCurveTo(206.5 * scale, 109 * scale, 206.5 * scale, 109 * scale, 387 * scale, 109 * scale);
    ctx.bezierCurveTo(400 * scale, 108 * scale, 400 * scale, 108 * scale, 398 * scale, 127 * scale);
    ctx.bezierCurveTo(384.5 * scale, 130 * scale, 384.5 * scale, 130 * scale, 371 * scale, 133 * scale);
    ctx.bezierCurveTo(385.5 * scale, 138 * scale, 385.5 * scale, 138 * scale, 400 * scale, 143 * scale);
    ctx.bezierCurveTo(402 * scale, 156 * scale, 402 * scale, 162 * scale, 385 * scale, 160 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[3], 32 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(4 * scale, 183 * scale);
    ctx.bezierCurveTo(1 * scale, 163 * scale, 4 * scale, 158 * scale, 28 * scale, 161 * scale);
    ctx.bezierCurveTo(207.5 * scale, 161 * scale, 207.5 * scale, 161 * scale, 387 * scale, 161 * scale);
    ctx.bezierCurveTo(401 * scale, 159 * scale, 400 * scale, 164 * scale, 400 * scale, 177 * scale);
    ctx.bezierCurveTo(364.5 * scale, 184 * scale, 364.5 * scale, 184 * scale, 329 * scale, 191 * scale);
    ctx.bezierCurveTo(364.5 * scale, 192.5 * scale, 364.5 * scale, 192.5 * scale, 400 * scale, 194 * scale);
    ctx.bezierCurveTo(403 * scale, 209 * scale, 401 * scale, 214 * scale, 385 * scale, 213 * scale);
    ctx.bezierCurveTo(201.5 * scale, 213 * scale, 201.5 * scale, 213 * scale, 18 * scale, 213 * scale);
    ctx.bezierCurveTo(3 * scale, 213 * scale, 2 * scale, 213 * scale, 4 * scale, 198 * scale);
    ctx.bezierCurveTo(12.5 * scale, 193 * scale, 12.5 * scale, 193 * scale, 21 * scale, 188 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[3], 32 * scale);
    circle(ctx, 41 * scale, 30 * scale, 14.7648230602334 * scale);
    fill_path(ctx, color[3], color[3], 32 * scale);
    circle(ctx, 369 * scale, 30 * scale, 15.556349186104045 * scale);
    fill_path(ctx, color[3], color[3], 32 * scale);
    circle(ctx, 364 * scale, 190 * scale, 15.620499351813308 * scale);
    fill_path(ctx, color[3], color[3], 32 * scale);
    circle(ctx, 41 * scale, 186 * scale, 15.556349186104045 * scale);
    fill_path(ctx, color[3], color[3], 32 * scale);
  }
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(9 * scale, 5 * scale);
  ctx.bezierCurveTo(381 * scale, 2 * scale, 197 * scale, 4.5 * scale, 385 * scale, 4 * scale);
  ctx.bezierCurveTo(397 * scale, 4 * scale, 401 * scale, 4 * scale, 399 * scale, 23 * scale);
  ctx.bezierCurveTo(367 * scale, 27 * scale, 367 * scale, 27 * scale, 335 * scale, 31 * scale);
  ctx.bezierCurveTo(366.5 * scale, 33.5 * scale, 366.5 * scale, 33.5 * scale, 398 * scale, 36 * scale);
  ctx.bezierCurveTo(398 * scale, 41.5 * scale, 398 * scale, 41.5 * scale, 398 * scale, 47 * scale);
  ctx.bezierCurveTo(398 * scale, 56 * scale, 399 * scale, 56 * scale, 386 * scale, 56 * scale);
  ctx.bezierCurveTo(200.5 * scale, 56.5 * scale, 200.5 * scale, 56.5 * scale, 15 * scale, 57 * scale);
  ctx.bezierCurveTo(2 * scale, 55 * scale, 4 * scale, 52 * scale, 4 * scale, 43 * scale);
  ctx.bezierCurveTo(4 * scale, 30.5 * scale, 4 * scale, 30.5 * scale, 4 * scale, 18 * scale);
  ctx.bezierCurveTo(16 * scale, 18.5 * scale, 16 * scale, 18.5 * scale, 28 * scale, 19 * scale);
  ctx.bezierCurveTo(18.5 * scale, 12 * scale, 18.5 * scale, 12 * scale, 9 * scale, 5 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[0], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(5 * scale, 70 * scale);
  ctx.bezierCurveTo(5 * scale, 58 * scale, 5 * scale, 55 * scale, 17 * scale, 57 * scale);
  ctx.bezierCurveTo(203 * scale, 57 * scale, 203 * scale, 57 * scale, 389 * scale, 57 * scale);
  ctx.bezierCurveTo(400 * scale, 57 * scale, 400 * scale, 59 * scale, 400 * scale, 69 * scale);
  ctx.bezierCurveTo(400.5 * scale, 83.5 * scale, 400.5 * scale, 83.5 * scale, 401 * scale, 98 * scale);
  ctx.bezierCurveTo(402 * scale, 108 * scale, 401 * scale, 108 * scale, 388 * scale, 108 * scale);
  ctx.bezierCurveTo(201.5 * scale, 108 * scale, 201.5 * scale, 108 * scale, 15 * scale, 108 * scale);
  ctx.bezierCurveTo(1 * scale, 106 * scale, 5 * scale, 106 * scale, 5 * scale, 87 * scale);
  ctx.bezierCurveTo(33 * scale, 84.5 * scale, 33 * scale, 84.5 * scale, 61 * scale, 82 * scale);
  ctx.bezierCurveTo(33.5 * scale, 76.5 * scale, 33.5 * scale, 76.5 * scale, 6 * scale, 71 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[0], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(19 * scale, 158 * scale);
  ctx.bezierCurveTo(2 * scale, 159 * scale, 4 * scale, 156 * scale, 5 * scale, 118 * scale);
  ctx.bezierCurveTo(4 * scale, 110 * scale, 6 * scale, 107 * scale, 26 * scale, 109 * scale);
  ctx.bezierCurveTo(206.5 * scale, 109 * scale, 206.5 * scale, 109 * scale, 387 * scale, 109 * scale);
  ctx.bezierCurveTo(400 * scale, 108 * scale, 400 * scale, 108 * scale, 398 * scale, 127 * scale);
  ctx.bezierCurveTo(384.5 * scale, 130 * scale, 384.5 * scale, 130 * scale, 371 * scale, 133 * scale);
  ctx.bezierCurveTo(385.5 * scale, 138 * scale, 385.5 * scale, 138 * scale, 400 * scale, 143 * scale);
  ctx.bezierCurveTo(402 * scale, 156 * scale, 402 * scale, 162 * scale, 385 * scale, 160 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[0], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(4 * scale, 183 * scale);
  ctx.bezierCurveTo(1 * scale, 163 * scale, 4 * scale, 158 * scale, 28 * scale, 161 * scale);
  ctx.bezierCurveTo(207.5 * scale, 161 * scale, 207.5 * scale, 161 * scale, 387 * scale, 161 * scale);
  ctx.bezierCurveTo(401 * scale, 159 * scale, 400 * scale, 164 * scale, 400 * scale, 177 * scale);
  ctx.bezierCurveTo(364.5 * scale, 184 * scale, 364.5 * scale, 184 * scale, 329 * scale, 191 * scale);
  ctx.bezierCurveTo(364.5 * scale, 192.5 * scale, 364.5 * scale, 192.5 * scale, 400 * scale, 194 * scale);
  ctx.bezierCurveTo(403 * scale, 209 * scale, 401 * scale, 214 * scale, 385 * scale, 213 * scale);
  ctx.bezierCurveTo(201.5 * scale, 213 * scale, 201.5 * scale, 213 * scale, 18 * scale, 213 * scale);
  ctx.bezierCurveTo(3 * scale, 213 * scale, 2 * scale, 213 * scale, 4 * scale, 198 * scale);
  ctx.bezierCurveTo(12.5 * scale, 193 * scale, 12.5 * scale, 193 * scale, 21 * scale, 188 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[0], 12 * scale);
  circle(ctx, 41 * scale, 30 * scale, 14.7648230602334 * scale);
  fill_path(ctx, color[2], color[0], 12 * scale);
  circle(ctx, 369 * scale, 30 * scale, 15.556349186104045 * scale);
  fill_path(ctx, color[2], color[0], 12 * scale);
  circle(ctx, 364 * scale, 190 * scale, 15.620499351813308 * scale);
  fill_path(ctx, color[2], color[0], 12 * scale);
  circle(ctx, 41 * scale, 186 * scale, 15.556349186104045 * scale);
  fill_path(ctx, color[2], color[0], 12 * scale);
  return can;
};

function create_symbols(scale, draw_shadow, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 450 * scale;
  can.height = 260 * scale;
  var img = create_sign(1 * scale, true, color);
  ctx.drawImage(img, 0 * scale, 0 * scale);
  if (i == 1) {
    ctx.translate(100 * scale, 0 * scale);
    circle(ctx, 113 * scale, 120 * scale, 66 * scale);
    fill_path(ctx, undefined, color[4], 13 * scale);
    var img = create_sword(0.65 * scale, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
    ctx.rotate(0.7);
    ctx.drawImage(img, 133 * scale, -64 * scale);
    ctx.rotate(-0.7);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(70 * scale, 70 * scale);
    ctx.bezierCurveTo(113 * scale, 120.5 * scale, 113 * scale, 120.5 * scale, 156 * scale, 171 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[4], 13 * scale);
  } else if (i == 2) {
    ctx.translate(100 * scale, 0 * scale);
    circle(ctx, 113 * scale, 120 * scale, 66 * scale);
    fill_path(ctx, undefined, color[4], 13 * scale);
    ctx.translate(30 * scale, 40 * scale);
    ctx.save();
    ctx.translate(83.5 * scale, 66.5 * scale);
    round_rect(ctx, -40.5 * scale, -29.5 * scale, 81 * scale, 59 * scale, 15 * scale);
    ctx.restore();
    fill_path(ctx, "#dff2f7", "#187484", 7 * scale);
    circle(ctx, 22 * scale, 82 * scale, 12 * scale);
    fill_path(ctx, "#dff2f7", "#187484", 7 * scale);
    circle(ctx, 145 * scale, 82 * scale, 12 * scale);
    fill_path(ctx, "#dff2f7", "#187484", 7 * scale);
    var img = create_plant(0.5 * scale, true, ["#80500b", "#7c4908"]);
    ctx.drawImage(img, 10 * scale, 85 * scale);
    var img = create_plant(0.5 * scale, true, ["#80500b", "#7c4908"]);
    ctx.drawImage(img, 50 * scale, 85 * scale);
    var img = create_plant(0.5 * scale, true, ["#80500b", "#7c4908"]);
    ctx.drawImage(img, 90 * scale, 85 * scale);
    var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
    ctx.drawImage(img, 90 * scale, 105 * scale);
    var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
    ctx.drawImage(img, 90 * scale, 105 * scale);
    var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
    ctx.drawImage(img, 30 * scale, 125 * scale);
    var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
    ctx.drawImage(img, 50 * scale, 115 * scale);
    var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
    ctx.drawImage(img, 30 * scale, 100 * scale);
    var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
    ctx.drawImage(img, 80 * scale, 120 * scale);
    var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
    ctx.drawImage(img, 110 * scale, 125 * scale);
    var img = create_fruit(1 * scale, true, ["#3d2a6e", "#8255b5"]);
    ctx.drawImage(img, 120 * scale, 105 * scale);
  } else if (i == 3) {
    ctx.translate(100 * scale, 0 * scale);
    circle(ctx, 113 * scale, 120 * scale, 66 * scale);
    fill_path(ctx, undefined, color[4], 13 * scale);
    ctx.translate(40 * scale, 50 * scale);
    ctx.save();
    ctx.translate(71 * scale, 69 * scale);
    round_rect(ctx, -30 * scale, -42 * scale, 60 * scale, 84 * scale, 10 * scale);
    ctx.restore();
    fill_path(ctx, undefined, color[5], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(42 * scale, 28 * scale);
    ctx.bezierCurveTo(60 * scale, 31 * scale, 60 * scale, 31 * scale, 78 * scale, 34 * scale);
    ctx.bezierCurveTo(82 * scale, 34 * scale, 84 * scale, 37 * scale, 83 * scale, 45 * scale);
    ctx.bezierCurveTo(83 * scale, 80 * scale, 83 * scale, 80 * scale, 83 * scale, 115 * scale);
    ctx.bezierCurveTo(83 * scale, 120 * scale, 80 * scale, 122 * scale, 73 * scale, 120 * scale);
    ctx.bezierCurveTo(42 * scale, 111 * scale, 43 * scale, 109 * scale, 41 * scale, 102 * scale);
    ctx.bezierCurveTo(41 * scale, 71 * scale, 41 * scale, 71 * scale, 41 * scale, 40 * scale);
    ctx.closePath();
    fill_path(ctx, color[5], color[5], 4 * scale);
    ctx.translate(-40 * scale, -50 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(70 * scale, 70 * scale);
    ctx.bezierCurveTo(113 * scale, 120.5 * scale, 113 * scale, 120.5 * scale, 156 * scale, 171 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[4], 13 * scale);
  } else if (i == 4) {
    ctx.scale(1, 1);
    ctx.translate(70 * scale, 50 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(23 * scale, 6 * scale);
    ctx.bezierCurveTo(25.5 * scale, 56 * scale, 25.5 * scale, 56 * scale, 28 * scale, 106 * scale);
    fill_path(ctx, undefined, color[5], 14 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(59 * scale, 10 * scale);
    ctx.bezierCurveTo(61 * scale, 51.5 * scale, 61 * scale, 51.5 * scale, 63 * scale, 93 * scale);
    fill_path(ctx, undefined, color[5], 14 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(7 * scale, 55 * scale);
    ctx.bezierCurveTo(33.5 * scale, 55 * scale, 33.5 * scale, 55 * scale, 60 * scale, 55 * scale);
    fill_path(ctx, undefined, color[5], 14 * scale);
    ctx.translate(10 * scale, 0 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(123 * scale, 16 * scale);
    ctx.bezierCurveTo(103 * scale, 16.5 * scale, 103 * scale, 16.5 * scale, 83 * scale, 17 * scale);
    ctx.bezierCurveTo(83.5 * scale, 61 * scale, 83.5 * scale, 61 * scale, 84 * scale, 105 * scale);
    ctx.bezierCurveTo(106 * scale, 105 * scale, 106 * scale, 105 * scale, 128 * scale, 105 * scale);
    fill_path(ctx, undefined, color[5], 14 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(72 * scale, 63 * scale);
    ctx.bezierCurveTo(88.5 * scale, 62.5 * scale, 88.5 * scale, 62.5 * scale, 105 * scale, 62 * scale);
    fill_path(ctx, undefined, color[5], 14 * scale);
    ctx.translate(10 * scale, 10 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(141 * scale, 8 * scale);
    ctx.bezierCurveTo(143 * scale, 50 * scale, 143 * scale, 50 * scale, 145 * scale, 92 * scale);
    ctx.bezierCurveTo(169 * scale, 88.5 * scale, 169 * scale, 88.5 * scale, 193 * scale, 85 * scale);
    fill_path(ctx, undefined, color[5], 14 * scale);
    ctx.translate(10 * scale, -10 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(205 * scale, 124 * scale);
    ctx.bezierCurveTo(205 * scale, 69 * scale, 205 * scale, 69 * scale, 205 * scale, 14 * scale);
    ctx.bezierCurveTo(239 * scale, 15 * scale, 250 * scale, 37 * scale, 249 * scale, 49 * scale);
    ctx.bezierCurveTo(251 * scale, 65 * scale, 242 * scale, 76 * scale, 206 * scale, 75 * scale);
    fill_path(ctx, undefined, color[5], 14 * scale);
  }
  return can;
};

function create_dragon_helmet(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 345 * scale;
  can.height = 250 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105 * scale, 58 * scale);
  ctx.bezierCurveTo(100.5 * scale, 43 * scale, 100.5 * scale, 43 * scale, 96 * scale, 28 * scale);
  ctx.bezierCurveTo(119.5 * scale, 33.5 * scale, 119.5 * scale, 33.5 * scale, 143 * scale, 39 * scale);
  ctx.bezierCurveTo(170 * scale, 37 * scale, 177 * scale, 37 * scale, 188 * scale, 40 * scale);
  ctx.bezierCurveTo(213 * scale, 33.5 * scale, 213 * scale, 33.5 * scale, 238 * scale, 27 * scale);
  ctx.bezierCurveTo(231 * scale, 52 * scale, 234 * scale, 42.5 * scale, 230 * scale, 58 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(108 * scale, 51 * scale);
  ctx.bezierCurveTo(91 * scale, 55 * scale, 85 * scale, 44 * scale, 86 * scale, 29 * scale);
  ctx.bezierCurveTo(62 * scale, 50 * scale, 78 * scale, 69 * scale, 92 * scale, 75 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(249 * scale, 27 * scale);
  ctx.bezierCurveTo(273 * scale, 49 * scale, 262 * scale, 68 * scale, 246 * scale, 77 * scale);
  ctx.bezierCurveTo(231 * scale, 59 * scale, 236 * scale, 66.5 * scale, 226 * scale, 56 * scale);
  ctx.bezierCurveTo(243 * scale, 53 * scale, 252 * scale, 43 * scale, 249 * scale, 28 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87 * scale, 78 * scale);
  ctx.bezierCurveTo(87 * scale, 59 * scale, 98 * scale, 46 * scale, 127 * scale, 48 * scale);
  ctx.bezierCurveTo(176 * scale, 48.5 * scale, 176 * scale, 48.5 * scale, 225 * scale, 49 * scale);
  ctx.bezierCurveTo(243 * scale, 49 * scale, 253 * scale, 59 * scale, 253 * scale, 76 * scale);
  ctx.bezierCurveTo(211 * scale, 85.5 * scale, 211 * scale, 85.5 * scale, 169 * scale, 95 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56 * scale, 105 * scale);
  ctx.bezierCurveTo(56 * scale, 92 * scale, 59 * scale, 86 * scale, 65 * scale, 73 * scale);
  ctx.bezierCurveTo(62.5 * scale, 61.5 * scale, 62.5 * scale, 61.5 * scale, 60 * scale, 50 * scale);
  ctx.bezierCurveTo(99.5 * scale, 64.5 * scale, 99.5 * scale, 64.5 * scale, 139 * scale, 79 * scale);
  ctx.bezierCurveTo(164 * scale, 77 * scale, 177 * scale, 76 * scale, 203 * scale, 78 * scale);
  ctx.bezierCurveTo(242 * scale, 63.5 * scale, 242 * scale, 63.5 * scale, 281 * scale, 49 * scale);
  ctx.bezierCurveTo(279 * scale, 60.5 * scale, 279 * scale, 60.5 * scale, 277 * scale, 72 * scale);
  ctx.bezierCurveTo(286 * scale, 88 * scale, 286 * scale, 96 * scale, 287 * scale, 104 * scale);
  ctx.bezierCurveTo(228.5 * scale, 127 * scale, 228.5 * scale, 127 * scale, 170 * scale, 150 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(48 * scale, 130 * scale);
  ctx.bezierCurveTo(61 * scale, 155 * scale, 63 * scale, 165 * scale, 56 * scale, 171 * scale);
  ctx.bezierCurveTo(48 * scale, 177 * scale, 40 * scale, 171 * scale, 38 * scale, 178 * scale);
  ctx.bezierCurveTo(33 * scale, 180 * scale, 37 * scale, 188 * scale, 47 * scale, 208 * scale);
  ctx.bezierCurveTo(52 * scale, 221 * scale, 55 * scale, 222 * scale, 75 * scale, 229 * scale);
  ctx.bezierCurveTo(91 * scale, 213 * scale, 98 * scale, 212 * scale, 112 * scale, 219 * scale);
  ctx.bezierCurveTo(167 * scale, 225 * scale, 187 * scale, 224 * scale, 222 * scale, 220 * scale);
  ctx.bezierCurveTo(244 * scale, 214 * scale, 247 * scale, 213 * scale, 263 * scale, 229 * scale);
  ctx.bezierCurveTo(295 * scale, 220 * scale, 291 * scale, 215 * scale, 301 * scale, 194 * scale);
  ctx.bezierCurveTo(308 * scale, 178 * scale, 309 * scale, 176 * scale, 302 * scale, 173 * scale);
  ctx.bezierCurveTo(290 * scale, 177 * scale, 289 * scale, 177 * scale, 283 * scale, 169 * scale);
  ctx.bezierCurveTo(279 * scale, 163 * scale, 279 * scale, 161 * scale, 290 * scale, 130 * scale);
  ctx.bezierCurveTo(270 * scale, 127 * scale, 270 * scale, 127 * scale, 250 * scale, 124 * scale);
  ctx.bezierCurveTo(209 * scale, 137.5 * scale, 209 * scale, 137.5 * scale, 168 * scale, 151 * scale);
  ctx.bezierCurveTo(121 * scale, 135 * scale, 121 * scale, 135 * scale, 74 * scale, 119 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.globalCompositeOperation = "destination-out";
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 158 * scale);
  ctx.bezierCurveTo(152 * scale, 193 * scale, 158 * scale, 205 * scale, 140 * scale, 203 * scale);
  ctx.bezierCurveTo(99 * scale, 195 * scale, 96 * scale, 189 * scale, 86 * scale, 173 * scale);
  ctx.bezierCurveTo(80 * scale, 159 * scale, 88 * scale, 145 * scale, 104 * scale, 141 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(215 * scale, 146 * scale);
  ctx.bezierCurveTo(204 * scale, 167 * scale, 204 * scale, 167 * scale, 193 * scale, 188 * scale);
  ctx.bezierCurveTo(187 * scale, 201 * scale, 191 * scale, 209 * scale, 213 * scale, 201 * scale);
  ctx.bezierCurveTo(247 * scale, 192 * scale, 253 * scale, 181 * scale, 257 * scale, 169 * scale);
  ctx.bezierCurveTo(260 * scale, 157 * scale, 254 * scale, 149 * scale, 243 * scale, 141 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 8 * scale);
  ctx.globalCompositeOperation = "source-over";
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 158 * scale);
  ctx.bezierCurveTo(152 * scale, 193 * scale, 158 * scale, 205 * scale, 140 * scale, 203 * scale);
  ctx.bezierCurveTo(99 * scale, 195 * scale, 96 * scale, 189 * scale, 86 * scale, 173 * scale);
  ctx.bezierCurveTo(80 * scale, 159 * scale, 88 * scale, 145 * scale, 104 * scale, 141 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[8], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(215 * scale, 146 * scale);
  ctx.bezierCurveTo(204 * scale, 167 * scale, 204 * scale, 167 * scale, 193 * scale, 188 * scale);
  ctx.bezierCurveTo(187 * scale, 201 * scale, 191 * scale, 209 * scale, 213 * scale, 201 * scale);
  ctx.bezierCurveTo(247 * scale, 192 * scale, 253 * scale, 181 * scale, 257 * scale, 169 * scale);
  ctx.bezierCurveTo(260 * scale, 157 * scale, 254 * scale, 149 * scale, 243 * scale, 141 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[8], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39 * scale, 66 * scale);
  ctx.bezierCurveTo(57 * scale, 107 * scale, 63 * scale, 96 * scale, 120 * scale, 106 * scale);
  ctx.bezierCurveTo(154 * scale, 112 * scale, 163 * scale, 116 * scale, 174 * scale, 135 * scale);
  ctx.bezierCurveTo(180 * scale, 109 * scale, 191 * scale, 113 * scale, 237 * scale, 103 * scale);
  ctx.bezierCurveTo(276 * scale, 100 * scale, 289 * scale, 94 * scale, 301 * scale, 67 * scale);
  ctx.bezierCurveTo(317 * scale, 112 * scale, 301 * scale, 141 * scale, 274 * scale, 139 * scale);
  ctx.bezierCurveTo(204 * scale, 166 * scale, 197 * scale, 169 * scale, 173 * scale, 183 * scale);
  ctx.bezierCurveTo(170 * scale, 183 * scale, 170 * scale, 183 * scale, 167 * scale, 183 * scale);
  ctx.bezierCurveTo(132 * scale, 160 * scale, 112 * scale, 156 * scale, 73 * scale, 141 * scale);
  ctx.bezierCurveTo(43 * scale, 146 * scale, 27 * scale, 120 * scale, 39 * scale, 66 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[8], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 185 * scale);
  ctx.bezierCurveTo(115 * scale, 200 * scale, 118 * scale, 206 * scale, 124 * scale, 212 * scale);
  ctx.bezierCurveTo(133 * scale, 223 * scale, 132 * scale, 231 * scale, 121 * scale, 230 * scale);
  ctx.bezierCurveTo(108 * scale, 226 * scale, 108 * scale, 215 * scale, 107 * scale, 209 * scale);
  ctx.bezierCurveTo(106 * scale, 201 * scale, 110 * scale, 196 * scale, 114 * scale, 185 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(226 * scale, 186 * scale);
  ctx.bezierCurveTo(234 * scale, 201 * scale, 238 * scale, 209 * scale, 228 * scale, 225 * scale);
  ctx.bezierCurveTo(223 * scale, 233 * scale, 213 * scale, 233 * scale, 211 * scale, 226 * scale);
  ctx.bezierCurveTo(206 * scale, 219 * scale, 217 * scale, 216 * scale, 221 * scale, 207 * scale);
  ctx.bezierCurveTo(225 * scale, 196 * scale, 225 * scale, 191 * scale, 226 * scale, 186 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(172 * scale, 110 * scale);
  ctx.bezierCurveTo(189 * scale, 153 * scale, 192 * scale, 160 * scale, 188 * scale, 175 * scale);
  ctx.bezierCurveTo(183 * scale, 190 * scale, 176 * scale, 197 * scale, 165 * scale, 191 * scale);
  ctx.bezierCurveTo(153 * scale, 181 * scale, 152 * scale, 166 * scale, 157 * scale, 151 * scale);
  ctx.bezierCurveTo(164.5 * scale, 131 * scale, 164.5 * scale, 131 * scale, 172 * scale, 111 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 8 * scale);
  return can;
};

function create_fir_one(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 149 * scale;
  can.height = 153 * scale;
  ctx.globalAlpha = 0.5;
  circle(ctx, 74.5 * scale, 85 * scale, 66 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  circle(ctx, 75.5 * scale, 72.5 * scale, 67 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  circle(ctx, 75.5 * scale, 73.5 * scale, 54 * scale);
  fill_path(ctx, color[3]);
  ctx.globalAlpha = 0.5;
  circle(ctx, 74.5 * scale, 80.5 * scale, 39 * scale);
  fill_path(ctx, color[4]);
  ctx.globalAlpha = 1;
  circle(ctx, 74.5 * scale, 74.5 * scale, 37 * scale);
  fill_path(ctx, color[5]);
  return can;
};

function create_fir_two(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 173 * scale;
  can.height = 178 * scale;
  ctx.globalAlpha = 0.5;
  circle(ctx, 86.5 * scale, 98 * scale, 80 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  circle(ctx, 86.5 * scale, 89 * scale, 81 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  circle(ctx, 86.5 * scale, 86 * scale, 59 * scale);
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.globalAlpha = 0.5;
  circle(ctx, 86.5 * scale, 95 * scale, 34 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  circle(ctx, 86.5 * scale, 89 * scale, 34 * scale);
  fill_path(ctx, color[5]);
  return can;
};

function create_fir_three(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 253 * scale;
  can.height = 260 * scale;
  ctx.globalAlpha = 0.5;
  circle(ctx, 126.5 * scale, 134 * scale, 119 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  circle(ctx, 126.5 * scale, 124 * scale, 119 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  circle(ctx, 126.5 * scale, 127 * scale, 100 * scale);
  fill_path(ctx, color[3]);
  ctx.globalAlpha = 0.5;
  circle(ctx, 126.5 * scale, 135 * scale, 81 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  circle(ctx, 126.5 * scale, 125 * scale, 84 * scale);
  fill_path(ctx, color[4], color[5], 4 * scale);
  circle(ctx, 126.5 * scale, 125 * scale, 61 * scale);
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.globalAlpha = 0.5;
  circle(ctx, 126.5 * scale, 134 * scale, 40 * scale);
  fill_path(ctx, color[8]);
  ctx.globalAlpha = 1;
  circle(ctx, 126.5 * scale, 125 * scale, 40 * scale);
  fill_path(ctx, color[9]);
  return can;
};

function create_amethyst(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 139 * scale;
  can.height = 135 * scale;
  ctx.translate(0, 10 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(32 * scale, 77 * scale);
  ctx.bezierCurveTo(6 * scale, 41 * scale, 6 * scale, 33 * scale, 12 * scale, 27 * scale);
  ctx.bezierCurveTo(27 * scale, 6 * scale, 28 * scale, 6 * scale, 37 * scale, 6 * scale);
  ctx.bezierCurveTo(62 * scale, 3 * scale, 64 * scale, 5 * scale, 67 * scale, 13 * scale);
  ctx.bezierCurveTo(80 * scale, 36 * scale, 73.5 * scale, 25 * scale, 80 * scale, 37 * scale);
  ctx.bezierCurveTo(73.5 * scale, 54 * scale, 65 * scale, 74 * scale, 67 * scale, 71 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(65 * scale, 37 * scale);
  ctx.bezierCurveTo(105 * scale, 40 * scale, 113 * scale, 39 * scale, 117 * scale, 48 * scale);
  ctx.bezierCurveTo(126 * scale, 70 * scale, 128 * scale, 72 * scale, 124 * scale, 80 * scale);
  ctx.bezierCurveTo(112 * scale, 101 * scale, 110 * scale, 104 * scale, 99 * scale, 104 * scale);
  ctx.bezierCurveTo(59 * scale, 100 * scale, 55 * scale, 99 * scale, 56 * scale, 99 * scale);
  ctx.bezierCurveTo(47.5 * scale, 79 * scale, 45 * scale, 66 * scale, 39 * scale, 59 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 63 * scale);
  ctx.bezierCurveTo(5 * scale, 99 * scale, 5 * scale, 101 * scale, 8 * scale, 103 * scale);
  ctx.bezierCurveTo(19 * scale, 123 * scale, 22 * scale, 125 * scale, 28 * scale, 126 * scale);
  ctx.bezierCurveTo(57 * scale, 127 * scale, 55 * scale, 127 * scale, 58 * scale, 120 * scale);
  ctx.bezierCurveTo(82 * scale, 86 * scale, 83 * scale, 78 * scale, 82 * scale, 87 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, -10 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(32 * scale, 77 * scale);
  ctx.bezierCurveTo(6 * scale, 41 * scale, 6 * scale, 33 * scale, 12 * scale, 27 * scale);
  ctx.bezierCurveTo(27 * scale, 6 * scale, 28 * scale, 6 * scale, 37 * scale, 6 * scale);
  ctx.bezierCurveTo(62 * scale, 3 * scale, 64 * scale, 5 * scale, 67 * scale, 13 * scale);
  ctx.bezierCurveTo(80 * scale, 36 * scale, 73.5 * scale, 25 * scale, 80 * scale, 37 * scale);
  ctx.bezierCurveTo(73.5 * scale, 54 * scale, 65 * scale, 74 * scale, 67 * scale, 71 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(65 * scale, 37 * scale);
  ctx.bezierCurveTo(105 * scale, 40 * scale, 113 * scale, 39 * scale, 117 * scale, 48 * scale);
  ctx.bezierCurveTo(126 * scale, 70 * scale, 128 * scale, 72 * scale, 124 * scale, 80 * scale);
  ctx.bezierCurveTo(112 * scale, 101 * scale, 110 * scale, 104 * scale, 99 * scale, 104 * scale);
  ctx.bezierCurveTo(59 * scale, 100 * scale, 55 * scale, 99 * scale, 56 * scale, 99 * scale);
  ctx.bezierCurveTo(47.5 * scale, 79 * scale, 45 * scale, 66 * scale, 39 * scale, 59 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 63 * scale);
  ctx.bezierCurveTo(5 * scale, 99 * scale, 5 * scale, 101 * scale, 8 * scale, 103 * scale);
  ctx.bezierCurveTo(19 * scale, 123 * scale, 22 * scale, 125 * scale, 28 * scale, 126 * scale);
  ctx.bezierCurveTo(57 * scale, 127 * scale, 55 * scale, 127 * scale, 58 * scale, 120 * scale);
  ctx.bezierCurveTo(82 * scale, 86 * scale, 83 * scale, 78 * scale, 82 * scale, 87 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80 * scale, 38 * scale);
  ctx.bezierCurveTo(72.5 * scale, 52 * scale, 72.5 * scale, 52 * scale, 65 * scale, 66 * scale);
  ctx.bezierCurveTo(47.5 * scale, 37 * scale, 47.5 * scale, 37 * scale, 30 * scale, 7 * scale);
  ctx.bezierCurveTo(48 * scale, 4 * scale, 57 * scale, 4 * scale, 64 * scale, 10 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(65 * scale, 65 * scale);
  ctx.bezierCurveTo(125 * scale, 73 * scale, 95.5 * scale, 69 * scale, 126 * scale, 73 * scale);
  ctx.bezierCurveTo(119 * scale, 98 * scale, 106 * scale, 104 * scale, 98 * scale, 103 * scale);
  ctx.bezierCurveTo(84.5 * scale, 102 * scale, 84.5 * scale, 102 * scale, 71 * scale, 101 * scale);
  ctx.bezierCurveTo(64 * scale, 86 * scale, 64 * scale, 86 * scale, 57 * scale, 70 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(27 * scale, 69 * scale);
  ctx.bezierCurveTo(64 * scale, 65 * scale, 46 * scale, 67 * scale, 65 * scale, 65 * scale);
  ctx.bezierCurveTo(43.5 * scale, 94 * scale, 43.5 * scale, 94 * scale, 22 * scale, 123 * scale);
  ctx.bezierCurveTo(8 * scale, 103 * scale, 8 * scale, 103 * scale, 9 * scale, 103 * scale);
  ctx.bezierCurveTo(5 * scale, 98 * scale, 11 * scale, 89 * scale, 26 * scale, 70 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(26 * scale, 69 * scale);
  ctx.bezierCurveTo(65 * scale, 60 * scale, 45 * scale, 65 * scale, 64 * scale, 60 * scale);
  ctx.bezierCurveTo(63 * scale, 65 * scale, 63 * scale, 65 * scale, 62 * scale, 70 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80 * scale, 38 * scale);
  ctx.bezierCurveTo(68 * scale, 70 * scale, 75 * scale, 53 * scale, 70 * scale, 68 * scale);
  ctx.bezierCurveTo(65 * scale, 67 * scale, 65 * scale, 67 * scale, 60 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  return can;
};

function create_dragon_ground(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 100 * scale;
  can.height = 100 * scale;
  ctx.globalAlpha = 0.5;
  ctx.fillStyle = color[0];
  ctx.fillRect(0, 0, can.width, can.height);
  return can;
};

function create_snow_one(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 120 * scale;
  can.height = 300 * scale;
  ctx.translate(-80 * scale, -20);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(200.5 * scale, 14.953125 * scale);
  ctx.bezierCurveTo(203 * scale, 171.953125 * scale, 203 * scale, 171.953125 * scale, 205.5 * scale, 328.953125 * scale);
  ctx.bezierCurveTo(188.5 * scale, 257.953125 * scale, 164.5 * scale, 216.953125 * scale, 166.5 * scale, 176.953125 * scale);
  ctx.bezierCurveTo(168.5 * scale, 133.953125 * scale, 198.5 * scale, 98.953125 * scale, 200.5 * scale, 14.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_snow_two(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 120 * scale;
  can.height = 300 * scale;
  ctx.translate(-200 * scale, -40 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(344 * scale, 18.40625 * scale);
  ctx.bezierCurveTo(345 * scale, 361.40625 * scale, 344 * scale, 191.40625 * scale, 344 * scale, 364.40625 * scale);
  ctx.bezierCurveTo(261 * scale, 275.40625 * scale, 274 * scale, 259.40625 * scale, 229 * scale, 213.40625 * scale);
  ctx.bezierCurveTo(199 * scale, 187.40625 * scale, 222 * scale, 133.40625 * scale, 273 * scale, 100.40625 * scale);
  ctx.bezierCurveTo(321 * scale, 71.40625 * scale, 327 * scale, 34.40625 * scale, 344 * scale, 18.40625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(335 * scale, 38.072906494140625 * scale);
  ctx.bezierCurveTo(307 * scale, 62.072906494140625 * scale, 291 * scale, 60.072906494140625 * scale, 262 * scale, 68.07290649414062 * scale);
  ctx.bezierCurveTo(223 * scale, 80.07290649414062 * scale, 225 * scale, 111.07290649414062 * scale, 264 * scale, 139.07290649414062 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_snow_three(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 120 * scale;
  can.height = 320 * scale;
  ctx.translate(-60 * scale, -15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(188.5 * scale, 3.953125 * scale);
  ctx.bezierCurveTo(188.5 * scale, 171.453125 * scale, 188.5 * scale, 171.453125 * scale, 188.5 * scale, 338.953125 * scale);
  ctx.bezierCurveTo(162.5 * scale, 268.953125 * scale, 145.5 * scale, 265.953125 * scale, 116.5 * scale, 244.953125 * scale);
  ctx.bezierCurveTo(67.5 * scale, 204.953125 * scale, 87.5 * scale, 160.953125 * scale, 113.5 * scale, 125.953125 * scale);
  ctx.bezierCurveTo(141.5 * scale, 90.953125 * scale, 176.5 * scale, 56.953125 * scale, 188.5 * scale, 3.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_snow_four(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 120 * scale;
  can.height = 330 * scale;
  ctx.translate(-60 * scale, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(188.5 * scale, 7.953125 * scale);
  ctx.bezierCurveTo(188.5 * scale, 334.953125 * scale, 188.5 * scale, 332.953125 * scale, 188.5 * scale, 339.953125 * scale);
  ctx.bezierCurveTo(166.5 * scale, 295.953125 * scale, 145.5 * scale, 295.953125 * scale, 139.5 * scale, 282.953125 * scale);
  ctx.bezierCurveTo(124.5 * scale, 244.953125 * scale, 139.5 * scale, 243.953125 * scale, 131.5 * scale, 212.953125 * scale);
  ctx.bezierCurveTo(118.5 * scale, 161.953125 * scale, 69.5 * scale, 156.953125 * scale, 74.5 * scale, 92.953125 * scale);
  ctx.bezierCurveTo(85.5 * scale, 41.953125 * scale, 158.5 * scale, 49.953125 * scale, 188.5 * scale, 7.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_snow_five(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 48 * scale;
  can.height = 47 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(7.1875 * scale, 25.434661865234375 * scale);
  ctx.bezierCurveTo(11.1875 * scale, 13.434661865234375 * scale, 18.1875 * scale, 8.434661865234375 * scale, 32.1875 * scale, 10.434661865234375 * scale);
  ctx.bezierCurveTo(45.1875 * scale, 14.434661865234375 * scale, 41.1875 * scale, 24.434661865234375 * scale, 36.1875 * scale, 30.434661865234375 * scale);
  ctx.bezierCurveTo(22.1875 * scale, 42.434661865234375 * scale, 2.1875 * scale, 41.434661865234375 * scale, 7.1875 * scale, 25.434661865234375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_snow_six(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 120 * scale;
  can.height = 280 * scale;
  ctx.translate(-100 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(228.5 * scale, 331.953125 * scale);
  ctx.bezierCurveTo(228.5 * scale, 12.953125 * scale, 228.5 * scale, 171.453125 * scale, 228.5 * scale, 10.953125 * scale);
  ctx.bezierCurveTo(196.5 * scale, 76.953125 * scale, 206.5 * scale, 78.953125 * scale, 191.5 * scale, 114.953125 * scale);
  ctx.bezierCurveTo(162.5 * scale, 170.953125 * scale, 206.5 * scale, 220.953125 * scale, 210.5 * scale, 251.953125 * scale);
  ctx.bezierCurveTo(218.5 * scale, 287.953125 * scale, 220.5 * scale, 291.953125 * scale, 228.5 * scale, 331.953125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_snow_sept(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 33 * scale;
  can.height = 35 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(12.75 * scale, 7.1328125 * scale);
  ctx.bezierCurveTo(26.75 * scale, 8.1328125 * scale, 27.75 * scale, 14.1328125 * scale, 24.75 * scale, 23.1328125 * scale);
  ctx.bezierCurveTo(19.75 * scale, 31.1328125 * scale, 15.75 * scale, 33.1328125 * scale, 6.75 * scale, 26.1328125 * scale);
  ctx.bezierCurveTo(0.75 * scale, 19.1328125 * scale, 4.75 * scale, 8.1328125 * scale, 12.75 * scale, 7.1328125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_snow_step(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 20 * scale;
  can.height = 35 * scale;
  round_rect(ctx, 0, 0, 20, 35, 7);
  fill_path(ctx, color[0]);
  return can;
};

function create_winter_fox(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 161 * scale;
  can.height = 190 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 8);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(9 * scale, 93 * scale);
  ctx.bezierCurveTo(17 * scale, 95 * scale, 19 * scale, 95 * scale, 21 * scale, 95 * scale);
  ctx.bezierCurveTo(9 * scale, 83 * scale, 17 * scale, 93 * scale, 4 * scale, 76 * scale);
  ctx.bezierCurveTo(11 * scale, 75 * scale, 11 * scale, 75 * scale, 18 * scale, 75 * scale);
  ctx.bezierCurveTo(13 * scale, 67 * scale, 13 * scale, 67 * scale, 7 * scale, 59 * scale);
  ctx.bezierCurveTo(14 * scale, 59 * scale, 14 * scale, 59 * scale, 21 * scale, 59 * scale);
  ctx.bezierCurveTo(46 * scale, 35 * scale, 35 * scale, 45 * scale, 49 * scale, 31 * scale);
  ctx.bezierCurveTo(53 * scale, 24 * scale, 51 * scale, 21 * scale, 51 * scale, 16 * scale);
  ctx.bezierCurveTo(63 * scale, 23 * scale, 63 * scale, 24 * scale, 69 * scale, 29 * scale);
  ctx.bezierCurveTo(76 * scale, 7 * scale, 75 * scale, 11 * scale, 76 * scale, 6 * scale);
  ctx.bezierCurveTo(81 * scale, 12 * scale, 84 * scale, 18 * scale, 89 * scale, 27 * scale);
  ctx.bezierCurveTo(95 * scale, 25 * scale, 100 * scale, 16 * scale, 105 * scale, 14 * scale);
  ctx.bezierCurveTo(103 * scale, 25 * scale, 111 * scale, 33 * scale, 110 * scale, 34 * scale);
  ctx.bezierCurveTo(123 * scale, 48 * scale, 123 * scale, 48 * scale, 136 * scale, 62 * scale);
  ctx.bezierCurveTo(142 * scale, 60 * scale, 147 * scale, 59 * scale, 155 * scale, 58 * scale);
  ctx.bezierCurveTo(147 * scale, 65 * scale, 147 * scale, 65 * scale, 139 * scale, 73 * scale);
  ctx.bezierCurveTo(145 * scale, 73 * scale, 145 * scale, 73 * scale, 151 * scale, 73 * scale);
  ctx.bezierCurveTo(145 * scale, 80 * scale, 145 * scale, 80 * scale, 138 * scale, 87 * scale);
  ctx.bezierCurveTo(144 * scale, 88 * scale, 144 * scale, 88 * scale, 150 * scale, 89 * scale);
  ctx.bezierCurveTo(125 * scale, 103 * scale, 125 * scale, 125 * scale, 113 * scale, 141 * scale);
  ctx.bezierCurveTo(92 * scale, 178 * scale, 85 * scale, 177 * scale, 76 * scale, 178 * scale);
  ctx.bezierCurveTo(64 * scale, 179 * scale, 51 * scale, 164 * scale, 35 * scale, 131 * scale);
  ctx.bezierCurveTo(18 * scale, 95 * scale, 13 * scale, 99 * scale, 8 * scale, 93 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -8);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(9 * scale, 93 * scale);
  ctx.bezierCurveTo(17 * scale, 95 * scale, 19 * scale, 95 * scale, 21 * scale, 95 * scale);
  ctx.bezierCurveTo(9 * scale, 83 * scale, 17 * scale, 93 * scale, 4 * scale, 76 * scale);
  ctx.bezierCurveTo(11 * scale, 75 * scale, 11 * scale, 75 * scale, 18 * scale, 75 * scale);
  ctx.bezierCurveTo(13 * scale, 67 * scale, 13 * scale, 67 * scale, 7 * scale, 59 * scale);
  ctx.bezierCurveTo(14 * scale, 59 * scale, 14 * scale, 59 * scale, 21 * scale, 59 * scale);
  ctx.bezierCurveTo(46 * scale, 35 * scale, 35 * scale, 45 * scale, 49 * scale, 31 * scale);
  ctx.bezierCurveTo(53 * scale, 24 * scale, 51 * scale, 21 * scale, 51 * scale, 16 * scale);
  ctx.bezierCurveTo(63 * scale, 23 * scale, 63 * scale, 24 * scale, 69 * scale, 29 * scale);
  ctx.bezierCurveTo(76 * scale, 7 * scale, 75 * scale, 11 * scale, 76 * scale, 6 * scale);
  ctx.bezierCurveTo(81 * scale, 12 * scale, 84 * scale, 18 * scale, 89 * scale, 27 * scale);
  ctx.bezierCurveTo(95 * scale, 25 * scale, 100 * scale, 16 * scale, 105 * scale, 14 * scale);
  ctx.bezierCurveTo(103 * scale, 25 * scale, 111 * scale, 33 * scale, 110 * scale, 34 * scale);
  ctx.bezierCurveTo(123 * scale, 48 * scale, 123 * scale, 48 * scale, 136 * scale, 62 * scale);
  ctx.bezierCurveTo(142 * scale, 60 * scale, 147 * scale, 59 * scale, 155 * scale, 58 * scale);
  ctx.bezierCurveTo(147 * scale, 65 * scale, 147 * scale, 65 * scale, 139 * scale, 73 * scale);
  ctx.bezierCurveTo(145 * scale, 73 * scale, 145 * scale, 73 * scale, 151 * scale, 73 * scale);
  ctx.bezierCurveTo(145 * scale, 80 * scale, 145 * scale, 80 * scale, 138 * scale, 87 * scale);
  ctx.bezierCurveTo(144 * scale, 88 * scale, 144 * scale, 88 * scale, 150 * scale, 89 * scale);
  ctx.bezierCurveTo(125 * scale, 103 * scale, 125 * scale, 125 * scale, 113 * scale, 141 * scale);
  ctx.bezierCurveTo(92 * scale, 178 * scale, 85 * scale, 177 * scale, 76 * scale, 178 * scale);
  ctx.bezierCurveTo(64 * scale, 179 * scale, 51 * scale, 164 * scale, 35 * scale, 131 * scale);
  ctx.bezierCurveTo(18 * scale, 95 * scale, 13 * scale, 99 * scale, 8 * scale, 93 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(28 * scale, 63 * scale);
  ctx.bezierCurveTo(23 * scale, 54 * scale, 24 * scale, 47 * scale, 26 * scale, 37 * scale);
  ctx.bezierCurveTo(28 * scale, 29 * scale, 31 * scale, 31 * scale, 41 * scale, 35 * scale);
  ctx.bezierCurveTo(52 * scale, 45 * scale, 55 * scale, 51 * scale, 57 * scale, 53 * scale);
  ctx.bezierCurveTo(50 * scale, 50 * scale, 44 * scale, 47 * scale, 43 * scale, 48 * scale);
  ctx.bezierCurveTo(43 * scale, 52 * scale, 43 * scale, 52 * scale, 42 * scale, 57 * scale);
  ctx.bezierCurveTo(38 * scale, 54 * scale, 38 * scale, 54 * scale, 33 * scale, 51 * scale);
  ctx.bezierCurveTo(34 * scale, 56 * scale, 34 * scale, 56 * scale, 34 * scale, 61 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(99 * scale, 55 * scale);
  ctx.bezierCurveTo(107 * scale, 43 * scale, 113 * scale, 39 * scale, 121 * scale, 34 * scale);
  ctx.bezierCurveTo(130 * scale, 29 * scale, 130 * scale, 34 * scale, 130 * scale, 42 * scale);
  ctx.bezierCurveTo(131 * scale, 57 * scale, 128 * scale, 61 * scale, 129 * scale, 63 * scale);
  ctx.bezierCurveTo(124 * scale, 62 * scale, 124 * scale, 62 * scale, 119 * scale, 61 * scale);
  ctx.bezierCurveTo(119 * scale, 56 * scale, 120 * scale, 61 * scale, 118 * scale, 52 * scale);
  ctx.bezierCurveTo(115 * scale, 55 * scale, 111 * scale, 59 * scale, 111 * scale, 58 * scale);
  ctx.bezierCurveTo(110 * scale, 54 * scale, 109 * scale, 57 * scale, 109 * scale, 51 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  circle(ctx, 103 * scale, 110 * scale, 11 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 55 * scale, 111 * scale, 11 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 99 * scale, 107 * scale, 5 * scale);
  fill_path(ctx, color[1]);
  circle(ctx, 51 * scale, 108 * scale, 5 * scale);
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 121 * scale);
  ctx.bezierCurveTo(45 * scale, 128 * scale, 51 * scale, 133 * scale, 53 * scale, 141 * scale);
  ctx.bezierCurveTo(59 * scale, 161 * scale, 70 * scale, 173 * scale, 80 * scale, 169 * scale);
  ctx.bezierCurveTo(89 * scale, 172 * scale, 99 * scale, 149 * scale, 107 * scale, 133 * scale);
  ctx.bezierCurveTo(114 * scale, 122 * scale, 119 * scale, 123 * scale, 124 * scale, 119 * scale);
  ctx.bezierCurveTo(109 * scale, 148 * scale, 117 * scale, 133 * scale, 109 * scale, 147 * scale);
  ctx.bezierCurveTo(87 * scale, 180 * scale, 84 * scale, 179 * scale, 76 * scale, 178 * scale);
  ctx.bezierCurveTo(49 * scale, 173 * scale, 44 * scale, 149 * scale, 31 * scale, 121 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(-2, 0);
  ctx.moveTo(71 * scale, 162 * scale);
  ctx.bezierCurveTo(80 * scale, 155 * scale, 85 * scale, 159 * scale, 89 * scale, 164 * scale);
  ctx.bezierCurveTo(90 * scale, 171 * scale, 86 * scale, 173 * scale, 79 * scale, 173 * scale);
  ctx.bezierCurveTo(67 * scale, 172 * scale, 67 * scale, 168 * scale, 71 * scale, 162 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.translate(2, 0);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(9 * scale, 93 * scale);
  ctx.bezierCurveTo(17 * scale, 95 * scale, 19 * scale, 95 * scale, 21 * scale, 95 * scale);
  ctx.bezierCurveTo(9 * scale, 83 * scale, 17 * scale, 93 * scale, 4 * scale, 76 * scale);
  ctx.bezierCurveTo(11 * scale, 75 * scale, 11 * scale, 75 * scale, 18 * scale, 75 * scale);
  ctx.bezierCurveTo(13 * scale, 67 * scale, 13 * scale, 67 * scale, 7 * scale, 59 * scale);
  ctx.bezierCurveTo(14 * scale, 59 * scale, 14 * scale, 59 * scale, 21 * scale, 59 * scale);
  ctx.bezierCurveTo(46 * scale, 35 * scale, 35 * scale, 45 * scale, 49 * scale, 31 * scale);
  ctx.bezierCurveTo(53 * scale, 24 * scale, 51 * scale, 21 * scale, 51 * scale, 16 * scale);
  ctx.bezierCurveTo(63 * scale, 23 * scale, 63 * scale, 24 * scale, 69 * scale, 29 * scale);
  ctx.bezierCurveTo(76 * scale, 7 * scale, 75 * scale, 11 * scale, 76 * scale, 6 * scale);
  ctx.bezierCurveTo(81 * scale, 12 * scale, 84 * scale, 18 * scale, 89 * scale, 27 * scale);
  ctx.bezierCurveTo(95 * scale, 25 * scale, 100 * scale, 16 * scale, 105 * scale, 14 * scale);
  ctx.bezierCurveTo(103 * scale, 25 * scale, 111 * scale, 33 * scale, 110 * scale, 34 * scale);
  ctx.bezierCurveTo(123 * scale, 48 * scale, 123 * scale, 48 * scale, 136 * scale, 62 * scale);
  ctx.bezierCurveTo(142 * scale, 60 * scale, 147 * scale, 59 * scale, 155 * scale, 58 * scale);
  ctx.bezierCurveTo(147 * scale, 65 * scale, 147 * scale, 65 * scale, 139 * scale, 73 * scale);
  ctx.bezierCurveTo(145 * scale, 73 * scale, 145 * scale, 73 * scale, 151 * scale, 73 * scale);
  ctx.bezierCurveTo(145 * scale, 80 * scale, 145 * scale, 80 * scale, 138 * scale, 87 * scale);
  ctx.bezierCurveTo(144 * scale, 88 * scale, 144 * scale, 88 * scale, 150 * scale, 89 * scale);
  ctx.bezierCurveTo(125 * scale, 103 * scale, 125 * scale, 125 * scale, 113 * scale, 141 * scale);
  ctx.bezierCurveTo(92 * scale, 178 * scale, 85 * scale, 177 * scale, 76 * scale, 178 * scale);
  ctx.bezierCurveTo(64 * scale, 179 * scale, 51 * scale, 164 * scale, 35 * scale, 131 * scale);
  ctx.bezierCurveTo(18 * scale, 95 * scale, 13 * scale, 99 * scale, 8 * scale, 93 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(25 * scale, 63 * scale);
  ctx.bezierCurveTo(16 * scale, 58 * scale, 17 * scale, 51 * scale, 17 * scale, 33 * scale);
  ctx.bezierCurveTo(19 * scale, 12 * scale, 21 * scale, 12 * scale, 32 * scale, 17 * scale);
  ctx.bezierCurveTo(63 * scale, 31 * scale, 66 * scale, 45 * scale, 66 * scale, 54 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(91 * scale, 53 * scale);
  ctx.bezierCurveTo(91 * scale, 40 * scale, 98 * scale, 33 * scale, 121 * scale, 20 * scale);
  ctx.bezierCurveTo(137 * scale, 12 * scale, 137 * scale, 16 * scale, 139 * scale, 27 * scale);
  ctx.bezierCurveTo(141 * scale, 49 * scale, 140 * scale, 57 * scale, 134 * scale, 64 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 63 * scale);
  ctx.bezierCurveTo(23 * scale, 54 * scale, 24 * scale, 47 * scale, 26 * scale, 37 * scale);
  ctx.bezierCurveTo(28 * scale, 29 * scale, 31 * scale, 31 * scale, 41 * scale, 35 * scale);
  ctx.bezierCurveTo(52 * scale, 45 * scale, 55 * scale, 51 * scale, 57 * scale, 53 * scale);
  ctx.bezierCurveTo(50 * scale, 50 * scale, 44 * scale, 47 * scale, 43 * scale, 48 * scale);
  ctx.bezierCurveTo(43 * scale, 52 * scale, 43 * scale, 52 * scale, 42 * scale, 57 * scale);
  ctx.bezierCurveTo(38 * scale, 54 * scale, 38 * scale, 54 * scale, 33 * scale, 51 * scale);
  ctx.bezierCurveTo(34 * scale, 56 * scale, 34 * scale, 56 * scale, 34 * scale, 61 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(99 * scale, 55 * scale);
  ctx.bezierCurveTo(107 * scale, 43 * scale, 113 * scale, 39 * scale, 121 * scale, 34 * scale);
  ctx.bezierCurveTo(130 * scale, 29 * scale, 130 * scale, 34 * scale, 130 * scale, 42 * scale);
  ctx.bezierCurveTo(131 * scale, 57 * scale, 128 * scale, 61 * scale, 129 * scale, 63 * scale);
  ctx.bezierCurveTo(124 * scale, 62 * scale, 124 * scale, 62 * scale, 119 * scale, 61 * scale);
  ctx.bezierCurveTo(119 * scale, 56 * scale, 120 * scale, 61 * scale, 118 * scale, 52 * scale);
  ctx.bezierCurveTo(115 * scale, 55 * scale, 111 * scale, 59 * scale, 111 * scale, 58 * scale);
  ctx.bezierCurveTo(110 * scale, 54 * scale, 109 * scale, 57 * scale, 109 * scale, 51 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  return can;
};

function create_hurt_fox_winter(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 161 * scale;
  can.height = 190 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(9 * scale, 93 * scale);
  ctx.bezierCurveTo(17 * scale, 95 * scale, 19 * scale, 95 * scale, 21 * scale, 95 * scale);
  ctx.bezierCurveTo(9 * scale, 83 * scale, 17 * scale, 93 * scale, 4 * scale, 76 * scale);
  ctx.bezierCurveTo(11 * scale, 75 * scale, 11 * scale, 75 * scale, 18 * scale, 75 * scale);
  ctx.bezierCurveTo(13 * scale, 67 * scale, 13 * scale, 67 * scale, 7 * scale, 59 * scale);
  ctx.bezierCurveTo(14 * scale, 59 * scale, 14 * scale, 59 * scale, 21 * scale, 59 * scale);
  ctx.bezierCurveTo(46 * scale, 35 * scale, 35 * scale, 45 * scale, 49 * scale, 31 * scale);
  ctx.bezierCurveTo(53 * scale, 24 * scale, 51 * scale, 21 * scale, 51 * scale, 16 * scale);
  ctx.bezierCurveTo(63 * scale, 23 * scale, 63 * scale, 24 * scale, 69 * scale, 29 * scale);
  ctx.bezierCurveTo(76 * scale, 7 * scale, 75 * scale, 11 * scale, 76 * scale, 6 * scale);
  ctx.bezierCurveTo(81 * scale, 12 * scale, 84 * scale, 18 * scale, 89 * scale, 27 * scale);
  ctx.bezierCurveTo(95 * scale, 25 * scale, 100 * scale, 16 * scale, 105 * scale, 14 * scale);
  ctx.bezierCurveTo(103 * scale, 25 * scale, 111 * scale, 33 * scale, 110 * scale, 34 * scale);
  ctx.bezierCurveTo(123 * scale, 48 * scale, 123 * scale, 48 * scale, 136 * scale, 62 * scale);
  ctx.bezierCurveTo(142 * scale, 60 * scale, 147 * scale, 59 * scale, 155 * scale, 58 * scale);
  ctx.bezierCurveTo(147 * scale, 65 * scale, 147 * scale, 65 * scale, 139 * scale, 73 * scale);
  ctx.bezierCurveTo(145 * scale, 73 * scale, 145 * scale, 73 * scale, 151 * scale, 73 * scale);
  ctx.bezierCurveTo(145 * scale, 80 * scale, 145 * scale, 80 * scale, 138 * scale, 87 * scale);
  ctx.bezierCurveTo(144 * scale, 88 * scale, 144 * scale, 88 * scale, 150 * scale, 89 * scale);
  ctx.bezierCurveTo(125 * scale, 103 * scale, 125 * scale, 125 * scale, 113 * scale, 141 * scale);
  ctx.bezierCurveTo(92 * scale, 178 * scale, 85 * scale, 177 * scale, 76 * scale, 178 * scale);
  ctx.bezierCurveTo(64 * scale, 179 * scale, 51 * scale, 164 * scale, 35 * scale, 131 * scale);
  ctx.bezierCurveTo(18 * scale, 95 * scale, 13 * scale, 99 * scale, 8 * scale, 93 * scale);
  ctx.closePath();
  fill_path(ctx, color, color, 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(25 * scale, 63 * scale);
  ctx.bezierCurveTo(16 * scale, 58 * scale, 17 * scale, 51 * scale, 17 * scale, 33 * scale);
  ctx.bezierCurveTo(19 * scale, 12 * scale, 21 * scale, 12 * scale, 32 * scale, 17 * scale);
  ctx.bezierCurveTo(63 * scale, 31 * scale, 66 * scale, 45 * scale, 66 * scale, 54 * scale);
  fill_path(ctx, color, color, 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(91 * scale, 53 * scale);
  ctx.bezierCurveTo(91 * scale, 40 * scale, 98 * scale, 33 * scale, 121 * scale, 20 * scale);
  ctx.bezierCurveTo(137 * scale, 12 * scale, 137 * scale, 16 * scale, 139 * scale, 27 * scale);
  ctx.bezierCurveTo(141 * scale, 49 * scale, 140 * scale, 57 * scale, 134 * scale, 64 * scale);
  fill_path(ctx, color, color, 4 * scale);
  return can;
};

function create_polar_bear(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 147 * scale;
  can.height = 172 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(8 * scale, 50 * scale);
  ctx.bezierCurveTo(15 * scale, 16 * scale, 49 * scale, 6 * scale, 67 * scale, 6 * scale);
  ctx.bezierCurveTo(121 * scale, 3 * scale, 128 * scale, 32 * scale, 135 * scale, 48 * scale);
  ctx.bezierCurveTo(146 * scale, 96 * scale, 124 * scale, 131 * scale, 96 * scale, 135 * scale);
  ctx.bezierCurveTo(96 * scale, 158 * scale, 79 * scale, 156 * scale, 75 * scale, 156 * scale);
  ctx.bezierCurveTo(50 * scale, 154 * scale, 53 * scale, 150 * scale, 52 * scale, 135 * scale);
  ctx.bezierCurveTo(2 * scale, 127 * scale, 3 * scale, 87 * scale, 8 * scale, 50 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, -8 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(8 * scale, 50 * scale);
  ctx.bezierCurveTo(15 * scale, 16 * scale, 49 * scale, 6 * scale, 67 * scale, 6 * scale);
  ctx.bezierCurveTo(121 * scale, 3 * scale, 128 * scale, 32 * scale, 135 * scale, 48 * scale);
  ctx.bezierCurveTo(146 * scale, 96 * scale, 124 * scale, 131 * scale, 96 * scale, 135 * scale);
  ctx.bezierCurveTo(96 * scale, 158 * scale, 79 * scale, 156 * scale, 75 * scale, 156 * scale);
  ctx.bezierCurveTo(50 * scale, 154 * scale, 53 * scale, 150 * scale, 52 * scale, 135 * scale);
  ctx.bezierCurveTo(2 * scale, 127 * scale, 3 * scale, 87 * scale, 8 * scale, 50 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(14 * scale, 57 * scale);
  ctx.bezierCurveTo(2 * scale, 50 * scale, 5 * scale, 22 * scale, 24 * scale, 22 * scale);
  ctx.bezierCurveTo(41 * scale, 21 * scale, 54 * scale, 32 * scale, 55 * scale, 48 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 47 * scale);
  ctx.bezierCurveTo(94 * scale, 24 * scale, 116 * scale, 21 * scale, 120 * scale, 20 * scale);
  ctx.bezierCurveTo(144 * scale, 17 * scale, 146 * scale, 52 * scale, 133 * scale, 58 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  circle(ctx, 51 * scale, 91 * scale, 9 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 95 * scale, 91 * scale, 9 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 91 * scale, 89 * scale, 4 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 47 * scale, 89 * scale, 4 * scale);
  fill_path(ctx, color[4]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(54 * scale, 133 * scale);
  ctx.bezierCurveTo(56 * scale, 108 * scale, 64 * scale, 99 * scale, 73 * scale, 98 * scale);
  ctx.bezierCurveTo(86 * scale, 97 * scale, 91 * scale, 119 * scale, 93 * scale, 133 * scale);
  ctx.bezierCurveTo(94 * scale, 155 * scale, 90 * scale, 150 * scale, 74 * scale, 155 * scale);
  ctx.bezierCurveTo(50 * scale, 152 * scale, 55 * scale, 145 * scale, 54 * scale, 134 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(65.25 * scale, 135 * scale);
  ctx.bezierCurveTo(75.25 * scale, 128 * scale, 83.25 * scale, 133 * scale, 83.25 * scale, 138 * scale);
  ctx.bezierCurveTo(88.25 * scale, 148 * scale, 61.25 * scale, 149 * scale, 64.25 * scale, 137 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(74 * scale, 145 * scale);
  ctx.bezierCurveTo(74 * scale, 148 * scale, 74 * scale, 148 * scale, 74 * scale, 151 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(19 * scale, 58 * scale);
  ctx.bezierCurveTo(10 * scale, 38 * scale, 18 * scale, 33 * scale, 28 * scale, 34 * scale);
  ctx.bezierCurveTo(41 * scale, 39 * scale, 45 * scale, 45 * scale, 50 * scale, 51 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100 * scale, 51 * scale);
  ctx.bezierCurveTo(106 * scale, 36 * scale, 119 * scale, 31 * scale, 128 * scale, 36 * scale);
  ctx.bezierCurveTo(137 * scale, 49 * scale, 128 * scale, 58 * scale, 128 * scale, 60 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  return can;
};

function create_hurt_polar_bear(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 147 * scale;
  can.height = 172 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(8 * scale, 50 * scale);
  ctx.bezierCurveTo(15 * scale, 16 * scale, 49 * scale, 6 * scale, 67 * scale, 6 * scale);
  ctx.bezierCurveTo(121 * scale, 3 * scale, 128 * scale, 32 * scale, 135 * scale, 48 * scale);
  ctx.bezierCurveTo(146 * scale, 96 * scale, 124 * scale, 131 * scale, 96 * scale, 135 * scale);
  ctx.bezierCurveTo(96 * scale, 158 * scale, 79 * scale, 156 * scale, 75 * scale, 156 * scale);
  ctx.bezierCurveTo(50 * scale, 154 * scale, 53 * scale, 150 * scale, 52 * scale, 135 * scale);
  ctx.bezierCurveTo(2 * scale, 127 * scale, 3 * scale, 87 * scale, 8 * scale, 50 * scale);
  ctx.closePath();
  fill_path(ctx, color, color, 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(14 * scale, 57 * scale);
  ctx.bezierCurveTo(2 * scale, 50 * scale, 5 * scale, 22 * scale, 24 * scale, 22 * scale);
  ctx.bezierCurveTo(41 * scale, 21 * scale, 54 * scale, 32 * scale, 55 * scale, 48 * scale);
  fill_path(ctx, color, color, 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 47 * scale);
  ctx.bezierCurveTo(94 * scale, 24 * scale, 116 * scale, 21 * scale, 120 * scale, 20 * scale);
  ctx.bezierCurveTo(144 * scale, 17 * scale, 146 * scale, 52 * scale, 133 * scale, 58 * scale);
  fill_path(ctx, color, color, 4 * scale);
  return can;
};

function create_dragon(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 271 * scale;
  can.height = 366 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(0, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 99 * scale);
  ctx.bezierCurveTo(186 * scale, 123 * scale, 199 * scale, 152 * scale, 209 * scale, 169 * scale);
  ctx.bezierCurveTo(228 * scale, 205 * scale, 224 * scale, 245 * scale, 190 * scale, 276 * scale);
  ctx.bezierCurveTo(161 * scale, 296 * scale, 99 * scale, 292 * scale, 79 * scale, 274 * scale);
  ctx.bezierCurveTo(49 * scale, 253 * scale, 47 * scale, 214 * scale, 50 * scale, 197 * scale);
  ctx.bezierCurveTo(61 * scale, 143 * scale, 102 * scale, 113 * scale, 131 * scale, 99 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(73 * scale, 270 * scale);
  ctx.bezierCurveTo(79 * scale, 280 * scale, 77 * scale, 280 * scale, 78 * scale, 287 * scale);
  ctx.bezierCurveTo(78 * scale, 290 * scale, 83 * scale, 291 * scale, 82 * scale, 299 * scale);
  ctx.bezierCurveTo(81 * scale, 301 * scale, 87 * scale, 301 * scale, 92 * scale, 314 * scale);
  ctx.bezierCurveTo(94 * scale, 319 * scale, 100 * scale, 321 * scale, 107 * scale, 320 * scale);
  ctx.bezierCurveTo(111 * scale, 323 * scale, 114 * scale, 324 * scale, 119 * scale, 320 * scale);
  ctx.bezierCurveTo(137 * scale, 321 * scale, 146 * scale, 323 * scale, 139 * scale, 320 * scale);
  ctx.bezierCurveTo(141 * scale, 324 * scale, 150 * scale, 324 * scale, 153 * scale, 320 * scale);
  ctx.bezierCurveTo(168 * scale, 319 * scale, 171 * scale, 316 * scale, 173 * scale, 307 * scale);
  ctx.bezierCurveTo(180 * scale, 305 * scale, 180 * scale, 301 * scale, 178 * scale, 296 * scale);
  ctx.bezierCurveTo(183 * scale, 296 * scale, 185 * scale, 289 * scale, 188 * scale, 279 * scale);
  ctx.bezierCurveTo(171 * scale, 286 * scale, 149 * scale, 290 * scale, 132 * scale, 289 * scale);
  ctx.bezierCurveTo(101 * scale, 290 * scale, 86 * scale, 280 * scale, 74 * scale, 271 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(76 * scale, 252 * scale);
  ctx.bezierCurveTo(85 * scale, 294 * scale, 96 * scale, 314 * scale, 103 * scale, 314 * scale);
  ctx.bezierCurveTo(106 * scale, 316 * scale, 151 * scale, 314 * scale, 156 * scale, 314 * scale);
  ctx.bezierCurveTo(169 * scale, 317 * scale, 182 * scale, 285 * scale, 191 * scale, 256 * scale);
  ctx.bezierCurveTo(134.5 * scale, 254 * scale, 134.5 * scale, 254 * scale, 78 * scale, 252 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84 * scale, 257 * scale);
  ctx.bezierCurveTo(122 * scale, 273 * scale, 146 * scale, 268 * scale, 179 * scale, 261 * scale);
  ctx.bezierCurveTo(190 * scale, 258 * scale, 187 * scale, 266 * scale, 178 * scale, 272 * scale);
  ctx.bezierCurveTo(160 * scale, 284 * scale, 123 * scale, 282 * scale, 100 * scale, 277 * scale);
  ctx.bezierCurveTo(73 * scale, 260 * scale, 79 * scale, 257 * scale, 84 * scale, 257 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125 * scale, 65 * scale);
  ctx.bezierCurveTo(133 * scale, 45 * scale, 136 * scale, 42 * scale, 141 * scale, 55 * scale);
  ctx.bezierCurveTo(151 * scale, 96 * scale, 164 * scale, 117 * scale, 175 * scale, 134 * scale);
  ctx.bezierCurveTo(203 * scale, 181 * scale, 207 * scale, 182 * scale, 208 * scale, 215 * scale);
  ctx.bezierCurveTo(206 * scale, 240 * scale, 205 * scale, 246 * scale, 184 * scale, 258 * scale);
  ctx.bezierCurveTo(161 * scale, 267 * scale, 131 * scale, 272 * scale, 86 * scale, 258 * scale);
  ctx.bezierCurveTo(67 * scale, 252 * scale, 68 * scale, 239 * scale, 64 * scale, 216 * scale);
  ctx.bezierCurveTo(62 * scale, 194 * scale, 72 * scale, 169 * scale, 92 * scale, 142 * scale);
  ctx.bezierCurveTo(106 * scale, 121 * scale, 114 * scale, 101 * scale, 125 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 37 * scale);
  ctx.bezierCurveTo(116 * scale, 28 * scale, 119 * scale, 27 * scale, 126 * scale, 37 * scale);
  ctx.bezierCurveTo(134 * scale, 48 * scale, 134 * scale, 49 * scale, 132 * scale, 59 * scale);
  ctx.bezierCurveTo(131 * scale, 67 * scale, 127 * scale, 65 * scale, 120 * scale, 56 * scale);
  ctx.bezierCurveTo(114 * scale, 49 * scale, 113 * scale, 43 * scale, 115 * scale, 38 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(146 * scale, 34 * scale);
  ctx.bezierCurveTo(152 * scale, 28 * scale, 155 * scale, 27 * scale, 157 * scale, 39 * scale);
  ctx.bezierCurveTo(157 * scale, 45 * scale, 157 * scale, 49 * scale, 150 * scale, 56 * scale);
  ctx.bezierCurveTo(141 * scale, 66 * scale, 138 * scale, 66 * scale, 138 * scale, 57 * scale);
  ctx.bezierCurveTo(137 * scale, 50 * scale, 137 * scale, 47 * scale, 141 * scale, 42 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(143 * scale, 69 * scale);
  ctx.bezierCurveTo(148 * scale, 56 * scale, 156 * scale, 50 * scale, 158 * scale, 58 * scale);
  ctx.bezierCurveTo(159 * scale, 64 * scale, 160 * scale, 67 * scale, 153 * scale, 77 * scale);
  ctx.bezierCurveTo(148 * scale, 83 * scale, 145 * scale, 84 * scale, 143 * scale, 77 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(149 * scale, 92 * scale);
  ctx.bezierCurveTo(149 * scale, 89 * scale, 151 * scale, 84 * scale, 156 * scale, 79 * scale);
  ctx.bezierCurveTo(161 * scale, 73 * scale, 163 * scale, 78 * scale, 162 * scale, 86 * scale);
  ctx.bezierCurveTo(161 * scale, 91 * scale, 155 * scale, 99 * scale, 152 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111 * scale, 61 * scale);
  ctx.bezierCurveTo(114 * scale, 51 * scale, 117 * scale, 51 * scale, 124 * scale, 64 * scale);
  ctx.bezierCurveTo(128 * scale, 68 * scale, 128 * scale, 76 * scale, 126 * scale, 79 * scale);
  ctx.bezierCurveTo(123 * scale, 84 * scale, 122 * scale, 82 * scale, 115 * scale, 74 * scale);
  ctx.bezierCurveTo(112 * scale, 67 * scale, 115 * scale, 74 * scale, 115 * scale, 74 * scale);
  ctx.bezierCurveTo(111 * scale, 68 * scale, 111 * scale, 66 * scale, 111 * scale, 62 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107 * scale, 81 * scale);
  ctx.bezierCurveTo(108 * scale, 74 * scale, 112 * scale, 73 * scale, 118 * scale, 84 * scale);
  ctx.bezierCurveTo(122 * scale, 88 * scale, 122 * scale, 93 * scale, 121 * scale, 98 * scale);
  ctx.bezierCurveTo(114 * scale, 98 * scale, 113 * scale, 98 * scale, 109 * scale, 90 * scale);
  ctx.bezierCurveTo(107 * scale, 87 * scale, 106 * scale, 85 * scale, 107 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 99 * scale);
  ctx.bezierCurveTo(186 * scale, 123 * scale, 199 * scale, 152 * scale, 209 * scale, 169 * scale);
  ctx.bezierCurveTo(228 * scale, 205 * scale, 224 * scale, 245 * scale, 190 * scale, 276 * scale);
  ctx.bezierCurveTo(161 * scale, 296 * scale, 99 * scale, 292 * scale, 79 * scale, 274 * scale);
  ctx.bezierCurveTo(49 * scale, 253 * scale, 47 * scale, 214 * scale, 50 * scale, 197 * scale);
  ctx.bezierCurveTo(61 * scale, 143 * scale, 102 * scale, 113 * scale, 131 * scale, 99 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(73 * scale, 270 * scale);
  ctx.bezierCurveTo(79 * scale, 280 * scale, 77 * scale, 280 * scale, 78 * scale, 287 * scale);
  ctx.bezierCurveTo(78 * scale, 290 * scale, 83 * scale, 291 * scale, 82 * scale, 299 * scale);
  ctx.bezierCurveTo(81 * scale, 301 * scale, 87 * scale, 301 * scale, 92 * scale, 314 * scale);
  ctx.bezierCurveTo(94 * scale, 319 * scale, 100 * scale, 321 * scale, 107 * scale, 320 * scale);
  ctx.bezierCurveTo(111 * scale, 323 * scale, 114 * scale, 324 * scale, 119 * scale, 320 * scale);
  ctx.bezierCurveTo(137 * scale, 321 * scale, 146 * scale, 323 * scale, 139 * scale, 320 * scale);
  ctx.bezierCurveTo(141 * scale, 324 * scale, 150 * scale, 324 * scale, 153 * scale, 320 * scale);
  ctx.bezierCurveTo(168 * scale, 319 * scale, 171 * scale, 316 * scale, 173 * scale, 307 * scale);
  ctx.bezierCurveTo(180 * scale, 305 * scale, 180 * scale, 301 * scale, 178 * scale, 296 * scale);
  ctx.bezierCurveTo(183 * scale, 296 * scale, 185 * scale, 289 * scale, 188 * scale, 279 * scale);
  ctx.bezierCurveTo(171 * scale, 286 * scale, 149 * scale, 290 * scale, 132 * scale, 289 * scale);
  ctx.bezierCurveTo(101 * scale, 290 * scale, 86 * scale, 280 * scale, 74 * scale, 271 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(76 * scale, 252 * scale);
  ctx.bezierCurveTo(85 * scale, 294 * scale, 96 * scale, 314 * scale, 103 * scale, 314 * scale);
  ctx.bezierCurveTo(106 * scale, 316 * scale, 151 * scale, 314 * scale, 156 * scale, 314 * scale);
  ctx.bezierCurveTo(169 * scale, 317 * scale, 182 * scale, 285 * scale, 191 * scale, 256 * scale);
  ctx.bezierCurveTo(134.5 * scale, 254 * scale, 134.5 * scale, 254 * scale, 78 * scale, 252 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84 * scale, 257 * scale);
  ctx.bezierCurveTo(122 * scale, 273 * scale, 146 * scale, 268 * scale, 179 * scale, 261 * scale);
  ctx.bezierCurveTo(190 * scale, 258 * scale, 187 * scale, 266 * scale, 178 * scale, 272 * scale);
  ctx.bezierCurveTo(160 * scale, 284 * scale, 123 * scale, 282 * scale, 100 * scale, 277 * scale);
  ctx.bezierCurveTo(73 * scale, 260 * scale, 79 * scale, 257 * scale, 84 * scale, 257 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125 * scale, 65 * scale);
  ctx.bezierCurveTo(133 * scale, 45 * scale, 136 * scale, 42 * scale, 141 * scale, 55 * scale);
  ctx.bezierCurveTo(151 * scale, 96 * scale, 164 * scale, 117 * scale, 175 * scale, 134 * scale);
  ctx.bezierCurveTo(203 * scale, 181 * scale, 207 * scale, 182 * scale, 208 * scale, 215 * scale);
  ctx.bezierCurveTo(206 * scale, 240 * scale, 205 * scale, 246 * scale, 184 * scale, 258 * scale);
  ctx.bezierCurveTo(161 * scale, 267 * scale, 131 * scale, 272 * scale, 86 * scale, 258 * scale);
  ctx.bezierCurveTo(67 * scale, 252 * scale, 68 * scale, 239 * scale, 64 * scale, 216 * scale);
  ctx.bezierCurveTo(62 * scale, 194 * scale, 72 * scale, 169 * scale, 92 * scale, 142 * scale);
  ctx.bezierCurveTo(106 * scale, 121 * scale, 114 * scale, 101 * scale, 125 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 37 * scale);
  ctx.bezierCurveTo(116 * scale, 28 * scale, 119 * scale, 27 * scale, 126 * scale, 37 * scale);
  ctx.bezierCurveTo(134 * scale, 48 * scale, 134 * scale, 49 * scale, 132 * scale, 59 * scale);
  ctx.bezierCurveTo(131 * scale, 67 * scale, 127 * scale, 65 * scale, 120 * scale, 56 * scale);
  ctx.bezierCurveTo(114 * scale, 49 * scale, 113 * scale, 43 * scale, 115 * scale, 38 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(146 * scale, 34 * scale);
  ctx.bezierCurveTo(152 * scale, 28 * scale, 155 * scale, 27 * scale, 157 * scale, 39 * scale);
  ctx.bezierCurveTo(157 * scale, 45 * scale, 157 * scale, 49 * scale, 150 * scale, 56 * scale);
  ctx.bezierCurveTo(141 * scale, 66 * scale, 138 * scale, 66 * scale, 138 * scale, 57 * scale);
  ctx.bezierCurveTo(137 * scale, 50 * scale, 137 * scale, 47 * scale, 141 * scale, 42 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(143 * scale, 69 * scale);
  ctx.bezierCurveTo(148 * scale, 56 * scale, 156 * scale, 50 * scale, 158 * scale, 58 * scale);
  ctx.bezierCurveTo(159 * scale, 64 * scale, 160 * scale, 67 * scale, 153 * scale, 77 * scale);
  ctx.bezierCurveTo(148 * scale, 83 * scale, 145 * scale, 84 * scale, 143 * scale, 77 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(149 * scale, 92 * scale);
  ctx.bezierCurveTo(149 * scale, 89 * scale, 151 * scale, 84 * scale, 156 * scale, 79 * scale);
  ctx.bezierCurveTo(161 * scale, 73 * scale, 163 * scale, 78 * scale, 162 * scale, 86 * scale);
  ctx.bezierCurveTo(161 * scale, 91 * scale, 155 * scale, 99 * scale, 152 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111 * scale, 61 * scale);
  ctx.bezierCurveTo(114 * scale, 51 * scale, 117 * scale, 51 * scale, 124 * scale, 64 * scale);
  ctx.bezierCurveTo(128 * scale, 68 * scale, 128 * scale, 76 * scale, 126 * scale, 79 * scale);
  ctx.bezierCurveTo(123 * scale, 84 * scale, 122 * scale, 82 * scale, 115 * scale, 74 * scale);
  ctx.bezierCurveTo(112 * scale, 67 * scale, 115 * scale, 74 * scale, 115 * scale, 74 * scale);
  ctx.bezierCurveTo(111 * scale, 68 * scale, 111 * scale, 66 * scale, 111 * scale, 62 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107 * scale, 81 * scale);
  ctx.bezierCurveTo(108 * scale, 74 * scale, 112 * scale, 73 * scale, 118 * scale, 84 * scale);
  ctx.bezierCurveTo(122 * scale, 88 * scale, 122 * scale, 93 * scale, 121 * scale, 98 * scale);
  ctx.bezierCurveTo(114 * scale, 98 * scale, 113 * scale, 98 * scale, 109 * scale, 90 * scale);
  ctx.bezierCurveTo(107 * scale, 87 * scale, 106 * scale, 85 * scale, 107 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 99 * scale);
  ctx.bezierCurveTo(186 * scale, 123 * scale, 199 * scale, 152 * scale, 209 * scale, 169 * scale);
  ctx.bezierCurveTo(228 * scale, 205 * scale, 224 * scale, 245 * scale, 190 * scale, 276 * scale);
  ctx.bezierCurveTo(161 * scale, 296 * scale, 99 * scale, 292 * scale, 79 * scale, 274 * scale);
  ctx.bezierCurveTo(49 * scale, 253 * scale, 47 * scale, 214 * scale, 50 * scale, 197 * scale);
  ctx.bezierCurveTo(61 * scale, 143 * scale, 102 * scale, 113 * scale, 131 * scale, 99 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(73 * scale, 270 * scale);
  ctx.bezierCurveTo(79 * scale, 280 * scale, 77 * scale, 280 * scale, 78 * scale, 287 * scale);
  ctx.bezierCurveTo(78 * scale, 290 * scale, 83 * scale, 291 * scale, 82 * scale, 299 * scale);
  ctx.bezierCurveTo(81 * scale, 301 * scale, 87 * scale, 301 * scale, 92 * scale, 314 * scale);
  ctx.bezierCurveTo(94 * scale, 319 * scale, 100 * scale, 321 * scale, 107 * scale, 320 * scale);
  ctx.bezierCurveTo(111 * scale, 323 * scale, 114 * scale, 324 * scale, 119 * scale, 320 * scale);
  ctx.bezierCurveTo(137 * scale, 321 * scale, 146 * scale, 323 * scale, 139 * scale, 320 * scale);
  ctx.bezierCurveTo(141 * scale, 324 * scale, 150 * scale, 324 * scale, 153 * scale, 320 * scale);
  ctx.bezierCurveTo(168 * scale, 319 * scale, 171 * scale, 316 * scale, 173 * scale, 307 * scale);
  ctx.bezierCurveTo(180 * scale, 305 * scale, 180 * scale, 301 * scale, 178 * scale, 296 * scale);
  ctx.bezierCurveTo(183 * scale, 296 * scale, 185 * scale, 289 * scale, 188 * scale, 279 * scale);
  ctx.bezierCurveTo(171 * scale, 286 * scale, 149 * scale, 290 * scale, 132 * scale, 289 * scale);
  ctx.bezierCurveTo(101 * scale, 290 * scale, 86 * scale, 280 * scale, 74 * scale, 271 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(76 * scale, 252 * scale);
  ctx.bezierCurveTo(85 * scale, 294 * scale, 96 * scale, 314 * scale, 103 * scale, 314 * scale);
  ctx.bezierCurveTo(106 * scale, 316 * scale, 151 * scale, 314 * scale, 156 * scale, 314 * scale);
  ctx.bezierCurveTo(169 * scale, 317 * scale, 182 * scale, 285 * scale, 191 * scale, 256 * scale);
  ctx.bezierCurveTo(134.5 * scale, 254 * scale, 134.5 * scale, 254 * scale, 78 * scale, 252 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84 * scale, 257 * scale);
  ctx.bezierCurveTo(122 * scale, 273 * scale, 146 * scale, 268 * scale, 179 * scale, 261 * scale);
  ctx.bezierCurveTo(190 * scale, 258 * scale, 187 * scale, 266 * scale, 178 * scale, 272 * scale);
  ctx.bezierCurveTo(160 * scale, 284 * scale, 123 * scale, 282 * scale, 100 * scale, 277 * scale);
  ctx.bezierCurveTo(73 * scale, 260 * scale, 79 * scale, 257 * scale, 84 * scale, 257 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  circle(ctx, 102 * scale, 269 * scale, 11 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 98 * scale, 266 * scale, 5 * scale);
  fill_path(ctx, color[6]);
  circle(ctx, 168 * scale, 269 * scale, 11 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 164 * scale, 266 * scale, 5 * scale);
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125 * scale, 65 * scale);
  ctx.bezierCurveTo(133 * scale, 45 * scale, 136 * scale, 42 * scale, 141 * scale, 55 * scale);
  ctx.bezierCurveTo(151 * scale, 96 * scale, 164 * scale, 117 * scale, 175 * scale, 134 * scale);
  ctx.bezierCurveTo(203 * scale, 181 * scale, 207 * scale, 182 * scale, 208 * scale, 215 * scale);
  ctx.bezierCurveTo(206 * scale, 240 * scale, 205 * scale, 246 * scale, 184 * scale, 258 * scale);
  ctx.bezierCurveTo(161 * scale, 267 * scale, 131 * scale, 272 * scale, 86 * scale, 258 * scale);
  ctx.bezierCurveTo(67 * scale, 252 * scale, 68 * scale, 239 * scale, 64 * scale, 216 * scale);
  ctx.bezierCurveTo(62 * scale, 194 * scale, 72 * scale, 169 * scale, 92 * scale, 142 * scale);
  ctx.bezierCurveTo(106 * scale, 121 * scale, 114 * scale, 101 * scale, 125 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 235 * scale);
  ctx.bezierCurveTo(118 * scale, 258 * scale, 137 * scale, 268 * scale, 148 * scale, 246 * scale);
  ctx.bezierCurveTo(156 * scale, 228 * scale, 152 * scale, 169 * scale, 150 * scale, 140 * scale);
  ctx.bezierCurveTo(147 * scale, 87 * scale, 143 * scale, 69 * scale, 142 * scale, 60 * scale);
  ctx.bezierCurveTo(136 * scale, 44 * scale, 132 * scale, 43 * scale, 127 * scale, 62 * scale);
  ctx.bezierCurveTo(119 * scale, 116 * scale, 119 * scale, 140 * scale, 116 * scale, 166 * scale);
  ctx.bezierCurveTo(113 * scale, 202 * scale, 113 * scale, 223 * scale, 115 * scale, 233 * scale);
  ctx.closePath();
  fill_path(ctx, color[4]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(132 * scale, 219 * scale);
  ctx.bezierCurveTo(140 * scale, 229 * scale, 142 * scale, 231 * scale, 145 * scale, 237 * scale);
  ctx.bezierCurveTo(145 * scale, 245 * scale, 139 * scale, 249 * scale, 133 * scale, 249 * scale);
  ctx.bezierCurveTo(123 * scale, 248 * scale, 123 * scale, 243 * scale, 121 * scale, 239 * scale);
  ctx.bezierCurveTo(126 * scale, 227 * scale, 129 * scale, 223 * scale, 132 * scale, 219 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 179 * scale);
  ctx.bezierCurveTo(140 * scale, 188.5 * scale, 140 * scale, 188.5 * scale, 147 * scale, 198 * scale);
  ctx.bezierCurveTo(148 * scale, 209 * scale, 142 * scale, 214 * scale, 133 * scale, 214 * scale);
  ctx.bezierCurveTo(121 * scale, 211 * scale, 121 * scale, 207 * scale, 120 * scale, 200 * scale);
  ctx.bezierCurveTo(126.5 * scale, 189.5 * scale, 126.5 * scale, 189.5 * scale, 133 * scale, 179 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 143 * scale);
  ctx.bezierCurveTo(139 * scale, 151.5 * scale, 139 * scale, 151.5 * scale, 145 * scale, 160 * scale);
  ctx.bezierCurveTo(143 * scale, 167 * scale, 140 * scale, 170 * scale, 134 * scale, 170 * scale);
  ctx.bezierCurveTo(128 * scale, 169 * scale, 124 * scale, 167 * scale, 123 * scale, 161 * scale);
  ctx.bezierCurveTo(128 * scale, 152 * scale, 128 * scale, 152 * scale, 133 * scale, 143 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 115 * scale);
  ctx.bezierCurveTo(137.5 * scale, 121.5 * scale, 137.5 * scale, 121.5 * scale, 142 * scale, 128 * scale);
  ctx.bezierCurveTo(141 * scale, 133 * scale, 138 * scale, 135 * scale, 133 * scale, 135 * scale);
  ctx.bezierCurveTo(129 * scale, 135 * scale, 125 * scale, 132 * scale, 125 * scale, 129 * scale);
  ctx.bezierCurveTo(129 * scale, 122 * scale, 129 * scale, 122 * scale, 133 * scale, 115 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 94 * scale);
  ctx.bezierCurveTo(136.5 * scale, 98.5 * scale, 136.5 * scale, 98.5 * scale, 140 * scale, 103 * scale);
  ctx.bezierCurveTo(139 * scale, 109 * scale, 137 * scale, 109 * scale, 133 * scale, 110 * scale);
  ctx.bezierCurveTo(127 * scale, 108 * scale, 129 * scale, 107 * scale, 127 * scale, 105 * scale);
  ctx.bezierCurveTo(130 * scale, 99.5 * scale, 130 * scale, 99.5 * scale, 133 * scale, 94 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130 * scale, 279 * scale);
  ctx.bezierCurveTo(136.5 * scale, 287.5 * scale, 136.5 * scale, 287.5 * scale, 143 * scale, 296 * scale);
  ctx.bezierCurveTo(143 * scale, 302 * scale, 139 * scale, 309 * scale, 131 * scale, 308 * scale);
  ctx.bezierCurveTo(123 * scale, 306 * scale, 121 * scale, 303 * scale, 120 * scale, 297 * scale);
  ctx.bezierCurveTo(125.5 * scale, 288.5 * scale, 125.5 * scale, 288.5 * scale, 131 * scale, 280 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(147 * scale, 303 * scale);
  ctx.bezierCurveTo(151 * scale, 311 * scale, 151 * scale, 319 * scale, 147 * scale, 321 * scale);
  ctx.bezierCurveTo(138 * scale, 320 * scale, 145 * scale, 308 * scale, 147 * scale, 303 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 303 * scale);
  ctx.bezierCurveTo(115 * scale, 312 * scale, 118 * scale, 319 * scale, 115 * scale, 319 * scale);
  ctx.bezierCurveTo(112 * scale, 324 * scale, 109 * scale, 318 * scale, 109 * scale, 314 * scale);
  ctx.bezierCurveTo(109 * scale, 308 * scale, 112 * scale, 303 * scale, 115 * scale, 303 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(89 * scale, 280 * scale);
  ctx.bezierCurveTo(83 * scale, 279 * scale, 80 * scale, 281 * scale, 81 * scale, 286 * scale);
  ctx.bezierCurveTo(83 * scale, 290 * scale, 84 * scale, 290 * scale, 87 * scale, 286 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(94 * scale, 290 * scale);
  ctx.bezierCurveTo(93 * scale, 294 * scale, 90 * scale, 303 * scale, 86 * scale, 298 * scale);
  ctx.bezierCurveTo(84 * scale, 295 * scale, 84 * scale, 291 * scale, 89 * scale, 291 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(163 * scale, 295 * scale);
  ctx.bezierCurveTo(175 * scale, 294 * scale, 176 * scale, 296 * scale, 175 * scale, 301 * scale);
  ctx.bezierCurveTo(174 * scale, 305 * scale, 171 * scale, 305 * scale, 166 * scale, 300 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(172 * scale, 286 * scale);
  ctx.bezierCurveTo(180 * scale, 285 * scale, 181 * scale, 285 * scale, 180 * scale, 291 * scale);
  ctx.bezierCurveTo(176 * scale, 295 * scale, 174 * scale, 294 * scale, 172 * scale, 286 * scale);
  ctx.closePath();
  fill_path(ctx, color[8]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 37 * scale);
  ctx.bezierCurveTo(116 * scale, 28 * scale, 119 * scale, 27 * scale, 126 * scale, 37 * scale);
  ctx.bezierCurveTo(134 * scale, 48 * scale, 134 * scale, 49 * scale, 132 * scale, 59 * scale);
  ctx.bezierCurveTo(131 * scale, 67 * scale, 127 * scale, 65 * scale, 120 * scale, 56 * scale);
  ctx.bezierCurveTo(114 * scale, 49 * scale, 113 * scale, 43 * scale, 115 * scale, 38 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(146 * scale, 34 * scale);
  ctx.bezierCurveTo(152 * scale, 28 * scale, 155 * scale, 27 * scale, 157 * scale, 39 * scale);
  ctx.bezierCurveTo(157 * scale, 45 * scale, 157 * scale, 49 * scale, 150 * scale, 56 * scale);
  ctx.bezierCurveTo(141 * scale, 66 * scale, 138 * scale, 66 * scale, 138 * scale, 57 * scale);
  ctx.bezierCurveTo(137 * scale, 50 * scale, 137 * scale, 47 * scale, 141 * scale, 42 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(143 * scale, 69 * scale);
  ctx.bezierCurveTo(148 * scale, 56 * scale, 156 * scale, 50 * scale, 158 * scale, 58 * scale);
  ctx.bezierCurveTo(159 * scale, 64 * scale, 160 * scale, 67 * scale, 153 * scale, 77 * scale);
  ctx.bezierCurveTo(148 * scale, 83 * scale, 145 * scale, 84 * scale, 143 * scale, 77 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(149 * scale, 92 * scale);
  ctx.bezierCurveTo(149 * scale, 89 * scale, 151 * scale, 84 * scale, 156 * scale, 79 * scale);
  ctx.bezierCurveTo(161 * scale, 73 * scale, 163 * scale, 78 * scale, 162 * scale, 86 * scale);
  ctx.bezierCurveTo(161 * scale, 91 * scale, 155 * scale, 99 * scale, 152 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111 * scale, 61 * scale);
  ctx.bezierCurveTo(114 * scale, 51 * scale, 117 * scale, 51 * scale, 124 * scale, 64 * scale);
  ctx.bezierCurveTo(128 * scale, 68 * scale, 128 * scale, 76 * scale, 126 * scale, 79 * scale);
  ctx.bezierCurveTo(123 * scale, 84 * scale, 122 * scale, 82 * scale, 115 * scale, 74 * scale);
  ctx.bezierCurveTo(112 * scale, 67 * scale, 115 * scale, 74 * scale, 115 * scale, 74 * scale);
  ctx.bezierCurveTo(111 * scale, 68 * scale, 111 * scale, 66 * scale, 111 * scale, 62 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107 * scale, 81 * scale);
  ctx.bezierCurveTo(108 * scale, 74 * scale, 112 * scale, 73 * scale, 118 * scale, 84 * scale);
  ctx.bezierCurveTo(122 * scale, 88 * scale, 122 * scale, 93 * scale, 121 * scale, 98 * scale);
  ctx.bezierCurveTo(114 * scale, 98 * scale, 113 * scale, 98 * scale, 109 * scale, 90 * scale);
  ctx.bezierCurveTo(107 * scale, 87 * scale, 106 * scale, 85 * scale, 107 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[7]);
  return can;
};

function create_hurt_dragon(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 271 * scale;
  can.height = 366 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(133 * scale, 99 * scale);
  ctx.bezierCurveTo(186 * scale, 123 * scale, 199 * scale, 152 * scale, 209 * scale, 169 * scale);
  ctx.bezierCurveTo(228 * scale, 205 * scale, 224 * scale, 245 * scale, 190 * scale, 276 * scale);
  ctx.bezierCurveTo(161 * scale, 296 * scale, 99 * scale, 292 * scale, 79 * scale, 274 * scale);
  ctx.bezierCurveTo(49 * scale, 253 * scale, 47 * scale, 214 * scale, 50 * scale, 197 * scale);
  ctx.bezierCurveTo(61 * scale, 143 * scale, 102 * scale, 113 * scale, 131 * scale, 99 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(73 * scale, 270 * scale);
  ctx.bezierCurveTo(79 * scale, 280 * scale, 77 * scale, 280 * scale, 78 * scale, 287 * scale);
  ctx.bezierCurveTo(78 * scale, 290 * scale, 83 * scale, 291 * scale, 82 * scale, 299 * scale);
  ctx.bezierCurveTo(81 * scale, 301 * scale, 87 * scale, 301 * scale, 92 * scale, 314 * scale);
  ctx.bezierCurveTo(94 * scale, 319 * scale, 100 * scale, 321 * scale, 107 * scale, 320 * scale);
  ctx.bezierCurveTo(111 * scale, 323 * scale, 114 * scale, 324 * scale, 119 * scale, 320 * scale);
  ctx.bezierCurveTo(137 * scale, 321 * scale, 146 * scale, 323 * scale, 139 * scale, 320 * scale);
  ctx.bezierCurveTo(141 * scale, 324 * scale, 150 * scale, 324 * scale, 153 * scale, 320 * scale);
  ctx.bezierCurveTo(168 * scale, 319 * scale, 171 * scale, 316 * scale, 173 * scale, 307 * scale);
  ctx.bezierCurveTo(180 * scale, 305 * scale, 180 * scale, 301 * scale, 178 * scale, 296 * scale);
  ctx.bezierCurveTo(183 * scale, 296 * scale, 185 * scale, 289 * scale, 188 * scale, 279 * scale);
  ctx.bezierCurveTo(171 * scale, 286 * scale, 149 * scale, 290 * scale, 132 * scale, 289 * scale);
  ctx.bezierCurveTo(101 * scale, 290 * scale, 86 * scale, 280 * scale, 74 * scale, 271 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(76 * scale, 252 * scale);
  ctx.bezierCurveTo(85 * scale, 294 * scale, 96 * scale, 314 * scale, 103 * scale, 314 * scale);
  ctx.bezierCurveTo(106 * scale, 316 * scale, 151 * scale, 314 * scale, 156 * scale, 314 * scale);
  ctx.bezierCurveTo(169 * scale, 317 * scale, 182 * scale, 285 * scale, 191 * scale, 256 * scale);
  ctx.bezierCurveTo(134.5 * scale, 254 * scale, 134.5 * scale, 254 * scale, 78 * scale, 252 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84 * scale, 257 * scale);
  ctx.bezierCurveTo(122 * scale, 273 * scale, 146 * scale, 268 * scale, 179 * scale, 261 * scale);
  ctx.bezierCurveTo(190 * scale, 258 * scale, 187 * scale, 266 * scale, 178 * scale, 272 * scale);
  ctx.bezierCurveTo(160 * scale, 284 * scale, 123 * scale, 282 * scale, 100 * scale, 277 * scale);
  ctx.bezierCurveTo(73 * scale, 260 * scale, 79 * scale, 257 * scale, 84 * scale, 257 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125 * scale, 65 * scale);
  ctx.bezierCurveTo(133 * scale, 45 * scale, 136 * scale, 42 * scale, 141 * scale, 55 * scale);
  ctx.bezierCurveTo(151 * scale, 96 * scale, 164 * scale, 117 * scale, 175 * scale, 134 * scale);
  ctx.bezierCurveTo(203 * scale, 181 * scale, 207 * scale, 182 * scale, 208 * scale, 215 * scale);
  ctx.bezierCurveTo(206 * scale, 240 * scale, 205 * scale, 246 * scale, 184 * scale, 258 * scale);
  ctx.bezierCurveTo(161 * scale, 267 * scale, 131 * scale, 272 * scale, 86 * scale, 258 * scale);
  ctx.bezierCurveTo(67 * scale, 252 * scale, 68 * scale, 239 * scale, 64 * scale, 216 * scale);
  ctx.bezierCurveTo(62 * scale, 194 * scale, 72 * scale, 169 * scale, 92 * scale, 142 * scale);
  ctx.bezierCurveTo(106 * scale, 121 * scale, 114 * scale, 101 * scale, 125 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 37 * scale);
  ctx.bezierCurveTo(116 * scale, 28 * scale, 119 * scale, 27 * scale, 126 * scale, 37 * scale);
  ctx.bezierCurveTo(134 * scale, 48 * scale, 134 * scale, 49 * scale, 132 * scale, 59 * scale);
  ctx.bezierCurveTo(131 * scale, 67 * scale, 127 * scale, 65 * scale, 120 * scale, 56 * scale);
  ctx.bezierCurveTo(114 * scale, 49 * scale, 113 * scale, 43 * scale, 115 * scale, 38 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(146 * scale, 34 * scale);
  ctx.bezierCurveTo(152 * scale, 28 * scale, 155 * scale, 27 * scale, 157 * scale, 39 * scale);
  ctx.bezierCurveTo(157 * scale, 45 * scale, 157 * scale, 49 * scale, 150 * scale, 56 * scale);
  ctx.bezierCurveTo(141 * scale, 66 * scale, 138 * scale, 66 * scale, 138 * scale, 57 * scale);
  ctx.bezierCurveTo(137 * scale, 50 * scale, 137 * scale, 47 * scale, 141 * scale, 42 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(143 * scale, 69 * scale);
  ctx.bezierCurveTo(148 * scale, 56 * scale, 156 * scale, 50 * scale, 158 * scale, 58 * scale);
  ctx.bezierCurveTo(159 * scale, 64 * scale, 160 * scale, 67 * scale, 153 * scale, 77 * scale);
  ctx.bezierCurveTo(148 * scale, 83 * scale, 145 * scale, 84 * scale, 143 * scale, 77 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(149 * scale, 92 * scale);
  ctx.bezierCurveTo(149 * scale, 89 * scale, 151 * scale, 84 * scale, 156 * scale, 79 * scale);
  ctx.bezierCurveTo(161 * scale, 73 * scale, 163 * scale, 78 * scale, 162 * scale, 86 * scale);
  ctx.bezierCurveTo(161 * scale, 91 * scale, 155 * scale, 99 * scale, 152 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111 * scale, 61 * scale);
  ctx.bezierCurveTo(114 * scale, 51 * scale, 117 * scale, 51 * scale, 124 * scale, 64 * scale);
  ctx.bezierCurveTo(128 * scale, 68 * scale, 128 * scale, 76 * scale, 126 * scale, 79 * scale);
  ctx.bezierCurveTo(123 * scale, 84 * scale, 122 * scale, 82 * scale, 115 * scale, 74 * scale);
  ctx.bezierCurveTo(112 * scale, 67 * scale, 115 * scale, 74 * scale, 115 * scale, 74 * scale);
  ctx.bezierCurveTo(111 * scale, 68 * scale, 111 * scale, 66 * scale, 111 * scale, 62 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107 * scale, 81 * scale);
  ctx.bezierCurveTo(108 * scale, 74 * scale, 112 * scale, 73 * scale, 118 * scale, 84 * scale);
  ctx.bezierCurveTo(122 * scale, 88 * scale, 122 * scale, 93 * scale, 121 * scale, 98 * scale);
  ctx.bezierCurveTo(114 * scale, 98 * scale, 113 * scale, 98 * scale, 109 * scale, 90 * scale);
  ctx.bezierCurveTo(107 * scale, 87 * scale, 106 * scale, 85 * scale, 107 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  return can;
};

function create_wingleft(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 85 * scale;
  can.height = 145 * scale;
  ctx.translate(-20 * scale, -95 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(50 * scale, 105 * scale);
  ctx.bezierCurveTo(52 * scale, 119 * scale, 64 * scale, 137 * scale, 71 * scale, 146 * scale);
  ctx.bezierCurveTo(71 * scale, 161 * scale, 74 * scale, 169 * scale, 79 * scale, 179 * scale);
  ctx.bezierCurveTo(68 * scale, 192 * scale, 70 * scale, 204 * scale, 69 * scale, 216 * scale);
  ctx.bezierCurveTo(50 * scale, 189.5 * scale, 50 * scale, 189.5 * scale, 31 * scale, 163 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 106 * scale);
  ctx.bezierCurveTo(49 * scale, 90 * scale, 58 * scale, 104 * scale, 51 * scale, 121 * scale);
  ctx.bezierCurveTo(45 * scale, 143 * scale, 41 * scale, 151 * scale, 37 * scale, 162 * scale);
  ctx.bezierCurveTo(48 * scale, 180 * scale, 58 * scale, 188 * scale, 76 * scale, 205 * scale);
  ctx.bezierCurveTo(104 * scale, 209 * scale, 105 * scale, 229 * scale, 92 * scale, 235 * scale);
  ctx.bezierCurveTo(76 * scale, 239 * scale, 75 * scale, 232 * scale, 56 * scale, 213 * scale);
  ctx.bezierCurveTo(31 * scale, 187 * scale, 28 * scale, 176 * scale, 23 * scale, 162 * scale);
  ctx.bezierCurveTo(38 * scale, 131 * scale, 40 * scale, 120 * scale, 44 * scale, 106 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 159 * scale);
  ctx.bezierCurveTo(46 * scale, 157 * scale, 59 * scale, 152 * scale, 68 * scale, 148 * scale);
  ctx.bezierCurveTo(63 * scale, 155 * scale, 52 * scale, 160 * scale, 44 * scale, 164 * scale);
  ctx.bezierCurveTo(59 * scale, 169 * scale, 66 * scale, 174 * scale, 75 * scale, 178 * scale);
  ctx.bezierCurveTo(58 * scale, 178 * scale, 49 * scale, 175 * scale, 37 * scale, 174 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  return can;
};

function create_hurt_wingleft(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 85 * scale;
  can.height = 145 * scale;
  ctx.translate(-20 * scale, -95 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(50 * scale, 105 * scale);
  ctx.bezierCurveTo(52 * scale, 119 * scale, 64 * scale, 137 * scale, 71 * scale, 146 * scale);
  ctx.bezierCurveTo(71 * scale, 161 * scale, 74 * scale, 169 * scale, 79 * scale, 179 * scale);
  ctx.bezierCurveTo(68 * scale, 192 * scale, 70 * scale, 204 * scale, 69 * scale, 216 * scale);
  ctx.bezierCurveTo(50 * scale, 189.5 * scale, 50 * scale, 189.5 * scale, 31 * scale, 163 * scale);
  ctx.closePath();
  fill_path(ctx, color);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 106 * scale);
  ctx.bezierCurveTo(49 * scale, 90 * scale, 58 * scale, 104 * scale, 51 * scale, 121 * scale);
  ctx.bezierCurveTo(45 * scale, 143 * scale, 41 * scale, 151 * scale, 37 * scale, 162 * scale);
  ctx.bezierCurveTo(48 * scale, 180 * scale, 58 * scale, 188 * scale, 76 * scale, 205 * scale);
  ctx.bezierCurveTo(104 * scale, 209 * scale, 105 * scale, 229 * scale, 92 * scale, 235 * scale);
  ctx.bezierCurveTo(76 * scale, 239 * scale, 75 * scale, 232 * scale, 56 * scale, 213 * scale);
  ctx.bezierCurveTo(31 * scale, 187 * scale, 28 * scale, 176 * scale, 23 * scale, 162 * scale);
  ctx.bezierCurveTo(38 * scale, 131 * scale, 40 * scale, 120 * scale, 44 * scale, 106 * scale);
  ctx.closePath();
  fill_path(ctx, color, color, 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 159 * scale);
  ctx.bezierCurveTo(46 * scale, 157 * scale, 59 * scale, 152 * scale, 68 * scale, 148 * scale);
  ctx.bezierCurveTo(63 * scale, 155 * scale, 52 * scale, 160 * scale, 44 * scale, 164 * scale);
  ctx.bezierCurveTo(59 * scale, 169 * scale, 66 * scale, 174 * scale, 75 * scale, 178 * scale);
  ctx.bezierCurveTo(58 * scale, 178 * scale, 49 * scale, 175 * scale, 37 * scale, 174 * scale);
  ctx.closePath();
  fill_path(ctx, color);
  return can;
};

function create_wingright(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 85 * scale;
  can.height = 145 * scale;
  ctx.translate(-165 * scale, -95 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(217 * scale, 103 * scale);
  ctx.bezierCurveTo(209 * scale, 129 * scale, 203 * scale, 137 * scale, 195 * scale, 146 * scale);
  ctx.bezierCurveTo(195 * scale, 159 * scale, 194 * scale, 167 * scale, 189 * scale, 178 * scale);
  ctx.bezierCurveTo(193 * scale, 186 * scale, 196 * scale, 195 * scale, 198 * scale, 216 * scale);
  ctx.bezierCurveTo(217.5 * scale, 189.5 * scale, 217.5 * scale, 189.5 * scale, 237 * scale, 163 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(231 * scale, 163 * scale);
  ctx.bezierCurveTo(221 * scale, 139 * scale, 218 * scale, 128 * scale, 215 * scale, 114 * scale);
  ctx.bezierCurveTo(213 * scale, 102 * scale, 220 * scale, 92 * scale, 222 * scale, 107 * scale);
  ctx.bezierCurveTo(224 * scale, 118 * scale, 233 * scale, 138 * scale, 244 * scale, 161 * scale);
  ctx.bezierCurveTo(235 * scale, 188 * scale, 224 * scale, 198 * scale, 204 * scale, 221 * scale);
  ctx.bezierCurveTo(190 * scale, 233 * scale, 190 * scale, 235 * scale, 180 * scale, 235 * scale);
  ctx.bezierCurveTo(167 * scale, 235 * scale, 164 * scale, 216 * scale, 175 * scale, 211 * scale);
  ctx.bezierCurveTo(176 * scale, 208 * scale, 181 * scale, 207 * scale, 191 * scale, 205 * scale);
  ctx.bezierCurveTo(213 * scale, 186 * scale, 218 * scale, 180 * scale, 230 * scale, 163 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(234 * scale, 154 * scale);
  ctx.bezierCurveTo(227 * scale, 156 * scale, 222 * scale, 156 * scale, 199 * scale, 148 * scale);
  ctx.bezierCurveTo(201 * scale, 151 * scale, 216 * scale, 159 * scale, 224 * scale, 162 * scale);
  ctx.bezierCurveTo(209 * scale, 169.5 * scale, 209 * scale, 169.5 * scale, 194 * scale, 177 * scale);
  ctx.bezierCurveTo(213.5 * scale, 175 * scale, 213.5 * scale, 175 * scale, 233 * scale, 173 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  return can;
};

function create_hurt_wingright(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 85 * scale;
  can.height = 145 * scale;
  ctx.translate(-165 * scale, -95 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(217 * scale, 103 * scale);
  ctx.bezierCurveTo(209 * scale, 129 * scale, 203 * scale, 137 * scale, 195 * scale, 146 * scale);
  ctx.bezierCurveTo(195 * scale, 159 * scale, 194 * scale, 167 * scale, 189 * scale, 178 * scale);
  ctx.bezierCurveTo(193 * scale, 186 * scale, 196 * scale, 195 * scale, 198 * scale, 216 * scale);
  ctx.bezierCurveTo(217.5 * scale, 189.5 * scale, 217.5 * scale, 189.5 * scale, 237 * scale, 163 * scale);
  ctx.closePath();
  fill_path(ctx, color);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(231 * scale, 163 * scale);
  ctx.bezierCurveTo(221 * scale, 139 * scale, 218 * scale, 128 * scale, 215 * scale, 114 * scale);
  ctx.bezierCurveTo(213 * scale, 102 * scale, 220 * scale, 92 * scale, 222 * scale, 107 * scale);
  ctx.bezierCurveTo(224 * scale, 118 * scale, 233 * scale, 138 * scale, 244 * scale, 161 * scale);
  ctx.bezierCurveTo(235 * scale, 188 * scale, 224 * scale, 198 * scale, 204 * scale, 221 * scale);
  ctx.bezierCurveTo(190 * scale, 233 * scale, 190 * scale, 235 * scale, 180 * scale, 235 * scale);
  ctx.bezierCurveTo(167 * scale, 235 * scale, 164 * scale, 216 * scale, 175 * scale, 211 * scale);
  ctx.bezierCurveTo(176 * scale, 208 * scale, 181 * scale, 207 * scale, 191 * scale, 205 * scale);
  ctx.bezierCurveTo(213 * scale, 186 * scale, 218 * scale, 180 * scale, 230 * scale, 163 * scale);
  ctx.closePath();
  fill_path(ctx, color, color, 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(234 * scale, 154 * scale);
  ctx.bezierCurveTo(227 * scale, 156 * scale, 222 * scale, 156 * scale, 199 * scale, 148 * scale);
  ctx.bezierCurveTo(201 * scale, 151 * scale, 216 * scale, 159 * scale, 224 * scale, 162 * scale);
  ctx.bezierCurveTo(209 * scale, 169.5 * scale, 209 * scale, 169.5 * scale, 194 * scale, 177 * scale);
  ctx.bezierCurveTo(213.5 * scale, 175 * scale, 213.5 * scale, 175 * scale, 233 * scale, 173 * scale);
  ctx.closePath();
  fill_path(ctx, color);
  return can;
};

function create_explorer_hat(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 187 * scale;
  can.height = 119 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(0, 3);
  ctx.moveTo(53 * scale, 45 * scale);
  ctx.bezierCurveTo(3 * scale, 60 * scale, 11 * scale, 72 * scale, 19 * scale, 81 * scale);
  ctx.bezierCurveTo(28 * scale, 82 * scale, 24 * scale, 81 * scale, 29 * scale, 82 * scale);
  ctx.bezierCurveTo(26 * scale, 87 * scale, 28 * scale, 84 * scale, 28 * scale, 87 * scale);
  ctx.bezierCurveTo(63 * scale, 101 * scale, 92 * scale, 100 * scale, 138 * scale, 93 * scale);
  ctx.bezierCurveTo(172 * scale, 87 * scale, 180 * scale, 72 * scale, 168 * scale, 62 * scale);
  ctx.bezierCurveTo(154 * scale, 51 * scale, 150 * scale, 50 * scale, 148 * scale, 49 * scale);
  ctx.bezierCurveTo(132 * scale, 42 * scale, 90 * scale, 40 * scale, 55 * scale, 45 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(0, -3);
  ctx.moveTo(53 * scale, 45 * scale);
  ctx.bezierCurveTo(3 * scale, 60 * scale, 11 * scale, 72 * scale, 19 * scale, 81 * scale);
  ctx.bezierCurveTo(28 * scale, 82 * scale, 24 * scale, 81 * scale, 29 * scale, 82 * scale);
  ctx.bezierCurveTo(26 * scale, 87 * scale, 28 * scale, 84 * scale, 28 * scale, 87 * scale);
  ctx.bezierCurveTo(63 * scale, 101 * scale, 92 * scale, 100 * scale, 138 * scale, 93 * scale);
  ctx.bezierCurveTo(172 * scale, 87 * scale, 180 * scale, 72 * scale, 168 * scale, 62 * scale);
  ctx.bezierCurveTo(154 * scale, 51 * scale, 150 * scale, 50 * scale, 148 * scale, 49 * scale);
  ctx.bezierCurveTo(132 * scale, 42 * scale, 90 * scale, 40 * scale, 55 * scale, 45 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(151 * scale, 60 * scale);
  ctx.bezierCurveTo(140 * scale, 36 * scale, 137 * scale, 32 * scale, 124 * scale, 29 * scale);
  ctx.bezierCurveTo(98 * scale, 22 * scale, 80 * scale, 24 * scale, 62 * scale, 28 * scale);
  ctx.bezierCurveTo(42 * scale, 35 * scale, 38 * scale, 46 * scale, 34 * scale, 58 * scale);
  ctx.bezierCurveTo(53 * scale, 74 * scale, 76 * scale, 76 * scale, 91 * scale, 78 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(37 * scale, 53 * scale);
  ctx.bezierCurveTo(30 * scale, 56 * scale, 29 * scale, 67 * scale, 30 * scale, 68 * scale);
  ctx.bezierCurveTo(94 * scale, 108 * scale, 150 * scale, 76 * scale, 155 * scale, 70 * scale);
  ctx.bezierCurveTo(154 * scale, 60 * scale, 151 * scale, 54 * scale, 149 * scale, 53 * scale);
  ctx.bezierCurveTo(101 * scale, 74 * scale, 66 * scale, 66 * scale, 37 * scale, 53 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(100 * scale, 36 * scale);
  ctx.bezierCurveTo(92 * scale, 25 * scale, 86 * scale, 28 * scale, 82 * scale, 34 * scale);
  ctx.bezierCurveTo(88 * scale, 40 * scale, 93 * scale, 40 * scale, 98 * scale, 36 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80 * scale, 43 * scale);
  ctx.bezierCurveTo(69 * scale, 46 * scale, 67 * scale, 52 * scale, 69 * scale, 58 * scale);
  fill_path(ctx, undefined, color[1], 4 * scale);
  circle(ctx, 58 * scale, 50 * scale, 5 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 43 * scale, 65 * scale, 5 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 58 * scale, 73 * scale, 5 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 58 * scale, 50 * scale, 2 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 43 * scale, 65 * scale, 2 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 58 * scale, 73 * scale, 2 * scale);
  fill_path(ctx, color[5]);
  return can;
};

function create_wooden_helmet(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 180 * scale;
  can.height = 120 * scale;
  ctx.translate(-65 * scale, -35 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.save();
  ctx.translate(150.5 * scale, 63.84375 * scale);
  round_rect(ctx, -67 * scale, -16.5 * scale, 134 * scale, 33 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80.5 * scale, 75.34375 * scale);
  ctx.bezierCurveTo(83 * scale, 106.34375 * scale, 83 * scale, 106.34375 * scale, 85.5 * scale, 137.34375 * scale);
  ctx.bezierCurveTo(93 * scale, 135.84375 * scale, 93 * scale, 135.84375 * scale, 100.5 * scale, 134.34375 * scale);
  ctx.bezierCurveTo(99.5 * scale, 100.84375 * scale, 99.5 * scale, 100.84375 * scale, 98.5 * scale, 67.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(206.5 * scale, 71.34375 * scale);
  ctx.bezierCurveTo(203.5 * scale, 104.34375 * scale, 203.5 * scale, 104.34375 * scale, 200.5 * scale, 137.34375 * scale);
  ctx.bezierCurveTo(208.5 * scale, 137.34375 * scale, 208.5 * scale, 137.34375 * scale, 216.5 * scale, 137.34375 * scale);
  ctx.bezierCurveTo(219 * scale, 102.84375 * scale, 219 * scale, 102.84375 * scale, 221.5 * scale, 68.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(136.5 * scale, 75.34375 * scale);
  ctx.bezierCurveTo(139 * scale, 94.34375 * scale, 139 * scale, 94.34375 * scale, 141.5 * scale, 113.34375 * scale);
  ctx.bezierCurveTo(149.5 * scale, 115.34375 * scale, 149.5 * scale, 115.34375 * scale, 157.5 * scale, 117.34375 * scale);
  ctx.bezierCurveTo(162 * scale, 97.34375 * scale, 162 * scale, 97.34375 * scale, 166.5 * scale, 77.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(152.5 * scale, 80.84375 * scale);
  ctx.rotate(3.12);
  round_rect(ctx, -73 * scale, -20.5 * scale, 146 * scale, 41 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.save();
  ctx.translate(150.5 * scale, 63.84375 * scale);
  round_rect(ctx, -67 * scale, -16.5 * scale, 134 * scale, 33 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80.5 * scale, 75.34375 * scale);
  ctx.bezierCurveTo(83 * scale, 106.34375 * scale, 83 * scale, 106.34375 * scale, 85.5 * scale, 137.34375 * scale);
  ctx.bezierCurveTo(93 * scale, 135.84375 * scale, 93 * scale, 135.84375 * scale, 100.5 * scale, 134.34375 * scale);
  ctx.bezierCurveTo(99.5 * scale, 100.84375 * scale, 99.5 * scale, 100.84375 * scale, 98.5 * scale, 67.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(206.5 * scale, 71.34375 * scale);
  ctx.bezierCurveTo(203.5 * scale, 104.34375 * scale, 203.5 * scale, 104.34375 * scale, 200.5 * scale, 137.34375 * scale);
  ctx.bezierCurveTo(208.5 * scale, 137.34375 * scale, 208.5 * scale, 137.34375 * scale, 216.5 * scale, 137.34375 * scale);
  ctx.bezierCurveTo(219 * scale, 102.84375 * scale, 219 * scale, 102.84375 * scale, 221.5 * scale, 68.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(136.5 * scale, 75.34375 * scale);
  ctx.bezierCurveTo(139 * scale, 94.34375 * scale, 139 * scale, 94.34375 * scale, 141.5 * scale, 113.34375 * scale);
  ctx.bezierCurveTo(149.5 * scale, 115.34375 * scale, 149.5 * scale, 115.34375 * scale, 157.5 * scale, 117.34375 * scale);
  ctx.bezierCurveTo(162 * scale, 97.34375 * scale, 162 * scale, 97.34375 * scale, 166.5 * scale, 77.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.save();
  ctx.translate(152.5 * scale, 80.84375 * scale);
  ctx.rotate(3.12);
  round_rect(ctx, -73 * scale, -20.5 * scale, 146 * scale, 41 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(83.5 * scale, 73.34375 * scale);
  ctx.bezierCurveTo(93.5 * scale, 70.34375 * scale, 105.5 * scale, 70.34375 * scale, 124.5 * scale, 72.34375 * scale);
  ctx.bezierCurveTo(132.5 * scale, 78.34375 * scale, 162.5 * scale, 80.34375 * scale, 176.5 * scale, 76.34375 * scale);
  ctx.bezierCurveTo(194.5 * scale, 69.34375 * scale, 192.5 * scale, 68.34375 * scale, 199.5 * scale, 63.34375 * scale);
  ctx.bezierCurveTo(204.5 * scale, 63.34375 * scale, 204.5 * scale, 63.34375 * scale, 209.5 * scale, 63.34375 * scale);
  ctx.bezierCurveTo(153.5 * scale, 82.34375 * scale, 157.5 * scale, 85.34375 * scale, 209.5 * scale, 63.34375 * scale);
  ctx.bezierCurveTo(194.5 * scale, 88.34375 * scale, 162.5 * scale, 87.34375 * scale, 149.5 * scale, 88.34375 * scale);
  ctx.bezierCurveTo(129.5 * scale, 81.34375 * scale, 103.5 * scale, 75.34375 * scale, 83.5 * scale, 82.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(137.5 * scale, 65.34375 * scale);
  ctx.bezierCurveTo(150.5 * scale, 76.34375 * scale, 170.5 * scale, 71.34375 * scale, 174.5 * scale, 65.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(221.5 * scale, 85.34375 * scale);
  ctx.bezierCurveTo(211.5 * scale, 79.34375 * scale, 191.5 * scale, 88.34375 * scale, 181.5 * scale, 96.34375 * scale);
  ctx.bezierCurveTo(201.5 * scale, 96.34375 * scale, 201.5 * scale, 96.34375 * scale, 221.5 * scale, 96.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84.5 * scale, 89.34375 * scale);
  ctx.bezierCurveTo(102.5 * scale, 87.34375 * scale, 112.5 * scale, 88.34375 * scale, 119.5 * scale, 97.34375 * scale);
  ctx.bezierCurveTo(102 * scale, 98.34375 * scale, 102 * scale, 98.34375 * scale, 84.5 * scale, 99.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(208.5 * scale, 104.34375 * scale);
  ctx.bezierCurveTo(208.5 * scale, 110.34375 * scale, 208.5 * scale, 110.34375 * scale, 208.5 * scale, 116.34375 * scale);
  ctx.bezierCurveTo(211.5 * scale, 110.34375 * scale, 211.5 * scale, 110.34375 * scale, 214.5 * scale, 104.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87.5 * scale, 117.34375 * scale);
  ctx.bezierCurveTo(92 * scale, 118.84375 * scale, 92 * scale, 118.84375 * scale, 96.5 * scale, 120.34375 * scale);
  ctx.bezierCurveTo(93 * scale, 123.84375 * scale, 93 * scale, 123.84375 * scale, 89.5 * scale, 127.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107.5 * scale, 51.34375 * scale);
  ctx.bezierCurveTo(122.5 * scale, 54.34375 * scale, 122.5 * scale, 54.34375 * scale, 137.5 * scale, 57.34375 * scale);
  ctx.bezierCurveTo(118 * scale, 57.34375 * scale, 118 * scale, 57.34375 * scale, 98.5 * scale, 57.34375 * scale);
  ctx.bezierCurveTo(94.5 * scale, 54.84375 * scale, 94.5 * scale, 54.84375 * scale, 90.5 * scale, 52.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(170.5 * scale, 52.34375 * scale);
  ctx.bezierCurveTo(179.5 * scale, 51.84375 * scale, 179.5 * scale, 51.84375 * scale, 188.5 * scale, 51.34375 * scale);
  ctx.bezierCurveTo(187.5 * scale, 53.84375 * scale, 187.5 * scale, 53.84375 * scale, 186.5 * scale, 56.34375 * scale);
  ctx.bezierCurveTo(177 * scale, 56.34375 * scale, 177 * scale, 56.34375 * scale, 167.5 * scale, 56.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80.5 * scale, 69.34375 * scale);
  ctx.bezierCurveTo(86.5 * scale, 70.34375 * scale, 86.5 * scale, 70.34375 * scale, 92.5 * scale, 71.34375 * scale);
  ctx.bezierCurveTo(86 * scale, 73.34375 * scale, 86 * scale, 73.34375 * scale, 79.5 * scale, 75.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(222.5 * scale, 75.34375 * scale);
  ctx.bezierCurveTo(214.5 * scale, 76.34375 * scale, 214.5 * scale, 76.34375 * scale, 206.5 * scale, 77.34375 * scale);
  ctx.bezierCurveTo(216.5 * scale, 79.34375 * scale, 216.5 * scale, 79.34375 * scale, 226.5 * scale, 81.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(116.5 * scale, 100.34375 * scale);
  ctx.bezierCurveTo(128 * scale, 97.34375 * scale, 128 * scale, 97.34375 * scale, 139.5 * scale, 94.34375 * scale);
  ctx.bezierCurveTo(140 * scale, 96.84375 * scale, 140 * scale, 96.84375 * scale, 140.5 * scale, 99.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(112.5 * scale, 48.34375 * scale);
  ctx.bezierCurveTo(115.5 * scale, 50.84375 * scale, 115.5 * scale, 50.84375 * scale, 118.5 * scale, 53.34375 * scale);
  ctx.bezierCurveTo(131 * scale, 50.84375 * scale, 131 * scale, 50.84375 * scale, 143.5 * scale, 48.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(216.5 * scale, 109.34375 * scale);
  ctx.bezierCurveTo(213 * scale, 114.84375 * scale, 213 * scale, 114.84375 * scale, 209.5 * scale, 120.34375 * scale);
  ctx.bezierCurveTo(212 * scale, 118.84375 * scale, 212 * scale, 118.84375 * scale, 214.5 * scale, 117.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(86.5 * scale, 133.34375 * scale);
  ctx.bezierCurveTo(89 * scale, 127.34375 * scale, 89 * scale, 127.34375 * scale, 91.5 * scale, 121.34375 * scale);
  ctx.bezierCurveTo(92.5 * scale, 127.34375 * scale, 92.5 * scale, 127.34375 * scale, 93.5 * scale, 133.34375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  return can;
};

function create_viking_hat(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 175 * scale;
  can.height = 106 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(28 * scale, 67 * scale);
  ctx.bezierCurveTo(55 * scale, 80 * scale, 126 * scale, 74 * scale, 144 * scale, 68 * scale);
  ctx.bezierCurveTo(144.5 * scale, 75 * scale, 144.5 * scale, 75 * scale, 145 * scale, 82 * scale);
  ctx.bezierCurveTo(114 * scale, 94 * scale, 47 * scale, 91 * scale, 28 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(145 * scale, 75 * scale);
  ctx.bezierCurveTo(143 * scale, 51 * scale, 133 * scale, 29 * scale, 100 * scale, 27 * scale);
  ctx.bezierCurveTo(52 * scale, 21 * scale, 37 * scale, 37 * scale, 31 * scale, 54 * scale);
  ctx.bezierCurveTo(23 * scale, 78 * scale, 28 * scale, 77 * scale, 36 * scale, 79 * scale);
  ctx.bezierCurveTo(80 * scale, 87 * scale, 120 * scale, 81 * scale, 145 * scale, 76 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(38 * scale, 46 * scale);
  ctx.bezierCurveTo(52 * scale, 37 * scale, 69 * scale, 36 * scale, 85 * scale, 36 * scale);
  ctx.bezierCurveTo(118 * scale, 38 * scale, 129 * scale, 42 * scale, 137 * scale, 48 * scale);
  ctx.bezierCurveTo(135 * scale, 45 * scale, 135 * scale, 45 * scale, 133 * scale, 42 * scale);
  ctx.bezierCurveTo(124 * scale, 32 * scale, 116 * scale, 28 * scale, 88 * scale, 25 * scale);
  ctx.bezierCurveTo(47 * scale, 28 * scale, 40 * scale, 32 * scale, 36 * scale, 44 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(145 * scale, 75 * scale);
  ctx.bezierCurveTo(143 * scale, 51 * scale, 133 * scale, 29 * scale, 100 * scale, 27 * scale);
  ctx.bezierCurveTo(52 * scale, 21 * scale, 37 * scale, 37 * scale, 31 * scale, 54 * scale);
  ctx.bezierCurveTo(23 * scale, 78 * scale, 28 * scale, 77 * scale, 36 * scale, 79 * scale);
  ctx.bezierCurveTo(80 * scale, 87 * scale, 120 * scale, 81 * scale, 145 * scale, 76 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 4 * scale);
  ctx.translate(0, -3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(28 * scale, 67 * scale);
  ctx.bezierCurveTo(55 * scale, 80 * scale, 126 * scale, 74 * scale, 144 * scale, 68 * scale);
  ctx.bezierCurveTo(144.5 * scale, 75 * scale, 144.5 * scale, 75 * scale, 145 * scale, 82 * scale);
  ctx.bezierCurveTo(114 * scale, 94 * scale, 47 * scale, 91 * scale, 28 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[10], color[10], 4 * scale);
  ctx.translate(0, 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(131 * scale, 43 * scale);
  ctx.bezierCurveTo(145 * scale, 40 * scale, 148 * scale, 32 * scale, 147 * scale, 17 * scale);
  ctx.bezierCurveTo(166 * scale, 39 * scale, 155 * scale, 62 * scale, 140 * scale, 67 * scale);
  ctx.bezierCurveTo(128 * scale, 65 * scale, 128 * scale, 52 * scale, 131 * scale, 45 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(41 * scale, 43 * scale);
  ctx.bezierCurveTo(30 * scale, 42 * scale, 24 * scale, 33 * scale, 25 * scale, 17 * scale);
  ctx.bezierCurveTo(7 * scale, 34 * scale, 17 * scale, 63 * scale, 33 * scale, 66 * scale);
  ctx.bezierCurveTo(45 * scale, 59 * scale, 44 * scale, 53 * scale, 42 * scale, 44 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(24 * scale, 19 * scale);
  ctx.bezierCurveTo(24 * scale, 35 * scale, 35 * scale, 42 * scale, 42 * scale, 44 * scale);
  ctx.bezierCurveTo(43 * scale, 51 * scale, 43 * scale, 48 * scale, 43 * scale, 56 * scale);
  ctx.bezierCurveTo(25 * scale, 47 * scale, 17 * scale, 36 * scale, 23 * scale, 20 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(148 * scale, 18 * scale);
  ctx.bezierCurveTo(159 * scale, 44 * scale, 139 * scale, 52 * scale, 130 * scale, 55 * scale);
  ctx.bezierCurveTo(129 * scale, 48 * scale, 129 * scale, 46 * scale, 131 * scale, 43 * scale);
  ctx.bezierCurveTo(144 * scale, 37 * scale, 148 * scale, 35 * scale, 147 * scale, 18 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(131 * scale, 43 * scale);
  ctx.bezierCurveTo(145 * scale, 40 * scale, 148 * scale, 32 * scale, 147 * scale, 17 * scale);
  ctx.bezierCurveTo(166 * scale, 39 * scale, 155 * scale, 62 * scale, 140 * scale, 67 * scale);
  ctx.bezierCurveTo(128 * scale, 65 * scale, 128 * scale, 52 * scale, 131 * scale, 45 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(41 * scale, 43 * scale);
  ctx.bezierCurveTo(30 * scale, 42 * scale, 24 * scale, 33 * scale, 25 * scale, 17 * scale);
  ctx.bezierCurveTo(7 * scale, 34 * scale, 17 * scale, 63 * scale, 33 * scale, 66 * scale);
  ctx.bezierCurveTo(45 * scale, 59 * scale, 44 * scale, 53 * scale, 42 * scale, 44 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 4 * scale);
  ctx.save();
  ctx.translate(87 * scale, 34.5 * scale);
  ctx.rotate(0);
  round_rect(ctx, -8 * scale, -10.5 * scale, 16 * scale, 21 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[7], color[2], 4 * scale);
  ctx.save();
  ctx.translate(87 * scale, 57 * scale);
  ctx.rotate(0);
  round_rect(ctx, -8 * scale, -23 * scale, 16 * scale, 46 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[8], color[2], 4 * scale);
  circle(ctx, 87 * scale, 39 * scale, 4.123105625617661 * scale);
  fill_path(ctx, color[9], color[2], 4 * scale);
  circle(ctx, 87 * scale, 60 * scale, 4.242640687119285 * scale);
  fill_path(ctx, color[9], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(28 * scale, 67 * scale);
  ctx.bezierCurveTo(55 * scale, 80 * scale, 126 * scale, 74 * scale, 144 * scale, 68 * scale);
  ctx.bezierCurveTo(144.5 * scale, 75 * scale, 144.5 * scale, 75 * scale, 145 * scale, 82 * scale);
  ctx.bezierCurveTo(114 * scale, 94 * scale, 47 * scale, 91 * scale, 28 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(27 * scale, 69 * scale);
  ctx.bezierCurveTo(13 * scale, 77 * scale, 16 * scale, 74 * scale, 27 * scale, 80 * scale);
  ctx.closePath();
  fill_path(ctx, color[9], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(145 * scale, 70 * scale);
  ctx.bezierCurveTo(149.5 * scale, 72 * scale, 149.5 * scale, 72 * scale, 154 * scale, 74 * scale);
  ctx.bezierCurveTo(150 * scale, 77 * scale, 150 * scale, 77 * scale, 146 * scale, 80 * scale);
  ctx.closePath();
  fill_path(ctx, color[9], color[2], 4 * scale);
  circle(ctx, 50 * scale, 80 * scale, 5 * scale);
  fill_path(ctx, color[9], color[2], 4 * scale);
  circle(ctx, 86.01141357421875 * scale, 81.76705932617188 * scale, 5 * scale);
  fill_path(ctx, color[9], color[2], 4 * scale);
  circle(ctx, 119.01141357421875 * scale, 80.13069152832031 * scale, 5 * scale);
  fill_path(ctx, color[9], color[2], 4 * scale);
  return can;
};

function create_gold_helmet(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 142 * scale;
  can.height = 118 * scale;
  ctx.save();
  ctx.translate(70.16665649414062 * scale, 38.20831298828125 * scale);
  round_rect(ctx, -58.5 * scale, -27.5 * scale, 117 * scale, 55 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.save();
  ctx.translate(70 * scale, 42.70831298828125 * scale);
  round_rect(ctx, -61 * scale, -20 * scale, 122 * scale, 40 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(123 * scale, 70.375 * scale);
  ctx.bezierCurveTo(115 * scale, 99.375 * scale, 119 * scale, 85.375 * scale, 115 * scale, 100.375 * scale);
  ctx.bezierCurveTo(112 * scale, 116.375 * scale, 117 * scale, 109.375 * scale, 131 * scale, 100.375 * scale);
  ctx.bezierCurveTo(131 * scale, 83.375 * scale, 131 * scale, 83.375 * scale, 131 * scale, 66.375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(11 * scale, 68.375 * scale);
  ctx.bezierCurveTo(11.166656494140625 * scale, 84.375 * scale, 9 * scale, 99.375 * scale, 10 * scale, 100.375 * scale);
  ctx.bezierCurveTo(35 * scale, 113.375 * scale, 27 * scale, 110.375 * scale, 25 * scale, 95.375 * scale);
  ctx.bezierCurveTo(16 * scale, 68.375 * scale, 17 * scale, 69.375 * scale, 17 * scale, 68.375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(46 * scale, 32.375 * scale);
  ctx.bezierCurveTo(43 * scale, 8.375 * scale, 45 * scale, 7.375 * scale, 56 * scale, 6.375 * scale);
  ctx.bezierCurveTo(105 * scale, 4.375 * scale, 102 * scale, 6.375 * scale, 97 * scale, 32.375 * scale);
  ctx.bezierCurveTo(138 * scale, 43.375 * scale, 133 * scale, 45.375 * scale, 133 * scale, 58.375 * scale);
  ctx.bezierCurveTo(133 * scale, 85.375 * scale, 125 * scale, 74.375 * scale, 111 * scale, 70.375 * scale);
  ctx.bezierCurveTo(70 * scale, 69.875 * scale, 29 * scale, 69.375 * scale, 29 * scale, 69.375 * scale);
  ctx.bezierCurveTo(7 * scale, 84.375 * scale, 7 * scale, 70.375 * scale, 7 * scale, 59.375 * scale);
  ctx.bezierCurveTo(6 * scale, 28.375 * scale, 32 * scale, 39.375 * scale, 44 * scale, 32.375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 4 * scale);
  circle(ctx, 71 * scale, 44.375 * scale, 16.55294535724685 * scale);
  fill_path(ctx, color[2], color[1], 4 * scale);
  circle(ctx, 71 * scale, 43.70831298828125 * scale, 8.94427190999916 * scale);
  fill_path(ctx, color[2], color[1], 4 * scale);
  return can;
};

function create_diamond_helmet(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 142 * scale;
  can.height = 118 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(111 * scale, 27.3671875 * scale);
  ctx.bezierCurveTo(128 * scale, 9.3671875 * scale, 125 * scale, 13.3671875 * scale, 126 * scale, 21.3671875 * scale);
  ctx.bezierCurveTo(126 * scale, 33.3671875 * scale, 119 * scale, 43.3671875 * scale, 118 * scale, 42.3671875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 23.3671875 * scale);
  ctx.bezierCurveTo(17 * scale, 15.3671875 * scale, 16 * scale, 14.3671875 * scale, 17 * scale, 20.3671875 * scale);
  ctx.bezierCurveTo(22 * scale, 33.3671875 * scale, 20 * scale, 27.3671875 * scale, 24 * scale, 34.3671875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.save();
  ctx.translate(70.5 * scale, 34.8671875 * scale);
  ctx.rotate(0);
  round_rect(ctx, -49.5 * scale, -21.5 * scale, 99 * scale, 43 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.save();
  ctx.translate(71 * scale, 40.8671875 * scale);
  ctx.rotate(0);
  round_rect(ctx, -49 * scale, -12.5 * scale, 98 * scale, 25 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(19.800003051757812 * scale, 75.95625305175781 * scale);
  ctx.bezierCurveTo(19.300003051757812 * scale, 82.95625305175781 * scale, 19.300003051757812 * scale, 82.95625305175781 * scale, 18.800003051757812 * scale, 89.95625305175781 * scale);
  ctx.bezierCurveTo(38.80000305175781 * scale, 115.95625305175781 * scale, 37.80000305175781 * scale, 104.95625305175781 * scale, 31.800003051757812 * scale, 91.95625305175781 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(119.80000305175781 * scale, 75.95625305175781 * scale);
  ctx.bezierCurveTo(120.80000305175781 * scale, 82.95625305175781 * scale, 120.80000305175781 * scale, 82.95625305175781 * scale, 121.80000305175781 * scale, 89.95625305175781 * scale);
  ctx.bezierCurveTo(101.80000305175781 * scale, 111.95625305175781 * scale, 99.80000305175781 * scale, 111.95625305175781 * scale, 112.80000305175781 * scale, 81.95625305175781 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(17.800003051757812 * scale, 49.15625 * scale);
  ctx.bezierCurveTo(17.800003051757812 * scale, 64.15625 * scale, 17.800003051757812 * scale, 64.15625 * scale, 17.800003051757812 * scale, 79.15625 * scale);
  ctx.bezierCurveTo(23.300003051757812 * scale, 85.15625 * scale, 23.300003051757812 * scale, 85.15625 * scale, 28.800003051757812 * scale, 91.15625 * scale);
  ctx.bezierCurveTo(36.80000305175781 * scale, 96.15625 * scale, 32.80000305175781 * scale, 91.15625 * scale, 28.800003051757812 * scale, 77.15625 * scale);
  ctx.bezierCurveTo(33.80000305175781 * scale, 65.15625 * scale, 33.80000305175781 * scale, 65.15625 * scale, 38.80000305175781 * scale, 53.15625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(123.80000305175781 * scale, 53.95625305175781 * scale);
  ctx.bezierCurveTo(121.80000305175781 * scale, 77.95625305175781 * scale, 121.80000305175781 * scale, 74.95625305175781 * scale, 121.80000305175781 * scale, 78.95625305175781 * scale);
  ctx.bezierCurveTo(115.80000305175781 * scale, 84.95625305175781 * scale, 115.80000305175781 * scale, 84.95625305175781 * scale, 109.80000305175781 * scale, 90.95625305175781 * scale);
  ctx.bezierCurveTo(102.80000305175781 * scale, 93.95625305175781 * scale, 105.80000305175781 * scale, 86.95625305175781 * scale, 110.80000305175781 * scale, 76.95625305175781 * scale);
  ctx.bezierCurveTo(107.30000305175781 * scale, 65.45625305175781 * scale, 103.80000305175781 * scale, 53.95625305175781 * scale, 103.80000305175781 * scale, 53.95625305175781 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(18 * scale, 56.3671875 * scale);
  ctx.bezierCurveTo(70 * scale, 56.8671875 * scale, 70 * scale, 56.8671875 * scale, 122 * scale, 57.3671875 * scale);
  ctx.bezierCurveTo(137 * scale, 20.3671875 * scale, 137 * scale, 16.3671875 * scale, 126 * scale, 22.3671875 * scale);
  ctx.bezierCurveTo(115.5 * scale, 34.3671875 * scale, 115.5 * scale, 34.3671875 * scale, 105 * scale, 46.3671875 * scale);
  ctx.bezierCurveTo(70.5 * scale, 46.3671875 * scale, 70.5 * scale, 46.3671875 * scale, 36 * scale, 46.3671875 * scale);
  ctx.bezierCurveTo(4 * scale, 14.3671875 * scale, 7 * scale, 18.3671875 * scale, 8 * scale, 27.3671875 * scale);
  ctx.bezierCurveTo(12.5 * scale, 41.8671875 * scale, 12.5 * scale, 41.8671875 * scale, 17 * scale, 56.3671875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.save();
  ctx.translate(68.30000305175781 * scale, 41.45625305175781 * scale);
  ctx.rotate(0.76);
  round_rect(ctx, -20.5 * scale, -20.5 * scale, 41 * scale, 41 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, undefined, color[5], 4 * scale);
  ctx.save();
  ctx.translate(68.80000305175781 * scale, 44.45625305175781 * scale);
  ctx.rotate(0.76);
  round_rect(ctx, -21 * scale, -20.5 * scale, 42 * scale, 41 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.save();
  ctx.translate(69.80000305175781 * scale, 44.556243896484375 * scale);
  ctx.rotate(0.76);
  round_rect(ctx, -10 * scale, -10 * scale, 20 * scale, 20 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[6], color[7], 4 * scale);
  return can;
};

function create_amethyst_helmet(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 145 * scale;
  can.height = 120 * scale;
  ctx.beginPath();
  ctx.scale(0.6, 0.6);
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(18 * scale, -8 * scale);
  ctx.moveTo(101 * scale, 72 * scale);
  ctx.bezierCurveTo(144 * scale, 69 * scale, 149 * scale, 58 * scale, 162 * scale, 49 * scale);
  ctx.bezierCurveTo(174 * scale, 31 * scale, 173 * scale, 38 * scale, 172 * scale, 45 * scale);
  ctx.bezierCurveTo(168 * scale, 73 * scale, 158 * scale, 75 * scale, 152 * scale, 78 * scale);
  ctx.bezierCurveTo(106 * scale, 89 * scale, 107 * scale, 91 * scale, 107 * scale, 94 * scale);
  ctx.bezierCurveTo(107 * scale, 100 * scale, 107 * scale, 107 * scale, 107 * scale, 107 * scale);
  ctx.bezierCurveTo(99 * scale, 112 * scale, 98 * scale, 110 * scale, 93 * scale, 107 * scale);
  ctx.bezierCurveTo(94 * scale, 107 * scale, 93 * scale, 107 * scale, 93 * scale, 107 * scale);
  ctx.bezierCurveTo(93 * scale, 100 * scale, 93 * scale, 100 * scale, 92 * scale, 94 * scale);
  ctx.bezierCurveTo(92 * scale, 89 * scale, 90 * scale, 90 * scale, 73 * scale, 86 * scale);
  ctx.bezierCurveTo(45 * scale, 81 * scale, 40 * scale, 77 * scale, 35 * scale, 68 * scale);
  ctx.bezierCurveTo(23 * scale, 36 * scale, 28 * scale, 34 * scale, 36 * scale, 46 * scale);
  ctx.bezierCurveTo(45 * scale, 58 * scale, 83 * scale, 72 * scale, 98 * scale, 72 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.scale(1.1, 1.1);
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(-9 * scale, 4 * scale);
  ctx.moveTo(101 * scale, 72 * scale);
  ctx.bezierCurveTo(144 * scale, 69 * scale, 149 * scale, 58 * scale, 162 * scale, 49 * scale);
  ctx.bezierCurveTo(174 * scale, 31 * scale, 173 * scale, 38 * scale, 172 * scale, 45 * scale);
  ctx.bezierCurveTo(168 * scale, 73 * scale, 158 * scale, 75 * scale, 152 * scale, 78 * scale);
  ctx.bezierCurveTo(106 * scale, 89 * scale, 107 * scale, 91 * scale, 107 * scale, 94 * scale);
  ctx.bezierCurveTo(107 * scale, 100 * scale, 107 * scale, 107 * scale, 107 * scale, 107 * scale);
  ctx.bezierCurveTo(99 * scale, 112 * scale, 98 * scale, 110 * scale, 93 * scale, 107 * scale);
  ctx.bezierCurveTo(94 * scale, 107 * scale, 93 * scale, 107 * scale, 93 * scale, 107 * scale);
  ctx.bezierCurveTo(93 * scale, 100 * scale, 93 * scale, 100 * scale, 92 * scale, 94 * scale);
  ctx.bezierCurveTo(92 * scale, 89 * scale, 90 * scale, 90 * scale, 73 * scale, 86 * scale);
  ctx.bezierCurveTo(45 * scale, 81 * scale, 40 * scale, 77 * scale, 35 * scale, 68 * scale);
  ctx.bezierCurveTo(23 * scale, 36 * scale, 28 * scale, 34 * scale, 36 * scale, 46 * scale);
  ctx.bezierCurveTo(45 * scale, 58 * scale, 83 * scale, 72 * scale, 98 * scale, 72 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.scale(1.1, 1.1);
  ctx.translate(-9 * scale, 4 * scale);
  ctx.save();
  ctx.translate(100 * scale, 73.06874084472656 * scale);
  ctx.rotate(0);
  round_rect(ctx, -61 * scale, -38.5 * scale, 122 * scale, 40 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.save();
  ctx.translate(100 * scale, 71.36874389648438 * scale);
  ctx.rotate(0);
  round_rect(ctx, -60.5 * scale, -18 * scale, 121 * scale, 30 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(144 * scale, 80 * scale);
  ctx.bezierCurveTo(152 * scale, 100 * scale, 152 * scale, 101 * scale, 153 * scale, 102 * scale);
  ctx.bezierCurveTo(159 * scale, 100 * scale, 159 * scale, 100 * scale, 160 * scale, 100 * scale);
  ctx.bezierCurveTo(161 * scale, 84 * scale, 161 * scale, 84 * scale, 162 * scale, 68 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(57 * scale, 75 * scale);
  ctx.bezierCurveTo(48 * scale, 101 * scale, 53 * scale, 89 * scale, 48 * scale, 102 * scale);
  ctx.bezierCurveTo(44 * scale, 100 * scale, 44 * scale, 100 * scale, 39 * scale, 97 * scale);
  ctx.bezierCurveTo(39 * scale, 83 * scale, 39 * scale, 83 * scale, 39 * scale, 69 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(101 * scale, 72 * scale);
  ctx.bezierCurveTo(144 * scale, 69 * scale, 149 * scale, 58 * scale, 162 * scale, 49 * scale);
  ctx.bezierCurveTo(174 * scale, 31 * scale, 173 * scale, 38 * scale, 172 * scale, 45 * scale);
  ctx.bezierCurveTo(168 * scale, 73 * scale, 158 * scale, 75 * scale, 152 * scale, 78 * scale);
  ctx.bezierCurveTo(106 * scale, 89 * scale, 107 * scale, 91 * scale, 107 * scale, 94 * scale);
  ctx.bezierCurveTo(107 * scale, 100 * scale, 107 * scale, 107 * scale, 107 * scale, 107 * scale);
  ctx.bezierCurveTo(99 * scale, 112 * scale, 98 * scale, 110 * scale, 93 * scale, 107 * scale);
  ctx.bezierCurveTo(94 * scale, 107 * scale, 93 * scale, 107 * scale, 93 * scale, 107 * scale);
  ctx.bezierCurveTo(93 * scale, 100 * scale, 93 * scale, 100 * scale, 92 * scale, 94 * scale);
  ctx.bezierCurveTo(92 * scale, 89 * scale, 90 * scale, 90 * scale, 73 * scale, 86 * scale);
  ctx.bezierCurveTo(45 * scale, 81 * scale, 40 * scale, 77 * scale, 35 * scale, 68 * scale);
  ctx.bezierCurveTo(23 * scale, 36 * scale, 28 * scale, 34 * scale, 36 * scale, 46 * scale);
  ctx.bezierCurveTo(45 * scale, 58 * scale, 83 * scale, 72 * scale, 98 * scale, 72 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.translate(0, 0);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115.5 * scale, 116.07290649414062 * scale);
  ctx.bezierCurveTo(159.5 * scale, 99.07290649414062 * scale, 159.5 * scale, 98.07290649414062 * scale, 159.5 * scale, 98.07290649414062 * scale);
  ctx.bezierCurveTo(155.5 * scale, 116.07290649414062 * scale, 159.5 * scale, 116.07290649414062 * scale, 159.5 * scale, 118.07290649414062 * scale);
  ctx.bezierCurveTo(147.5 * scale, 130.07290649414062 * scale, 136.5 * scale, 132.07290649414062 * scale, 115.5 * scale, 138.07290649414062 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39.5 * scale, 96.07290649414062 * scale);
  ctx.bezierCurveTo(85.5 * scale, 114.07290649414062 * scale, 62.5 * scale, 105.57290649414062 * scale, 85.5 * scale, 115.07290649414062 * scale);
  ctx.bezierCurveTo(85.5 * scale, 125.57290649414062 * scale, 85.5 * scale, 125.57290649414062 * scale, 85.5 * scale, 136.07290649414062 * scale);
  ctx.bezierCurveTo(51.5 * scale, 129.07290649414062 * scale, 51.5 * scale, 125.07290649414062 * scale, 41.5 * scale, 118.07290649414062 * scale);
  ctx.bezierCurveTo(44.5 * scale, 106.07290649414062 * scale, 42.5 * scale, 103.07290649414062 * scale, 40.5 * scale, 96.07290649414062 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(86 * scale, 80 * scale);
  ctx.bezierCurveTo(97 * scale, 88 * scale, 106 * scale, 84 * scale, 112 * scale, 80 * scale);
  ctx.bezierCurveTo(112 * scale, 62 * scale, 106 * scale, 59 * scale, 99 * scale, 54 * scale);
  ctx.bezierCurveTo(86 * scale, 62 * scale, 86 * scale, 73 * scale, 86 * scale, 80 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.scale(0.5, 0.5);
  ctx.translate(100 * scale, 71 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(86 * scale, 80 * scale);
  ctx.bezierCurveTo(97 * scale, 88 * scale, 106 * scale, 84 * scale, 112 * scale, 80 * scale);
  ctx.bezierCurveTo(112 * scale, 62 * scale, 106 * scale, 59 * scale, 99 * scale, 54 * scale);
  ctx.bezierCurveTo(86 * scale, 62 * scale, 86 * scale, 73 * scale, 86 * scale, 80 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[2], 4 * scale);
  return can;
};

function create_book(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.save();
  ctx.translate(204 * scale, 195.0833282470703 * scale);
  ctx.rotate(10.16);
  round_rect(ctx, -97.5 * scale, -134.5 * scale, 195 * scale, 269 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58.5 * scale, 226.5833282470703 * scale);
  ctx.bezierCurveTo(120.5 * scale, 281.5833282470703 * scale, 120.5 * scale, 281.5833282470703 * scale, 182.5 * scale, 336.5833282470703 * scale);
  ctx.bezierCurveTo(263 * scale, 248.5833282470703 * scale, 263 * scale, 248.5833282470703 * scale, 343.5 * scale, 160.5833282470703 * scale);
  ctx.bezierCurveTo(280.5 * scale, 104.58332824707031 * scale, 280.5 * scale, 104.58332824707031 * scale, 217.5 * scale, 48.58332824707031 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 4 * scale);
  ctx.save();
  ctx.translate(197 * scale, 169.0833282470703 * scale);
  ctx.rotate(10.16);
  round_rect(ctx, -93.5 * scale, -126.5 * scale, 187 * scale, 253 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[1], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(226.5 * scale, 24.583328247070312 * scale);
  ctx.bezierCurveTo(58.5 * scale, 207.5833282470703 * scale, 143 * scale, 116.58332824707031 * scale, 59.5 * scale, 208.5833282470703 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(46.133331298828125 * scale, 202.64999389648438 * scale);
  ctx.bezierCurveTo(46.133331298828125 * scale, 215.64999389648438 * scale, 46.133331298828125 * scale, 215.64999389648438 * scale, 46.133331298828125 * scale, 228.64999389648438 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[1], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(55.133331298828125 * scale, 211.64999389648438 * scale);
  ctx.bezierCurveTo(55.133331298828125 * scale, 225.14999389648438 * scale, 55.133331298828125 * scale, 225.14999389648438 * scale, 55.133331298828125 * scale, 238.64999389648438 * scale);
  ctx.bezierCurveTo(50.133331298828125 * scale, 235.64999389648438 * scale, 50.133331298828125 * scale, 235.64999389648438 * scale, 45.133331298828125 * scale, 232.64999389648438 * scale);
  ctx.bezierCurveTo(45.133331298828125 * scale, 216.64999389648438 * scale, 45.133331298828125 * scale, 216.64999389648438 * scale, 45.133331298828125 * scale, 200.64999389648438 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[1], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(46.133331298828125 * scale, 198.39999389648438 * scale);
  ctx.bezierCurveTo(46.133331298828125 * scale, 199.89999389648438 * scale, 46.133331298828125 * scale, 199.89999389648438 * scale, 46.133331298828125 * scale, 201.39999389648438 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[1], 8 * scale);
  ctx.save();
  ctx.translate(249.63333129882812 * scale, 120.89999389648438 * scale);
  ctx.rotate(7.04);
  round_rect(ctx, -58.5 * scale, -32 * scale, 117 * scale, 64 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[5]);
  return can;
};

function create_paper(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 170 * scale;
  can.height = 170 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(-10 * scale, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72.5 * scale, 4.109375 * scale);
  ctx.bezierCurveTo(117 * scale, 9.609375 * scale, 117 * scale, 9.609375 * scale, 161.5 * scale, 15.109375 * scale);
  ctx.bezierCurveTo(134.5 * scale, 106.109375 * scale, 110.5 * scale, 130.109375 * scale, 63.5 * scale, 145.109375 * scale);
  ctx.bezierCurveTo(33.5 * scale, 120.609375 * scale, 33.5 * scale, 120.609375 * scale, 3.5 * scale, 96.109375 * scale);
  ctx.bezierCurveTo(82.5 * scale, 75.109375 * scale, 69.5 * scale, 29.109375 * scale, 71.5 * scale, 6.109375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(10 * scale, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72.5 * scale, 4.109375 * scale);
  ctx.bezierCurveTo(117 * scale, 9.609375 * scale, 117 * scale, 9.609375 * scale, 161.5 * scale, 15.109375 * scale);
  ctx.bezierCurveTo(134.5 * scale, 106.109375 * scale, 110.5 * scale, 130.109375 * scale, 63.5 * scale, 145.109375 * scale);
  ctx.bezierCurveTo(33.5 * scale, 120.609375 * scale, 33.5 * scale, 120.609375 * scale, 3.5 * scale, 96.109375 * scale);
  ctx.bezierCurveTo(82.5 * scale, 75.109375 * scale, 69.5 * scale, 29.109375 * scale, 71.5 * scale, 6.109375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 10 * scale);
  return can;
};

function create_lock(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 47 * scale;
  can.height = 60 * scale;
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 47 * scale;
  can.height = 60 * scale;
  circle(ctx, 23.5 * scale, 20.734375 * scale, 15.132745950421556 * scale);
  fill_path(ctx, undefined, color[2], 4 * scale);
  circle(ctx, 23.5 * scale, 20.734375 * scale, 18.601075237738275 * scale);
  fill_path(ctx, undefined, color[1], 4 * scale);
  circle(ctx, 23.5 * scale, 20.734375 * scale, 11.40175425099138 * scale);
  fill_path(ctx, undefined, color[1], 4 * scale);
  ctx.save();
  ctx.translate(23 * scale, 38.734375 * scale);
  ctx.rotate(0);
  round_rect(ctx, -21.5 * scale, -19 * scale, 43 * scale, 38 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 4 * scale);
  ctx.save();
  ctx.translate(23.5 * scale, 43.734375 * scale);
  ctx.rotate(0.5235987755982988);
  round_regular_polygon(ctx, 3, 8.06225774829855 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[3]);
  circle(ctx, 23.5 * scale, 35.734375 * scale, 7.0710678118654755 * scale);
  fill_path(ctx, color[3]);
  return can;
};

function create_tronctotem(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 201 * scale;
  can.height = 164 * scale;
  ctx.translate(0, 5 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  circle(ctx, 100.5 * scale, 82 * scale, 74.92746655359852 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  circle(ctx, 100.5 * scale, 82 * scale, 65.9417374971317 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.translate(0, -5);
  ctx.globalAlpha = 1;
  circle(ctx, 100.5 * scale, 82 * scale, 74.92746655359852 * scale);
  fill_path(ctx, color[1], color[3], 4 * scale);
  circle(ctx, 100.5 * scale, 82 * scale, 65.9417374971317 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  circle(ctx, 100.5 * scale, 82 * scale, 35.9417374971317 * scale);
  fill_path(ctx, color[1], color[2], 20 * scale);
  circle(ctx, 100.5 * scale, 82 * scale, 15.9417374971317 * scale);
  fill_path(ctx, color[1], color[2], 6 * scale);
  return can;
};

function create_headtotem(scale, draw_shadow, color, rotate) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 501 * scale;
  can.height = 564 * scale;
  ctx.scale(0.5, 0.5);
  ctx.translate(240 * scale, 255 * scale);
  ctx.rotate(rotate);
  ctx.globalAlpha = draw_shadow ? 0.5 : 0.2;
  circle(ctx, 174 * scale, 87.984375 * scale, 20.8806130178211 * scale);
  fill_path(ctx, color[0], color[0], 8 * scale);
  circle(ctx, 174 * scale, 87.984375 * scale, 12.165525060596439 * scale);
  fill_path(ctx, color[0], color[0], 8 * scale);
  circle(ctx, 174 * scale, 87.484375 * scale, 6 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 30 * scale, 87.984375 * scale, 20.8806130178211 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  circle(ctx, 30 * scale, 87.984375 * scale, 12.165525060596439 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  circle(ctx, 30 * scale, 87.484375 * scale, 6 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 100 * scale, 30 * scale, 20.8806130178211 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  circle(ctx, 100 * scale, 30 * scale, 12.165525060596439 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  circle(ctx, 100 * scale, 30 * scale, 6 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 100 * scale, 130 * scale, 20.8806130178211 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  circle(ctx, 100 * scale, 130 * scale, 12.165525060596439 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  circle(ctx, 100 * scale, 130 * scale, 6 * scale);
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(102 * scale, 81.984375 * scale);
  ctx.rotate(0);
  round_rect(ctx, -74 * scale, -57 * scale, 148 * scale, 114 * scale, 23 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.save();
  ctx.translate(101 * scale, 64.984375 * scale);
  ctx.rotate(0);
  round_rect(ctx, -33 * scale, -10 * scale, 66 * scale, 20 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.save();
  ctx.translate(102 * scale, 63.484375 * scale);
  ctx.rotate(0);
  round_rect(ctx, -9 * scale, -27.5 * scale, 18 * scale, 55 * scale, 15 * scale);
  ctx.restore();
  ctx.translate(5, -5);
  ctx.globalAlpha = 1;
  circle(ctx, 174 * scale, 87.984375 * scale, 20.8806130178211 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 174 * scale, 87.984375 * scale, 12.165525060596439 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 174 * scale, 87.484375 * scale, 6 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 30 * scale, 87.984375 * scale, 20.8806130178211 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 30 * scale, 87.984375 * scale, 12.165525060596439 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 30 * scale, 87.484375 * scale, 6 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 102 * scale, 30 * scale, 20.8806130178211 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 102 * scale, 30 * scale, 12.165525060596439 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 102 * scale, 30 * scale, 6 * scale);
  fill_path(ctx, color[1]);
  circle(ctx, 102 * scale, 130 * scale, 20.8806130178211 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 102 * scale, 130 * scale, 12.165525060596439 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 102 * scale, 130 * scale, 6 * scale);
  fill_path(ctx, color[1]);
  ctx.save();
  ctx.translate(102 * scale, 81.984375 * scale);
  round_rect(ctx, -74 * scale, -57 * scale, 148 * scale, 114 * scale, 23 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[3], 8 * scale);
  ctx.save();
  ctx.translate(101 * scale, 64.984375 * scale);
  round_rect(ctx, -33 * scale, -10 * scale, 66 * scale, 20 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 8 * scale);
  ctx.save();
  ctx.translate(102 * scale, 63.484375 * scale);
  round_rect(ctx, -9 * scale, -27.5 * scale, 18 * scale, 55 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[1], 8 * scale);
  circle(ctx, 135 * scale, 107.36605834960938 * scale, 21.095023109728988 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 135 * scale, 107.36605834960938 * scale, 13 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 135 * scale, 107.36605834960938 * scale, 6.082762530298219 * scale);
  fill_path(ctx, color[2]);
  circle(ctx, 70 * scale, 107.36605834960938 * scale, 21.095023109728988 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 70 * scale, 107.36605834960938 * scale, 13 * scale);
  fill_path(ctx, color[1], color[3], 8 * scale);
  circle(ctx, 70 * scale, 107.36605834960938 * scale, 6.082762530298219 * scale);
  fill_path(ctx, color[2]);
  return can;
};

function create_icon_team(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 95 * scale;
  can.height = 85 * scale;
  if (i == 0) {
    ctx.translate(7 * scale, 15 * scale);
    ctx.scale(0.9, 0.9);
    ctx.save();
    round_rect(ctx, 0 * scale, 5 * scale, 90 * scale, 60 * scale, 10);
    fill_path(ctx, color[0]);
    ctx.globalCompositeOperation = "destination-out";
    circle(ctx, 25 * scale, 40 * scale, 10 * scale);
    ctx.fill();
    circle(ctx, 65 * scale, 40 * scale, 10 * scale);
    ctx.fill();
    ctx.restore();
    ctx.save();
    round_rect(ctx, 0, 0, 90 * scale, 60 * scale, 10 * scale);
    fill_path(ctx, color[1]);
    ctx.globalCompositeOperation = "destination-out";
    circle(ctx, 25 * scale, 40 * scale, 10 * scale);
    ctx.fill();
    circle(ctx, 65 * scale, 40 * scale, 10 * scale);
    ctx.fill();
    ctx.restore();
  } else if (i == 1) {
    ctx.scale(0.8, 0.8);
    ctx.translate(15 * scale, 33 * scale);
    ctx.save();
    ctx.scale(0.56, 0.56);
    ctx.translate(-39 * scale, -60 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(32.5 * scale, 50.642852783203125 * scale);
    ctx.bezierCurveTo(83 * scale, 69.64285278320312 * scale, 83 * scale, 69.64285278320312 * scale, 133.5 * scale, 88.64285278320312 * scale);
    ctx.bezierCurveTo(93 * scale, 92.64285278320312 * scale, 93 * scale, 92.64285278320312 * scale, 52.5 * scale, 96.64285278320312 * scale);
    ctx.bezierCurveTo(30.5 * scale, 100.64285278320312 * scale, 36.5 * scale, 94.64285278320312 * scale, 32.5 * scale, 84.64285278320312 * scale);
    ctx.bezierCurveTo(21.5 * scale, 45.642852783203125 * scale, 24.5 * scale, 48.642852783203125 * scale, 31.5 * scale, 50.642852783203125 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(116.5 * scale, 85.64285278320312 * scale);
    ctx.bezierCurveTo(160.5 * scale, 67.14285278320312 * scale, 160.5 * scale, 67.14285278320312 * scale, 204.5 * scale, 48.642852783203125 * scale);
    ctx.bezierCurveTo(220.5 * scale, 42.642852783203125 * scale, 208.5 * scale, 68.64285278320312 * scale, 205.5 * scale, 85.64285278320312 * scale);
    ctx.bezierCurveTo(202.5 * scale, 98.64285278320312 * scale, 199.5 * scale, 98.64285278320312 * scale, 188.5 * scale, 100.64285278320312 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(166.5 * scale, 68.64285278320312 * scale);
    ctx.bezierCurveTo(147.5 * scale, 72.64285278320312 * scale, 145.5 * scale, 73.64285278320312 * scale, 142.5 * scale, 62.642852783203125 * scale);
    ctx.bezierCurveTo(121.5 * scale, 12.642852783203125 * scale, 122.5 * scale, 5.642852783203125 * scale, 117.5 * scale, 15.642852783203125 * scale);
    ctx.bezierCurveTo(105.5 * scale, 40.642852783203125 * scale, 105.5 * scale, 40.642852783203125 * scale, 93.5 * scale, 65.64285278320312 * scale);
    ctx.bezierCurveTo(89.5 * scale, 74.64285278320312 * scale, 84.5 * scale, 72.64285278320312 * scale, 73.5 * scale, 74.64285278320312 * scale);
    ctx.bezierCurveTo(98 * scale, 87.64285278320312 * scale, 98 * scale, 87.64285278320312 * scale, 122.5 * scale, 100.64285278320312 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.restore();
    ctx.save();
    round_rect(ctx, 0, 15 * scale, 90 * scale, 50 * scale, 10 * scale);
    fill_path(ctx, color[0]);
    round_rect(ctx, 0, 10 * scale, 90 * scale, 50 * scale, 10 * scale);
    fill_path(ctx, color[1]);
    ctx.globalCompositeOperation = "destination-out";
    circle(ctx, 25 * scale, 40 * scale, 10 * scale);
    ctx.fill();
    circle(ctx, 65 * scale, 40 * scale, 10 * scale);
    ctx.fill();
    ctx.restore();
  }
  return can;
};

function create_team_button(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 120 * scale;
  can.height = 100 * scale;
  round_rect(ctx, 10 * scale, 10 * scale, 95 * scale, 80 * scale, 10 * scale);
  fill_path(ctx, color[2]);
  round_rect(ctx, 10 * scale, 5 * scale, 95 * scale, 80 * scale, 10 * scale);
  fill_path(ctx, color[3], color[4], 4 * scale);
  if (i == 0) {
    var img = create_icon_team(0.75 * scale, color, 0);
    ctx.drawImage(img, 22 * scale, 18 * scale);
  } else if (i == 1) {
    var img = create_icon_team(0.75 * scale, color, 1);
    ctx.drawImage(img, 22 * scale, 18 * scale);
  }
  return can;
};

function create_totem(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 185 * scale;
  can.height = 164 * scale;
  ctx.translate(0, 0);
  var img = create_tronctotem(scale, draw_shadow, color);
  ctx.drawImage(img, -10 * scale, 0 * scale);
  var img = create_headtotem(scale, draw_shadow, color, 0);
  ctx.drawImage(img, -83 * scale, -40 * scale);
  var img = create_headtotem(scale, draw_shadow, color, Math.PI / 1.4);
  ctx.drawImage(img, -15 * scale, -88 * scale);
  var img = create_headtotem(scale, draw_shadow, color, Math.PI / -1.4);
  ctx.drawImage(img, 15 * scale, -8 * scale);
  return can;
};

function create_lockpick(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 450 * scale;
  can.height = 790 * scale;
  ctx.translate(5 * scale, 5 * scale);
  ctx.globalAlpha = draw_shadow ? 0 : 0;
  circle(ctx, 178.5 * scale, 172.828125 * scale, 150 * scale);
  fill_path(ctx, undefined, color[0], 65 * scale);
  circle(ctx, 178.5 * scale, 172.828125 * scale, 150 * scale);
  fill_path(ctx, undefined, color[0], 55 * scale);
  ctx.closePath();
  ctx.save();
  ctx.translate(177 * scale, 512.328125 * scale);
  round_rect(ctx, -25 * scale, -202.5 * scale, 65 * scale, 405 * scale, 25 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(136 * scale, 581.828125 * scale);
  round_rect(ctx, -39 * scale, -23 * scale, 78 * scale, 46 * scale, 25 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(135.5 * scale, 663.828125 * scale);
  round_rect(ctx, -39.5 * scale, -22 * scale, 79 * scale, 44 * scale, 25 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(114 * scale, 594.828125 * scale);
  ctx.bezierCurveTo(175 * scale, 596.828125 * scale, 163 * scale, 596.828125 * scale, 172 * scale, 594.828125 * scale);
  ctx.bezierCurveTo(171.5 * scale, 633.828125 * scale, 171.5 * scale, 633.828125 * scale, 171 * scale, 672.828125 * scale);
  ctx.bezierCurveTo(110 * scale, 673.828125 * scale, 140.5 * scale, 673.328125 * scale, 110 * scale, 673.828125 * scale);
  ctx.bezierCurveTo(110.5 * scale, 661.828125 * scale, 110.5 * scale, 661.828125 * scale, 111 * scale, 649.828125 * scale);
  ctx.bezierCurveTo(157 * scale, 633.828125 * scale, 134 * scale, 607.828125 * scale, 114 * scale, 594.828125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(0, 5 * scale);
  ctx.moveTo(140 * scale, 294.828125 * scale);
  ctx.bezierCurveTo(212 * scale, 295.828125 * scale, 176.5 * scale, 295.328125 * scale, 213 * scale, 295.828125 * scale);
  ctx.bezierCurveTo(201.5 * scale, 325.328125 * scale, 201.5 * scale, 325.328125 * scale, 190 * scale, 354.828125 * scale);
  ctx.bezierCurveTo(175.5 * scale, 355.828125 * scale, 175.5 * scale, 355.828125 * scale, 161 * scale, 356.828125 * scale);
  ctx.bezierCurveTo(154.5 * scale, 328.828125 * scale, 154.5 * scale, 328.828125 * scale, 148 * scale, 300.828125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(3, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(159 * scale, 679.828125 * scale);
  ctx.bezierCurveTo(180 * scale, 665.828125 * scale, 155 * scale, 675.828125 * scale, 151 * scale, 671.828125 * scale);
  ctx.bezierCurveTo(154.5 * scale, 685.328125 * scale, 154.5 * scale, 685.328125 * scale, 158 * scale, 698.828125 * scale);
  ctx.bezierCurveTo(171 * scale, 699.828125 * scale, 171 * scale, 699.828125 * scale, 184 * scale, 700.828125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(157 * scale, 548.828125 * scale);
  ctx.bezierCurveTo(157 * scale, 561.828125 * scale, 157 * scale, 561.828125 * scale, 157 * scale, 574.828125 * scale);
  ctx.bezierCurveTo(132.5 * scale, 580.828125 * scale, 132.5 * scale, 580.828125 * scale, 108 * scale, 586.828125 * scale);
  ctx.bezierCurveTo(112 * scale, 599.828125 * scale, 111 * scale, 593.828125 * scale, 112 * scale, 599.828125 * scale);
  ctx.bezierCurveTo(159 * scale, 603.828125 * scale, 126.5 * scale, 601.328125 * scale, 141 * scale, 602.828125 * scale);
  ctx.bezierCurveTo(145 * scale, 641.828125 * scale, 143.5 * scale, 623.828125 * scale, 146 * scale, 644.828125 * scale);
  ctx.bezierCurveTo(129.5 * scale, 645.328125 * scale, 129.5 * scale, 645.328125 * scale, 113 * scale, 645.828125 * scale);
  ctx.bezierCurveTo(107.5 * scale, 652.828125 * scale, 107.5 * scale, 652.828125 * scale, 102 * scale, 659.828125 * scale);
  ctx.bezierCurveTo(104 * scale, 669.328125 * scale, 104 * scale, 669.328125 * scale, 106 * scale, 678.828125 * scale);
  ctx.bezierCurveTo(145 * scale, 679.328125 * scale, 145 * scale, 679.328125 * scale, 184 * scale, 679.828125 * scale);
  ctx.bezierCurveTo(185 * scale, 615.828125 * scale, 185 * scale, 615.828125 * scale, 186 * scale, 551.828125 * scale);
  ctx.bezierCurveTo(172.5 * scale, 551.328125 * scale, 172.5 * scale, 551.328125 * scale, 159 * scale, 550.828125 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 7 * scale);
  ctx.restore();
  ctx.globalAlpha = 1;
  ctx.translate(15 * scale, 35 * scale);
  circle(ctx, 178.5 * scale, 172.828125 * scale, 150 * scale);
  fill_path(ctx, undefined, color[2], 95 * scale);
  circle(ctx, 178.5 * scale, 172.828125 * scale, 150 * scale);
  fill_path(ctx, undefined, color[1], 55 * scale);
  ctx.closePath();
  ctx.save();
  ctx.translate(177 * scale, 512.328125 * scale);
  round_rect(ctx, -25 * scale, -202.5 * scale, 65 * scale, 405 * scale, 25 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 20 * scale);
  ctx.save();
  ctx.translate(136 * scale, 581.828125 * scale);
  round_rect(ctx, -39 * scale, -23 * scale, 78 * scale, 46 * scale, 25 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 20 * scale);
  ctx.save();
  ctx.translate(135.5 * scale, 663.828125 * scale);
  round_rect(ctx, -39.5 * scale, -22 * scale, 79 * scale, 44 * scale, 25 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(114 * scale, 594.828125 * scale);
  ctx.bezierCurveTo(175 * scale, 596.828125 * scale, 163 * scale, 596.828125 * scale, 172 * scale, 594.828125 * scale);
  ctx.bezierCurveTo(171.5 * scale, 633.828125 * scale, 171.5 * scale, 633.828125 * scale, 171 * scale, 672.828125 * scale);
  ctx.bezierCurveTo(110 * scale, 673.828125 * scale, 140.5 * scale, 673.328125 * scale, 110 * scale, 673.828125 * scale);
  ctx.bezierCurveTo(110.5 * scale, 661.828125 * scale, 110.5 * scale, 661.828125 * scale, 111 * scale, 649.828125 * scale);
  ctx.bezierCurveTo(157 * scale, 633.828125 * scale, 134 * scale, 607.828125 * scale, 114 * scale, 594.828125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(0, 5 * scale);
  ctx.moveTo(123 * scale, 294.828125 * scale);
  ctx.bezierCurveTo(212 * scale, 295.828125 * scale, 190.5 * scale, 295.328125 * scale, 250 * scale, 295.828125 * scale);
  ctx.bezierCurveTo(231.5 * scale, 325.328125 * scale, 231.5 * scale, 325.328125 * scale, 220 * scale, 354.828125 * scale);
  ctx.bezierCurveTo(175.5 * scale, 355.828125 * scale, 175.5 * scale, 355.828125 * scale, 140 * scale, 356.828125 * scale);
  ctx.bezierCurveTo(123.5 * scale, 328.828125 * scale, 123.5 * scale, 328.828125 * scale, 123 * scale, 294.828125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(159 * scale, 679.828125 * scale);
  ctx.bezierCurveTo(180 * scale, 665.828125 * scale, 155 * scale, 675.828125 * scale, 151 * scale, 671.828125 * scale);
  ctx.bezierCurveTo(154.5 * scale, 685.328125 * scale, 154.5 * scale, 685.328125 * scale, 158 * scale, 698.828125 * scale);
  ctx.bezierCurveTo(171 * scale, 699.828125 * scale, 171 * scale, 699.828125 * scale, 184 * scale, 700.828125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.save();
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(157 * scale, 548.828125 * scale);
  ctx.bezierCurveTo(157 * scale, 561.828125 * scale, 157 * scale, 561.828125 * scale, 157 * scale, 574.828125 * scale);
  ctx.bezierCurveTo(132.5 * scale, 580.828125 * scale, 132.5 * scale, 580.828125 * scale, 108 * scale, 586.828125 * scale);
  ctx.bezierCurveTo(112 * scale, 599.828125 * scale, 111 * scale, 593.828125 * scale, 112 * scale, 599.828125 * scale);
  ctx.bezierCurveTo(159 * scale, 603.828125 * scale, 126.5 * scale, 601.328125 * scale, 141 * scale, 602.828125 * scale);
  ctx.bezierCurveTo(145 * scale, 641.828125 * scale, 143.5 * scale, 623.828125 * scale, 146 * scale, 644.828125 * scale);
  ctx.bezierCurveTo(129.5 * scale, 645.328125 * scale, 129.5 * scale, 645.328125 * scale, 113 * scale, 645.828125 * scale);
  ctx.bezierCurveTo(107.5 * scale, 652.828125 * scale, 107.5 * scale, 652.828125 * scale, 102 * scale, 659.828125 * scale);
  ctx.bezierCurveTo(104 * scale, 669.328125 * scale, 104 * scale, 669.328125 * scale, 106 * scale, 678.828125 * scale);
  ctx.bezierCurveTo(145 * scale, 679.328125 * scale, 145 * scale, 679.328125 * scale, 184 * scale, 679.828125 * scale);
  ctx.bezierCurveTo(185 * scale, 615.828125 * scale, 185 * scale, 615.828125 * scale, 186 * scale, 551.828125 * scale);
  ctx.bezierCurveTo(172.5 * scale, 551.328125 * scale, 172.5 * scale, 551.328125 * scale, 159 * scale, 550.828125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[1], 7 * scale);
  ctx.restore();
  return can;
};

function create_resurrection_ground(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 202 * scale;
  can.height = 202 * scale;
  ctx.translate(2 * scale, 1 * scale);
  ctx.globalAlpha = 0.3;
  circle(ctx, 98 * scale, 99 * scale, 100 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 0.5;
  circle(ctx, 98 * scale, 99 * scale, 90 * scale);
  fill_path(ctx, color[1]);
  return can;
};

function create_resurrection_hole(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 89 * scale;
  can.height = 89 * scale;
  ctx.save();
  ctx.translate(44.5 * scale, 44.5 * scale);
  round_regular_polygon(ctx, 6, 40 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 5 * scale);
  ctx.save();
  ctx.translate(44.5 * scale, 44.5 * scale);
  round_regular_polygon(ctx, 6, 25.11521001172521 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 5 * scale);
  return can;
};

function create_resurrection_rotate(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 88 * scale;
  can.height = 88 * scale;
  ctx.save();
  ctx.translate(44 * scale, 44 * scale);
  ctx.rotate(0.52);
  round_regular_polygon(ctx, 6, 43 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[1], 3 * scale);
  return can;
};

function create_resurrection(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 202 * scale;
  can.height = 202 * scale;
  ctx.translate(2 * scale, 1 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.save();
  ctx.translate(98 * scale, 41.15177917480469 * scale);
  ctx.rotate(0.8);
  round_rect(ctx, -16 * scale, -16.5 * scale, 32 * scale, 33 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(98 * scale, 22.5089111328125 * scale);
  ctx.bezierCurveTo(97.5 * scale, 41.5089111328125 * scale, 97.5 * scale, 41.5089111328125 * scale, 97 * scale, 60.5089111328125 * scale);
  fill_path(ctx, color[2]);
  ctx.save();
  ctx.translate(147.5 * scale, 69.5089111328125 * scale);
  ctx.rotate(0.2);
  round_rect(ctx, -15.5 * scale, -16 * scale, 31 * scale, 32 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(163 * scale, 59.50892639160156 * scale);
  ctx.bezierCurveTo(147 * scale, 69.50892639160156 * scale, 127 * scale, 82.50892639160156 * scale, 131 * scale, 79.50892639160156 * scale);
  fill_path(ctx, color[2]);
  ctx.save();
  ctx.translate(143.5 * scale, 128.2946319580078 * scale);
  ctx.rotate(1.24);
  round_rect(ctx, -16.5 * scale, -17.5 * scale, 33 * scale, 35 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(162 * scale, 135.93748474121094 * scale);
  ctx.bezierCurveTo(143.5 * scale, 128.43748474121094 * scale, 129 * scale, 120.93748474121094 * scale, 125 * scale, 120.93748474121094 * scale);
  fill_path(ctx, color[2]);
  ctx.save();
  ctx.translate(99 * scale, 156.08035278320312 * scale);
  ctx.rotate(0.84);
  round_rect(ctx, -18 * scale, -18 * scale, 36 * scale, 36 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(98 * scale, 136.08035278320312 * scale);
  ctx.bezierCurveTo(98 * scale, 156.08035278320312 * scale, 98 * scale, 156.08035278320312 * scale, 98 * scale, 176.08035278320312 * scale);
  fill_path(ctx, color[2]);
  ctx.save();
  ctx.translate(54 * scale, 72.22320556640625 * scale);
  ctx.rotate(1.32);
  round_rect(ctx, -18 * scale, -19 * scale, 36 * scale, 38 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(34 * scale, 60.79463195800781 * scale);
  ctx.bezierCurveTo(53.5 * scale, 72.29463195800781 * scale, 69 * scale, 79.79463195800781 * scale, 73 * scale, 83.79463195800781 * scale);
  fill_path(ctx, color[2]);
  ctx.save();
  ctx.translate(49 * scale, 127.29463195800781 * scale);
  ctx.rotate(1.76);
  round_rect(ctx, -20 * scale, -17.5 * scale, 40 * scale, 35 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 141.7946319580078 * scale);
  ctx.bezierCurveTo(47 * scale, 130.2946319580078 * scale, 64 * scale, 119.79463195800781 * scale, 64 * scale, 118.79463195800781 * scale);
  fill_path(ctx, color[2]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.save();
  ctx.translate(98 * scale, 41.15177917480469 * scale);
  ctx.rotate(0.8);
  round_rect(ctx, -16 * scale, -16.5 * scale, 32 * scale, 33 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(98 * scale, 22.5089111328125 * scale);
  ctx.bezierCurveTo(97.5 * scale, 41.5089111328125 * scale, 97.5 * scale, 41.5089111328125 * scale, 97 * scale, 60.5089111328125 * scale);
  fill_path(ctx, undefined, color[4], 5 * scale);
  ctx.save();
  ctx.translate(147.5 * scale, 69.5089111328125 * scale);
  ctx.rotate(0.2);
  round_rect(ctx, -15.5 * scale, -16 * scale, 31 * scale, 32 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(163 * scale, 59.50892639160156 * scale);
  ctx.bezierCurveTo(147 * scale, 69.50892639160156 * scale, 127 * scale, 82.50892639160156 * scale, 131 * scale, 79.50892639160156 * scale);
  fill_path(ctx, undefined, color[4], 5 * scale);
  ctx.save();
  ctx.translate(143.5 * scale, 128.2946319580078 * scale);
  ctx.rotate(1.24);
  round_rect(ctx, -16.5 * scale, -17.5 * scale, 33 * scale, 35 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(162 * scale, 135.93748474121094 * scale);
  ctx.bezierCurveTo(143.5 * scale, 128.43748474121094 * scale, 129 * scale, 120.93748474121094 * scale, 125 * scale, 120.93748474121094 * scale);
  fill_path(ctx, undefined, color[4], 5 * scale);
  ctx.save();
  ctx.translate(99 * scale, 156.08035278320312 * scale);
  ctx.rotate(0.84);
  round_rect(ctx, -18 * scale, -18 * scale, 36 * scale, 36 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(98 * scale, 136.08035278320312 * scale);
  ctx.bezierCurveTo(98 * scale, 156.08035278320312 * scale, 98 * scale, 156.08035278320312 * scale, 98 * scale, 176.08035278320312 * scale);
  fill_path(ctx, undefined, color[4], 5 * scale);
  ctx.save();
  ctx.translate(54 * scale, 72.22320556640625 * scale);
  ctx.rotate(1.32);
  round_rect(ctx, -18 * scale, -19 * scale, 36 * scale, 38 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(34 * scale, 60.79463195800781 * scale);
  ctx.bezierCurveTo(53.5 * scale, 72.29463195800781 * scale, 69 * scale, 79.79463195800781 * scale, 73 * scale, 83.79463195800781 * scale);
  fill_path(ctx, undefined, color[4], 5 * scale);
  ctx.save();
  ctx.translate(49 * scale, 127.29463195800781 * scale);
  ctx.rotate(1.76);
  round_rect(ctx, -20 * scale, -17.5 * scale, 40 * scale, 35 * scale, 7 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30 * scale, 141.7946319580078 * scale);
  ctx.bezierCurveTo(47 * scale, 130.2946319580078 * scale, 64 * scale, 119.79463195800781 * scale, 64 * scale, 118.79463195800781 * scale);
  fill_path(ctx, undefined, color[4], 5 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.save();
  ctx.translate(98 * scale, 99 * scale);
  round_regular_polygon(ctx, 6, 70.28669492273468 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.save();
  ctx.translate(98 * scale, 99 * scale);
  round_regular_polygon(ctx, 6, 56.455940020351264 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.save();
  ctx.translate(98 * scale, 99 * scale);
  round_regular_polygon(ctx, 6, 70.28669492273468 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[5], color[6], 5 * scale);
  ctx.save();
  ctx.translate(98 * scale, 99 * scale);
  round_regular_polygon(ctx, 6, 56.455940020351264 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[7], color[8], 7 * scale);
  return can;
};

function create_dragon_heart(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 161 * scale;
  can.height = 184 * scale;
  ctx.translate(0, 10 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105.5 * scale, 34.609375 * scale);
  ctx.bezierCurveTo(48.5 * scale, 7.609375 * scale, 11.5 * scale, 58.609375 * scale, 20.5 * scale, 97.609375 * scale);
  ctx.bezierCurveTo(44.5 * scale, 161.609375 * scale, 70.5 * scale, 171.609375 * scale, 88.5 * scale, 156.609375 * scale);
  ctx.bezierCurveTo(120.5 * scale, 129.609375 * scale, 123.5 * scale, 105.609375 * scale, 128.5 * scale, 83.609375 * scale);
  ctx.bezierCurveTo(137.5 * scale, 79.609375 * scale, 141.5 * scale, 79.609375 * scale, 146.5 * scale, 81.609375 * scale);
  ctx.bezierCurveTo(153.5 * scale, 70.609375 * scale, 151.5 * scale, 65.609375 * scale, 148.5 * scale, 61.609375 * scale);
  ctx.bezierCurveTo(134.5 * scale, 60.609375 * scale, 131.5 * scale, 63.609375 * scale, 127.5 * scale, 66.609375 * scale);
  ctx.bezierCurveTo(127.5 * scale, 55.609375 * scale, 125.5 * scale, 54.609375 * scale, 120.5 * scale, 51.609375 * scale);
  ctx.bezierCurveTo(128.5 * scale, 42.609375 * scale, 136.5 * scale, 38.609375 * scale, 147.5 * scale, 39.609375 * scale);
  ctx.bezierCurveTo(152.5 * scale, 23.609375 * scale, 147.5 * scale, 21.609375 * scale, 140.5 * scale, 17.609375 * scale);
  ctx.bezierCurveTo(120.5 * scale, 17.609375 * scale, 114.5 * scale, 27.609375 * scale, 106.5 * scale, 35.609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(45.5 * scale, 144.609375 * scale);
  ctx.bezierCurveTo(35.5 * scale, 155.609375 * scale, 37 * scale, 152.109375 * scale, 28.5 * scale, 159.609375 * scale);
  ctx.bezierCurveTo(16.5 * scale, 154.609375 * scale, 16.5 * scale, 151.609375 * scale, 17.5 * scale, 141.609375 * scale);
  ctx.bezierCurveTo(25.5 * scale, 134.109375 * scale, 25.5 * scale, 134.109375 * scale, 33.5 * scale, 126.609375 * scale);
  fill_path(ctx, color[0]);
  ctx.translate(0, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(45.5 * scale, 144.609375 * scale);
  ctx.bezierCurveTo(35.5 * scale, 155.609375 * scale, 37 * scale, 152.109375 * scale, 28.5 * scale, 159.609375 * scale);
  ctx.bezierCurveTo(16.5 * scale, 154.609375 * scale, 16.5 * scale, 151.609375 * scale, 17.5 * scale, 141.609375 * scale);
  ctx.bezierCurveTo(25.5 * scale, 134.109375 * scale, 25.5 * scale, 134.109375 * scale, 33.5 * scale, 126.609375 * scale);
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105.5 * scale, 34.609375 * scale);
  ctx.bezierCurveTo(48.5 * scale, 7.609375 * scale, 11.5 * scale, 58.609375 * scale, 20.5 * scale, 97.609375 * scale);
  ctx.bezierCurveTo(44.5 * scale, 161.609375 * scale, 70.5 * scale, 171.609375 * scale, 88.5 * scale, 156.609375 * scale);
  ctx.bezierCurveTo(120.5 * scale, 129.609375 * scale, 123.5 * scale, 105.609375 * scale, 128.5 * scale, 83.609375 * scale);
  ctx.bezierCurveTo(137.5 * scale, 79.609375 * scale, 141.5 * scale, 79.609375 * scale, 146.5 * scale, 81.609375 * scale);
  ctx.bezierCurveTo(153.5 * scale, 70.609375 * scale, 151.5 * scale, 65.609375 * scale, 148.5 * scale, 61.609375 * scale);
  ctx.bezierCurveTo(134.5 * scale, 60.609375 * scale, 131.5 * scale, 63.609375 * scale, 127.5 * scale, 66.609375 * scale);
  ctx.bezierCurveTo(127.5 * scale, 55.609375 * scale, 125.5 * scale, 54.609375 * scale, 120.5 * scale, 51.609375 * scale);
  ctx.bezierCurveTo(128.5 * scale, 42.609375 * scale, 136.5 * scale, 38.609375 * scale, 147.5 * scale, 39.609375 * scale);
  ctx.bezierCurveTo(152.5 * scale, 23.609375 * scale, 147.5 * scale, 21.609375 * scale, 140.5 * scale, 17.609375 * scale);
  ctx.bezierCurveTo(120.5 * scale, 17.609375 * scale, 114.5 * scale, 27.609375 * scale, 106.5 * scale, 35.609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(104.5 * scale, 35.609375 * scale);
  ctx.bezierCurveTo(71.5 * scale, 36.609375 * scale, 57.5 * scale, 52.609375 * scale, 58.5 * scale, 81.609375 * scale);
  ctx.bezierCurveTo(59.5 * scale, 103.609375 * scale, 66.5 * scale, 107.609375 * scale, 66.5 * scale, 116.609375 * scale);
  ctx.bezierCurveTo(67.5 * scale, 128.609375 * scale, 65.5 * scale, 131.609375 * scale, 63.5 * scale, 137.609375 * scale);
  fill_path(ctx, undefined, color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(59.5 * scale, 72.609375 * scale);
  ctx.bezierCurveTo(38.5 * scale, 80.609375 * scale, 43.5 * scale, 81.609375 * scale, 37.5 * scale, 89.609375 * scale);
  fill_path(ctx, undefined, color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(60.5 * scale, 85.609375 * scale);
  ctx.bezierCurveTo(75.5 * scale, 91.609375 * scale, 76.5 * scale, 96.609375 * scale, 81.5 * scale, 104.609375 * scale);
  fill_path(ctx, undefined, color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(68.5 * scale, 122.609375 * scale);
  ctx.bezierCurveTo(79.5 * scale, 130.609375 * scale, 74.5 * scale, 128.609375 * scale, 80.5 * scale, 134.609375 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(142.5 * scale, 18.609375 * scale);
  ctx.bezierCurveTo(151.5 * scale, 28.609375 * scale, 151.5 * scale, 32.609375 * scale, 146.5 * scale, 40.609375 * scale);
  ctx.bezierCurveTo(137.5 * scale, 26.609375 * scale, 138.5 * scale, 24.609375 * scale, 142.5 * scale, 19.609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(146.5 * scale, 61.50892639160156 * scale);
  ctx.bezierCurveTo(157.5 * scale, 69.50892639160156 * scale, 150.5 * scale, 79.50892639160156 * scale, 145.5 * scale, 81.50892639160156 * scale);
  ctx.bezierCurveTo(140.5 * scale, 65.50892639160156 * scale, 144.5 * scale, 64.50892639160156 * scale, 146.5 * scale, 62.50892639160156 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  return can;
};

function create_ghost(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 254 * scale;
  can.height = 288 * scale;
  ctx.translate(0, 5);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(218 * scale, 84.640625 * scale);
  ctx.bezierCurveTo(150 * scale, 13.640625 * scale, 186 * scale, 92.640625 * scale, 168 * scale, 103.640625 * scale);
  ctx.bezierCurveTo(151 * scale, 107.640625 * scale, 150 * scale, 61.640625 * scale, 144 * scale, 39.640625 * scale);
  ctx.bezierCurveTo(135 * scale, 1.640625 * scale, 113 * scale, 2.640625 * scale, 110 * scale, 40.640625 * scale);
  ctx.bezierCurveTo(106 * scale, 97.640625 * scale, 98 * scale, 102.640625 * scale, 83 * scale, 100.640625 * scale);
  ctx.bezierCurveTo(68 * scale, 98.640625 * scale, 67 * scale, 77.640625 * scale, 70 * scale, 55.640625 * scale);
  ctx.bezierCurveTo(75 * scale, 16.640625 * scale, 47 * scale, 52.640625 * scale, 38 * scale, 67.640625 * scale);
  ctx.bezierCurveTo(10 * scale, 113.640625 * scale, 10 * scale, 181.640625 * scale, 23 * scale, 213.640625 * scale);
  ctx.bezierCurveTo(45 * scale, 266.640625 * scale, 97 * scale, 277.640625 * scale, 147 * scale, 269.640625 * scale);
  ctx.bezierCurveTo(217 * scale, 259.640625 * scale, 236 * scale, 221.640625 * scale, 239 * scale, 166.640625 * scale);
  ctx.bezierCurveTo(239 * scale, 113.640625 * scale, 223 * scale, 90.640625 * scale, 219 * scale, 86.640625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 4 * scale);
  circle(ctx, 175 * scale, 220.640625 * scale, 29.546573405388315 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 79 * scale, 222.640625 * scale, 28.178005607210743 * scale);
  fill_path(ctx, color[0]);
  circle(ctx, 175 * scale, 214.640625 * scale, 27.892651361962706 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  circle(ctx, 79 * scale, 215.640625 * scale, 26.570660511172846 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.translate(0, -5);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(218 * scale, 84.640625 * scale);
  ctx.bezierCurveTo(150 * scale, 13.640625 * scale, 186 * scale, 92.640625 * scale, 168 * scale, 103.640625 * scale);
  ctx.bezierCurveTo(151 * scale, 107.640625 * scale, 150 * scale, 61.640625 * scale, 144 * scale, 39.640625 * scale);
  ctx.bezierCurveTo(135 * scale, 1.640625 * scale, 113 * scale, 2.640625 * scale, 110 * scale, 40.640625 * scale);
  ctx.bezierCurveTo(106 * scale, 97.640625 * scale, 98 * scale, 102.640625 * scale, 83 * scale, 100.640625 * scale);
  ctx.bezierCurveTo(68 * scale, 98.640625 * scale, 67 * scale, 77.640625 * scale, 70 * scale, 55.640625 * scale);
  ctx.bezierCurveTo(75 * scale, 16.640625 * scale, 47 * scale, 52.640625 * scale, 38 * scale, 67.640625 * scale);
  ctx.bezierCurveTo(10 * scale, 113.640625 * scale, 10 * scale, 181.640625 * scale, 23 * scale, 213.640625 * scale);
  ctx.bezierCurveTo(45 * scale, 266.640625 * scale, 97 * scale, 277.640625 * scale, 147 * scale, 269.640625 * scale);
  ctx.bezierCurveTo(217 * scale, 259.640625 * scale, 236 * scale, 221.640625 * scale, 239 * scale, 166.640625 * scale);
  ctx.bezierCurveTo(239 * scale, 113.640625 * scale, 223 * scale, 90.640625 * scale, 219 * scale, 86.640625 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  circle(ctx, 175 * scale, 222.640625 * scale, 26.546573405388315 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 79 * scale, 222.640625 * scale, 26.178005607210743 * scale);
  fill_path(ctx, color[3]);
  circle(ctx, 175 * scale, 210.640625 * scale, 26.892651361962706 * scale);
  fill_path(ctx, color[4], color[5], 8 * scale);
  circle(ctx, 79 * scale, 210.640625 * scale, 26.570660511172846 * scale);
  fill_path(ctx, color[4], color[5], 8 * scale);
  return can;
};

function create_gemme_green(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 104 * scale;
  can.height = 117 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(4 * scale, 90 * scale);
  ctx.bezierCurveTo(20 * scale, 99.5 * scale, 20 * scale, 99.5 * scale, 36 * scale, 109 * scale);
  ctx.bezierCurveTo(67 * scale, 92 * scale, 67 * scale, 92 * scale, 98 * scale, 75 * scale);
  ctx.bezierCurveTo(91 * scale, 27 * scale, 91 * scale, 27 * scale, 91 * scale, 28 * scale);
  ctx.bezierCurveTo(72.5 * scale, 16 * scale, 72.5 * scale, 16 * scale, 54 * scale, 4 * scale);
  ctx.bezierCurveTo(33.5 * scale, 10 * scale, 33.5 * scale, 10 * scale, 13 * scale, 16 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(6 * scale, 76 * scale);
  ctx.bezierCurveTo(13.5 * scale, 51.5 * scale, 13.5 * scale, 51.5 * scale, 21 * scale, 27 * scale);
  ctx.bezierCurveTo(37.5 * scale, 17 * scale, 37.5 * scale, 17 * scale, 54 * scale, 7 * scale);
  ctx.bezierCurveTo(33.5 * scale, 12.5 * scale, 33.5 * scale, 12.5 * scale, 13 * scale, 18 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(24 * scale, 62 * scale);
  ctx.bezierCurveTo(28.5 * scale, 53 * scale, 28.5 * scale, 53 * scale, 33 * scale, 44 * scale);
  ctx.bezierCurveTo(41.5 * scale, 41 * scale, 41.5 * scale, 41 * scale, 50 * scale, 38 * scale);
  ctx.bezierCurveTo(52.5 * scale, 35 * scale, 52.5 * scale, 35 * scale, 55 * scale, 32 * scale);
  ctx.bezierCurveTo(52 * scale, 30 * scale, 52 * scale, 30 * scale, 49 * scale, 28 * scale);
  ctx.bezierCurveTo(38 * scale, 31.5 * scale, 38 * scale, 31.5 * scale, 27 * scale, 35 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36 * scale, 107 * scale);
  ctx.bezierCurveTo(66 * scale, 90.5 * scale, 66 * scale, 90.5 * scale, 96 * scale, 74 * scale);
  ctx.bezierCurveTo(93 * scale, 52.5 * scale, 93 * scale, 52.5 * scale, 90 * scale, 31 * scale);
  ctx.bezierCurveTo(87 * scale, 48 * scale, 87 * scale, 48 * scale, 84 * scale, 65 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(1 * scale, 89 * scale);
  ctx.bezierCurveTo(18 * scale, 100 * scale, 34 * scale, 110 * scale, 35 * scale, 111 * scale);
  ctx.bezierCurveTo(67 * scale, 93 * scale, 67 * scale, 93 * scale, 99 * scale, 75 * scale);
  ctx.bezierCurveTo(100 * scale, 78.5 * scale, 100 * scale, 78.5 * scale, 101 * scale, 82 * scale);
  ctx.bezierCurveTo(68 * scale, 99 * scale, 68 * scale, 99 * scale, 35 * scale, 116 * scale);
  ctx.bezierCurveTo(18 * scale, 106.5 * scale, 18 * scale, 106.5 * scale, 1 * scale, 97 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36 * scale, 107 * scale);
  ctx.bezierCurveTo(66.5 * scale, 91.5 * scale, 66.5 * scale, 91.5 * scale, 97 * scale, 76 * scale);
  ctx.bezierCurveTo(94.5 * scale, 52 * scale, 94.5 * scale, 52 * scale, 92 * scale, 28 * scale);
  ctx.bezierCurveTo(73 * scale, 15.5 * scale, 73 * scale, 15.5 * scale, 54 * scale, 3 * scale);
  ctx.bezierCurveTo(33 * scale, 9.5 * scale, 33 * scale, 9.5 * scale, 12 * scale, 16 * scale);
  ctx.bezierCurveTo(8 * scale, 53 * scale, 8 * scale, 53 * scale, 4 * scale, 90 * scale);
  ctx.bezierCurveTo(18.5 * scale, 99 * scale, 18.5 * scale, 99 * scale, 33 * scale, 108 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(22 * scale, 71 * scale);
  ctx.bezierCurveTo(30 * scale, 76.5 * scale, 30 * scale, 76.5 * scale, 38 * scale, 82 * scale);
  ctx.bezierCurveTo(53 * scale, 72 * scale, 53 * scale, 72 * scale, 68 * scale, 62 * scale);
  ctx.bezierCurveTo(68 * scale, 52 * scale, 68 * scale, 52 * scale, 68 * scale, 42 * scale);
  ctx.bezierCurveTo(59.5 * scale, 35.5 * scale, 59.5 * scale, 35.5 * scale, 51 * scale, 29 * scale);
  ctx.bezierCurveTo(39.5 * scale, 32 * scale, 39.5 * scale, 32 * scale, 28 * scale, 35 * scale);
  ctx.bezierCurveTo(25 * scale, 52 * scale, 25 * scale, 52 * scale, 22 * scale, 69 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(5 * scale, 89 * scale);
  ctx.bezierCurveTo(20 * scale, 73 * scale, 12.5 * scale, 80.5 * scale, 20 * scale, 72 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35 * scale, 102 * scale);
  ctx.bezierCurveTo(36 * scale, 92.5 * scale, 36 * scale, 92.5 * scale, 37 * scale, 83 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(68 * scale, 62 * scale);
  ctx.bezierCurveTo(81 * scale, 67.5 * scale, 81 * scale, 67.5 * scale, 94 * scale, 73 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(70 * scale, 41 * scale);
  ctx.bezierCurveTo(80 * scale, 35.5 * scale, 80 * scale, 35.5 * scale, 90 * scale, 30 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(28 * scale, 33 * scale);
  ctx.bezierCurveTo(21.5 * scale, 26.5 * scale, 21.5 * scale, 26.5 * scale, 15 * scale, 20 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(51 * scale, 28 * scale);
  ctx.bezierCurveTo(53 * scale, 17 * scale, 53 * scale, 17 * scale, 55 * scale, 6 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[4], 6 * scale);
  return can;
};

function create_superhammer(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 105 * scale;
  can.height = 144 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(-5 * scale, 0 * scale);
  ctx.save();
  ctx.translate(52.5 * scale, 91.5 * scale);
  round_rect(ctx, -4.5 * scale, -39 * scale, 9 * scale, 78 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 3 * scale);
  ctx.save();
  ctx.translate(53 * scale, 36 * scale);
  round_rect(ctx, -29 * scale, -17.5 * scale, 58 * scale, 35 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.save();
  ctx.translate(53.5 * scale, 35.5 * scale);
  round_rect(ctx, -26.5 * scale, -15 * scale, 53 * scale, 30 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.translate(5 * scale, 0 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(52.5 * scale, 91.5 * scale);
  round_rect(ctx, -4.5 * scale, -39 * scale, 9 * scale, 78 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 3 * scale);
  ctx.save();
  ctx.translate(53 * scale, 36 * scale);
  round_rect(ctx, -29 * scale, -17.5 * scale, 58 * scale, 35 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.save();
  ctx.translate(53.5 * scale, 35.5 * scale);
  round_rect(ctx, -26.5 * scale, -15 * scale, 53 * scale, 30 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(49 * scale, 60.5 * scale);
  ctx.bezierCurveTo(44 * scale, 56.5 * scale, 44 * scale, 56.5 * scale, 39 * scale, 52.5 * scale);
  ctx.bezierCurveTo(39 * scale, 46.5 * scale, 39 * scale, 46.5 * scale, 39 * scale, 40.5 * scale);
  ctx.bezierCurveTo(44 * scale, 44 * scale, 44 * scale, 44 * scale, 49 * scale, 47.5 * scale);
  ctx.bezierCurveTo(49 * scale, 54 * scale, 49 * scale, 54 * scale, 49 * scale, 60.5 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[6], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(66 * scale, 40.5 * scale);
  ctx.bezierCurveTo(66 * scale, 46.5 * scale, 66 * scale, 46.5 * scale, 66 * scale, 52.5 * scale);
  ctx.bezierCurveTo(60.5 * scale, 56.5 * scale, 60.5 * scale, 56.5 * scale, 55 * scale, 60.5 * scale);
  ctx.bezierCurveTo(56 * scale, 53 * scale, 56 * scale, 53 * scale, 57 * scale, 45.5 * scale);
  ctx.bezierCurveTo(61.5 * scale, 43 * scale, 61.5 * scale, 43 * scale, 66 * scale, 40.5 * scale);
  ctx.closePath();
  fill_path(ctx, color[7], color[6], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 33.5 * scale);
  ctx.bezierCurveTo(55.5 * scale, 41 * scale, 55.5 * scale, 41 * scale, 59 * scale, 48.5 * scale);
  ctx.bezierCurveTo(56 * scale, 58 * scale, 56 * scale, 58 * scale, 53 * scale, 67.5 * scale);
  ctx.bezierCurveTo(49 * scale, 58 * scale, 49 * scale, 58 * scale, 45 * scale, 48.5 * scale);
  ctx.bezierCurveTo(48.5 * scale, 41 * scale, 48.5 * scale, 41 * scale, 52 * scale, 33.5 * scale);
  ctx.closePath();
  fill_path(ctx, color[9], color[8], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 47.5 * scale);
  ctx.bezierCurveTo(54.5 * scale, 50.5 * scale, 54.5 * scale, 50.5 * scale, 57 * scale, 53.5 * scale);
  ctx.bezierCurveTo(55 * scale, 60 * scale, 55 * scale, 60 * scale, 53 * scale, 66.5 * scale);
  ctx.bezierCurveTo(50.5 * scale, 61 * scale, 50.5 * scale, 61 * scale, 48 * scale, 55.5 * scale);
  ctx.bezierCurveTo(50 * scale, 52 * scale, 50 * scale, 52 * scale, 52 * scale, 48.5 * scale);
  ctx.closePath();
  fill_path(ctx, color[11], color[10], 3 * scale);
  return can;
};

function create_dragon_sword(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 46 * scale;
  can.height = 140 * scale;
  ctx.scale(-1 * scale, 1 * scale);
  ctx.translate(-50 * scale, 40 * scale);
  ctx.translate(-20 * scale, 0);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(10 * scale, 0);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(22.599990844726562 * scale, 85.94999694824219 * scale);
  ctx.bezierCurveTo(17.599990844726562 * scale, 83.94999694824219 * scale, 17.599990844726562 * scale, 83.94999694824219 * scale, 12.599990844726562 * scale, 81.94999694824219 * scale);
  ctx.bezierCurveTo(19.599990844726562 * scale, 73.94999694824219 * scale, 2.5999908447265625 * scale, 22.949996948242188 * scale, 33.59999084472656 * scale, 7.9499969482421875 * scale);
  ctx.bezierCurveTo(27.599990844726562 * scale, 28.949996948242188 * scale, 33.59999084472656 * scale, 26.949996948242188 * scale, 35.59999084472656 * scale, 32.94999694824219 * scale);
  ctx.bezierCurveTo(25.599990844726562 * scale, 59.94999694824219 * scale, 26.599990844726562 * scale, 69.94999694824219 * scale, 29.599990844726562 * scale, 82.94999694824219 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(-1 * scale, 0);
  ctx.moveTo(17.599990844726562 * scale, 89.75 * scale);
  ctx.bezierCurveTo(24.599990844726562 * scale, 99.75 * scale, 24.599990844726562 * scale, 101.75 * scale, 20.599990844726562 * scale, 111.75 * scale);
  ctx.bezierCurveTo(28.599990844726562 * scale, 110.75 * scale, 26.599990844726562 * scale, 112.75 * scale, 28.599990844726562 * scale, 111.75 * scale);
  ctx.bezierCurveTo(30.599990844726562 * scale, 96.75 * scale, 32.59999084472656 * scale, 96.75 * scale, 30.599990844726562 * scale, 87.75 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(1 * scale, 0);
  ctx.moveTo(7.5999908447265625 * scale, 86.34999084472656 * scale);
  ctx.bezierCurveTo(12.599990844726562 * scale, 85.34999084472656 * scale, 14.599990844726562 * scale, 84.34999084472656 * scale, 13.599990844726562 * scale, 84.34999084472656 * scale);
  ctx.bezierCurveTo(21.599990844726562 * scale, 83.34999084472656 * scale, 21.599990844726562 * scale, 83.34999084472656 * scale, 29.599990844726562 * scale, 82.34999084472656 * scale);
  ctx.bezierCurveTo(33.59999084472656 * scale, 85.84999084472656 * scale, 33.59999084472656 * scale, 85.84999084472656 * scale, 37.59999084472656 * scale, 89.34999084472656 * scale);
  ctx.bezierCurveTo(34.09999084472656 * scale, 91.84999084472656 * scale, 34.09999084472656 * scale, 91.84999084472656 * scale, 30.599990844726562 * scale, 94.34999084472656 * scale);
  ctx.bezierCurveTo(21.099990844726562 * scale, 93.34999084472656 * scale, 21.099990844726562 * scale, 93.34999084472656 * scale, 11.599990844726562 * scale, 92.34999084472656 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(23.599990844726562 * scale, 110.94999694824219 * scale);
  ctx.rotate(0);
  round_rect(ctx, -7 * scale, -4 * scale, 14 * scale, 8 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.translate(0 * scale, 0);
  ctx.globalAlpha = 1;
  ctx.translate(10 * scale, 0);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(22.599990844726562 * scale, 85.94999694824219 * scale);
  ctx.bezierCurveTo(17.599990844726562 * scale, 83.94999694824219 * scale, 17.599990844726562 * scale, 83.94999694824219 * scale, 12.599990844726562 * scale, 81.94999694824219 * scale);
  ctx.bezierCurveTo(19.599990844726562 * scale, 73.94999694824219 * scale, 2.5999908447265625 * scale, 22.949996948242188 * scale, 33.59999084472656 * scale, 7.9499969482421875 * scale);
  ctx.bezierCurveTo(27.599990844726562 * scale, 28.949996948242188 * scale, 33.59999084472656 * scale, 26.949996948242188 * scale, 35.59999084472656 * scale, 32.94999694824219 * scale);
  ctx.bezierCurveTo(25.599990844726562 * scale, 59.94999694824219 * scale, 26.599990844726562 * scale, 69.94999694824219 * scale, 29.599990844726562 * scale, 82.94999694824219 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(-1 * scale, 0);
  ctx.moveTo(17.599990844726562 * scale, 89.75 * scale);
  ctx.bezierCurveTo(24.599990844726562 * scale, 99.75 * scale, 24.599990844726562 * scale, 101.75 * scale, 20.599990844726562 * scale, 111.75 * scale);
  ctx.bezierCurveTo(28.599990844726562 * scale, 110.75 * scale, 26.599990844726562 * scale, 112.75 * scale, 28.599990844726562 * scale, 111.75 * scale);
  ctx.bezierCurveTo(30.599990844726562 * scale, 96.75 * scale, 32.59999084472656 * scale, 96.75 * scale, 30.599990844726562 * scale, 87.75 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(1 * scale, 0);
  ctx.moveTo(7.5999908447265625 * scale, 86.34999084472656 * scale);
  ctx.bezierCurveTo(12.599990844726562 * scale, 85.34999084472656 * scale, 14.599990844726562 * scale, 84.34999084472656 * scale, 13.599990844726562 * scale, 84.34999084472656 * scale);
  ctx.bezierCurveTo(21.599990844726562 * scale, 83.34999084472656 * scale, 21.599990844726562 * scale, 83.34999084472656 * scale, 29.599990844726562 * scale, 82.34999084472656 * scale);
  ctx.bezierCurveTo(33.59999084472656 * scale, 85.84999084472656 * scale, 33.59999084472656 * scale, 85.84999084472656 * scale, 37.59999084472656 * scale, 89.34999084472656 * scale);
  ctx.bezierCurveTo(34.09999084472656 * scale, 91.84999084472656 * scale, 34.09999084472656 * scale, 91.84999084472656 * scale, 30.599990844726562 * scale, 94.34999084472656 * scale);
  ctx.bezierCurveTo(21.099990844726562 * scale, 93.34999084472656 * scale, 21.099990844726562 * scale, 93.34999084472656 * scale, 11.599990844726562 * scale, 92.34999084472656 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 3 * scale);
  ctx.save();
  ctx.translate(23.599990844726562 * scale, 110.94999694824219 * scale);
  ctx.rotate(0);
  round_rect(ctx, -7 * scale, -4 * scale, 14 * scale, 8 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 3 * scale);
  return can;
};

function create_cursed_sword(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 65 * scale;
  can.height = 131 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(3, 0);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(21.25 * scale, 88.9375 * scale);
  ctx.bezierCurveTo(19.25 * scale, 57.9375 * scale, 19.25 * scale, 57.9375 * scale, 17.25 * scale, 26.9375 * scale);
  ctx.bezierCurveTo(24.25 * scale, 20.9375 * scale, 24.25 * scale, 20.9375 * scale, 31.25 * scale, 14.9375 * scale);
  ctx.bezierCurveTo(32.75 * scale, 54.4375 * scale, 32.75 * scale, 54.4375 * scale, 34.25 * scale, 93.9375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30.25 * scale, 5.9375 * scale);
  ctx.bezierCurveTo(39.25 * scale, 14.9375 * scale, 39.25 * scale, 14.9375 * scale, 48.25 * scale, 23.9375 * scale);
  ctx.bezierCurveTo(44.75 * scale, 56.4375 * scale, 44.75 * scale, 56.4375 * scale, 41.25 * scale, 88.9375 * scale);
  ctx.bezierCurveTo(36.25 * scale, 88.9375 * scale, 36.25 * scale, 88.9375 * scale, 31.25 * scale, 88.9375 * scale);
  ctx.bezierCurveTo(30.75 * scale, 47.9375 * scale, 30.75 * scale, 47.9375 * scale, 30.25 * scale, 6.9375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(7.25 * scale, 85.4375 * scale);
  ctx.bezierCurveTo(31.75 * scale, 85.4375 * scale, 31.75 * scale, 85.4375 * scale, 56.25 * scale, 85.4375 * scale);
  ctx.bezierCurveTo(51.25 * scale, 91.9375 * scale, 51.25 * scale, 91.9375 * scale, 46.25 * scale, 98.4375 * scale);
  ctx.bezierCurveTo(30.25 * scale, 98.4375 * scale, 30.25 * scale, 98.4375 * scale, 14.25 * scale, 98.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.save();
  ctx.translate(31.25 * scale, 108.9375 * scale);
  round_rect(ctx, -6 * scale, -14.5 * scale, 12 * scale, 29 * scale, 10 * scale);
  ctx.restore();
  ctx.globalAlpha = 1;
  ctx.translate(-3, 0);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(21.25 * scale, 88.9375 * scale);
  ctx.bezierCurveTo(19.25 * scale, 57.9375 * scale, 19.25 * scale, 57.9375 * scale, 17.25 * scale, 26.9375 * scale);
  ctx.bezierCurveTo(24.25 * scale, 20.9375 * scale, 24.25 * scale, 20.9375 * scale, 31.25 * scale, 14.9375 * scale);
  ctx.bezierCurveTo(32.75 * scale, 54.4375 * scale, 32.75 * scale, 54.4375 * scale, 34.25 * scale, 93.9375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(30.25 * scale, 5.9375 * scale);
  ctx.bezierCurveTo(39.25 * scale, 14.9375 * scale, 39.25 * scale, 14.9375 * scale, 48.25 * scale, 23.9375 * scale);
  ctx.bezierCurveTo(44.75 * scale, 56.4375 * scale, 44.75 * scale, 56.4375 * scale, 41.25 * scale, 88.9375 * scale);
  ctx.bezierCurveTo(36.25 * scale, 88.9375 * scale, 36.25 * scale, 88.9375 * scale, 31.25 * scale, 88.9375 * scale);
  ctx.bezierCurveTo(30.75 * scale, 47.9375 * scale, 30.75 * scale, 47.9375 * scale, 30.25 * scale, 6.9375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(7.25 * scale, 85.4375 * scale);
  ctx.bezierCurveTo(31.75 * scale, 85.4375 * scale, 31.75 * scale, 85.4375 * scale, 56.25 * scale, 85.4375 * scale);
  ctx.bezierCurveTo(51.25 * scale, 91.9375 * scale, 51.25 * scale, 91.9375 * scale, 46.25 * scale, 98.4375 * scale);
  ctx.bezierCurveTo(30.25 * scale, 98.4375 * scale, 30.25 * scale, 98.4375 * scale, 14.25 * scale, 98.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.save();
  ctx.translate(31.25 * scale, 108.9375 * scale);
  round_rect(ctx, -6 * scale, -14.5 * scale, 12 * scale, 29 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31.25 * scale, 73.4375 * scale);
  ctx.bezierCurveTo(33.25 * scale, 77.9375 * scale, 33.25 * scale, 77.9375 * scale, 35.25 * scale, 82.4375 * scale);
  ctx.bezierCurveTo(33.25 * scale, 87.4375 * scale, 33.25 * scale, 87.4375 * scale, 31.25 * scale, 92.4375 * scale);
  ctx.bezierCurveTo(29.25 * scale, 87.9375 * scale, 29.25 * scale, 87.9375 * scale, 27.25 * scale, 83.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[1], 2 * scale);
  return can;
};

function create_shop(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = scale * 120;
  var h = scale * 140;
  can.width = w;
  can.height = h;
  can.width = 130 * scale;
  can.height = 120 * scale;
  round_rect(ctx, 10 * scale, 12 * scale, 110 * scale, 90 * scale, 10 * scale);
  fill_path(ctx, color[0]);
  round_rect(ctx, 10 * scale, 5 * scale, 110 * scale, 90 * scale, 10 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  var img = create_rotated_img(-Math.PI / 5, create_pickaxe(scale * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
  ctx.drawImage(img, 12 * scale, 18 * scale);
  var img = create_rotated_img(Math.PI / 4, create_hammer(scale * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
  ctx.drawImage(img, 36 * scale, 16 * scale);
  return can;
};

function create_blue_orb(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 137 * scale;
  can.height = 129 * scale;
  ctx.globalAlpha = 0.5;
  circle(ctx, 69 * scale, 64 * scale, 48.16637831516918 * scale);
  fill_path(ctx, color[1]);
  ctx.globalAlpha = 0.7;
  circle(ctx, 69 * scale, 64 * scale, 38.23105625617661 * scale);
  fill_path(ctx, color[2]);
  ctx.globalAlpha = 0.7;
  circle(ctx, 69 * scale, 64 * scale, 32.01562118716424 * scale);
  fill_path(ctx, color[2], color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72 * scale, 41 * scale);
  ctx.bezierCurveTo(52 * scale, 41 * scale, 48 * scale, 50 * scale, 45 * scale, 58 * scale);
  ctx.bezierCurveTo(43 * scale, 67 * scale, 45 * scale, 68 * scale, 46 * scale, 72 * scale);
  ctx.bezierCurveTo(52 * scale, 53 * scale, 60 * scale, 48 * scale, 72 * scale, 42 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(93 * scale, 62 * scale);
  ctx.bezierCurveTo(95 * scale, 72 * scale, 90 * scale, 81 * scale, 81 * scale, 87 * scale);
  ctx.bezierCurveTo(74 * scale, 91 * scale, 69 * scale, 89 * scale, 64 * scale, 88 * scale);
  ctx.bezierCurveTo(77 * scale, 83 * scale, 84 * scale, 82 * scale, 92 * scale, 62 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  return can;
};

function create_dragon_cube(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 137 * scale;
  can.height = 129 * scale;
  ctx.globalAlpha = 0.4;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42.000030517578125 * scale, 41.17047119140625 * scale);
  ctx.bezierCurveTo(45.000030517578125 * scale, 38.17047119140625 * scale, 49.000030517578125 * scale, 37.17047119140625 * scale, 62.000030517578125 * scale, 38.17047119140625 * scale);
  ctx.bezierCurveTo(78.00003051757812 * scale, 38.17047119140625 * scale, 78.00003051757812 * scale, 38.17047119140625 * scale, 94.00003051757812 * scale, 38.17047119140625 * scale);
  ctx.bezierCurveTo(100.00003051757812 * scale, 38.17047119140625 * scale, 102.00003051757812 * scale, 38.17047119140625 * scale, 101.00003051757812 * scale, 47.17047119140625 * scale);
  ctx.bezierCurveTo(101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 80.17047119140625 * scale);
  ctx.bezierCurveTo(102.00003051757812 * scale, 84.17047119140625 * scale, 100.00003051757812 * scale, 86.17047119140625 * scale, 95.00003051757812 * scale, 88.17047119140625 * scale);
  ctx.bezierCurveTo(84.00003051757812 * scale, 94.17047119140625 * scale, 89.00003051757812 * scale, 94.17047119140625 * scale, 79.00003051757812 * scale, 94.17047119140625 * scale);
  ctx.bezierCurveTo(59.500030517578125 * scale, 94.17047119140625 * scale, 59.500030517578125 * scale, 94.17047119140625 * scale, 40.000030517578125 * scale, 94.17047119140625 * scale);
  ctx.bezierCurveTo(33.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 86.17047119140625 * scale);
  ctx.bezierCurveTo(34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 53.17047119140625 * scale);
  ctx.bezierCurveTo(33.000030517578125 * scale, 47.17047119140625 * scale, 34.000030517578125 * scale, 47.17047119140625 * scale, 40.000030517578125 * scale, 42.17047119140625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 40 * scale);
  ctx.globalAlpha = 0.4;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42.000030517578125 * scale, 41.17047119140625 * scale);
  ctx.bezierCurveTo(45.000030517578125 * scale, 38.17047119140625 * scale, 49.000030517578125 * scale, 37.17047119140625 * scale, 62.000030517578125 * scale, 38.17047119140625 * scale);
  ctx.bezierCurveTo(78.00003051757812 * scale, 38.17047119140625 * scale, 78.00003051757812 * scale, 38.17047119140625 * scale, 94.00003051757812 * scale, 38.17047119140625 * scale);
  ctx.bezierCurveTo(100.00003051757812 * scale, 38.17047119140625 * scale, 102.00003051757812 * scale, 38.17047119140625 * scale, 101.00003051757812 * scale, 47.17047119140625 * scale);
  ctx.bezierCurveTo(101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 80.17047119140625 * scale);
  ctx.bezierCurveTo(102.00003051757812 * scale, 84.17047119140625 * scale, 100.00003051757812 * scale, 86.17047119140625 * scale, 95.00003051757812 * scale, 88.17047119140625 * scale);
  ctx.bezierCurveTo(84.00003051757812 * scale, 94.17047119140625 * scale, 89.00003051757812 * scale, 94.17047119140625 * scale, 79.00003051757812 * scale, 94.17047119140625 * scale);
  ctx.bezierCurveTo(59.500030517578125 * scale, 94.17047119140625 * scale, 59.500030517578125 * scale, 94.17047119140625 * scale, 40.000030517578125 * scale, 94.17047119140625 * scale);
  ctx.bezierCurveTo(33.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 86.17047119140625 * scale);
  ctx.bezierCurveTo(34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 53.17047119140625 * scale);
  ctx.bezierCurveTo(33.000030517578125 * scale, 47.17047119140625 * scale, 34.000030517578125 * scale, 47.17047119140625 * scale, 40.000030517578125 * scale, 42.17047119140625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 20 * scale);
  ctx.globalAlpha = 0.8;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42.000030517578125 * scale, 41.17047119140625 * scale);
  ctx.bezierCurveTo(45.000030517578125 * scale, 38.17047119140625 * scale, 49.000030517578125 * scale, 37.17047119140625 * scale, 62.000030517578125 * scale, 38.17047119140625 * scale);
  ctx.bezierCurveTo(78.00003051757812 * scale, 38.17047119140625 * scale, 78.00003051757812 * scale, 38.17047119140625 * scale, 94.00003051757812 * scale, 38.17047119140625 * scale);
  ctx.bezierCurveTo(100.00003051757812 * scale, 38.17047119140625 * scale, 102.00003051757812 * scale, 38.17047119140625 * scale, 101.00003051757812 * scale, 47.17047119140625 * scale);
  ctx.bezierCurveTo(101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 80.17047119140625 * scale);
  ctx.bezierCurveTo(102.00003051757812 * scale, 84.17047119140625 * scale, 100.00003051757812 * scale, 86.17047119140625 * scale, 95.00003051757812 * scale, 88.17047119140625 * scale);
  ctx.bezierCurveTo(84.00003051757812 * scale, 94.17047119140625 * scale, 89.00003051757812 * scale, 94.17047119140625 * scale, 79.00003051757812 * scale, 94.17047119140625 * scale);
  ctx.bezierCurveTo(59.500030517578125 * scale, 94.17047119140625 * scale, 59.500030517578125 * scale, 94.17047119140625 * scale, 40.000030517578125 * scale, 94.17047119140625 * scale);
  ctx.bezierCurveTo(33.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 86.17047119140625 * scale);
  ctx.bezierCurveTo(34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 53.17047119140625 * scale);
  ctx.bezierCurveTo(33.000030517578125 * scale, 47.17047119140625 * scale, 34.000030517578125 * scale, 47.17047119140625 * scale, 40.000030517578125 * scale, 42.17047119140625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(51.000030517578125 * scale, 37.9886474609375 * scale);
  ctx.bezierCurveTo(51.000030517578125 * scale, 61.9886474609375 * scale, 51.000030517578125 * scale, 61.9886474609375 * scale, 51.000030517578125 * scale, 85.9886474609375 * scale);
  ctx.bezierCurveTo(75.50003051757812 * scale, 85.9886474609375 * scale, 75.50003051757812 * scale, 85.9886474609375 * scale, 100.00003051757812 * scale, 85.9886474609375 * scale);
  ctx.bezierCurveTo(100.00003051757812 * scale, 61.9886474609375 * scale, 100.00003051757812 * scale, 61.9886474609375 * scale, 100.00003051757812 * scale, 37.9886474609375 * scale);
  ctx.bezierCurveTo(76.00003051757812 * scale, 37.9886474609375 * scale, 76.00003051757812 * scale, 37.9886474609375 * scale, 52.000030517578125 * scale, 37.9886474609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(99.00003051757812 * scale, 38.9886474609375 * scale);
  ctx.bezierCurveTo(93.50003051757812 * scale, 44.9886474609375 * scale, 93.50003051757812 * scale, 44.9886474609375 * scale, 88.00003051757812 * scale, 50.9886474609375 * scale);
  ctx.bezierCurveTo(88.00003051757812 * scale, 72.4886474609375 * scale, 88.00003051757812 * scale, 72.4886474609375 * scale, 88.00003051757812 * scale, 93.9886474609375 * scale);
  ctx.bezierCurveTo(94.00003051757812 * scale, 90.4886474609375 * scale, 94.00003051757812 * scale, 90.4886474609375 * scale, 100.00003051757812 * scale, 86.9886474609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87.00003051757812 * scale, 49.625 * scale);
  ctx.bezierCurveTo(61.000030517578125 * scale, 49.625 * scale, 61.000030517578125 * scale, 49.625 * scale, 35.000030517578125 * scale, 49.625 * scale);
  ctx.bezierCurveTo(35.000030517578125 * scale, 70.625 * scale, 35.000030517578125 * scale, 70.625 * scale, 35.000030517578125 * scale, 91.625 * scale);
  ctx.bezierCurveTo(60.500030517578125 * scale, 91.625 * scale, 60.500030517578125 * scale, 91.625 * scale, 86.00003051757812 * scale, 91.625 * scale);
  ctx.bezierCurveTo(86.50003051757812 * scale, 70.625 * scale, 86.50003051757812 * scale, 70.625 * scale, 87.00003051757812 * scale, 49.625 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(47.000030517578125 * scale, 36.625 * scale);
  ctx.bezierCurveTo(73.00003051757812 * scale, 37.125 * scale, 73.00003051757812 * scale, 37.125 * scale, 99.00003051757812 * scale, 37.625 * scale);
  ctx.bezierCurveTo(93.50003051757812 * scale, 44.125 * scale, 93.50003051757812 * scale, 44.125 * scale, 88.00003051757812 * scale, 50.625 * scale);
  ctx.bezierCurveTo(60.500030517578125 * scale, 50.125 * scale, 60.500030517578125 * scale, 50.125 * scale, 33.000030517578125 * scale, 49.625 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(53.000030517578125 * scale, 52.625 * scale);
  ctx.bezierCurveTo(40.000030517578125 * scale, 54.625 * scale, 39.000030517578125 * scale, 59.625 * scale, 40.000030517578125 * scale, 67.625 * scale);
  ctx.bezierCurveTo(45.000030517578125 * scale, 59.625 * scale, 48.000030517578125 * scale, 58.625 * scale, 54.000030517578125 * scale, 53.625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42.000030517578125 * scale, 41.17047119140625 * scale);
  ctx.bezierCurveTo(45.000030517578125 * scale, 38.17047119140625 * scale, 49.000030517578125 * scale, 37.17047119140625 * scale, 62.000030517578125 * scale, 38.17047119140625 * scale);
  ctx.bezierCurveTo(78.00003051757812 * scale, 38.17047119140625 * scale, 78.00003051757812 * scale, 38.17047119140625 * scale, 94.00003051757812 * scale, 38.17047119140625 * scale);
  ctx.bezierCurveTo(100.00003051757812 * scale, 38.17047119140625 * scale, 102.00003051757812 * scale, 38.17047119140625 * scale, 101.00003051757812 * scale, 47.17047119140625 * scale);
  ctx.bezierCurveTo(101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 63.67047119140625 * scale, 101.00003051757812 * scale, 80.17047119140625 * scale);
  ctx.bezierCurveTo(102.00003051757812 * scale, 84.17047119140625 * scale, 100.00003051757812 * scale, 86.17047119140625 * scale, 95.00003051757812 * scale, 88.17047119140625 * scale);
  ctx.bezierCurveTo(84.00003051757812 * scale, 94.17047119140625 * scale, 89.00003051757812 * scale, 94.17047119140625 * scale, 79.00003051757812 * scale, 94.17047119140625 * scale);
  ctx.bezierCurveTo(59.500030517578125 * scale, 94.17047119140625 * scale, 59.500030517578125 * scale, 94.17047119140625 * scale, 40.000030517578125 * scale, 94.17047119140625 * scale);
  ctx.bezierCurveTo(33.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 94.17047119140625 * scale, 34.000030517578125 * scale, 86.17047119140625 * scale);
  ctx.bezierCurveTo(34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 69.67047119140625 * scale, 34.000030517578125 * scale, 53.17047119140625 * scale);
  ctx.bezierCurveTo(33.000030517578125 * scale, 47.17047119140625 * scale, 34.000030517578125 * scale, 47.17047119140625 * scale, 40.000030517578125 * scale, 42.17047119140625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[3], 4 * scale);
  return can;
};

function create_lake_edge(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  if (i == 0) {
    can.width = 543 * scale;
    can.height = 393 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(164.23297119140625 * scale, 72.80398559570312 * scale);
    ctx.bezierCurveTo(289.23297119140625 * scale, 41.803985595703125 * scale, 413.23297119140625 * scale, 86.80398559570312 * scale, 441.23297119140625 * scale, 105.80398559570312 * scale);
    ctx.bezierCurveTo(513.2329711914062 * scale, 149.80398559570312 * scale, 475.23297119140625 * scale, 224.80398559570312 * scale, 451.23297119140625 * scale, 258.8039855957031 * scale);
    ctx.bezierCurveTo(410.23297119140625 * scale, 315.8039855957031 * scale, 380.23297119140625 * scale, 314.8039855957031 * scale, 289.23297119140625 * scale, 320.8039855957031 * scale);
    ctx.bezierCurveTo(160.23297119140625 * scale, 329.8039855957031 * scale, 102.23297119140625 * scale, 312.8039855957031 * scale, 72.23297119140625 * scale, 258.8039855957031 * scale);
    ctx.bezierCurveTo(32.23297119140625 * scale, 156.80398559570312 * scale, 93.23297119140625 * scale, 92.80398559570312 * scale, 164.23297119140625 * scale, 72.80398559570312 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else if (i == 1) {
    can.width = 543 * scale;
    can.height = 470 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(238.23297119140625 * scale, 34.622161865234375 * scale);
    ctx.bezierCurveTo(423.23297119140625 * scale, 21.622161865234375 * scale, 474.23297119140625 * scale, 96.62216186523438 * scale, 499.23297119140625 * scale, 167.62216186523438 * scale);
    ctx.bezierCurveTo(536.2329711914062 * scale, 288.6221618652344 * scale, 487.23297119140625 * scale, 367.6221618652344 * scale, 403.23297119140625 * scale, 412.6221618652344 * scale);
    ctx.bezierCurveTo(287.23297119140625 * scale, 466.6221618652344 * scale, 127.23297119140625 * scale, 424.6221618652344 * scale, 50.23297119140625 * scale, 318.6221618652344 * scale);
    ctx.bezierCurveTo(-0.76702880859375 * scale, 239.62216186523438 * scale, 30.23297119140625 * scale, 110.62216186523438 * scale, 73.23297119140625 * scale, 77.62216186523438 * scale);
    ctx.bezierCurveTo(128.23297119140625 * scale, 29.622161865234375 * scale, 202.23297119140625 * scale, 40.622161865234375 * scale, 238.23297119140625 * scale, 34.622161865234375 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else {
    can.width = 543 * scale;
    can.height = 470 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(268.23297119140625 * scale, 23.349441528320312 * scale);
    ctx.bezierCurveTo(424.23297119140625 * scale, -0.6505584716796875 * scale, 524.2329711914062 * scale, 44.34944152832031 * scale, 519.2329711914062 * scale, 186.3494415283203 * scale);
    ctx.bezierCurveTo(515.2329711914062 * scale, 341.3494415283203 * scale, 431.23297119140625 * scale, 409.3494415283203 * scale, 357.23297119140625 * scale, 442.3494415283203 * scale);
    ctx.bezierCurveTo(278.23297119140625 * scale, 469.3494415283203 * scale, 144.23297119140625 * scale, 460.3494415283203 * scale, 51.23297119140625 * scale, 348.3494415283203 * scale);
    ctx.bezierCurveTo(3.23297119140625 * scale, 274.3494415283203 * scale, 45.23297119140625 * scale, 87.34944152832031 * scale, 268.23297119140625 * scale, 23.349441528320312 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  }
  return can;
};

function create_lake_deep(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  if (i == 0) {
    can.width = 543 * scale;
    can.height = 393 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(109.5 * scale, 154.046875 * scale);
    ctx.bezierCurveTo(143.5 * scale, 96.046875 * scale, 208.5 * scale, 92.046875 * scale, 288.5 * scale, 97.046875 * scale);
    ctx.bezierCurveTo(357.5 * scale, 104.046875 * scale, 414.5 * scale, 132.046875 * scale, 422.5 * scale, 166.046875 * scale);
    ctx.bezierCurveTo(431.5 * scale, 192.046875 * scale, 400.5 * scale, 261.046875 * scale, 332.5 * scale, 271.046875 * scale);
    ctx.bezierCurveTo(272.5 * scale, 279.046875 * scale, 159.5 * scale, 285.046875 * scale, 126.5 * scale, 260.046875 * scale);
    ctx.bezierCurveTo(99.5 * scale, 238.046875 * scale, 95.5 * scale, 183.046875 * scale, 109.5 * scale, 154.046875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else if (i == 1) {
    can.width = 543 * scale;
    can.height = 470 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(216.23297119140625 * scale, 100.34944152832031 * scale);
    ctx.bezierCurveTo(349.23297119140625 * scale, 110.34944152832031 * scale, 422.23297119140625 * scale, 142.3494415283203 * scale, 434.23297119140625 * scale, 194.3494415283203 * scale);
    ctx.bezierCurveTo(451.23297119140625 * scale, 268.3494415283203 * scale, 397.23297119140625 * scale, 367.3494415283203 * scale, 313.23297119140625 * scale, 351.3494415283203 * scale);
    ctx.bezierCurveTo(148.23297119140625 * scale, 330.3494415283203 * scale, 106.23297119140625 * scale, 319.3494415283203 * scale, 87.23297119140625 * scale, 248.3494415283203 * scale);
    ctx.bezierCurveTo(63.23297119140625 * scale, 164.3494415283203 * scale, 102.23297119140625 * scale, 90.34944152832031 * scale, 216.23297119140625 * scale, 100.34944152832031 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else {
    can.width = 543 * scale;
    can.height = 470 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(155.23297119140625 * scale, 126.71307373046875 * scale);
    ctx.bezierCurveTo(232.23297119140625 * scale, 76.71307373046875 * scale, 340.23297119140625 * scale, 67.71307373046875 * scale, 411.23297119140625 * scale, 106.71307373046875 * scale);
    ctx.bezierCurveTo(458.23297119140625 * scale, 131.71307373046875 * scale, 465.23297119140625 * scale, 280.71307373046875 * scale, 353.23297119140625 * scale, 363.71307373046875 * scale);
    ctx.bezierCurveTo(299.23297119140625 * scale, 404.71307373046875 * scale, 143.23297119140625 * scale, 415.71307373046875 * scale, 88.23297119140625 * scale, 327.71307373046875 * scale);
    ctx.bezierCurveTo(48.23297119140625 * scale, 256.71307373046875 * scale, 93.23297119140625 * scale, 171.71307373046875 * scale, 155.23297119140625 * scale, 126.71307373046875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  }
  return can;
};

function create_lake(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  if (i == 0) {
    can.width = 543 * scale;
    can.height = 393 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(196.23297119140625 * scale, 77.8948974609375 * scale);
    ctx.bezierCurveTo(276.23297119140625 * scale, 69.8948974609375 * scale, 360.23297119140625 * scale, 87.8948974609375 * scale, 431.23297119140625 * scale, 121.8948974609375 * scale);
    ctx.bezierCurveTo(474.23297119140625 * scale, 146.8948974609375 * scale, 463.23297119140625 * scale, 184.8948974609375 * scale, 437.23297119140625 * scale, 235.8948974609375 * scale);
    ctx.bezierCurveTo(413.23297119140625 * scale, 277.8948974609375 * scale, 383.23297119140625 * scale, 289.8948974609375 * scale, 303.23297119140625 * scale, 289.8948974609375 * scale);
    ctx.bezierCurveTo(178.23297119140625 * scale, 292.8948974609375 * scale, 127.23297119140625 * scale, 301.8948974609375 * scale, 92.23297119140625 * scale, 268.8948974609375 * scale);
    ctx.bezierCurveTo(55.23297119140625 * scale, 234.8948974609375 * scale, 59.23297119140625 * scale, 147.8948974609375 * scale, 100.23297119140625 * scale, 112.8948974609375 * scale);
    ctx.bezierCurveTo(133.23297119140625 * scale, 83.8948974609375 * scale, 167.23297119140625 * scale, 82.8948974609375 * scale, 196.23297119140625 * scale, 77.8948974609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else if (i == 1) {
    can.width = 543 * scale;
    can.height = 470 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(285.23297119140625 * scale, 51.803985595703125 * scale);
    ctx.bezierCurveTo(408.23297119140625 * scale, 57.803985595703125 * scale, 463.23297119140625 * scale, 107.80398559570312 * scale, 480.23297119140625 * scale, 183.80398559570312 * scale);
    ctx.bezierCurveTo(500.23297119140625 * scale, 282.8039855957031 * scale, 473.23297119140625 * scale, 351.8039855957031 * scale, 373.23297119140625 * scale, 390.8039855957031 * scale);
    ctx.bezierCurveTo(286.23297119140625 * scale, 420.8039855957031 * scale, 173.23297119140625 * scale, 396.8039855957031 * scale, 86.23297119140625 * scale, 331.8039855957031 * scale);
    ctx.bezierCurveTo(13.23297119140625 * scale, 267.8039855957031 * scale, 19.23297119140625 * scale, 79.80398559570312 * scale, 143.23297119140625 * scale, 50.803985595703125 * scale);
    ctx.bezierCurveTo(175.23297119140625 * scale, 41.803985595703125 * scale, 263.23297119140625 * scale, 51.803985595703125 * scale, 285.23297119140625 * scale, 51.803985595703125 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  } else {
    can.width = 543 * scale;
    can.height = 470 * scale;
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(492.23297119140625 * scale, 170.0767059326172 * scale);
    ctx.bezierCurveTo(493.23297119140625 * scale, 300.16761779785156 * scale, 411.23297119140625 * scale, 382.16761779785156 * scale, 321.23297119140625 * scale, 419.16761779785156 * scale);
    ctx.bezierCurveTo(251.23297119140625 * scale, 444.16761779785156 * scale, 125.23297119140625 * scale, 422.16761779785156 * scale, 63.23297119140625 * scale, 347.16761779785156 * scale);
    ctx.bezierCurveTo(22.23297119140625 * scale, 282.16761779785156 * scale, 53.23297119140625 * scale, 152.16761779785156 * scale, 179.23297119140625 * scale, 79.16761779785156 * scale);
    ctx.bezierCurveTo(237.23297119140625 * scale, 46.16761779785156 * scale, 326.23297119140625 * scale, 27.167617797851562 * scale, 409.23297119140625 * scale, 50.16761779785156 * scale);
    ctx.bezierCurveTo(470.23297119140625 * scale, 66.16761779785156 * scale, 493.23297119140625 * scale, 104.16761779785156 * scale, 492.23297119140625 * scale, 170.0767059326172 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
  }
  return can;
};

function create_shingle(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  if (i == 0) {
    can.width = 543 * scale;
    can.height = 393 * scale;
    ctx.translate(40 * scale, 60 * scale);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(176 * scale, 10.25 * scale);
    ctx.bezierCurveTo(188 * scale, 16.25 * scale, 187 * scale, 25.25 * scale, 183 * scale, 26.25 * scale);
    ctx.bezierCurveTo(177 * scale, 26.25 * scale, 175 * scale, 21.25 * scale, 173 * scale, 19.25 * scale);
    ctx.bezierCurveTo(170 * scale, 14.25 * scale, 170 * scale, 10.25 * scale, 176 * scale, 10.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(176 * scale, 10.25 * scale);
    ctx.bezierCurveTo(188 * scale, 16.25 * scale, 187 * scale, 25.25 * scale, 183 * scale, 26.25 * scale);
    ctx.bezierCurveTo(177 * scale, 26.25 * scale, 175 * scale, 21.25 * scale, 173 * scale, 19.25 * scale);
    ctx.bezierCurveTo(170 * scale, 14.25 * scale, 170 * scale, 10.25 * scale, 176 * scale, 10.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(274 * scale, 8 * scale);
    ctx.bezierCurveTo(276 * scale, 12 * scale, 271 * scale, 23 * scale, 266 * scale, 20 * scale);
    ctx.bezierCurveTo(264 * scale, 19 * scale, 262 * scale, 15 * scale, 267 * scale, 9 * scale);
    ctx.bezierCurveTo(271 * scale, 5 * scale, 274 * scale, 5 * scale, 274 * scale, 8 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(274 * scale, 8 * scale);
    ctx.bezierCurveTo(276 * scale, 12 * scale, 271 * scale, 23 * scale, 266 * scale, 20 * scale);
    ctx.bezierCurveTo(264 * scale, 19 * scale, 262 * scale, 15 * scale, 267 * scale, 9 * scale);
    ctx.bezierCurveTo(271 * scale, 5 * scale, 274 * scale, 5 * scale, 274 * scale, 8 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(282 * scale, 23.25 * scale);
    ctx.bezierCurveTo(275 * scale, 25.25 * scale, 272 * scale, 29.25 * scale, 274 * scale, 36.25 * scale);
    ctx.bezierCurveTo(277 * scale, 40.25 * scale, 280 * scale, 37.25 * scale, 283 * scale, 32.25 * scale);
    ctx.bezierCurveTo(286 * scale, 26.25 * scale, 286 * scale, 25.25 * scale, 282 * scale, 23.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(282 * scale, 23.25 * scale);
    ctx.bezierCurveTo(275 * scale, 25.25 * scale, 272 * scale, 29.25 * scale, 274 * scale, 36.25 * scale);
    ctx.bezierCurveTo(277 * scale, 40.25 * scale, 280 * scale, 37.25 * scale, 283 * scale, 32.25 * scale);
    ctx.bezierCurveTo(286 * scale, 26.25 * scale, 286 * scale, 25.25 * scale, 282 * scale, 23.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(343.75 * scale, 18.25 * scale);
    ctx.bezierCurveTo(346.75 * scale, 27.25 * scale, 346.75 * scale, 32.25 * scale, 339.75 * scale, 31.25 * scale);
    ctx.bezierCurveTo(336.75 * scale, 29.25 * scale, 335.75 * scale, 27.25 * scale, 336.75 * scale, 22.25 * scale);
    ctx.bezierCurveTo(336.75 * scale, 16.25 * scale, 338.75 * scale, 15.25 * scale, 343.75 * scale, 18.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(343.75 * scale, 18.25 * scale);
    ctx.bezierCurveTo(346.75 * scale, 27.25 * scale, 346.75 * scale, 32.25 * scale, 339.75 * scale, 31.25 * scale);
    ctx.bezierCurveTo(336.75 * scale, 29.25 * scale, 335.75 * scale, 27.25 * scale, 336.75 * scale, 22.25 * scale);
    ctx.bezierCurveTo(336.75 * scale, 16.25 * scale, 338.75 * scale, 15.25 * scale, 343.75 * scale, 18.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(364.75 * scale, 22.25 * scale);
    ctx.bezierCurveTo(368.75 * scale, 27.25 * scale, 362.75 * scale, 36.25 * scale, 356.75 * scale, 39.25 * scale);
    ctx.bezierCurveTo(346.75 * scale, 43.25 * scale, 346.75 * scale, 34.25 * scale, 348.75 * scale, 31.25 * scale);
    ctx.bezierCurveTo(352.75 * scale, 23.25 * scale, 360.75 * scale, 20.25 * scale, 363.75 * scale, 22.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(364.75 * scale, 22.25 * scale);
    ctx.bezierCurveTo(368.75 * scale, 27.25 * scale, 362.75 * scale, 36.25 * scale, 356.75 * scale, 39.25 * scale);
    ctx.bezierCurveTo(346.75 * scale, 43.25 * scale, 346.75 * scale, 34.25 * scale, 348.75 * scale, 31.25 * scale);
    ctx.bezierCurveTo(352.75 * scale, 23.25 * scale, 360.75 * scale, 20.25 * scale, 363.75 * scale, 22.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(350.75 * scale, 52.25 * scale);
    ctx.bezierCurveTo(352.75 * scale, 45.25 * scale, 360.75 * scale, 43.25 * scale, 368.75 * scale, 52.25 * scale);
    ctx.bezierCurveTo(369.75 * scale, 58.25 * scale, 366.75 * scale, 59.25 * scale, 357.75 * scale, 57.25 * scale);
    ctx.bezierCurveTo(350.75 * scale, 56.25 * scale, 352.75 * scale, 55.25 * scale, 350.75 * scale, 52.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(350.75 * scale, 52.25 * scale);
    ctx.bezierCurveTo(352.75 * scale, 45.25 * scale, 360.75 * scale, 43.25 * scale, 368.75 * scale, 52.25 * scale);
    ctx.bezierCurveTo(369.75 * scale, 58.25 * scale, 366.75 * scale, 59.25 * scale, 357.75 * scale, 57.25 * scale);
    ctx.bezierCurveTo(350.75 * scale, 56.25 * scale, 352.75 * scale, 55.25 * scale, 350.75 * scale, 52.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(421.75 * scale, 81.25 * scale);
    ctx.bezierCurveTo(432.75 * scale, 85.25 * scale, 431.75 * scale, 89.25 * scale, 426.75 * scale, 93.25 * scale);
    ctx.bezierCurveTo(418.75 * scale, 95.25 * scale, 414.75 * scale, 93.25 * scale, 412.75 * scale, 89.25 * scale);
    ctx.bezierCurveTo(411.75 * scale, 84.25 * scale, 413.75 * scale, 81.25 * scale, 421.75 * scale, 81.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(421.75 * scale, 81.25 * scale);
    ctx.bezierCurveTo(432.75 * scale, 85.25 * scale, 431.75 * scale, 89.25 * scale, 426.75 * scale, 93.25 * scale);
    ctx.bezierCurveTo(418.75 * scale, 95.25 * scale, 414.75 * scale, 93.25 * scale, 412.75 * scale, 89.25 * scale);
    ctx.bezierCurveTo(411.75 * scale, 84.25 * scale, 413.75 * scale, 81.25 * scale, 421.75 * scale, 81.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(432.75 * scale, 105.25 * scale);
    ctx.bezierCurveTo(430.75 * scale, 115.25 * scale, 411.75 * scale, 130.25 * scale, 408.75 * scale, 117.25 * scale);
    ctx.bezierCurveTo(407.75 * scale, 106.25 * scale, 414.75 * scale, 103.25 * scale, 421.75 * scale, 101.25 * scale);
    ctx.bezierCurveTo(430.75 * scale, 100.25 * scale, 432.75 * scale, 101.25 * scale, 432.75 * scale, 105.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(432.75 * scale, 105.25 * scale);
    ctx.bezierCurveTo(430.75 * scale, 115.25 * scale, 411.75 * scale, 130.25 * scale, 408.75 * scale, 117.25 * scale);
    ctx.bezierCurveTo(407.75 * scale, 106.25 * scale, 414.75 * scale, 103.25 * scale, 421.75 * scale, 101.25 * scale);
    ctx.bezierCurveTo(430.75 * scale, 100.25 * scale, 432.75 * scale, 101.25 * scale, 432.75 * scale, 105.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(422.75 * scale, 153.25 * scale);
    ctx.bezierCurveTo(437.75 * scale, 155.25 * scale, 442.75 * scale, 158.25 * scale, 436.75 * scale, 165.25 * scale);
    ctx.bezierCurveTo(431.75 * scale, 170.25 * scale, 424.75 * scale, 167.25 * scale, 419.75 * scale, 163.25 * scale);
    ctx.bezierCurveTo(413.75 * scale, 157.25 * scale, 415.75 * scale, 153.25 * scale, 422.75 * scale, 153.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(422.75 * scale, 153.25 * scale);
    ctx.bezierCurveTo(437.75 * scale, 155.25 * scale, 442.75 * scale, 158.25 * scale, 436.75 * scale, 165.25 * scale);
    ctx.bezierCurveTo(431.75 * scale, 170.25 * scale, 424.75 * scale, 167.25 * scale, 419.75 * scale, 163.25 * scale);
    ctx.bezierCurveTo(413.75 * scale, 157.25 * scale, 415.75 * scale, 153.25 * scale, 422.75 * scale, 153.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(409.75 * scale, 158.25 * scale);
    ctx.bezierCurveTo(409.75 * scale, 168.25 * scale, 401.75 * scale, 172.25 * scale, 397.75 * scale, 167.25 * scale);
    ctx.bezierCurveTo(394.75 * scale, 159.25 * scale, 407.75 * scale, 150.25 * scale, 408.75 * scale, 158.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(409.75 * scale, 158.25 * scale);
    ctx.bezierCurveTo(409.75 * scale, 168.25 * scale, 401.75 * scale, 172.25 * scale, 397.75 * scale, 167.25 * scale);
    ctx.bezierCurveTo(394.75 * scale, 159.25 * scale, 407.75 * scale, 150.25 * scale, 408.75 * scale, 158.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(204 * scale, 238.25 * scale);
    ctx.bezierCurveTo(204 * scale, 248.25 * scale, 184 * scale, 255.25 * scale, 180 * scale, 247.25 * scale);
    ctx.bezierCurveTo(177 * scale, 241.25 * scale, 187 * scale, 236.25 * scale, 192 * scale, 235.25 * scale);
    ctx.bezierCurveTo(201 * scale, 233.25 * scale, 204 * scale, 233.25 * scale, 204 * scale, 238.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(204 * scale, 238.25 * scale);
    ctx.bezierCurveTo(204 * scale, 248.25 * scale, 184 * scale, 255.25 * scale, 180 * scale, 247.25 * scale);
    ctx.bezierCurveTo(177 * scale, 241.25 * scale, 187 * scale, 236.25 * scale, 192 * scale, 235.25 * scale);
    ctx.bezierCurveTo(201 * scale, 233.25 * scale, 204 * scale, 233.25 * scale, 204 * scale, 238.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(208 * scale, 246.25 * scale);
    ctx.bezierCurveTo(202 * scale, 255.25 * scale, 204 * scale, 258.25 * scale, 212 * scale, 255.25 * scale);
    ctx.bezierCurveTo(217 * scale, 250.25 * scale, 217 * scale, 248.25 * scale, 216 * scale, 244.25 * scale);
    ctx.bezierCurveTo(210 * scale, 241.25 * scale, 209 * scale, 245.25 * scale, 208 * scale, 246.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(208 * scale, 246.25 * scale);
    ctx.bezierCurveTo(202 * scale, 255.25 * scale, 204 * scale, 258.25 * scale, 212 * scale, 255.25 * scale);
    ctx.bezierCurveTo(217 * scale, 250.25 * scale, 217 * scale, 248.25 * scale, 216 * scale, 244.25 * scale);
    ctx.bezierCurveTo(210 * scale, 241.25 * scale, 209 * scale, 245.25 * scale, 208 * scale, 246.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(197 * scale, 258.25 * scale);
    ctx.bezierCurveTo(194 * scale, 265.25 * scale, 186 * scale, 270.25 * scale, 185 * scale, 262.25 * scale);
    ctx.bezierCurveTo(187 * scale, 255.25 * scale, 191 * scale, 252.25 * scale, 195 * scale, 253.25 * scale);
    ctx.bezierCurveTo(198 * scale, 256.25 * scale, 197 * scale, 257.25 * scale, 197 * scale, 258.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(197 * scale, 258.25 * scale);
    ctx.bezierCurveTo(194 * scale, 265.25 * scale, 186 * scale, 270.25 * scale, 185 * scale, 262.25 * scale);
    ctx.bezierCurveTo(187 * scale, 255.25 * scale, 191 * scale, 252.25 * scale, 195 * scale, 253.25 * scale);
    ctx.bezierCurveTo(198 * scale, 256.25 * scale, 197 * scale, 257.25 * scale, 197 * scale, 258.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(24 * scale, 111.25 * scale);
    ctx.bezierCurveTo(32 * scale, 115.25 * scale, 29 * scale, 123.25 * scale, 22 * scale, 133.25 * scale);
    ctx.bezierCurveTo(15 * scale, 140.25 * scale, 7 * scale, 137.25 * scale, 9 * scale, 125.25 * scale);
    ctx.bezierCurveTo(12 * scale, 114.25 * scale, 20 * scale, 110.25 * scale, 24 * scale, 111.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(24 * scale, 111.25 * scale);
    ctx.bezierCurveTo(32 * scale, 115.25 * scale, 29 * scale, 123.25 * scale, 22 * scale, 133.25 * scale);
    ctx.bezierCurveTo(15 * scale, 140.25 * scale, 7 * scale, 137.25 * scale, 9 * scale, 125.25 * scale);
    ctx.bezierCurveTo(12 * scale, 114.25 * scale, 20 * scale, 110.25 * scale, 24 * scale, 111.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(33 * scale, 137.25 * scale);
    ctx.bezierCurveTo(41 * scale, 142.25 * scale, 40 * scale, 145.25 * scale, 35 * scale, 147.25 * scale);
    ctx.bezierCurveTo(22 * scale, 147.25 * scale, 18 * scale, 144.25 * scale, 22 * scale, 138.25 * scale);
    ctx.bezierCurveTo(26 * scale, 133.25 * scale, 31 * scale, 136.25 * scale, 33 * scale, 137.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(33 * scale, 137.25 * scale);
    ctx.bezierCurveTo(41 * scale, 142.25 * scale, 40 * scale, 145.25 * scale, 35 * scale, 147.25 * scale);
    ctx.bezierCurveTo(22 * scale, 147.25 * scale, 18 * scale, 144.25 * scale, 22 * scale, 138.25 * scale);
    ctx.bezierCurveTo(26 * scale, 133.25 * scale, 31 * scale, 136.25 * scale, 33 * scale, 137.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(36 * scale, 187.25 * scale);
    ctx.bezierCurveTo(25 * scale, 198.25 * scale, 19 * scale, 193.25 * scale, 23 * scale, 187.25 * scale);
    ctx.bezierCurveTo(26 * scale, 178.25 * scale, 32 * scale, 173.25 * scale, 38 * scale, 175.25 * scale);
    ctx.bezierCurveTo(44 * scale, 180.25 * scale, 39 * scale, 186.25 * scale, 36 * scale, 187.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(36 * scale, 187.25 * scale);
    ctx.bezierCurveTo(25 * scale, 198.25 * scale, 19 * scale, 193.25 * scale, 23 * scale, 187.25 * scale);
    ctx.bezierCurveTo(26 * scale, 178.25 * scale, 32 * scale, 173.25 * scale, 38 * scale, 175.25 * scale);
    ctx.bezierCurveTo(44 * scale, 180.25 * scale, 39 * scale, 186.25 * scale, 36 * scale, 187.25 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
  } else if (i == 1) {
    can.width = 543 * scale;
    can.height = 470 * scale;
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(377.1428527832031 * scale, 56.87498474121094 * scale);
    ctx.bezierCurveTo(384.1428527832031 * scale, 44.87498474121094 * scale, 403.1428527832031 * scale, 39.87498474121094 * scale, 403.1428527832031 * scale, 51.87498474121094 * scale);
    ctx.bezierCurveTo(402.1428527832031 * scale, 59.87498474121094 * scale, 396.1428527832031 * scale, 61.87498474121094 * scale, 389.1428527832031 * scale, 64.87498474121094 * scale);
    ctx.bezierCurveTo(376.1428527832031 * scale, 67.87498474121094 * scale, 375.1428527832031 * scale, 62.87498474121094 * scale, 377.1428527832031 * scale, 56.87498474121094 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(377.1428527832031 * scale, 56.87498474121094 * scale);
    ctx.bezierCurveTo(384.1428527832031 * scale, 44.87498474121094 * scale, 403.1428527832031 * scale, 39.87498474121094 * scale, 403.1428527832031 * scale, 51.87498474121094 * scale);
    ctx.bezierCurveTo(402.1428527832031 * scale, 59.87498474121094 * scale, 396.1428527832031 * scale, 61.87498474121094 * scale, 389.1428527832031 * scale, 64.87498474121094 * scale);
    ctx.bezierCurveTo(376.1428527832031 * scale, 67.87498474121094 * scale, 375.1428527832031 * scale, 62.87498474121094 * scale, 377.1428527832031 * scale, 56.87498474121094 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(349.1428527832031 * scale, 44.303558349609375 * scale);
    ctx.bezierCurveTo(358.1428527832031 * scale, 37.303558349609375 * scale, 370.1428527832031 * scale, 47.303558349609375 * scale, 364.1428527832031 * scale, 51.303558349609375 * scale);
    ctx.bezierCurveTo(356.1428527832031 * scale, 55.303558349609375 * scale, 345.1428527832031 * scale, 48.303558349609375 * scale, 349.1428527832031 * scale, 45.303558349609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(349.1428527832031 * scale, 44.303558349609375 * scale);
    ctx.bezierCurveTo(358.1428527832031 * scale, 37.303558349609375 * scale, 370.1428527832031 * scale, 47.303558349609375 * scale, 364.1428527832031 * scale, 51.303558349609375 * scale);
    ctx.bezierCurveTo(356.1428527832031 * scale, 55.303558349609375 * scale, 345.1428527832031 * scale, 48.303558349609375 * scale, 349.1428527832031 * scale, 45.303558349609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(480.1428527832031 * scale, 152.30355834960938 * scale);
    ctx.bezierCurveTo(477.1428527832031 * scale, 145.30355834960938 * scale, 480.1428527832031 * scale, 140.30355834960938 * scale, 489.1428527832031 * scale, 135.30355834960938 * scale);
    ctx.bezierCurveTo(497.1428527832031 * scale, 133.30355834960938 * scale, 498.1428527832031 * scale, 140.30355834960938 * scale, 491.1428527832031 * scale, 147.30355834960938 * scale);
    ctx.bezierCurveTo(485.1428527832031 * scale, 155.30355834960938 * scale, 482.1428527832031 * scale, 156.30355834960938 * scale, 480.1428527832031 * scale, 152.30355834960938 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(480.1428527832031 * scale, 152.30355834960938 * scale);
    ctx.bezierCurveTo(477.1428527832031 * scale, 145.30355834960938 * scale, 480.1428527832031 * scale, 140.30355834960938 * scale, 489.1428527832031 * scale, 135.30355834960938 * scale);
    ctx.bezierCurveTo(497.1428527832031 * scale, 133.30355834960938 * scale, 498.1428527832031 * scale, 140.30355834960938 * scale, 491.1428527832031 * scale, 147.30355834960938 * scale);
    ctx.bezierCurveTo(485.1428527832031 * scale, 155.30355834960938 * scale, 482.1428527832031 * scale, 156.30355834960938 * scale, 480.1428527832031 * scale, 152.30355834960938 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(211.14285278320312 * scale, 27.303558349609375 * scale);
    ctx.bezierCurveTo(223.14285278320312 * scale, 21.303558349609375 * scale, 234.14285278320312 * scale, 34.303558349609375 * scale, 232.14285278320312 * scale, 42.303558349609375 * scale);
    ctx.bezierCurveTo(228.14285278320312 * scale, 49.303558349609375 * scale, 223.14285278320312 * scale, 45.303558349609375 * scale, 213.14285278320312 * scale, 38.303558349609375 * scale);
    ctx.bezierCurveTo(205.14285278320312 * scale, 31.303558349609375 * scale, 208.14285278320312 * scale, 29.303558349609375 * scale, 211.14285278320312 * scale, 27.303558349609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(211.14285278320312 * scale, 27.303558349609375 * scale);
    ctx.bezierCurveTo(223.14285278320312 * scale, 21.303558349609375 * scale, 234.14285278320312 * scale, 34.303558349609375 * scale, 232.14285278320312 * scale, 42.303558349609375 * scale);
    ctx.bezierCurveTo(228.14285278320312 * scale, 49.303558349609375 * scale, 223.14285278320312 * scale, 45.303558349609375 * scale, 213.14285278320312 * scale, 38.303558349609375 * scale);
    ctx.bezierCurveTo(205.14285278320312 * scale, 31.303558349609375 * scale, 208.14285278320312 * scale, 29.303558349609375 * scale, 211.14285278320312 * scale, 27.303558349609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(364.1428527832031 * scale, 73.30355834960938 * scale);
    ctx.bezierCurveTo(354.1428527832031 * scale, 72.30355834960938 * scale, 356.1428527832031 * scale, 64.30355834960938 * scale, 359.1428527832031 * scale, 59.303558349609375 * scale);
    ctx.bezierCurveTo(365.1428527832031 * scale, 55.303558349609375 * scale, 366.1428527832031 * scale, 61.303558349609375 * scale, 366.1428527832031 * scale, 69.30355834960938 * scale);
    ctx.bezierCurveTo(365.1428527832031 * scale, 73.30355834960938 * scale, 365.1428527832031 * scale, 73.30355834960938 * scale, 364.1428527832031 * scale, 73.30355834960938 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(364.1428527832031 * scale, 73.30355834960938 * scale);
    ctx.bezierCurveTo(354.1428527832031 * scale, 72.30355834960938 * scale, 356.1428527832031 * scale, 64.30355834960938 * scale, 359.1428527832031 * scale, 59.303558349609375 * scale);
    ctx.bezierCurveTo(365.1428527832031 * scale, 55.303558349609375 * scale, 366.1428527832031 * scale, 61.303558349609375 * scale, 366.1428527832031 * scale, 69.30355834960938 * scale);
    ctx.bezierCurveTo(365.1428527832031 * scale, 73.30355834960938 * scale, 365.1428527832031 * scale, 73.30355834960938 * scale, 364.1428527832031 * scale, 73.30355834960938 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(182.14285278320312 * scale, 57.303558349609375 * scale);
    ctx.bezierCurveTo(173.14285278320312 * scale, 52.303558349609375 * scale, 177.14285278320312 * scale, 39.303558349609375 * scale, 198.14285278320312 * scale, 36.303558349609375 * scale);
    ctx.bezierCurveTo(209.14285278320312 * scale, 37.303558349609375 * scale, 206.14285278320312 * scale, 49.303558349609375 * scale, 193.14285278320312 * scale, 53.303558349609375 * scale);
    ctx.bezierCurveTo(187.14285278320312 * scale, 56.303558349609375 * scale, 185.14285278320312 * scale, 57.303558349609375 * scale, 182.14285278320312 * scale, 57.303558349609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(182.14285278320312 * scale, 57.303558349609375 * scale);
    ctx.bezierCurveTo(173.14285278320312 * scale, 52.303558349609375 * scale, 177.14285278320312 * scale, 39.303558349609375 * scale, 198.14285278320312 * scale, 36.303558349609375 * scale);
    ctx.bezierCurveTo(209.14285278320312 * scale, 37.303558349609375 * scale, 206.14285278320312 * scale, 49.303558349609375 * scale, 193.14285278320312 * scale, 53.303558349609375 * scale);
    ctx.bezierCurveTo(187.14285278320312 * scale, 56.303558349609375 * scale, 185.14285278320312 * scale, 57.303558349609375 * scale, 182.14285278320312 * scale, 57.303558349609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(489.1428527832031 * scale, 267.0178527832031 * scale);
    ctx.bezierCurveTo(500.1428527832031 * scale, 257.0178527832031 * scale, 511.1428527832031 * scale, 269.0178527832031 * scale, 514.1428527832031 * scale, 275.0178527832031 * scale);
    ctx.bezierCurveTo(519.1428527832031 * scale, 285.0178527832031 * scale, 509.1428527832031 * scale, 288.0178527832031 * scale, 501.1428527832031 * scale, 282.0178527832031 * scale);
    ctx.bezierCurveTo(488.1428527832031 * scale, 277.0178527832031 * scale, 485.1428527832031 * scale, 271.0178527832031 * scale, 489.1428527832031 * scale, 267.0178527832031 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(489.1428527832031 * scale, 267.0178527832031 * scale);
    ctx.bezierCurveTo(500.1428527832031 * scale, 257.0178527832031 * scale, 511.1428527832031 * scale, 269.0178527832031 * scale, 514.1428527832031 * scale, 275.0178527832031 * scale);
    ctx.bezierCurveTo(519.1428527832031 * scale, 285.0178527832031 * scale, 509.1428527832031 * scale, 288.0178527832031 * scale, 501.1428527832031 * scale, 282.0178527832031 * scale);
    ctx.bezierCurveTo(488.1428527832031 * scale, 277.0178527832031 * scale, 485.1428527832031 * scale, 271.0178527832031 * scale, 489.1428527832031 * scale, 267.0178527832031 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(480.1428527832031 * scale, 122.73213958740234 * scale);
    ctx.bezierCurveTo(469.1428527832031 * scale, 119.73213958740234 * scale, 473.1428527832031 * scale, 108.73213958740234 * scale, 476.1428527832031 * scale, 107.73213958740234 * scale);
    ctx.bezierCurveTo(483.1428527832031 * scale, 102.73213958740234 * scale, 485.1428527832031 * scale, 118.73213958740234 * scale, 480.1428527832031 * scale, 122.73213958740234 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(480.1428527832031 * scale, 122.73213958740234 * scale);
    ctx.bezierCurveTo(469.1428527832031 * scale, 119.73213958740234 * scale, 473.1428527832031 * scale, 108.73213958740234 * scale, 476.1428527832031 * scale, 107.73213958740234 * scale);
    ctx.bezierCurveTo(483.1428527832031 * scale, 102.73213958740234 * scale, 485.1428527832031 * scale, 118.73213958740234 * scale, 480.1428527832031 * scale, 122.73213958740234 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(470.1428527832031 * scale, 286.3035697937012 * scale);
    ctx.bezierCurveTo(472.1428527832031 * scale, 277.3035697937012 * scale, 480.1428527832031 * scale, 277.3035697937012 * scale, 489.1428527832031 * scale, 286.3035697937012 * scale);
    ctx.bezierCurveTo(490.1428527832031 * scale, 292.3035697937012 * scale, 482.1428527832031 * scale, 294.3035697937012 * scale, 470.1428527832031 * scale, 286.3035697937012 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(470.1428527832031 * scale, 286.3035697937012 * scale);
    ctx.bezierCurveTo(472.1428527832031 * scale, 277.3035697937012 * scale, 480.1428527832031 * scale, 277.3035697937012 * scale, 489.1428527832031 * scale, 286.3035697937012 * scale);
    ctx.bezierCurveTo(490.1428527832031 * scale, 292.3035697937012 * scale, 482.1428527832031 * scale, 294.3035697937012 * scale, 470.1428527832031 * scale, 286.3035697937012 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(518.1428527832031 * scale, 265.0178565979004 * scale);
    ctx.bezierCurveTo(524.1428527832031 * scale, 262.0178565979004 * scale, 521.1428527832031 * scale, 247.0178565979004 * scale, 514.1428527832031 * scale, 250.0178565979004 * scale);
    ctx.bezierCurveTo(510.1428527832031 * scale, 252.0178565979004 * scale, 509.1428527832031 * scale, 266.0178565979004 * scale, 518.1428527832031 * scale, 266.0178565979004 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(518.1428527832031 * scale, 265.0178565979004 * scale);
    ctx.bezierCurveTo(524.1428527832031 * scale, 262.0178565979004 * scale, 521.1428527832031 * scale, 247.0178565979004 * scale, 514.1428527832031 * scale, 250.0178565979004 * scale);
    ctx.bezierCurveTo(510.1428527832031 * scale, 252.0178565979004 * scale, 509.1428527832031 * scale, 266.0178565979004 * scale, 518.1428527832031 * scale, 266.0178565979004 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(179.14285278320312 * scale, 399.5892858505249 * scale);
    ctx.bezierCurveTo(174.14285278320312 * scale, 385.5892858505249 * scale, 186.14285278320312 * scale, 379.5892858505249 * scale, 198.14285278320312 * scale, 379.5892858505249 * scale);
    ctx.bezierCurveTo(208.14285278320312 * scale, 379.5892858505249 * scale, 206.14285278320312 * scale, 391.5892858505249 * scale, 194.14285278320312 * scale, 396.5892858505249 * scale);
    ctx.bezierCurveTo(184.14285278320312 * scale, 401.5892858505249 * scale, 182.14285278320312 * scale, 402.5892858505249 * scale, 179.14285278320312 * scale, 399.5892858505249 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(179.14285278320312 * scale, 399.5892858505249 * scale);
    ctx.bezierCurveTo(174.14285278320312 * scale, 385.5892858505249 * scale, 186.14285278320312 * scale, 379.5892858505249 * scale, 198.14285278320312 * scale, 379.5892858505249 * scale);
    ctx.bezierCurveTo(208.14285278320312 * scale, 379.5892858505249 * scale, 206.14285278320312 * scale, 391.5892858505249 * scale, 194.14285278320312 * scale, 396.5892858505249 * scale);
    ctx.bezierCurveTo(184.14285278320312 * scale, 401.5892858505249 * scale, 182.14285278320312 * scale, 402.5892858505249 * scale, 179.14285278320312 * scale, 399.5892858505249 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(163.14285278320312 * scale, 407.875 * scale);
    ctx.bezierCurveTo(152.14285278320312 * scale, 405.875 * scale, 156.14285278320312 * scale, 391.875 * scale, 163.14285278320312 * scale, 385.875 * scale);
    ctx.bezierCurveTo(170.14285278320312 * scale, 381.875 * scale, 173.14285278320312 * scale, 385.875 * scale, 170.14285278320312 * scale, 398.875 * scale);
    ctx.bezierCurveTo(169.14285278320312 * scale, 403.875 * scale, 165.14285278320312 * scale, 408.875 * scale, 164.14285278320312 * scale, 407.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(163.14285278320312 * scale, 407.875 * scale);
    ctx.bezierCurveTo(152.14285278320312 * scale, 405.875 * scale, 156.14285278320312 * scale, 391.875 * scale, 163.14285278320312 * scale, 385.875 * scale);
    ctx.bezierCurveTo(170.14285278320312 * scale, 381.875 * scale, 173.14285278320312 * scale, 385.875 * scale, 170.14285278320312 * scale, 398.875 * scale);
    ctx.bezierCurveTo(169.14285278320312 * scale, 403.875 * scale, 165.14285278320312 * scale, 408.875 * scale, 164.14285278320312 * scale, 407.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(78.14285278320312 * scale, 71.73211669921875 * scale);
    ctx.bezierCurveTo(82.14285278320312 * scale, 62.73211669921875 * scale, 88.14285278320312 * scale, 69.73211669921875 * scale, 91.14285278320312 * scale, 79.73211669921875 * scale);
    ctx.bezierCurveTo(90.14285278320312 * scale, 86.73211669921875 * scale, 79.14285278320312 * scale, 83.73211669921875 * scale, 78.14285278320312 * scale, 71.73211669921875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(78.14285278320312 * scale, 71.73211669921875 * scale);
    ctx.bezierCurveTo(82.14285278320312 * scale, 62.73211669921875 * scale, 88.14285278320312 * scale, 69.73211669921875 * scale, 91.14285278320312 * scale, 79.73211669921875 * scale);
    ctx.bezierCurveTo(90.14285278320312 * scale, 86.73211669921875 * scale, 79.14285278320312 * scale, 83.73211669921875 * scale, 78.14285278320312 * scale, 71.73211669921875 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(385.1428527832031 * scale, 405.017858505249 * scale);
    ctx.bezierCurveTo(392.1428527832031 * scale, 397.017858505249 * scale, 406.1428527832031 * scale, 401.017858505249 * scale, 409.1428527832031 * scale, 418.017858505249 * scale);
    ctx.bezierCurveTo(410.1428527832031 * scale, 426.017858505249 * scale, 401.1428527832031 * scale, 425.017858505249 * scale, 388.1428527832031 * scale, 418.017858505249 * scale);
    ctx.bezierCurveTo(381.1428527832031 * scale, 411.017858505249 * scale, 383.1428527832031 * scale, 407.017858505249 * scale, 385.1428527832031 * scale, 405.017858505249 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(385.1428527832031 * scale, 405.017858505249 * scale);
    ctx.bezierCurveTo(392.1428527832031 * scale, 397.017858505249 * scale, 406.1428527832031 * scale, 401.017858505249 * scale, 409.1428527832031 * scale, 418.017858505249 * scale);
    ctx.bezierCurveTo(410.1428527832031 * scale, 426.017858505249 * scale, 401.1428527832031 * scale, 425.017858505249 * scale, 388.1428527832031 * scale, 418.017858505249 * scale);
    ctx.bezierCurveTo(381.1428527832031 * scale, 411.017858505249 * scale, 383.1428527832031 * scale, 407.017858505249 * scale, 385.1428527832031 * scale, 405.017858505249 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(414.1428527832031 * scale, 361.4464282989502 * scale);
    ctx.bezierCurveTo(418.1428527832031 * scale, 352.4464282989502 * scale, 426.1428527832031 * scale, 353.4464282989502 * scale, 437.1428527832031 * scale, 362.4464282989502 * scale);
    ctx.bezierCurveTo(441.1428527832031 * scale, 366.4464282989502 * scale, 439.1428527832031 * scale, 373.4464282989502 * scale, 428.1428527832031 * scale, 372.4464282989502 * scale);
    ctx.bezierCurveTo(416.1428527832031 * scale, 370.4464282989502 * scale, 412.1428527832031 * scale, 367.4464282989502 * scale, 415.1428527832031 * scale, 361.4464282989502 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(414.1428527832031 * scale, 361.4464282989502 * scale);
    ctx.bezierCurveTo(418.1428527832031 * scale, 352.4464282989502 * scale, 426.1428527832031 * scale, 353.4464282989502 * scale, 437.1428527832031 * scale, 362.4464282989502 * scale);
    ctx.bezierCurveTo(441.1428527832031 * scale, 366.4464282989502 * scale, 439.1428527832031 * scale, 373.4464282989502 * scale, 428.1428527832031 * scale, 372.4464282989502 * scale);
    ctx.bezierCurveTo(416.1428527832031 * scale, 370.4464282989502 * scale, 412.1428527832031 * scale, 367.4464282989502 * scale, 415.1428527832031 * scale, 361.4464282989502 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(453.1428527832031 * scale, 356.875 * scale);
    ctx.bezierCurveTo(458.1428527832031 * scale, 363.875 * scale, 447.1428527832031 * scale, 373.875 * scale, 444.1428527832031 * scale, 369.875 * scale);
    ctx.bezierCurveTo(441.1428527832031 * scale, 361.875 * scale, 448.1428527832031 * scale, 352.875 * scale, 453.1428527832031 * scale, 356.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(453.1428527832031 * scale, 356.875 * scale);
    ctx.bezierCurveTo(458.1428527832031 * scale, 363.875 * scale, 447.1428527832031 * scale, 373.875 * scale, 444.1428527832031 * scale, 369.875 * scale);
    ctx.bezierCurveTo(441.1428527832031 * scale, 361.875 * scale, 448.1428527832031 * scale, 352.875 * scale, 453.1428527832031 * scale, 356.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(40.142852783203125 * scale, 225.1607151031494 * scale);
    ctx.bezierCurveTo(52.142852783203125 * scale, 224.1607151031494 * scale, 44.142852783203125 * scale, 251.1607151031494 * scale, 36.142852783203125 * scale, 248.1607151031494 * scale);
    ctx.bezierCurveTo(25.142852783203125 * scale, 245.1607151031494 * scale, 34.142852783203125 * scale, 225.1607151031494 * scale, 41.142852783203125 * scale, 225.1607151031494 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(40.142852783203125 * scale, 225.1607151031494 * scale);
    ctx.bezierCurveTo(52.142852783203125 * scale, 224.1607151031494 * scale, 44.142852783203125 * scale, 251.1607151031494 * scale, 36.142852783203125 * scale, 248.1607151031494 * scale);
    ctx.bezierCurveTo(25.142852783203125 * scale, 245.1607151031494 * scale, 34.142852783203125 * scale, 225.1607151031494 * scale, 41.142852783203125 * scale, 225.1607151031494 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(114.14285278320312 * scale, 52.4464111328125 * scale);
    ctx.bezierCurveTo(123.14285278320312 * scale, 57.4464111328125 * scale, 111.14285278320312 * scale, 71.4464111328125 * scale, 106.14285278320312 * scale, 65.4464111328125 * scale);
    ctx.bezierCurveTo(101.14285278320312 * scale, 58.4464111328125 * scale, 111.14285278320312 * scale, 51.4464111328125 * scale, 114.14285278320312 * scale, 52.4464111328125 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(114.14285278320312 * scale, 52.4464111328125 * scale);
    ctx.bezierCurveTo(123.14285278320312 * scale, 57.4464111328125 * scale, 111.14285278320312 * scale, 71.4464111328125 * scale, 106.14285278320312 * scale, 65.4464111328125 * scale);
    ctx.bezierCurveTo(101.14285278320312 * scale, 58.4464111328125 * scale, 111.14285278320312 * scale, 51.4464111328125 * scale, 114.14285278320312 * scale, 52.4464111328125 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(35.142852783203125 * scale, 256.3035707473755 * scale);
    ctx.bezierCurveTo(41.142852783203125 * scale, 263.3035707473755 * scale, 32.142852783203125 * scale, 270.3035707473755 * scale, 27.142852783203125 * scale, 270.3035707473755 * scale);
    ctx.bezierCurveTo(20.142852783203125 * scale, 267.3035707473755 * scale, 29.142852783203125 * scale, 252.3035707473755 * scale, 35.142852783203125 * scale, 255.3035707473755 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(35.142852783203125 * scale, 256.3035707473755 * scale);
    ctx.bezierCurveTo(41.142852783203125 * scale, 263.3035707473755 * scale, 32.142852783203125 * scale, 270.3035707473755 * scale, 27.142852783203125 * scale, 270.3035707473755 * scale);
    ctx.bezierCurveTo(20.142852783203125 * scale, 267.3035707473755 * scale, 29.142852783203125 * scale, 252.3035707473755 * scale, 35.142852783203125 * scale, 255.3035707473755 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(48.142852783203125 * scale, 266.4464282989502 * scale);
    ctx.bezierCurveTo(59.142852783203125 * scale, 273.4464282989502 * scale, 41.142852783203125 * scale, 290.4464282989502 * scale, 33.142852783203125 * scale, 285.4464282989502 * scale);
    ctx.bezierCurveTo(25.142852783203125 * scale, 277.4464282989502 * scale, 44.142852783203125 * scale, 261.4464282989502 * scale, 48.142852783203125 * scale, 266.4464282989502 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(48.142852783203125 * scale, 266.4464282989502 * scale);
    ctx.bezierCurveTo(59.142852783203125 * scale, 273.4464282989502 * scale, 41.142852783203125 * scale, 290.4464282989502 * scale, 33.142852783203125 * scale, 285.4464282989502 * scale);
    ctx.bezierCurveTo(25.142852783203125 * scale, 277.4464282989502 * scale, 44.142852783203125 * scale, 261.4464282989502 * scale, 48.142852783203125 * scale, 266.4464282989502 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(138.14285278320312 * scale, 385.5892868041992 * scale);
    ctx.bezierCurveTo(150.14285278320312 * scale, 387.5892868041992 * scale, 140.14285278320312 * scale, 405.5892868041992 * scale, 131.14285278320312 * scale, 402.5892868041992 * scale);
    ctx.bezierCurveTo(125.14285278320312 * scale, 397.5892868041992 * scale, 134.14285278320312 * scale, 385.5892868041992 * scale, 138.14285278320312 * scale, 385.5892868041992 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(138.14285278320312 * scale, 385.5892868041992 * scale);
    ctx.bezierCurveTo(150.14285278320312 * scale, 387.5892868041992 * scale, 140.14285278320312 * scale, 405.5892868041992 * scale, 131.14285278320312 * scale, 402.5892868041992 * scale);
    ctx.bezierCurveTo(125.14285278320312 * scale, 397.5892868041992 * scale, 134.14285278320312 * scale, 385.5892868041992 * scale, 138.14285278320312 * scale, 385.5892868041992 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(218.14285278320312 * scale, 394.16071701049805 * scale);
    ctx.bezierCurveTo(224.14285278320312 * scale, 398.16071701049805 * scale, 222.14285278320312 * scale, 403.16071701049805 * scale, 214.14285278320312 * scale, 407.16071701049805 * scale);
    ctx.bezierCurveTo(204.14285278320312 * scale, 407.16071701049805 * scale, 213.14285278320312 * scale, 392.16071701049805 * scale, 218.14285278320312 * scale, 394.16071701049805 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(218.14285278320312 * scale, 394.16071701049805 * scale);
    ctx.bezierCurveTo(224.14285278320312 * scale, 398.16071701049805 * scale, 222.14285278320312 * scale, 403.16071701049805 * scale, 214.14285278320312 * scale, 407.16071701049805 * scale);
    ctx.bezierCurveTo(204.14285278320312 * scale, 407.16071701049805 * scale, 213.14285278320312 * scale, 392.16071701049805 * scale, 218.14285278320312 * scale, 394.16071701049805 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.translate(50 * scale, 100 * scale);
  } else {
    can.width = 543 * scale;
    can.height = 470 * scale;
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(97.14285278320312 * scale, 113.875 * scale);
    ctx.bezierCurveTo(104.14285278320312 * scale, 106.875 * scale, 113.14285278320312 * scale, 109.875 * scale, 118.14285278320312 * scale, 118.875 * scale);
    ctx.bezierCurveTo(119.14285278320312 * scale, 121.875 * scale, 118.14285278320312 * scale, 129.875 * scale, 103.14285278320312 * scale, 124.875 * scale);
    ctx.bezierCurveTo(94.14285278320312 * scale, 120.875 * scale, 95.14285278320312 * scale, 117.875 * scale, 97.14285278320312 * scale, 113.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(97.14285278320312 * scale, 113.875 * scale);
    ctx.bezierCurveTo(104.14285278320312 * scale, 106.875 * scale, 113.14285278320312 * scale, 109.875 * scale, 118.14285278320312 * scale, 118.875 * scale);
    ctx.bezierCurveTo(119.14285278320312 * scale, 121.875 * scale, 118.14285278320312 * scale, 129.875 * scale, 103.14285278320312 * scale, 124.875 * scale);
    ctx.bezierCurveTo(94.14285278320312 * scale, 120.875 * scale, 95.14285278320312 * scale, 117.875 * scale, 97.14285278320312 * scale, 113.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(88.14285278320312 * scale, 138.87498474121094 * scale);
    ctx.bezierCurveTo(90.14285278320312 * scale, 128.87498474121094 * scale, 104.14285278320312 * scale, 130.87498474121094 * scale, 107.14285278320312 * scale, 138.87498474121094 * scale);
    ctx.bezierCurveTo(109.14285278320312 * scale, 147.87498474121094 * scale, 89.14285278320312 * scale, 145.87498474121094 * scale, 88.14285278320312 * scale, 138.87498474121094 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(88.14285278320312 * scale, 138.87498474121094 * scale);
    ctx.bezierCurveTo(90.14285278320312 * scale, 128.87498474121094 * scale, 104.14285278320312 * scale, 130.87498474121094 * scale, 107.14285278320312 * scale, 138.87498474121094 * scale);
    ctx.bezierCurveTo(109.14285278320312 * scale, 147.87498474121094 * scale, 89.14285278320312 * scale, 145.87498474121094 * scale, 88.14285278320312 * scale, 138.87498474121094 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(194.14285278320312 * scale, 44.87498474121094 * scale);
    ctx.bezierCurveTo(202.14285278320312 * scale, 49.87498474121094 * scale, 195.14285278320312 * scale, 62.87498474121094 * scale, 187.14285278320312 * scale, 60.87498474121094 * scale);
    ctx.bezierCurveTo(180.14285278320312 * scale, 57.87498474121094 * scale, 190.14285278320312 * scale, 40.87498474121094 * scale, 194.14285278320312 * scale, 44.87498474121094 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(194.14285278320312 * scale, 44.87498474121094 * scale);
    ctx.bezierCurveTo(202.14285278320312 * scale, 49.87498474121094 * scale, 195.14285278320312 * scale, 62.87498474121094 * scale, 187.14285278320312 * scale, 60.87498474121094 * scale);
    ctx.bezierCurveTo(180.14285278320312 * scale, 57.87498474121094 * scale, 190.14285278320312 * scale, 40.87498474121094 * scale, 194.14285278320312 * scale, 44.87498474121094 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(22.142852783203125 * scale, 218.44642639160156 * scale);
    ctx.bezierCurveTo(31.142852783203125 * scale, 205.44642639160156 * scale, 49.142852783203125 * scale, 221.44642639160156 * scale, 49.142852783203125 * scale, 230.44642639160156 * scale);
    ctx.bezierCurveTo(44.142852783203125 * scale, 243.44642639160156 * scale, 14.142852783203125 * scale, 228.44642639160156 * scale, 22.142852783203125 * scale, 218.44642639160156 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(22.142852783203125 * scale, 218.44642639160156 * scale);
    ctx.bezierCurveTo(31.142852783203125 * scale, 205.44642639160156 * scale, 49.142852783203125 * scale, 221.44642639160156 * scale, 49.142852783203125 * scale, 230.44642639160156 * scale);
    ctx.bezierCurveTo(44.142852783203125 * scale, 243.44642639160156 * scale, 14.142852783203125 * scale, 228.44642639160156 * scale, 22.142852783203125 * scale, 218.44642639160156 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(41.142852783203125 * scale, 249.875 * scale);
    ctx.bezierCurveTo(33.142852783203125 * scale, 255.875 * scale, 30.142852783203125 * scale, 265.875 * scale, 40.142852783203125 * scale, 266.875 * scale);
    ctx.bezierCurveTo(49.142852783203125 * scale, 261.875 * scale, 53.142852783203125 * scale, 244.875 * scale, 41.142852783203125 * scale, 249.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(41.142852783203125 * scale, 249.875 * scale);
    ctx.bezierCurveTo(33.142852783203125 * scale, 255.875 * scale, 30.142852783203125 * scale, 265.875 * scale, 40.142852783203125 * scale, 266.875 * scale);
    ctx.bezierCurveTo(49.142852783203125 * scale, 261.875 * scale, 53.142852783203125 * scale, 244.875 * scale, 41.142852783203125 * scale, 249.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(105.14285278320312 * scale, 369.875 * scale);
    ctx.bezierCurveTo(92.14285278320312 * scale, 361.875 * scale, 77.14285278320312 * scale, 375.875 * scale, 79.14285278320312 * scale, 384.875 * scale);
    ctx.bezierCurveTo(84.14285278320312 * scale, 399.875 * scale, 114.14285278320312 * scale, 375.875 * scale, 104.14285278320312 * scale, 369.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(105.14285278320312 * scale, 369.875 * scale);
    ctx.bezierCurveTo(92.14285278320312 * scale, 361.875 * scale, 77.14285278320312 * scale, 375.875 * scale, 79.14285278320312 * scale, 384.875 * scale);
    ctx.bezierCurveTo(84.14285278320312 * scale, 399.875 * scale, 114.14285278320312 * scale, 375.875 * scale, 104.14285278320312 * scale, 369.875 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(233.14285278320312 * scale, 43.4464111328125 * scale);
    ctx.bezierCurveTo(238.14285278320312 * scale, 47.4464111328125 * scale, 222.14285278320312 * scale, 73.4464111328125 * scale, 214.14285278320312 * scale, 58.4464111328125 * scale);
    ctx.bezierCurveTo(211.14285278320312 * scale, 48.4464111328125 * scale, 230.14285278320312 * scale, 35.4464111328125 * scale, 233.14285278320312 * scale, 42.4464111328125 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(233.14285278320312 * scale, 43.4464111328125 * scale);
    ctx.bezierCurveTo(238.14285278320312 * scale, 47.4464111328125 * scale, 222.14285278320312 * scale, 73.4464111328125 * scale, 214.14285278320312 * scale, 58.4464111328125 * scale);
    ctx.bezierCurveTo(211.14285278320312 * scale, 48.4464111328125 * scale, 230.14285278320312 * scale, 35.4464111328125 * scale, 233.14285278320312 * scale, 42.4464111328125 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(371.1428527832031 * scale, 34.73213195800781 * scale);
    ctx.bezierCurveTo(378.1428527832031 * scale, 20.732131958007812 * scale, 395.1428527832031 * scale, 32.73213195800781 * scale, 396.1428527832031 * scale, 42.73213195800781 * scale);
    ctx.bezierCurveTo(399.1428527832031 * scale, 59.73213195800781 * scale, 369.1428527832031 * scale, 43.73213195800781 * scale, 372.1428527832031 * scale, 34.73213195800781 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(371.1428527832031 * scale, 34.73213195800781 * scale);
    ctx.bezierCurveTo(378.1428527832031 * scale, 20.732131958007812 * scale, 395.1428527832031 * scale, 32.73213195800781 * scale, 396.1428527832031 * scale, 42.73213195800781 * scale);
    ctx.bezierCurveTo(399.1428527832031 * scale, 59.73213195800781 * scale, 369.1428527832031 * scale, 43.73213195800781 * scale, 372.1428527832031 * scale, 34.73213195800781 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(117.14285278320312 * scale, 392.5892868041992 * scale);
    ctx.bezierCurveTo(115.14285278320312 * scale, 384.5892868041992 * scale, 109.14285278320312 * scale, 383.5892868041992 * scale, 103.14285278320312 * scale, 384.5892868041992 * scale);
    ctx.bezierCurveTo(95.14285278320312 * scale, 389.5892868041992 * scale, 97.14285278320312 * scale, 393.5892868041992 * scale, 107.14285278320312 * scale, 396.5892868041992 * scale);
    ctx.bezierCurveTo(114.14285278320312 * scale, 396.5892868041992 * scale, 118.14285278320312 * scale, 393.5892868041992 * scale, 116.14285278320312 * scale, 391.5892868041992 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(117.14285278320312 * scale, 392.5892868041992 * scale);
    ctx.bezierCurveTo(115.14285278320312 * scale, 384.5892868041992 * scale, 109.14285278320312 * scale, 383.5892868041992 * scale, 103.14285278320312 * scale, 384.5892868041992 * scale);
    ctx.bezierCurveTo(95.14285278320312 * scale, 389.5892868041992 * scale, 97.14285278320312 * scale, 393.5892868041992 * scale, 107.14285278320312 * scale, 396.5892868041992 * scale);
    ctx.bezierCurveTo(114.14285278320312 * scale, 396.5892868041992 * scale, 118.14285278320312 * scale, 393.5892868041992 * scale, 116.14285278320312 * scale, 391.5892868041992 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(122.14285278320312 * scale, 403.7321472167969 * scale);
    ctx.bezierCurveTo(132.14285278320312 * scale, 399.7321472167969 * scale, 133.14285278320312 * scale, 418.7321472167969 * scale, 129.14285278320312 * scale, 419.7321472167969 * scale);
    ctx.bezierCurveTo(119.14285278320312 * scale, 420.7321472167969 * scale, 118.14285278320312 * scale, 402.7321472167969 * scale, 123.14285278320312 * scale, 403.7321472167969 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(122.14285278320312 * scale, 403.7321472167969 * scale);
    ctx.bezierCurveTo(132.14285278320312 * scale, 399.7321472167969 * scale, 133.14285278320312 * scale, 418.7321472167969 * scale, 129.14285278320312 * scale, 419.7321472167969 * scale);
    ctx.bezierCurveTo(119.14285278320312 * scale, 420.7321472167969 * scale, 118.14285278320312 * scale, 402.7321472167969 * scale, 123.14285278320312 * scale, 403.7321472167969 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(317.1428527832031 * scale, 417.5892868041992 * scale);
    ctx.bezierCurveTo(333.1428527832031 * scale, 421.5892868041992 * scale, 299.1428527832031 * scale, 455.5892868041992 * scale, 294.1428527832031 * scale, 438.5892868041992 * scale);
    ctx.bezierCurveTo(289.1428527832031 * scale, 423.5892868041992 * scale, 307.1428527832031 * scale, 414.5892868041992 * scale, 317.1428527832031 * scale, 417.5892868041992 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(317.1428527832031 * scale, 417.5892868041992 * scale);
    ctx.bezierCurveTo(333.1428527832031 * scale, 421.5892868041992 * scale, 299.1428527832031 * scale, 455.5892868041992 * scale, 294.1428527832031 * scale, 438.5892868041992 * scale);
    ctx.bezierCurveTo(289.1428527832031 * scale, 423.5892868041992 * scale, 307.1428527832031 * scale, 414.5892868041992 * scale, 317.1428527832031 * scale, 417.5892868041992 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(322.1428527832031 * scale, 437.30357360839844 * scale);
    ctx.bezierCurveTo(330.1428527832031 * scale, 431.30357360839844 * scale, 336.1428527832031 * scale, 440.30357360839844 * scale, 336.1428527832031 * scale, 448.30357360839844 * scale);
    ctx.bezierCurveTo(334.1428527832031 * scale, 454.30357360839844 * scale, 316.1428527832031 * scale, 447.30357360839844 * scale, 323.1428527832031 * scale, 437.30357360839844 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(322.1428527832031 * scale, 437.30357360839844 * scale);
    ctx.bezierCurveTo(330.1428527832031 * scale, 431.30357360839844 * scale, 336.1428527832031 * scale, 440.30357360839844 * scale, 336.1428527832031 * scale, 448.30357360839844 * scale);
    ctx.bezierCurveTo(334.1428527832031 * scale, 454.30357360839844 * scale, 316.1428527832031 * scale, 447.30357360839844 * scale, 323.1428527832031 * scale, 437.30357360839844 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(438.1428527832031 * scale, 358.5892868041992 * scale);
    ctx.bezierCurveTo(455.1428527832031 * scale, 351.5892868041992 * scale, 467.1428527832031 * scale, 371.5892868041992 * scale, 455.1428527832031 * scale, 374.5892868041992 * scale);
    ctx.bezierCurveTo(442.1428527832031 * scale, 377.5892868041992 * scale, 429.1428527832031 * scale, 361.5892868041992 * scale, 438.1428527832031 * scale, 358.5892868041992 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(438.1428527832031 * scale, 358.5892868041992 * scale);
    ctx.bezierCurveTo(455.1428527832031 * scale, 351.5892868041992 * scale, 467.1428527832031 * scale, 371.5892868041992 * scale, 455.1428527832031 * scale, 374.5892868041992 * scale);
    ctx.bezierCurveTo(442.1428527832031 * scale, 377.5892868041992 * scale, 429.1428527832031 * scale, 361.5892868041992 * scale, 438.1428527832031 * scale, 358.5892868041992 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(423.1428527832031 * scale, 363.16071701049805 * scale);
    ctx.bezierCurveTo(433.1428527832031 * scale, 362.16071701049805 * scale, 433.1428527832031 * scale, 374.16071701049805 * scale, 421.1428527832031 * scale, 382.16071701049805 * scale);
    ctx.bezierCurveTo(413.1428527832031 * scale, 383.16071701049805 * scale, 413.1428527832031 * scale, 368.16071701049805 * scale, 423.1428527832031 * scale, 363.16071701049805 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(423.1428527832031 * scale, 363.16071701049805 * scale);
    ctx.bezierCurveTo(433.1428527832031 * scale, 362.16071701049805 * scale, 433.1428527832031 * scale, 374.16071701049805 * scale, 421.1428527832031 * scale, 382.16071701049805 * scale);
    ctx.bezierCurveTo(413.1428527832031 * scale, 383.16071701049805 * scale, 413.1428527832031 * scale, 368.16071701049805 * scale, 423.1428527832031 * scale, 363.16071701049805 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(431.1428527832031 * scale, 333.0178565979004 * scale);
    ctx.bezierCurveTo(447.1428527832031 * scale, 330.0178565979004 * scale, 448.1428527832031 * scale, 340.0178565979004 * scale, 447.1428527832031 * scale, 343.0178565979004 * scale);
    ctx.bezierCurveTo(445.1428527832031 * scale, 351.0178565979004 * scale, 415.1428527832031 * scale, 343.0178565979004 * scale, 431.1428527832031 * scale, 333.0178565979004 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(431.1428527832031 * scale, 333.0178565979004 * scale);
    ctx.bezierCurveTo(447.1428527832031 * scale, 330.0178565979004 * scale, 448.1428527832031 * scale, 340.0178565979004 * scale, 447.1428527832031 * scale, 343.0178565979004 * scale);
    ctx.bezierCurveTo(445.1428527832031 * scale, 351.0178565979004 * scale, 415.1428527832031 * scale, 343.0178565979004 * scale, 431.1428527832031 * scale, 333.0178565979004 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(486.1428527832031 * scale, 272.44642639160156 * scale);
    ctx.bezierCurveTo(493.1428527832031 * scale, 260.44642639160156 * scale, 519.1428527832031 * scale, 277.44642639160156 * scale, 511.1428527832031 * scale, 289.44642639160156 * scale);
    ctx.bezierCurveTo(503.1428527832031 * scale, 297.44642639160156 * scale, 483.1428527832031 * scale, 277.44642639160156 * scale, 486.1428527832031 * scale, 273.44642639160156 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(486.1428527832031 * scale, 272.44642639160156 * scale);
    ctx.bezierCurveTo(493.1428527832031 * scale, 260.44642639160156 * scale, 519.1428527832031 * scale, 277.44642639160156 * scale, 511.1428527832031 * scale, 289.44642639160156 * scale);
    ctx.bezierCurveTo(503.1428527832031 * scale, 297.44642639160156 * scale, 483.1428527832031 * scale, 277.44642639160156 * scale, 486.1428527832031 * scale, 273.44642639160156 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(503.1428527832031 * scale, 245.01785278320312 * scale);
    ctx.bezierCurveTo(516.1428527832031 * scale, 247.01785278320312 * scale, 513.1428527832031 * scale, 264.0178527832031 * scale, 509.1428527832031 * scale, 265.0178527832031 * scale);
    ctx.bezierCurveTo(499.1428527832031 * scale, 268.0178527832031 * scale, 494.1428527832031 * scale, 244.01785278320312 * scale, 504.1428527832031 * scale, 245.01785278320312 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(503.1428527832031 * scale, 245.01785278320312 * scale);
    ctx.bezierCurveTo(516.1428527832031 * scale, 247.01785278320312 * scale, 513.1428527832031 * scale, 264.0178527832031 * scale, 509.1428527832031 * scale, 265.0178527832031 * scale);
    ctx.bezierCurveTo(499.1428527832031 * scale, 268.0178527832031 * scale, 494.1428527832031 * scale, 244.01785278320312 * scale, 504.1428527832031 * scale, 245.01785278320312 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(518.1428527832031 * scale, 179.73213958740234 * scale);
    ctx.bezierCurveTo(529.1428527832031 * scale, 181.73213958740234 * scale, 514.1428527832031 * scale, 212.73213958740234 * scale, 505.1428527832031 * scale, 200.73213958740234 * scale);
    ctx.bezierCurveTo(499.1428527832031 * scale, 186.73213958740234 * scale, 515.1428527832031 * scale, 177.73213958740234 * scale, 518.1428527832031 * scale, 179.73213958740234 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(518.1428527832031 * scale, 179.73213958740234 * scale);
    ctx.bezierCurveTo(529.1428527832031 * scale, 181.73213958740234 * scale, 514.1428527832031 * scale, 212.73213958740234 * scale, 505.1428527832031 * scale, 200.73213958740234 * scale);
    ctx.bezierCurveTo(499.1428527832031 * scale, 186.73213958740234 * scale, 515.1428527832031 * scale, 177.73213958740234 * scale, 518.1428527832031 * scale, 179.73213958740234 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(438.1428527832031 * scale, 22.16070556640625 * scale);
    ctx.bezierCurveTo(446.1428527832031 * scale, 27.16070556640625 * scale, 422.1428527832031 * scale, 54.16070556640625 * scale, 414.1428527832031 * scale, 40.16070556640625 * scale);
    ctx.bezierCurveTo(409.1428527832031 * scale, 27.16070556640625 * scale, 430.1428527832031 * scale, 15.16070556640625 * scale, 438.1428527832031 * scale, 22.16070556640625 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(438.1428527832031 * scale, 22.16070556640625 * scale);
    ctx.bezierCurveTo(446.1428527832031 * scale, 27.16070556640625 * scale, 422.1428527832031 * scale, 54.16070556640625 * scale, 414.1428527832031 * scale, 40.16070556640625 * scale);
    ctx.bezierCurveTo(409.1428527832031 * scale, 27.16070556640625 * scale, 430.1428527832031 * scale, 15.16070556640625 * scale, 438.1428527832031 * scale, 22.16070556640625 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.globalAlpha = 0.5;
    ctx.translate(3 * scale, 3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(406.1428527832031 * scale, 11.16070556640625 * scale);
    ctx.bezierCurveTo(418.1428527832031 * scale, 14.16070556640625 * scale, 411.1428527832031 * scale, 27.16070556640625 * scale, 403.1428527832031 * scale, 30.16070556640625 * scale);
    ctx.bezierCurveTo(395.1428527832031 * scale, 31.16070556640625 * scale, 391.1428527832031 * scale, 16.16070556640625 * scale, 406.1428527832031 * scale, 10.16070556640625 * scale);
    ctx.closePath();
    fill_path(ctx, color[0]);
    ctx.globalAlpha = 1;
    ctx.translate(-3 * scale, -3 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(406.1428527832031 * scale, 11.16070556640625 * scale);
    ctx.bezierCurveTo(418.1428527832031 * scale, 14.16070556640625 * scale, 411.1428527832031 * scale, 27.16070556640625 * scale, 403.1428527832031 * scale, 30.16070556640625 * scale);
    ctx.bezierCurveTo(395.1428527832031 * scale, 31.16070556640625 * scale, 391.1428527832031 * scale, 16.16070556640625 * scale, 406.1428527832031 * scale, 10.16070556640625 * scale);
    ctx.closePath();
    fill_path(ctx, color[1]);
    ctx.translate(100 * scale, 100 * scale);
  }
  ctx.globalAlpha = 1;
  ctx.translate(-3 * scale, -3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(271 * scale, 111 * scale);
  ctx.bezierCurveTo(259 * scale, 110 * scale, 258 * scale, 99 * scale, 265 * scale, 95 * scale);
  ctx.bezierCurveTo(276 * scale, 91 * scale, 279 * scale, 100 * scale, 275 * scale, 107 * scale);
  ctx.bezierCurveTo(274 * scale, 109 * scale, 273 * scale, 110 * scale, 271 * scale, 111 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(169 * scale, 121 * scale);
  ctx.bezierCurveTo(159 * scale, 129 * scale, 149 * scale, 126 * scale, 144 * scale, 114 * scale);
  ctx.bezierCurveTo(142 * scale, 102 * scale, 149 * scale, 98 * scale, 163 * scale, 96 * scale);
  ctx.bezierCurveTo(175 * scale, 98 * scale, 176 * scale, 115 * scale, 169 * scale, 121 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(213 * scale, 150 * scale);
  ctx.bezierCurveTo(206 * scale, 134 * scale, 216 * scale, 120 * scale, 235 * scale, 129 * scale);
  ctx.bezierCurveTo(247 * scale, 139 * scale, 242 * scale, 146 * scale, 237 * scale, 154 * scale);
  ctx.bezierCurveTo(226 * scale, 162 * scale, 218 * scale, 159 * scale, 213 * scale, 150 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(236 * scale, 169 * scale);
  ctx.bezierCurveTo(247 * scale, 166 * scale, 250 * scale, 172 * scale, 247 * scale, 181 * scale);
  ctx.bezierCurveTo(242 * scale, 186 * scale, 241 * scale, 181 * scale, 242 * scale, 182 * scale);
  ctx.bezierCurveTo(241 * scale, 178 * scale, 240 * scale, 179 * scale, 239 * scale, 181 * scale);
  ctx.bezierCurveTo(240 * scale, 184 * scale, 237 * scale, 186 * scale, 233 * scale, 181 * scale);
  ctx.bezierCurveTo(230 * scale, 173 * scale, 233 * scale, 169 * scale, 236 * scale, 169 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(163 * scale, 170 * scale);
  ctx.bezierCurveTo(176 * scale, 165 * scale, 180 * scale, 172 * scale, 181 * scale, 181 * scale);
  ctx.bezierCurveTo(182 * scale, 189 * scale, 178 * scale, 192 * scale, 174 * scale, 188 * scale);
  ctx.bezierCurveTo(172 * scale, 183 * scale, 170 * scale, 184 * scale, 170 * scale, 188 * scale);
  ctx.bezierCurveTo(176 * scale, 194 * scale, 165 * scale, 196 * scale, 162 * scale, 190 * scale);
  ctx.bezierCurveTo(152 * scale, 181 * scale, 157 * scale, 173 * scale, 163 * scale, 170 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 2 * scale);
  ctx.scale(0.05, 0.05);
  ctx.translate(5000 * scale, 1900 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(273 * scale, 46.546875 * scale);
  ctx.bezierCurveTo(353 * scale, 131.546875 * scale, 303 * scale, 213.546875 * scale, 272 * scale, 236.546875 * scale);
  ctx.bezierCurveTo(203 * scale, 179.546875 * scale, 236 * scale, 84.546875 * scale, 273 * scale, 47.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(467 * scale, 257.546875 * scale);
  ctx.bezierCurveTo(369 * scale, 194.546875 * scale, 325 * scale, 236.546875 * scale, 291 * scale, 271.546875 * scale);
  ctx.bezierCurveTo(371 * scale, 335.546875 * scale, 427 * scale, 313.546875 * scale, 467 * scale, 258.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(269 * scale, 275.546875 * scale);
  ctx.bezierCurveTo(343 * scale, 356.546875 * scale, 355 * scale, 407.546875 * scale, 323 * scale, 472.546875 * scale);
  ctx.bezierCurveTo(224 * scale, 451.546875 * scale, 238 * scale, 326.546875 * scale, 270 * scale, 275.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(260 * scale, 267.546875 * scale);
  ctx.bezierCurveTo(134 * scale, 221.546875 * scale, 89 * scale, 256.546875 * scale, 60 * scale, 295.546875 * scale);
  ctx.bezierCurveTo(116 * scale, 357.546875 * scale, 242 * scale, 344.546875 * scale, 260 * scale, 267.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(124 * scale, 123.546875 * scale);
  ctx.bezierCurveTo(255 * scale, 140.546875 * scale, 265 * scale, 234.546875 * scale, 267 * scale, 269.546875 * scale);
  ctx.bezierCurveTo(159 * scale, 283.546875 * scale, 127 * scale, 192.546875 * scale, 124 * scale, 124.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(267 * scale, 268.546875 * scale);
  ctx.bezierCurveTo(265 * scale, 170.546875 * scale, 364 * scale, 127.546875 * scale, 407 * scale, 132.546875 * scale);
  ctx.bezierCurveTo(427 * scale, 204.546875 * scale, 341 * scale, 277.546875 * scale, 268 * scale, 271.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(270 * scale, 269.546875 * scale);
  ctx.bezierCurveTo(370 * scale, 251.546875 * scale, 410 * scale, 328.546875 * scale, 420 * scale, 399.546875 * scale);
  ctx.bezierCurveTo(292 * scale, 412.546875 * scale, 275 * scale, 313.546875 * scale, 269 * scale, 272.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(273 * scale, 266.546875 * scale);
  ctx.bezierCurveTo(291 * scale, 370.546875 * scale, 235 * scale, 428.546875 * scale, 173 * scale, 451.546875 * scale);
  ctx.bezierCurveTo(124 * scale, 365.546875 * scale, 217 * scale, 274.546875 * scale, 272 * scale, 265.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  circle(ctx, 266 * scale, 251.546875 * scale, 19.1049731745428 * scale);
  fill_path(ctx, color[8], color[9], 2 * scale);
  circle(ctx, 292 * scale, 274.546875 * scale, 15.556349186104045 * scale);
  fill_path(ctx, color[8], color[9], 2 * scale);
  circle(ctx, 258 * scale, 291.546875 * scale, 17.029386365926403 * scale);
  fill_path(ctx, color[8], color[9], 2 * scale);
  ctx.scale(1.4, 1.4);
  ctx.translate(-700 * scale, 280 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(273 * scale, 46.546875 * scale);
  ctx.bezierCurveTo(353 * scale, 131.546875 * scale, 303 * scale, 213.546875 * scale, 272 * scale, 236.546875 * scale);
  ctx.bezierCurveTo(203 * scale, 179.546875 * scale, 236 * scale, 84.546875 * scale, 273 * scale, 47.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(467 * scale, 257.546875 * scale);
  ctx.bezierCurveTo(369 * scale, 194.546875 * scale, 325 * scale, 236.546875 * scale, 291 * scale, 271.546875 * scale);
  ctx.bezierCurveTo(371 * scale, 335.546875 * scale, 427 * scale, 313.546875 * scale, 467 * scale, 258.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(269 * scale, 275.546875 * scale);
  ctx.bezierCurveTo(343 * scale, 356.546875 * scale, 355 * scale, 407.546875 * scale, 323 * scale, 472.546875 * scale);
  ctx.bezierCurveTo(224 * scale, 451.546875 * scale, 238 * scale, 326.546875 * scale, 270 * scale, 275.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(260 * scale, 267.546875 * scale);
  ctx.bezierCurveTo(134 * scale, 221.546875 * scale, 89 * scale, 256.546875 * scale, 60 * scale, 295.546875 * scale);
  ctx.bezierCurveTo(116 * scale, 357.546875 * scale, 242 * scale, 344.546875 * scale, 260 * scale, 267.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(124 * scale, 123.546875 * scale);
  ctx.bezierCurveTo(255 * scale, 140.546875 * scale, 265 * scale, 234.546875 * scale, 267 * scale, 269.546875 * scale);
  ctx.bezierCurveTo(159 * scale, 283.546875 * scale, 127 * scale, 192.546875 * scale, 124 * scale, 124.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(267 * scale, 268.546875 * scale);
  ctx.bezierCurveTo(265 * scale, 170.546875 * scale, 364 * scale, 127.546875 * scale, 407 * scale, 132.546875 * scale);
  ctx.bezierCurveTo(427 * scale, 204.546875 * scale, 341 * scale, 277.546875 * scale, 268 * scale, 271.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(270 * scale, 269.546875 * scale);
  ctx.bezierCurveTo(370 * scale, 251.546875 * scale, 410 * scale, 328.546875 * scale, 420 * scale, 399.546875 * scale);
  ctx.bezierCurveTo(292 * scale, 412.546875 * scale, 275 * scale, 313.546875 * scale, 269 * scale, 272.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(273 * scale, 266.546875 * scale);
  ctx.bezierCurveTo(291 * scale, 370.546875 * scale, 235 * scale, 428.546875 * scale, 173 * scale, 451.546875 * scale);
  ctx.bezierCurveTo(124 * scale, 365.546875 * scale, 217 * scale, 274.546875 * scale, 272 * scale, 265.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  circle(ctx, 266 * scale, 251.546875 * scale, 19.1049731745428 * scale);
  fill_path(ctx, color[8], color[9], 2 * scale);
  circle(ctx, 292 * scale, 274.546875 * scale, 15.556349186104045 * scale);
  fill_path(ctx, color[8], color[9], 2 * scale);
  circle(ctx, 258 * scale, 291.546875 * scale, 17.029386365926403 * scale);
  fill_path(ctx, color[8], color[9], 2 * scale);
  ctx.translate(-900 * scale, -200 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(273 * scale, 46.546875 * scale);
  ctx.bezierCurveTo(353 * scale, 131.546875 * scale, 303 * scale, 213.546875 * scale, 272 * scale, 236.546875 * scale);
  ctx.bezierCurveTo(203 * scale, 179.546875 * scale, 236 * scale, 84.546875 * scale, 273 * scale, 47.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(467 * scale, 257.546875 * scale);
  ctx.bezierCurveTo(369 * scale, 194.546875 * scale, 325 * scale, 236.546875 * scale, 291 * scale, 271.546875 * scale);
  ctx.bezierCurveTo(371 * scale, 335.546875 * scale, 427 * scale, 313.546875 * scale, 467 * scale, 258.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(269 * scale, 275.546875 * scale);
  ctx.bezierCurveTo(343 * scale, 356.546875 * scale, 355 * scale, 407.546875 * scale, 323 * scale, 472.546875 * scale);
  ctx.bezierCurveTo(224 * scale, 451.546875 * scale, 238 * scale, 326.546875 * scale, 270 * scale, 275.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(260 * scale, 267.546875 * scale);
  ctx.bezierCurveTo(134 * scale, 221.546875 * scale, 89 * scale, 256.546875 * scale, 60 * scale, 295.546875 * scale);
  ctx.bezierCurveTo(116 * scale, 357.546875 * scale, 242 * scale, 344.546875 * scale, 260 * scale, 267.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(124 * scale, 123.546875 * scale);
  ctx.bezierCurveTo(255 * scale, 140.546875 * scale, 265 * scale, 234.546875 * scale, 267 * scale, 269.546875 * scale);
  ctx.bezierCurveTo(159 * scale, 283.546875 * scale, 127 * scale, 192.546875 * scale, 124 * scale, 124.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(267 * scale, 268.546875 * scale);
  ctx.bezierCurveTo(265 * scale, 170.546875 * scale, 364 * scale, 127.546875 * scale, 407 * scale, 132.546875 * scale);
  ctx.bezierCurveTo(427 * scale, 204.546875 * scale, 341 * scale, 277.546875 * scale, 268 * scale, 271.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(270 * scale, 269.546875 * scale);
  ctx.bezierCurveTo(370 * scale, 251.546875 * scale, 410 * scale, 328.546875 * scale, 420 * scale, 399.546875 * scale);
  ctx.bezierCurveTo(292 * scale, 412.546875 * scale, 275 * scale, 313.546875 * scale, 269 * scale, 272.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(273 * scale, 266.546875 * scale);
  ctx.bezierCurveTo(291 * scale, 370.546875 * scale, 235 * scale, 428.546875 * scale, 173 * scale, 451.546875 * scale);
  ctx.bezierCurveTo(124 * scale, 365.546875 * scale, 217 * scale, 274.546875 * scale, 272 * scale, 265.546875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  circle(ctx, 266 * scale, 251.546875 * scale, 19.1049731745428 * scale);
  fill_path(ctx, color[8], color[9], 2 * scale);
  circle(ctx, 292 * scale, 274.546875 * scale, 15.556349186104045 * scale);
  fill_path(ctx, color[8], color[9], 2 * scale);
  circle(ctx, 258 * scale, 291.546875 * scale, 17.029386365926403 * scale);
  fill_path(ctx, color[8], color[9], 2 * scale);
  return can;
};

function create_kraken(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 376 * scale;
  can.height = 371 * scale;
  ctx.globalAlpha = 0.5;
  ctx.translate(5 * scale, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(191.633544921875 * scale, 123.98580932617188 * scale);
  ctx.bezierCurveTo(215.633544921875 * scale, 85.98580932617188 * scale, 187.633544921875 * scale, 71.98580932617188 * scale, 202.633544921875 * scale, 19.985809326171875 * scale);
  ctx.bezierCurveTo(231.633544921875 * scale, 68.98580932617188 * scale, 253.633544921875 * scale, 71.98580932617188 * scale, 256.633544921875 * scale, 93.98580932617188 * scale);
  ctx.bezierCurveTo(306.633544921875 * scale, 64.98580932617188 * scale, 319.633544921875 * scale, 61.985809326171875 * scale, 350.633544921875 * scale, 58.985809326171875 * scale);
  ctx.bezierCurveTo(280.633544921875 * scale, 86.98580932617188 * scale, 281.633544921875 * scale, 106.98580932617188 * scale, 268.633544921875 * scale, 130.98580932617188 * scale);
  ctx.bezierCurveTo(295.633544921875 * scale, 158.98580932617188 * scale, 328.633544921875 * scale, 155.98580932617188 * scale, 353.633544921875 * scale, 90.98580932617188 * scale);
  ctx.bezierCurveTo(371.633544921875 * scale, 158.98580932617188 * scale, 337.633544921875 * scale, 210.98580932617188 * scale, 286.633544921875 * scale, 209.98580932617188 * scale);
  ctx.bezierCurveTo(323.633544921875 * scale, 230.98580932617188 * scale, 317.633544921875 * scale, 274.9858093261719 * scale, 356.633544921875 * scale, 305.9858093261719 * scale);
  ctx.bezierCurveTo(288.633544921875 * scale, 297.9858093261719 * scale, 288.633544921875 * scale, 265.9858093261719 * scale, 275.633544921875 * scale, 266.9858093261719 * scale);
  ctx.bezierCurveTo(280.633544921875 * scale, 294.9858093261719 * scale, 315.633544921875 * scale, 306.9858093261719 * scale, 336.633544921875 * scale, 316.9858093261719 * scale);
  ctx.bezierCurveTo(295.633544921875 * scale, 318.9858093261719 * scale, 264.633544921875 * scale, 302.9858093261719 * scale, 254.633544921875 * scale, 289.9858093261719 * scale);
  ctx.bezierCurveTo(252.633544921875 * scale, 301.9858093261719 * scale, 224.633544921875 * scale, 315.9858093261719 * scale, 201.633544921875 * scale, 356.9858093261719 * scale);
  ctx.bezierCurveTo(195.633544921875 * scale, 313.9858093261719 * scale, 195.633544921875 * scale, 308.9858093261719 * scale, 196.633544921875 * scale, 307.9858093261719 * scale);
  ctx.bezierCurveTo(197.633544921875 * scale, 289.9858093261719 * scale, 207.633544921875 * scale, 283.9858093261719 * scale, 195.633544921875 * scale, 258.9858093261719 * scale);
  ctx.bezierCurveTo(182.633544921875 * scale, 282.9858093261719 * scale, 190.633544921875 * scale, 287.9858093261719 * scale, 193.633544921875 * scale, 297.9858093261719 * scale);
  ctx.bezierCurveTo(195.633544921875 * scale, 306.9858093261719 * scale, 191.633544921875 * scale, 334.9858093261719 * scale, 187.633544921875 * scale, 354.9858093261719 * scale);
  ctx.bezierCurveTo(165.633544921875 * scale, 320.9858093261719 * scale, 138.633544921875 * scale, 307.9858093261719 * scale, 135.633544921875 * scale, 288.9858093261719 * scale);
  ctx.bezierCurveTo(110.633544921875 * scale, 318.9858093261719 * scale, 68.633544921875 * scale, 323.9858093261719 * scale, 49.633544921875 * scale, 320.9858093261719 * scale);
  ctx.bezierCurveTo(88.633544921875 * scale, 308.9858093261719 * scale, 108.633544921875 * scale, 284.9858093261719 * scale, 118.633544921875 * scale, 258.9858093261719 * scale);
  ctx.bezierCurveTo(86.633544921875 * scale, 264.9858093261719 * scale, 75.633544921875 * scale, 310.9858093261719 * scale, 19.633544921875 * scale, 304.9858093261719 * scale);
  ctx.bezierCurveTo(54.633544921875 * scale, 276.9858093261719 * scale, 59.633544921875 * scale, 214.98580932617188 * scale, 105.633544921875 * scale, 205.98580932617188 * scale);
  ctx.bezierCurveTo(14.633544921875 * scale, 201.98580932617188 * scale, 24.633544921875 * scale, 141.98580932617188 * scale, 25.633544921875 * scale, 82.98580932617188 * scale);
  ctx.bezierCurveTo(49.633544921875 * scale, 168.98580932617188 * scale, 87.633544921875 * scale, 141.98580932617188 * scale, 112.633544921875 * scale, 123.98580932617188 * scale);
  ctx.bezierCurveTo(95.633544921875 * scale, 75.98580932617188 * scale, 70.633544921875 * scale, 68.98580932617188 * scale, 35.633544921875 * scale, 50.985809326171875 * scale);
  ctx.bezierCurveTo(70.633544921875 * scale, 53.985809326171875 * scale, 102.633544921875 * scale, 65.98580932617188 * scale, 125.633544921875 * scale, 84.98580932617188 * scale);
  ctx.bezierCurveTo(133.633544921875 * scale, 69.98580932617188 * scale, 166.633544921875 * scale, 42.985809326171875 * scale, 176.633544921875 * scale, 21.985809326171875 * scale);
  ctx.bezierCurveTo(185.633544921875 * scale, 49.985809326171875 * scale, 168.633544921875 * scale, 95.98580932617188 * scale, 191.633544921875 * scale, 121.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-4 * scale, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(191.633544921875 * scale, 123.98580932617188 * scale);
  ctx.bezierCurveTo(215.633544921875 * scale, 85.98580932617188 * scale, 187.633544921875 * scale, 71.98580932617188 * scale, 202.633544921875 * scale, 19.985809326171875 * scale);
  ctx.bezierCurveTo(231.633544921875 * scale, 68.98580932617188 * scale, 253.633544921875 * scale, 71.98580932617188 * scale, 256.633544921875 * scale, 93.98580932617188 * scale);
  ctx.bezierCurveTo(306.633544921875 * scale, 64.98580932617188 * scale, 319.633544921875 * scale, 61.985809326171875 * scale, 350.633544921875 * scale, 58.985809326171875 * scale);
  ctx.bezierCurveTo(280.633544921875 * scale, 86.98580932617188 * scale, 281.633544921875 * scale, 106.98580932617188 * scale, 268.633544921875 * scale, 130.98580932617188 * scale);
  ctx.bezierCurveTo(295.633544921875 * scale, 158.98580932617188 * scale, 328.633544921875 * scale, 155.98580932617188 * scale, 353.633544921875 * scale, 90.98580932617188 * scale);
  ctx.bezierCurveTo(371.633544921875 * scale, 158.98580932617188 * scale, 337.633544921875 * scale, 210.98580932617188 * scale, 286.633544921875 * scale, 209.98580932617188 * scale);
  ctx.bezierCurveTo(323.633544921875 * scale, 230.98580932617188 * scale, 317.633544921875 * scale, 274.9858093261719 * scale, 356.633544921875 * scale, 305.9858093261719 * scale);
  ctx.bezierCurveTo(288.633544921875 * scale, 297.9858093261719 * scale, 288.633544921875 * scale, 265.9858093261719 * scale, 275.633544921875 * scale, 266.9858093261719 * scale);
  ctx.bezierCurveTo(280.633544921875 * scale, 294.9858093261719 * scale, 315.633544921875 * scale, 306.9858093261719 * scale, 336.633544921875 * scale, 316.9858093261719 * scale);
  ctx.bezierCurveTo(295.633544921875 * scale, 318.9858093261719 * scale, 264.633544921875 * scale, 302.9858093261719 * scale, 254.633544921875 * scale, 289.9858093261719 * scale);
  ctx.bezierCurveTo(252.633544921875 * scale, 301.9858093261719 * scale, 224.633544921875 * scale, 315.9858093261719 * scale, 201.633544921875 * scale, 356.9858093261719 * scale);
  ctx.bezierCurveTo(195.633544921875 * scale, 313.9858093261719 * scale, 195.633544921875 * scale, 308.9858093261719 * scale, 196.633544921875 * scale, 307.9858093261719 * scale);
  ctx.bezierCurveTo(197.633544921875 * scale, 289.9858093261719 * scale, 207.633544921875 * scale, 283.9858093261719 * scale, 195.633544921875 * scale, 258.9858093261719 * scale);
  ctx.bezierCurveTo(182.633544921875 * scale, 282.9858093261719 * scale, 190.633544921875 * scale, 287.9858093261719 * scale, 193.633544921875 * scale, 297.9858093261719 * scale);
  ctx.bezierCurveTo(195.633544921875 * scale, 306.9858093261719 * scale, 191.633544921875 * scale, 334.9858093261719 * scale, 187.633544921875 * scale, 354.9858093261719 * scale);
  ctx.bezierCurveTo(165.633544921875 * scale, 320.9858093261719 * scale, 138.633544921875 * scale, 307.9858093261719 * scale, 135.633544921875 * scale, 288.9858093261719 * scale);
  ctx.bezierCurveTo(110.633544921875 * scale, 318.9858093261719 * scale, 68.633544921875 * scale, 323.9858093261719 * scale, 49.633544921875 * scale, 320.9858093261719 * scale);
  ctx.bezierCurveTo(88.633544921875 * scale, 308.9858093261719 * scale, 108.633544921875 * scale, 284.9858093261719 * scale, 118.633544921875 * scale, 258.9858093261719 * scale);
  ctx.bezierCurveTo(86.633544921875 * scale, 264.9858093261719 * scale, 75.633544921875 * scale, 310.9858093261719 * scale, 19.633544921875 * scale, 304.9858093261719 * scale);
  ctx.bezierCurveTo(54.633544921875 * scale, 276.9858093261719 * scale, 59.633544921875 * scale, 214.98580932617188 * scale, 105.633544921875 * scale, 205.98580932617188 * scale);
  ctx.bezierCurveTo(14.633544921875 * scale, 201.98580932617188 * scale, 24.633544921875 * scale, 141.98580932617188 * scale, 25.633544921875 * scale, 82.98580932617188 * scale);
  ctx.bezierCurveTo(49.633544921875 * scale, 168.98580932617188 * scale, 87.633544921875 * scale, 141.98580932617188 * scale, 112.633544921875 * scale, 123.98580932617188 * scale);
  ctx.bezierCurveTo(95.633544921875 * scale, 75.98580932617188 * scale, 70.633544921875 * scale, 68.98580932617188 * scale, 35.633544921875 * scale, 50.985809326171875 * scale);
  ctx.bezierCurveTo(70.633544921875 * scale, 53.985809326171875 * scale, 102.633544921875 * scale, 65.98580932617188 * scale, 125.633544921875 * scale, 84.98580932617188 * scale);
  ctx.bezierCurveTo(133.633544921875 * scale, 69.98580932617188 * scale, 166.633544921875 * scale, 42.985809326171875 * scale, 176.633544921875 * scale, 21.985809326171875 * scale);
  ctx.bezierCurveTo(185.633544921875 * scale, 49.985809326171875 * scale, 168.633544921875 * scale, 95.98580932617188 * scale, 191.633544921875 * scale, 121.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 12 * scale);
  ctx.translate(-1 * scale, 0 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(270.633544921875 * scale, 88.98580932617188 * scale);
  ctx.bezierCurveTo(296.633544921875 * scale, 65.98580932617188 * scale, 318.633544921875 * scale, 62.985809326171875 * scale, 348.633544921875 * scale, 57.985809326171875 * scale);
  ctx.bezierCurveTo(309.633544921875 * scale, 76.98580932617188 * scale, 291.633544921875 * scale, 88.98580932617188 * scale, 280.633544921875 * scale, 99.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(275.633544921875 * scale, 281.9858093261719 * scale);
  ctx.bezierCurveTo(303.633544921875 * scale, 308.9858093261719 * scale, 321.633544921875 * scale, 308.9858093261719 * scale, 335.633544921875 * scale, 315.9858093261719 * scale);
  ctx.bezierCurveTo(305.633544921875 * scale, 320.9858093261719 * scale, 278.633544921875 * scale, 307.9858093261719 * scale, 264.633544921875 * scale, 293.9858093261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(124.633544921875 * scale, 291.9858093261719 * scale);
  ctx.bezierCurveTo(106.633544921875 * scale, 316.9858093261719 * scale, 72.633544921875 * scale, 325.9858093261719 * scale, 53.633544921875 * scale, 319.9858093261719 * scale);
  ctx.bezierCurveTo(83.633544921875 * scale, 308.9858093261719 * scale, 97.633544921875 * scale, 298.9858093261719 * scale, 112.633544921875 * scale, 284.9858093261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(113.633544921875 * scale, 80.98580932617188 * scale);
  ctx.bezierCurveTo(91.633544921875 * scale, 54.985809326171875 * scale, 72.633544921875 * scale, 56.985809326171875 * scale, 36.633544921875 * scale, 49.985809326171875 * scale);
  ctx.bezierCurveTo(87.633544921875 * scale, 72.98580932617188 * scale, 95.633544921875 * scale, 82.98580932617188 * scale, 106.633544921875 * scale, 96.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(202.633544921875 * scale, 20.985809326171875 * scale);
  ctx.bezierCurveTo(219.633544921875 * scale, 49.985809326171875 * scale, 259.633544921875 * scale, 80.98580932617188 * scale, 255.633544921875 * scale, 92.98580932617188 * scale);
  ctx.bezierCurveTo(268.633544921875 * scale, 86.98580932617188 * scale, 265.633544921875 * scale, 87.98580932617188 * scale, 275.633544921875 * scale, 82.98580932617188 * scale);
  ctx.bezierCurveTo(283.633544921875 * scale, 87.98580932617188 * scale, 283.633544921875 * scale, 87.98580932617188 * scale, 291.633544921875 * scale, 92.98580932617188 * scale);
  ctx.bezierCurveTo(269.633544921875 * scale, 116.98580932617188 * scale, 270.633544921875 * scale, 124.98580932617188 * scale, 267.633544921875 * scale, 130.98580932617188 * scale);
  ctx.bezierCurveTo(307.633544921875 * scale, 168.98580932617188 * scale, 339.633544921875 * scale, 132.98580932617188 * scale, 352.633544921875 * scale, 93.98580932617188 * scale);
  ctx.bezierCurveTo(366.633544921875 * scale, 145.98580932617188 * scale, 345.633544921875 * scale, 207.98580932617188 * scale, 286.633544921875 * scale, 208.98580932617188 * scale);
  ctx.bezierCurveTo(315.633544921875 * scale, 223.98580932617188 * scale, 327.633544921875 * scale, 287.9858093261719 * scale, 355.633544921875 * scale, 305.9858093261719 * scale);
  ctx.bezierCurveTo(293.633544921875 * scale, 298.9858093261719 * scale, 293.633544921875 * scale, 275.9858093261719 * scale, 276.633544921875 * scale, 266.9858093261719 * scale);
  ctx.bezierCurveTo(274.633544921875 * scale, 282.9858093261719 * scale, 287.633544921875 * scale, 288.9858093261719 * scale, 295.633544921875 * scale, 296.9858093261719 * scale);
  ctx.bezierCurveTo(287.133544921875 * scale, 302.4858093261719 * scale, 287.133544921875 * scale, 302.4858093261719 * scale, 278.633544921875 * scale, 307.9858093261719 * scale);
  ctx.bezierCurveTo(261.633544921875 * scale, 297.9858093261719 * scale, 258.633544921875 * scale, 293.9858093261719 * scale, 255.633544921875 * scale, 290.9858093261719 * scale);
  ctx.bezierCurveTo(249.633544921875 * scale, 301.9858093261719 * scale, 225.633544921875 * scale, 320.9858093261719 * scale, 202.633544921875 * scale, 354.9858093261719 * scale);
  ctx.bezierCurveTo(195.633544921875 * scale, 318.9858093261719 * scale, 196.633544921875 * scale, 306.9858093261719 * scale, 198.633544921875 * scale, 300.9858093261719 * scale);
  ctx.bezierCurveTo(209.633544921875 * scale, 268.9858093261719 * scale, 199.633544921875 * scale, 266.9858093261719 * scale, 195.633544921875 * scale, 256.9858093261719 * scale);
  ctx.bezierCurveTo(183.633544921875 * scale, 274.9858093261719 * scale, 182.633544921875 * scale, 281.9858093261719 * scale, 192.633544921875 * scale, 305.9858093261719 * scale);
  ctx.bezierCurveTo(194.633544921875 * scale, 317.9858093261719 * scale, 191.633544921875 * scale, 336.9858093261719 * scale, 186.633544921875 * scale, 351.9858093261719 * scale);
  ctx.bezierCurveTo(166.633544921875 * scale, 318.9858093261719 * scale, 141.633544921875 * scale, 303.9858093261719 * scale, 136.633544921875 * scale, 286.9858093261719 * scale);
  ctx.bezierCurveTo(122.633544921875 * scale, 303.9858093261719 * scale, 115.633544921875 * scale, 305.9858093261719 * scale, 109.633544921875 * scale, 306.9858093261719 * scale);
  ctx.bezierCurveTo(101.133544921875 * scale, 301.9858093261719 * scale, 94.633544921875 * scale, 297.9858093261719 * scale, 92.633544921875 * scale, 296.9858093261719 * scale);
  ctx.bezierCurveTo(116.633544921875 * scale, 277.9858093261719 * scale, 116.633544921875 * scale, 266.9858093261719 * scale, 119.633544921875 * scale, 257.9858093261719 * scale);
  ctx.bezierCurveTo(107.633544921875 * scale, 257.9858093261719 * scale, 65.633544921875 * scale, 308.9858093261719 * scale, 24.633544921875 * scale, 303.9858093261719 * scale);
  ctx.bezierCurveTo(51.633544921875 * scale, 275.9858093261719 * scale, 64.633544921875 * scale, 220.98580932617188 * scale, 108.633544921875 * scale, 205.98580932617188 * scale);
  ctx.bezierCurveTo(14.633544921875 * scale, 198.98580932617188 * scale, 26.633544921875 * scale, 142.98580932617188 * scale, 25.633544921875 * scale, 86.98580932617188 * scale);
  ctx.bezierCurveTo(41.633544921875 * scale, 155.98580932617188 * scale, 81.633544921875 * scale, 148.98580932617188 * scale, 113.633544921875 * scale, 124.98580932617188 * scale);
  ctx.bezierCurveTo(102.633544921875 * scale, 93.98580932617188 * scale, 95.633544921875 * scale, 88.98580932617188 * scale, 89.633544921875 * scale, 81.98580932617188 * scale);
  ctx.bezierCurveTo(97.633544921875 * scale, 76.48580932617188 * scale, 97.633544921875 * scale, 76.48580932617188 * scale, 105.633544921875 * scale, 70.98580932617188 * scale);
  ctx.bezierCurveTo(120.633544921875 * scale, 78.98580932617188 * scale, 121.633544921875 * scale, 81.98580932617188 * scale, 124.633544921875 * scale, 86.98580932617188 * scale);
  ctx.bezierCurveTo(132.633544921875 * scale, 71.98580932617188 * scale, 160.633544921875 * scale, 56.985809326171875 * scale, 175.633544921875 * scale, 23.985809326171875 * scale);
  ctx.bezierCurveTo(182.633544921875 * scale, 53.985809326171875 * scale, 170.633544921875 * scale, 102.98580932617188 * scale, 191.633544921875 * scale, 125.98580932617188 * scale);
  ctx.bezierCurveTo(214.633544921875 * scale, 89.98580932617188 * scale, 192.633544921875 * scale, 58.985809326171875 * scale, 202.633544921875 * scale, 20.985809326171875 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(203.633544921875 * scale, 21.985809326171875 * scale);
  ctx.bezierCurveTo(223.633544921875 * scale, 63.985809326171875 * scale, 227.633544921875 * scale, 72.98580932617188 * scale, 235.633544921875 * scale, 98.98580932617188 * scale);
  ctx.bezierCurveTo(241.633544921875 * scale, 123.98580932617188 * scale, 225.633544921875 * scale, 138.98580932617188 * scale, 196.633544921875 * scale, 122.98580932617188 * scale);
  ctx.bezierCurveTo(213.633544921875 * scale, 93.98580932617188 * scale, 199.633544921875 * scale, 49.985809326171875 * scale, 203.633544921875 * scale, 26.985809326171875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(175.633544921875 * scale, 25.985809326171875 * scale);
  ctx.bezierCurveTo(176.633544921875 * scale, 51.985809326171875 * scale, 171.633544921875 * scale, 88.98580932617188 * scale, 186.633544921875 * scale, 121.98580932617188 * scale);
  ctx.bezierCurveTo(156.633544921875 * scale, 144.98580932617188 * scale, 139.633544921875 * scale, 120.98580932617188 * scale, 147.633544921875 * scale, 97.98580932617188 * scale);
  ctx.bezierCurveTo(152.633544921875 * scale, 77.98580932617188 * scale, 162.633544921875 * scale, 60.985809326171875 * scale, 176.633544921875 * scale, 25.985809326171875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(26.633544921875 * scale, 96.98580932617188 * scale);
  ctx.bezierCurveTo(38.633544921875 * scale, 151.98580932617188 * scale, 61.633544921875 * scale, 161.98580932617188 * scale, 88.633544921875 * scale, 168.98580932617188 * scale);
  ctx.bezierCurveTo(117.633544921875 * scale, 177.98580932617188 * scale, 113.633544921875 * scale, 185.98580932617188 * scale, 106.633544921875 * scale, 204.98580932617188 * scale);
  ctx.bezierCurveTo(32.633544921875 * scale, 204.98580932617188 * scale, 25.633544921875 * scale, 149.98580932617188 * scale, 25.633544921875 * scale, 97.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(351.633544921875 * scale, 99.98580932617188 * scale);
  ctx.bezierCurveTo(365.633544921875 * scale, 161.98580932617188 * scale, 333.633544921875 * scale, 203.98580932617188 * scale, 287.633544921875 * scale, 207.98580932617188 * scale);
  ctx.bezierCurveTo(255.633544921875 * scale, 208.98580932617188 * scale, 266.633544921875 * scale, 174.98580932617188 * scale, 285.633544921875 * scale, 176.98580932617188 * scale);
  ctx.bezierCurveTo(313.633544921875 * scale, 178.98580932617188 * scale, 348.633544921875 * scale, 135.98580932617188 * scale, 353.633544921875 * scale, 99.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(350.633544921875 * scale, 302.9858093261719 * scale);
  ctx.bezierCurveTo(310.633544921875 * scale, 280.9858093261719 * scale, 314.633544921875 * scale, 244.98580932617188 * scale, 292.633544921875 * scale, 230.98580932617188 * scale);
  ctx.bezierCurveTo(272.633544921875 * scale, 215.98580932617188 * scale, 263.633544921875 * scale, 222.98580932617188 * scale, 256.633544921875 * scale, 236.98580932617188 * scale);
  ctx.bezierCurveTo(251.633544921875 * scale, 249.98580932617188 * scale, 264.633544921875 * scale, 255.98580932617188 * scale, 279.633544921875 * scale, 268.9858093261719 * scale);
  ctx.bezierCurveTo(306.633544921875 * scale, 295.9858093261719 * scale, 325.633544921875 * scale, 299.9858093261719 * scale, 349.633544921875 * scale, 302.9858093261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(95.633544921875 * scale, 224.98580932617188 * scale);
  ctx.bezierCurveTo(64.633544921875 * scale, 245.98580932617188 * scale, 62.633544921875 * scale, 280.9858093261719 * scale, 32.633544921875 * scale, 303.9858093261719 * scale);
  ctx.bezierCurveTo(59.633544921875 * scale, 301.9858093261719 * scale, 102.633544921875 * scale, 260.9858093261719 * scale, 116.633544921875 * scale, 255.98580932617188 * scale);
  ctx.bezierCurveTo(139.633544921875 * scale, 229.98580932617188 * scale, 108.633544921875 * scale, 209.98580932617188 * scale, 97.633544921875 * scale, 224.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(195.633544921875 * scale, 253.98580932617188 * scale);
  ctx.bezierCurveTo(209.633544921875 * scale, 282.9858093261719 * scale, 205.633544921875 * scale, 278.9858093261719 * scale, 199.633544921875 * scale, 307.9858093261719 * scale);
  ctx.bezierCurveTo(198.633544921875 * scale, 332.9858093261719 * scale, 201.633544921875 * scale, 340.9858093261719 * scale, 202.633544921875 * scale, 348.9858093261719 * scale);
  ctx.bezierCurveTo(215.633544921875 * scale, 313.9858093261719 * scale, 226.633544921875 * scale, 291.9858093261719 * scale, 235.633544921875 * scale, 270.9858093261719 * scale);
  ctx.bezierCurveTo(243.633544921875 * scale, 247.98580932617188 * scale, 219.633544921875 * scale, 235.98580932617188 * scale, 196.633544921875 * scale, 252.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(195.633544921875 * scale, 251.98580932617188 * scale);
  ctx.bezierCurveTo(176.633544921875 * scale, 275.9858093261719 * scale, 182.633544921875 * scale, 285.9858093261719 * scale, 191.633544921875 * scale, 308.9858093261719 * scale);
  ctx.bezierCurveTo(194.633544921875 * scale, 318.9858093261719 * scale, 190.633544921875 * scale, 334.9858093261719 * scale, 186.633544921875 * scale, 348.9858093261719 * scale);
  ctx.bezierCurveTo(175.633544921875 * scale, 307.9858093261719 * scale, 157.633544921875 * scale, 291.9858093261719 * scale, 155.633544921875 * scale, 272.9858093261719 * scale);
  ctx.bezierCurveTo(150.633544921875 * scale, 243.98580932617188 * scale, 170.633544921875 * scale, 236.98580932617188 * scale, 195.633544921875 * scale, 251.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(316 * scale, 186.8020782470703 * scale);
  ctx.bezierCurveTo(315 * scale, 173.8020782470703 * scale, 298 * scale, 177.8020782470703 * scale, 293 * scale, 183.8020782470703 * scale);
  ctx.bezierCurveTo(285 * scale, 195.8020782470703 * scale, 314 * scale, 197.8020782470703 * scale, 315 * scale, 187.8020782470703 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(340 * scale, 157.8020782470703 * scale);
  ctx.bezierCurveTo(327 * scale, 153.8020782470703 * scale, 321 * scale, 168.8020782470703 * scale, 330 * scale, 174.8020782470703 * scale);
  ctx.bezierCurveTo(341 * scale, 178.8020782470703 * scale, 347 * scale, 161.8020782470703 * scale, 341 * scale, 157.8020782470703 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(349 * scale, 136.8020782470703 * scale);
  ctx.bezierCurveTo(343 * scale, 135.8020782470703 * scale, 342 * scale, 139.8020782470703 * scale, 341 * scale, 147.8020782470703 * scale);
  ctx.bezierCurveTo(343 * scale, 155.8020782470703 * scale, 353 * scale, 143.8020782470703 * scale, 349 * scale, 137.8020782470703 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(278.75 * scale, 246.4375 * scale);
  ctx.bezierCurveTo(288.75 * scale, 242.4375 * scale, 301.75 * scale, 248.4375 * scale, 298.75 * scale, 262.4375 * scale);
  ctx.bezierCurveTo(293.75 * scale, 271.4375 * scale, 287.75 * scale, 271.4375 * scale, 278.75 * scale, 262.4375 * scale);
  ctx.bezierCurveTo(271.75 * scale, 255.4375 * scale, 274.75 * scale, 250.4375 * scale, 277.75 * scale, 247.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(310.75 * scale, 277.4375 * scale);
  ctx.bezierCurveTo(319.75 * scale, 280.4375 * scale, 322.75 * scale, 283.4375 * scale, 321.75 * scale, 289.4375 * scale);
  ctx.bezierCurveTo(319.75 * scale, 295.4375 * scale, 313.75 * scale, 291.4375 * scale, 308.75 * scale, 288.4375 * scale);
  ctx.bezierCurveTo(301.75 * scale, 281.4375 * scale, 306.75 * scale, 277.4375 * scale, 309.75 * scale, 277.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(217.75 * scale, 257.4375 * scale);
  ctx.bezierCurveTo(227.75 * scale, 269.4375 * scale, 220.75 * scale, 281.4375 * scale, 212.75 * scale, 280.4375 * scale);
  ctx.bezierCurveTo(206.75 * scale, 279.4375 * scale, 206.75 * scale, 269.4375 * scale, 204.75 * scale, 260.4375 * scale);
  ctx.bezierCurveTo(204.75 * scale, 254.4375 * scale, 211.75 * scale, 253.4375 * scale, 216.75 * scale, 256.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(211.75 * scale, 289.4375 * scale);
  ctx.bezierCurveTo(219.75 * scale, 292.4375 * scale, 213.75 * scale, 306.4375 * scale, 206.75 * scale, 307.4375 * scale);
  ctx.bezierCurveTo(199.75 * scale, 303.4375 * scale, 209.75 * scale, 287.4375 * scale, 210.75 * scale, 289.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(171.75 * scale, 256.4375 * scale);
  ctx.bezierCurveTo(162.75 * scale, 273.4375 * scale, 166.75 * scale, 278.4375 * scale, 175.75 * scale, 280.4375 * scale);
  ctx.bezierCurveTo(183.75 * scale, 278.4375 * scale, 185.75 * scale, 257.4375 * scale, 182.75 * scale, 255.4375 * scale);
  ctx.bezierCurveTo(176.75 * scale, 251.4375 * scale, 172.75 * scale, 253.4375 * scale, 172.75 * scale, 256.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(175.75 * scale, 289.9375 * scale);
  ctx.bezierCurveTo(183.75 * scale, 287.9375 * scale, 186.75 * scale, 301.9375 * scale, 182.75 * scale, 305.9375 * scale);
  ctx.bezierCurveTo(176.75 * scale, 307.9375 * scale, 171.75 * scale, 292.9375 * scale, 174.75 * scale, 290.9375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(205.75 * scale, 314.4375 * scale);
  ctx.bezierCurveTo(209.75 * scale, 316.4375 * scale, 210.75 * scale, 320.4375 * scale, 206.75 * scale, 323.4375 * scale);
  ctx.bezierCurveTo(201.75 * scale, 324.4375 * scale, 201.75 * scale, 314.4375 * scale, 204.75 * scale, 314.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(186.75 * scale, 313.4375 * scale);
  ctx.bezierCurveTo(181.75 * scale, 315.4375 * scale, 180.75 * scale, 321.4375 * scale, 185.75 * scale, 326.4375 * scale);
  ctx.bezierCurveTo(190.75 * scale, 327.4375 * scale, 190.75 * scale, 313.4375 * scale, 187.75 * scale, 314.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(103.75 * scale, 244.4375 * scale);
  ctx.bezierCurveTo(96.75 * scale, 239.4375 * scale, 83.75 * scale, 240.4375 * scale, 81.75 * scale, 255.4375 * scale);
  ctx.bezierCurveTo(80.75 * scale, 264.4375 * scale, 89.75 * scale, 269.4375 * scale, 99.75 * scale, 260.4375 * scale);
  ctx.bezierCurveTo(106.75 * scale, 254.4375 * scale, 106.75 * scale, 250.4375 * scale, 104.75 * scale, 245.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(86.75 * scale, 182.4375 * scale);
  ctx.bezierCurveTo(82.75 * scale, 170.4375 * scale, 66.75 * scale, 169.4375 * scale, 61.75 * scale, 181.4375 * scale);
  ctx.bezierCurveTo(58.75 * scale, 187.4375 * scale, 68.75 * scale, 194.4375 * scale, 75.75 * scale, 192.4375 * scale);
  ctx.bezierCurveTo(83.75 * scale, 192.4375 * scale, 86.75 * scale, 187.4375 * scale, 86.75 * scale, 183.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44.75 * scale, 152.4375 * scale);
  ctx.bezierCurveTo(55.75 * scale, 159.4375 * scale, 54.75 * scale, 170.4375 * scale, 46.75 * scale, 171.4375 * scale);
  ctx.bezierCurveTo(39.75 * scale, 170.4375 * scale, 34.75 * scale, 151.4375 * scale, 43.75 * scale, 152.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31.75 * scale, 130.4375 * scale);
  ctx.bezierCurveTo(35.75 * scale, 132.4375 * scale, 35.75 * scale, 131.4375 * scale, 37.75 * scale, 137.4375 * scale);
  ctx.bezierCurveTo(36.75 * scale, 144.4375 * scale, 36.75 * scale, 145.4375 * scale, 33.75 * scale, 144.4375 * scale);
  ctx.bezierCurveTo(26.75 * scale, 137.4375 * scale, 29.75 * scale, 131.4375 * scale, 31.75 * scale, 130.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(69.75 * scale, 274.4375 * scale);
  ctx.bezierCurveTo(62.75 * scale, 272.4375 * scale, 59.75 * scale, 277.4375 * scale, 57.75 * scale, 284.4375 * scale);
  ctx.bezierCurveTo(56.75 * scale, 290.4375 * scale, 63.75 * scale, 289.4375 * scale, 71.75 * scale, 282.4375 * scale);
  ctx.bezierCurveTo(75.75 * scale, 277.4375 * scale, 72.75 * scale, 275.4375 * scale, 69.75 * scale, 274.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(165.75 * scale, 95.4375 * scale);
  ctx.bezierCurveTo(177.75 * scale, 97.4375 * scale, 182.75 * scale, 115.4375 * scale, 173.75 * scale, 121.4375 * scale);
  ctx.bezierCurveTo(164.75 * scale, 126.4375 * scale, 149.75 * scale, 102.4375 * scale, 164.75 * scale, 96.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(216.75 * scale, 94.4375 * scale);
  ctx.bezierCurveTo(227.75 * scale, 99.4375 * scale, 223.75 * scale, 122.4375 * scale, 210.75 * scale, 119.4375 * scale);
  ctx.bezierCurveTo(203.75 * scale, 115.4375 * scale, 207.75 * scale, 93.4375 * scale, 216.75 * scale, 94.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(211.75 * scale, 68.4375 * scale);
  ctx.bezierCurveTo(218.75 * scale, 69.4375 * scale, 220.75 * scale, 77.4375 * scale, 216.75 * scale, 83.4375 * scale);
  ctx.bezierCurveTo(208.75 * scale, 89.4375 * scale, 205.75 * scale, 68.4375 * scale, 210.75 * scale, 68.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(169.75 * scale, 71.4375 * scale);
  ctx.bezierCurveTo(162.75 * scale, 72.4375 * scale, 159.75 * scale, 83.4375 * scale, 167.75 * scale, 88.4375 * scale);
  ctx.bezierCurveTo(174.75 * scale, 90.4375 * scale, 174.75 * scale, 72.4375 * scale, 170.75 * scale, 71.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(193.75 * scale, 160.4375 * scale);
  ctx.bezierCurveTo(215.75 * scale, 168.4375 * scale, 224.75 * scale, 180.4375 * scale, 229.75 * scale, 193.4375 * scale);
  ctx.bezierCurveTo(223.75 * scale, 211.4375 * scale, 205.75 * scale, 225.4375 * scale, 193.75 * scale, 229.4375 * scale);
  ctx.bezierCurveTo(167.75 * scale, 217.4375 * scale, 161.75 * scale, 205.4375 * scale, 156.75 * scale, 192.4375 * scale);
  ctx.bezierCurveTo(164.75 * scale, 175.4375 * scale, 176.75 * scale, 166.4375 * scale, 192.75 * scale, 160.4375 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[9], 3 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(189.1999969482422 * scale, 182.61249923706055 * scale);
  ctx.bezierCurveTo(190.1999969482422 * scale, 184.11249923706055 * scale, 190.1999969482422 * scale, 184.11249923706055 * scale, 191.1999969482422 * scale, 185.61249923706055 * scale);
  ctx.bezierCurveTo(192.1999969482422 * scale, 180.61249923706055 * scale, 192.1999969482422 * scale, 180.61249923706055 * scale, 193.1999969482422 * scale, 175.61249923706055 * scale);
  ctx.bezierCurveTo(195.6999969482422 * scale, 177.11249923706055 * scale, 195.6999969482422 * scale, 177.11249923706055 * scale, 198.1999969482422 * scale, 178.61249923706055 * scale);
  ctx.bezierCurveTo(198.1999969482422 * scale, 181.11249923706055 * scale, 198.1999969482422 * scale, 181.11249923706055 * scale, 198.1999969482422 * scale, 183.61249923706055 * scale);
  ctx.bezierCurveTo(201.6999969482422 * scale, 181.11249923706055 * scale, 201.6999969482422 * scale, 181.11249923706055 * scale, 205.1999969482422 * scale, 178.61249923706055 * scale);
  ctx.bezierCurveTo(206.6999969482422 * scale, 180.61249923706055 * scale, 206.6999969482422 * scale, 180.61249923706055 * scale, 208.1999969482422 * scale, 182.61249923706055 * scale);
  ctx.bezierCurveTo(206.1999969482422 * scale, 185.61249923706055 * scale, 206.1999969482422 * scale, 185.61249923706055 * scale, 204.1999969482422 * scale, 188.61249923706055 * scale);
  ctx.bezierCurveTo(208.6999969482422 * scale, 188.61249923706055 * scale, 208.6999969482422 * scale, 188.61249923706055 * scale, 213.1999969482422 * scale, 188.61249923706055 * scale);
  ctx.bezierCurveTo(213.1999969482422 * scale, 191.11249923706055 * scale, 213.1999969482422 * scale, 191.11249923706055 * scale, 213.1999969482422 * scale, 193.61249923706055 * scale);
  ctx.bezierCurveTo(209.6999969482422 * scale, 194.61249923706055 * scale, 209.6999969482422 * scale, 194.61249923706055 * scale, 206.1999969482422 * scale, 195.61249923706055 * scale);
  ctx.bezierCurveTo(210.1999969482422 * scale, 198.61249923706055 * scale, 210.1999969482422 * scale, 198.61249923706055 * scale, 214.1999969482422 * scale, 201.61249923706055 * scale);
  ctx.bezierCurveTo(212.1999969482422 * scale, 203.61249923706055 * scale, 212.1999969482422 * scale, 203.61249923706055 * scale, 210.1999969482422 * scale, 205.61249923706055 * scale);
  ctx.bezierCurveTo(207.1999969482422 * scale, 204.11249923706055 * scale, 207.1999969482422 * scale, 204.11249923706055 * scale, 204.1999969482422 * scale, 202.61249923706055 * scale);
  ctx.bezierCurveTo(205.6999969482422 * scale, 207.61249923706055 * scale, 205.6999969482422 * scale, 207.61249923706055 * scale, 207.1999969482422 * scale, 212.61249923706055 * scale);
  ctx.bezierCurveTo(204.6999969482422 * scale, 213.61249923706055 * scale, 204.6999969482422 * scale, 213.61249923706055 * scale, 202.1999969482422 * scale, 214.61249923706055 * scale);
  ctx.bezierCurveTo(200.1999969482422 * scale, 210.61249923706055 * scale, 200.1999969482422 * scale, 210.61249923706055 * scale, 198.1999969482422 * scale, 206.61249923706055 * scale);
  ctx.bezierCurveTo(196.6999969482422 * scale, 211.61249923706055 * scale, 196.6999969482422 * scale, 211.61249923706055 * scale, 195.1999969482422 * scale, 216.61249923706055 * scale);
  ctx.bezierCurveTo(192.6999969482422 * scale, 216.11249923706055 * scale, 192.6999969482422 * scale, 216.11249923706055 * scale, 190.1999969482422 * scale, 215.61249923706055 * scale);
  ctx.bezierCurveTo(190.1999969482422 * scale, 211.61249923706055 * scale, 190.1999969482422 * scale, 211.61249923706055 * scale, 190.1999969482422 * scale, 207.61249923706055 * scale);
  ctx.bezierCurveTo(186.1999969482422 * scale, 210.61249923706055 * scale, 186.1999969482422 * scale, 210.61249923706055 * scale, 182.1999969482422 * scale, 213.61249923706055 * scale);
  ctx.bezierCurveTo(181.1999969482422 * scale, 211.11249923706055 * scale, 181.1999969482422 * scale, 211.11249923706055 * scale, 180.1999969482422 * scale, 208.61249923706055 * scale);
  ctx.bezierCurveTo(183.1999969482422 * scale, 205.61249923706055 * scale, 183.1999969482422 * scale, 205.61249923706055 * scale, 186.1999969482422 * scale, 202.61249923706055 * scale);
  ctx.bezierCurveTo(180.6999969482422 * scale, 203.11249923706055 * scale, 180.6999969482422 * scale, 203.11249923706055 * scale, 175.1999969482422 * scale, 203.61249923706055 * scale);
  ctx.bezierCurveTo(174.6999969482422 * scale, 200.11249923706055 * scale, 174.6999969482422 * scale, 200.11249923706055 * scale, 174.1999969482422 * scale, 196.61249923706055 * scale);
  ctx.bezierCurveTo(177.1999969482422 * scale, 195.61249923706055 * scale, 177.1999969482422 * scale, 195.61249923706055 * scale, 180.1999969482422 * scale, 194.61249923706055 * scale);
  ctx.bezierCurveTo(177.1999969482422 * scale, 191.61249923706055 * scale, 177.1999969482422 * scale, 191.61249923706055 * scale, 174.1999969482422 * scale, 188.61249923706055 * scale);
  ctx.bezierCurveTo(175.6999969482422 * scale, 187.11249923706055 * scale, 175.6999969482422 * scale, 187.11249923706055 * scale, 177.1999969482422 * scale, 185.61249923706055 * scale);
  ctx.bezierCurveTo(180.6999969482422 * scale, 187.11249923706055 * scale, 180.6999969482422 * scale, 187.11249923706055 * scale, 184.1999969482422 * scale, 188.61249923706055 * scale);
  ctx.bezierCurveTo(182.6999969482422 * scale, 183.61249923706055 * scale, 182.6999969482422 * scale, 183.61249923706055 * scale, 181.1999969482422 * scale, 178.61249923706055 * scale);
  ctx.bezierCurveTo(183.1999969482422 * scale, 177.11249923706055 * scale, 183.1999969482422 * scale, 177.11249923706055 * scale, 185.1999969482422 * scale, 175.61249923706055 * scale);
  ctx.closePath();
  fill_path(ctx, color[10]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(185.1999969482422 * scale, 173.8125 * scale);
  ctx.bezierCurveTo(187.1999969482422 * scale, 179.3125 * scale, 187.1999969482422 * scale, 179.3125 * scale, 189.1999969482422 * scale, 184.8125 * scale);
  ctx.bezierCurveTo(184.1999969482422 * scale, 181.8125 * scale, 184.1999969482422 * scale, 181.8125 * scale, 179.1999969482422 * scale, 178.8125 * scale);
  ctx.bezierCurveTo(181.1999969482422 * scale, 175.8125 * scale, 182.1999969482422 * scale, 174.8125 * scale, 185.1999969482422 * scale, 173.8125 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(192.1999969482422 * scale, 173.61249542236328 * scale);
  ctx.bezierCurveTo(194.1999969482422 * scale, 172.61249542236328 * scale, 196.1999969482422 * scale, 171.61249542236328 * scale, 199.1999969482422 * scale, 173.61249542236328 * scale);
  ctx.bezierCurveTo(197.6999969482422 * scale, 179.61249542236328 * scale, 197.6999969482422 * scale, 179.61249542236328 * scale, 196.1999969482422 * scale, 185.61249542236328 * scale);
  ctx.bezierCurveTo(194.1999969482422 * scale, 179.61249542236328 * scale, 194.1999969482422 * scale, 179.61249542236328 * scale, 192.1999969482422 * scale, 173.61249542236328 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(205.1999969482422 * scale, 176.2125015258789 * scale);
  ctx.bezierCurveTo(210.1999969482422 * scale, 178.2125015258789 * scale, 211.1999969482422 * scale, 179.2125015258789 * scale, 211.1999969482422 * scale, 181.2125015258789 * scale);
  ctx.bezierCurveTo(206.6999969482422 * scale, 184.7125015258789 * scale, 206.6999969482422 * scale, 184.7125015258789 * scale, 202.1999969482422 * scale, 188.2125015258789 * scale);
  ctx.bezierCurveTo(203.6999969482422 * scale, 182.2125015258789 * scale, 203.6999969482422 * scale, 182.2125015258789 * scale, 205.1999969482422 * scale, 176.2125015258789 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.1999969482422 * scale, 187.21249985694885 * scale);
  ctx.bezierCurveTo(216.1999969482422 * scale, 191.21249985694885 * scale, 216.1999969482422 * scale, 192.21249985694885 * scale, 215.1999969482422 * scale, 195.21249985694885 * scale);
  ctx.bezierCurveTo(206.1999969482422 * scale, 194.21249985694885 * scale, 205.1999969482422 * scale, 194.21249985694885 * scale, 205.1999969482422 * scale, 194.21249985694885 * scale);
  ctx.bezierCurveTo(209.6999969482422 * scale, 190.71249985694885 * scale, 209.6999969482422 * scale, 190.71249985694885 * scale, 214.1999969482422 * scale, 187.21249985694885 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(204.1999969482422 * scale, 201.8125 * scale);
  ctx.bezierCurveTo(209.1999969482422 * scale, 201.3125 * scale, 209.1999969482422 * scale, 201.3125 * scale, 214.1999969482422 * scale, 200.8125 * scale);
  ctx.bezierCurveTo(215.1999969482422 * scale, 204.8125 * scale, 214.1999969482422 * scale, 205.8125 * scale, 213.1999969482422 * scale, 208.8125 * scale);
  ctx.bezierCurveTo(208.6999969482422 * scale, 205.3125 * scale, 208.6999969482422 * scale, 205.3125 * scale, 204.1999969482422 * scale, 201.8125 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(199.1999969482422 * scale, 205.61249923706055 * scale);
  ctx.bezierCurveTo(207.1999969482422 * scale, 212.61249923706055 * scale, 203.6999969482422 * scale, 209.11249923706055 * scale, 208.1999969482422 * scale, 212.61249923706055 * scale);
  ctx.bezierCurveTo(206.1999969482422 * scale, 215.61249923706055 * scale, 204.1999969482422 * scale, 217.61249923706055 * scale, 203.1999969482422 * scale, 216.61249923706055 * scale);
  ctx.bezierCurveTo(201.1999969482422 * scale, 211.11249923706055 * scale, 201.1999969482422 * scale, 211.11249923706055 * scale, 199.1999969482422 * scale, 205.61249923706055 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(191.1999969482422 * scale, 207.01250076293945 * scale);
  ctx.bezierCurveTo(194.1999969482422 * scale, 213.01250076293945 * scale, 194.1999969482422 * scale, 216.01250076293945 * scale, 196.1999969482422 * scale, 218.01250076293945 * scale);
  ctx.bezierCurveTo(193.1999969482422 * scale, 220.01250076293945 * scale, 190.1999969482422 * scale, 220.01250076293945 * scale, 188.1999969482422 * scale, 218.01250076293945 * scale);
  ctx.bezierCurveTo(189.6999969482422 * scale, 213.01250076293945 * scale, 189.6999969482422 * scale, 213.01250076293945 * scale, 191.1999969482422 * scale, 208.01250076293945 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(186.1999969482422 * scale, 203.21249961853027 * scale);
  ctx.bezierCurveTo(184.1999969482422 * scale, 209.21249961853027 * scale, 184.1999969482422 * scale, 209.21249961853027 * scale, 182.1999969482422 * scale, 215.21249961853027 * scale);
  ctx.bezierCurveTo(177.1999969482422 * scale, 212.21249961853027 * scale, 176.1999969482422 * scale, 211.21249961853027 * scale, 177.1999969482422 * scale, 210.21249961853027 * scale);
  ctx.bezierCurveTo(181.6999969482422 * scale, 206.71249961853027 * scale, 181.6999969482422 * scale, 206.71249961853027 * scale, 186.1999969482422 * scale, 203.21249961853027 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(183.1999969482422 * scale, 196.8125 * scale);
  ctx.bezierCurveTo(177.1999969482422 * scale, 196.3125 * scale, 177.1999969482422 * scale, 196.3125 * scale, 171.1999969482422 * scale, 195.8125 * scale);
  ctx.bezierCurveTo(171.1999969482422 * scale, 199.8125 * scale, 171.1999969482422 * scale, 202.8125 * scale, 174.1999969482422 * scale, 204.8125 * scale);
  ctx.bezierCurveTo(178.6999969482422 * scale, 200.8125 * scale, 178.6999969482422 * scale, 200.8125 * scale, 183.1999969482422 * scale, 196.8125 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(185.1999969482422 * scale, 190.21249771118164 * scale);
  ctx.bezierCurveTo(179.6999969482422 * scale, 186.71249771118164 * scale, 179.6999969482422 * scale, 186.71249771118164 * scale, 174.1999969482422 * scale, 183.21249771118164 * scale);
  ctx.bezierCurveTo(172.1999969482422 * scale, 186.21249771118164 * scale, 172.1999969482422 * scale, 187.21249771118164 * scale, 172.1999969482422 * scale, 190.21249771118164 * scale);
  ctx.bezierCurveTo(178.1999969482422 * scale, 190.21249771118164 * scale, 178.1999969482422 * scale, 190.21249771118164 * scale, 184.1999969482422 * scale, 190.21249771118164 * scale);
  ctx.closePath();
  fill_path(ctx, color[11]);
  circle(ctx, 126.19999694824219 * scale, 169.8125 * scale, 8.94427190999916 * scale);
  fill_path(ctx, color[12]);
  circle(ctx, 123.19999694824219 * scale, 164.8125 * scale, 2.8284271247461903 * scale);
  fill_path(ctx, color[13]);
  circle(ctx, 253.1999969482422 * scale, 169.8125 * scale, 8.94427190999916 * scale);
  fill_path(ctx, color[12]);
  circle(ctx, 255.1999969482422 * scale, 164.8125 * scale, 2.23606797749979 * scale);
  fill_path(ctx, color[13]);
  return can;
};

function create_bread(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.globalAlpha = 1;
  ctx.translate(20 * scale, 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36.5 * scale, 278.0625 * scale);
  ctx.bezierCurveTo(67.5 * scale, 316.0625 * scale, 134.5 * scale, 334.0625 * scale, 199.5 * scale, 319.0625 * scale);
  ctx.bezierCurveTo(254.5 * scale, 304.0625 * scale, 346.5 * scale, 270.0625 * scale, 348.5 * scale, 237.0625 * scale);
  ctx.bezierCurveTo(359.5 * scale, 206.0625 * scale, 318.5 * scale, 129.0625 * scale, 262.5 * scale, 122.0625 * scale);
  ctx.bezierCurveTo(213.5 * scale, 115.0625 * scale, 166.5 * scale, 133.0625 * scale, 104.5 * scale, 166.0625 * scale);
  ctx.bezierCurveTo(54.5 * scale, 194.0625 * scale, 23.5 * scale, 241.0625 * scale, 36.5 * scale, 277.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(-20 * scale, -20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36.5 * scale, 278.0625 * scale);
  ctx.bezierCurveTo(67.5 * scale, 316.0625 * scale, 134.5 * scale, 334.0625 * scale, 199.5 * scale, 319.0625 * scale);
  ctx.bezierCurveTo(254.5 * scale, 304.0625 * scale, 346.5 * scale, 270.0625 * scale, 348.5 * scale, 237.0625 * scale);
  ctx.bezierCurveTo(359.5 * scale, 206.0625 * scale, 318.5 * scale, 129.0625 * scale, 262.5 * scale, 122.0625 * scale);
  ctx.bezierCurveTo(213.5 * scale, 115.0625 * scale, 166.5 * scale, 133.0625 * scale, 104.5 * scale, 166.0625 * scale);
  ctx.bezierCurveTo(54.5 * scale, 194.0625 * scale, 23.5 * scale, 241.0625 * scale, 36.5 * scale, 277.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 19 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 124.0625 * scale);
  ctx.bezierCurveTo(242.5 * scale, 125.0625 * scale, 272.5 * scale, 159.0625 * scale, 283.5 * scale, 184.0625 * scale);
  ctx.bezierCurveTo(277.5 * scale, 161.0625 * scale, 233.5 * scale, 128.0625 * scale, 219.5 * scale, 122.0625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 19 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(157.5 * scale, 145.0625 * scale);
  ctx.bezierCurveTo(176.5 * scale, 148.0625 * scale, 205.5 * scale, 176.0625 * scale, 212.5 * scale, 197.0625 * scale);
  ctx.bezierCurveTo(205.5 * scale, 178.0625 * scale, 177.5 * scale, 152.0625 * scale, 156.5 * scale, 142.0625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 19 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(103.5 * scale, 169.0625 * scale);
  ctx.bezierCurveTo(160.5 * scale, 166.0625 * scale, 228.5 * scale, 312.0625 * scale, 162.5 * scale, 323.0625 * scale);
  ctx.bezierCurveTo(128.5 * scale, 330.0625 * scale, 45.5 * scale, 312.0625 * scale, 34.5 * scale, 268.0625 * scale);
  ctx.bezierCurveTo(30.5 * scale, 238.0625 * scale, 44.5 * scale, 222.0625 * scale, 52.5 * scale, 211.0625 * scale);
  ctx.bezierCurveTo(82.5 * scale, 174.0625 * scale, 104.5 * scale, 166.0625 * scale, 119.5 * scale, 172.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 19 * scale);
  circle(ctx, 92.5 * scale, 216.0625 * scale, 13.892443989449804 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 68.5 * scale, 227.0625 * scale, 8.06225774829855 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 85.5 * scale, 240.0625 * scale, 6.708203932499369 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 147.5 * scale, 294.0625 * scale, 17.46424919657298 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 166.5 * scale, 273.0625 * scale, 6.708203932499369 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 114.5 * scale, 294.0625 * scale, 12.36931687685298 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 123.5 * scale, 220.0625 * scale, 5.830951894845301 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 114.5 * scale, 259.0625 * scale, 4.123105625617661 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 63.5 * scale, 265.0625 * scale, 5.385164807134504 * scale);
  fill_path(ctx, color[4]);
  circle(ctx, 148.5 * scale, 235.0625 * scale, 4.47213595499958 * scale);
  fill_path(ctx, color[4]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(194.5 * scale, 313.0625 * scale);
  ctx.bezierCurveTo(222.5 * scale, 306.0625 * scale, 319.5 * scale, 271.0625 * scale, 337.5 * scale, 241.0625 * scale);
  ctx.bezierCurveTo(274.5 * scale, 270.0625 * scale, 216.5 * scale, 288.0625 * scale, 199.5 * scale, 287.0625 * scale);
  ctx.bezierCurveTo(198.5 * scale, 302.0625 * scale, 195.5 * scale, 311.0625 * scale, 193.5 * scale, 312.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  return can;
};

function create_hurt_kraken(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 376 * scale;
  can.height = 371 * scale;
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(191.633544921875 * scale, 123.98580932617188 * scale);
  ctx.bezierCurveTo(215.633544921875 * scale, 85.98580932617188 * scale, 187.633544921875 * scale, 71.98580932617188 * scale, 202.633544921875 * scale, 19.985809326171875 * scale);
  ctx.bezierCurveTo(231.633544921875 * scale, 68.98580932617188 * scale, 253.633544921875 * scale, 71.98580932617188 * scale, 256.633544921875 * scale, 93.98580932617188 * scale);
  ctx.bezierCurveTo(306.633544921875 * scale, 64.98580932617188 * scale, 319.633544921875 * scale, 61.985809326171875 * scale, 350.633544921875 * scale, 58.985809326171875 * scale);
  ctx.bezierCurveTo(280.633544921875 * scale, 86.98580932617188 * scale, 281.633544921875 * scale, 106.98580932617188 * scale, 268.633544921875 * scale, 130.98580932617188 * scale);
  ctx.bezierCurveTo(295.633544921875 * scale, 158.98580932617188 * scale, 328.633544921875 * scale, 155.98580932617188 * scale, 353.633544921875 * scale, 90.98580932617188 * scale);
  ctx.bezierCurveTo(371.633544921875 * scale, 158.98580932617188 * scale, 337.633544921875 * scale, 210.98580932617188 * scale, 286.633544921875 * scale, 209.98580932617188 * scale);
  ctx.bezierCurveTo(323.633544921875 * scale, 230.98580932617188 * scale, 317.633544921875 * scale, 274.9858093261719 * scale, 356.633544921875 * scale, 305.9858093261719 * scale);
  ctx.bezierCurveTo(288.633544921875 * scale, 297.9858093261719 * scale, 288.633544921875 * scale, 265.9858093261719 * scale, 275.633544921875 * scale, 266.9858093261719 * scale);
  ctx.bezierCurveTo(280.633544921875 * scale, 294.9858093261719 * scale, 315.633544921875 * scale, 306.9858093261719 * scale, 336.633544921875 * scale, 316.9858093261719 * scale);
  ctx.bezierCurveTo(295.633544921875 * scale, 318.9858093261719 * scale, 264.633544921875 * scale, 302.9858093261719 * scale, 254.633544921875 * scale, 289.9858093261719 * scale);
  ctx.bezierCurveTo(252.633544921875 * scale, 301.9858093261719 * scale, 224.633544921875 * scale, 315.9858093261719 * scale, 201.633544921875 * scale, 356.9858093261719 * scale);
  ctx.bezierCurveTo(195.633544921875 * scale, 313.9858093261719 * scale, 195.633544921875 * scale, 308.9858093261719 * scale, 196.633544921875 * scale, 307.9858093261719 * scale);
  ctx.bezierCurveTo(197.633544921875 * scale, 289.9858093261719 * scale, 207.633544921875 * scale, 283.9858093261719 * scale, 195.633544921875 * scale, 258.9858093261719 * scale);
  ctx.bezierCurveTo(182.633544921875 * scale, 282.9858093261719 * scale, 190.633544921875 * scale, 287.9858093261719 * scale, 193.633544921875 * scale, 297.9858093261719 * scale);
  ctx.bezierCurveTo(195.633544921875 * scale, 306.9858093261719 * scale, 191.633544921875 * scale, 334.9858093261719 * scale, 187.633544921875 * scale, 354.9858093261719 * scale);
  ctx.bezierCurveTo(165.633544921875 * scale, 320.9858093261719 * scale, 138.633544921875 * scale, 307.9858093261719 * scale, 135.633544921875 * scale, 288.9858093261719 * scale);
  ctx.bezierCurveTo(110.633544921875 * scale, 318.9858093261719 * scale, 68.633544921875 * scale, 323.9858093261719 * scale, 49.633544921875 * scale, 320.9858093261719 * scale);
  ctx.bezierCurveTo(88.633544921875 * scale, 308.9858093261719 * scale, 108.633544921875 * scale, 284.9858093261719 * scale, 118.633544921875 * scale, 258.9858093261719 * scale);
  ctx.bezierCurveTo(86.633544921875 * scale, 264.9858093261719 * scale, 75.633544921875 * scale, 310.9858093261719 * scale, 19.633544921875 * scale, 304.9858093261719 * scale);
  ctx.bezierCurveTo(54.633544921875 * scale, 276.9858093261719 * scale, 59.633544921875 * scale, 214.98580932617188 * scale, 105.633544921875 * scale, 205.98580932617188 * scale);
  ctx.bezierCurveTo(14.633544921875 * scale, 201.98580932617188 * scale, 24.633544921875 * scale, 141.98580932617188 * scale, 25.633544921875 * scale, 82.98580932617188 * scale);
  ctx.bezierCurveTo(49.633544921875 * scale, 168.98580932617188 * scale, 87.633544921875 * scale, 141.98580932617188 * scale, 112.633544921875 * scale, 123.98580932617188 * scale);
  ctx.bezierCurveTo(95.633544921875 * scale, 75.98580932617188 * scale, 70.633544921875 * scale, 68.98580932617188 * scale, 35.633544921875 * scale, 50.985809326171875 * scale);
  ctx.bezierCurveTo(70.633544921875 * scale, 53.985809326171875 * scale, 102.633544921875 * scale, 65.98580932617188 * scale, 125.633544921875 * scale, 84.98580932617188 * scale);
  ctx.bezierCurveTo(133.633544921875 * scale, 69.98580932617188 * scale, 166.633544921875 * scale, 42.985809326171875 * scale, 176.633544921875 * scale, 21.985809326171875 * scale);
  ctx.bezierCurveTo(185.633544921875 * scale, 49.985809326171875 * scale, 168.633544921875 * scale, 95.98580932617188 * scale, 191.633544921875 * scale, 121.98580932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  return can;
};

function create_bread_oven_off(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 440 * scale;
  can.height = 388 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  circle(ctx, 220 * scale, 201 * scale, 170.41713528867922 * scale);
  fill_path(ctx, color[0], color[0], 6 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  circle(ctx, 220 * scale, 201 * scale, 170.41713528867922 * scale);
  fill_path(ctx, color[1], color[2], 6 * scale);
  circle(ctx, 220 * scale, 201 * scale, 130 * scale);
  fill_path(ctx, color[11], color[2], 6 * scale);
  circle(ctx, 222 * scale, 199 * scale, 120.74767078498864 * scale);
  fill_path(ctx, undefined, color[3], 40 * scale);
  circle(ctx, 220 * scale, 200 * scale, 95.44108130150245 * scale);
  fill_path(ctx, undefined, color[2], 15 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  circle(ctx, 63 * scale, 136 * scale, 49.193495504995376 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  circle(ctx, 63 * scale, 136 * scale, 49.193495504995376 * scale);
  fill_path(ctx, color[8], color[2], 4 * scale);
  circle(ctx, 63 * scale, 137 * scale, 25.632011235952593 * scale);
  fill_path(ctx, color[7], color[2], 4 * scale);
  return can;
};

function create_bread_oven(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 440 * scale;
  can.height = 388 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  circle(ctx, 220 * scale, 201 * scale, 170.41713528867922 * scale);
  fill_path(ctx, color[0], color[0], 6 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  circle(ctx, 220 * scale, 201 * scale, 170.41713528867922 * scale);
  fill_path(ctx, color[1], color[2], 6 * scale);
  circle(ctx, 220 * scale, 201 * scale, 130 * scale);
  fill_path(ctx, color[11], color[2], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(218 * scale, 97 * scale);
  ctx.bezierCurveTo(219 * scale, 163 * scale, 201 * scale, 176 * scale, 191 * scale, 175 * scale);
  ctx.bezierCurveTo(176 * scale, 177 * scale, 168 * scale, 167 * scale, 160 * scale, 115 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(224 * scale, 181 * scale);
  ctx.bezierCurveTo(225 * scale, 138 * scale, 246 * scale, 115 * scale, 263 * scale, 137 * scale);
  ctx.bezierCurveTo(282 * scale, 174 * scale, 279 * scale, 217 * scale, 265 * scale, 243 * scale);
  ctx.bezierCurveTo(253 * scale, 264 * scale, 240 * scale, 256 * scale, 233 * scale, 238 * scale);
  ctx.bezierCurveTo(221 * scale, 212 * scale, 225 * scale, 198 * scale, 224 * scale, 184 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(169 * scale, 289 * scale);
  ctx.bezierCurveTo(161 * scale, 234 * scale, 168 * scale, 197 * scale, 187 * scale, 195 * scale);
  ctx.bezierCurveTo(219 * scale, 189 * scale, 222 * scale, 256 * scale, 216 * scale, 307 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(143 * scale, 146 * scale);
  ctx.bezierCurveTo(161 * scale, 199 * scale, 151 * scale, 245 * scale, 138 * scale, 266 * scale);
  ctx.bezierCurveTo(120.5 * scale, 239.5 * scale, 120.5 * scale, 239.5 * scale, 103 * scale, 213 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(283 * scale, 135 * scale);
  ctx.bezierCurveTo(277 * scale, 176 * scale, 298 * scale, 194 * scale, 315 * scale, 205 * scale);
  ctx.bezierCurveTo(323.5 * scale, 175 * scale, 323.5 * scale, 175 * scale, 332 * scale, 145 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(318 * scale, 223 * scale);
  ctx.bezierCurveTo(290 * scale, 195 * scale, 271 * scale, 256 * scale, 283 * scale, 281 * scale);
  ctx.bezierCurveTo(303.5 * scale, 267 * scale, 303.5 * scale, 267 * scale, 324 * scale, 253 * scale);
  ctx.closePath();
  fill_path(ctx, color[5], color[6], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(142 * scale, 223 * scale);
  ctx.bezierCurveTo(128 * scale, 213 * scale, 123 * scale, 214 * scale, 111 * scale, 223 * scale);
  ctx.closePath();
  fill_path(ctx, color[10], color[10], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(251 * scale, 133 * scale);
  ctx.bezierCurveTo(269 * scale, 188 * scale, 262 * scale, 229 * scale, 251 * scale, 253 * scale);
  ctx.bezierCurveTo(288 * scale, 224 * scale, 273 * scale, 139 * scale, 252 * scale, 133 * scale);
  ctx.closePath();
  fill_path(ctx, color[10], color[10], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(203 * scale, 102 * scale);
  ctx.bezierCurveTo(204 * scale, 136 * scale, 200 * scale, 159 * scale, 189 * scale, 174 * scale);
  ctx.bezierCurveTo(223 * scale, 164 * scale, 219 * scale, 87 * scale, 205 * scale, 83 * scale);
  ctx.closePath();
  fill_path(ctx, color[10], color[10], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(196 * scale, 324 * scale);
  ctx.bezierCurveTo(209 * scale, 239 * scale, 200 * scale, 219 * scale, 192 * scale, 196 * scale);
  ctx.bezierCurveTo(229 * scale, 216 * scale, 219 * scale, 316 * scale, 198 * scale, 325 * scale);
  ctx.closePath();
  fill_path(ctx, color[10], color[10], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(266 * scale, 166 * scale);
  ctx.bezierCurveTo(249 * scale, 154 * scale, 243 * scale, 161 * scale, 233 * scale, 167 * scale);
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(269 * scale, 192 * scale);
  ctx.bezierCurveTo(256 * scale, 183 * scale, 241 * scale, 186 * scale, 233 * scale, 192 * scale);
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(263 * scale, 217 * scale);
  ctx.bezierCurveTo(251 * scale, 211 * scale, 242 * scale, 213 * scale, 236 * scale, 218 * scale);
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(204 * scale, 141 * scale);
  ctx.bezierCurveTo(191 * scale, 131 * scale, 187 * scale, 133 * scale, 176 * scale, 141 * scale);
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(207 * scale, 230 * scale);
  ctx.bezierCurveTo(193 * scale, 222 * scale, 185 * scale, 224 * scale, 177 * scale, 231 * scale);
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(210 * scale, 258 * scale);
  ctx.bezierCurveTo(196 * scale, 247 * scale, 191 * scale, 250 * scale, 177 * scale, 259 * scale);
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(145 * scale, 196 * scale);
  ctx.bezierCurveTo(130 * scale, 186 * scale, 124 * scale, 187 * scale, 114 * scale, 195 * scale);
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(218 * scale, 97 * scale);
  ctx.bezierCurveTo(219 * scale, 163 * scale, 201 * scale, 176 * scale, 191 * scale, 175 * scale);
  ctx.bezierCurveTo(176 * scale, 177 * scale, 168 * scale, 167 * scale, 160 * scale, 115 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(224 * scale, 181 * scale);
  ctx.bezierCurveTo(225 * scale, 138 * scale, 246 * scale, 115 * scale, 263 * scale, 137 * scale);
  ctx.bezierCurveTo(282 * scale, 174 * scale, 279 * scale, 217 * scale, 265 * scale, 243 * scale);
  ctx.bezierCurveTo(253 * scale, 264 * scale, 240 * scale, 256 * scale, 233 * scale, 238 * scale);
  ctx.bezierCurveTo(221 * scale, 212 * scale, 225 * scale, 198 * scale, 224 * scale, 184 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(169 * scale, 289 * scale);
  ctx.bezierCurveTo(161 * scale, 234 * scale, 168 * scale, 197 * scale, 187 * scale, 195 * scale);
  ctx.bezierCurveTo(219 * scale, 189 * scale, 222 * scale, 256 * scale, 216 * scale, 307 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(143 * scale, 146 * scale);
  ctx.bezierCurveTo(161 * scale, 199 * scale, 151 * scale, 245 * scale, 138 * scale, 266 * scale);
  ctx.bezierCurveTo(120.5 * scale, 239.5 * scale, 120.5 * scale, 239.5 * scale, 103 * scale, 213 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(283 * scale, 135 * scale);
  ctx.bezierCurveTo(277 * scale, 176 * scale, 298 * scale, 194 * scale, 315 * scale, 205 * scale);
  ctx.bezierCurveTo(323.5 * scale, 175 * scale, 323.5 * scale, 175 * scale, 332 * scale, 145 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(318 * scale, 223 * scale);
  ctx.bezierCurveTo(290 * scale, 195 * scale, 271 * scale, 256 * scale, 283 * scale, 281 * scale);
  ctx.bezierCurveTo(303.5 * scale, 267 * scale, 303.5 * scale, 267 * scale, 324 * scale, 253 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 6 * scale);
  circle(ctx, 222 * scale, 199 * scale, 120.74767078498864 * scale);
  fill_path(ctx, undefined, color[3], 40 * scale);
  circle(ctx, 220 * scale, 200 * scale, 95.44108130150245 * scale);
  fill_path(ctx, undefined, color[2], 15 * scale);
  circle(ctx, 220 * scale, 201 * scale, 85 * scale);
  fill_path(ctx, undefined, color[4], 10 * scale);
  ctx.globalAlpha = 0.5;
  circle(ctx, 220 * scale, 201 * scale, 82 * scale);
  fill_path(ctx, color[9]);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  circle(ctx, 63 * scale, 136 * scale, 49.193495504995376 * scale);
  fill_path(ctx, color[0], color[0], 4 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  circle(ctx, 63 * scale, 136 * scale, 49.193495504995376 * scale);
  fill_path(ctx, color[8], color[2], 4 * scale);
  circle(ctx, 63 * scale, 137 * scale, 25.632011235952593 * scale);
  fill_path(ctx, color[7], color[2], 4 * scale);
  return can;
};

function create_bread_light_down(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 110 * scale;
  can.height = 110 * scale;
  ctx.globalAlpha = 0.2;
  circle(ctx, 55 * scale, 55 * scale, 55 * scale);
  fill_path(ctx, color[0]);
  return can;
};

function create_bread_light_up(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 110 * scale;
  can.height = 110 * scale;
  ctx.globalAlpha = 0.2;
  circle(ctx, 55 * scale, 55 * scale, 55 * scale);
  fill_path(ctx, color[0]);
  return can;
};

function create_bridge(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 102 * scale;
  can.height = 102 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(3, 3);
  round_rect(ctx, 24 * scale, 26 * scale, 70 * scale, 9 * scale, 10 * scale);
  fill_path(ctx, color[0]);
  round_rect(ctx, 26 * scale, 70 * scale, 70 * scale, 9 * scale, 10 * scale);
  fill_path(ctx, color[0]);
  round_rect(ctx, 5 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
  fill_path(ctx, color[0]);
  round_rect(ctx, 40 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
  fill_path(ctx, color[0]);
  round_rect(ctx, 75 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-3, -3);
  round_rect(ctx, 24 * scale, 26 * scale, 70 * scale, 9 * scale, 10 * scale);
  fill_path(ctx, color[1]);
  round_rect(ctx, 26 * scale, 70 * scale, 70 * scale, 9 * scale, 10 * scale);
  fill_path(ctx, color[1]);
  round_rect(ctx, 5 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
  fill_path(ctx, color[2], color[3], 4 * scale);
  round_rect(ctx, 40 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
  fill_path(ctx, color[2], color[3], 4 * scale);
  round_rect(ctx, 75 * scale, 3 * scale, 22 * scale, 94 * scale, 5 * scale);
  fill_path(ctx, color[2], color[3], 4 * scale);
  return can;
};

function create_well_border(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 496 * scale;
  can.height = 520 * scale;
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  circle(ctx, 247.01138305664062 * scale, 250.13068389892578 * scale, 232.81967270830015 * scale);
  fill_path(ctx, color[1], color[2], 14 * scale);
  ctx.globalCompositeOperation = "destination-out";
  circle(ctx, 247.01138305664062 * scale, 249.3125 * scale, 161.4465855941215 * scale);
  fill_path(ctx, color[0], color[0], 14 * scale);
  ctx.globalCompositeOperation = "source-over";
  return can;
};

function create_well(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 496 * scale;
  can.height = 520 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(19.000030517578125 * scale, 256.67613983154297 * scale);
  ctx.bezierCurveTo(1.000030517578125 * scale, 332.67613983154297 * scale, 23.000030517578125 * scale, 404.67613983154297 * scale, 95.00003051757812 * scale, 463.67613983154297 * scale);
  ctx.bezierCurveTo(128.00003051757812 * scale, 491.67613983154297 * scale, 165.00003051757812 * scale, 507.67613983154297 * scale, 194.00003051757812 * scale, 512.676139831543 * scale);
  ctx.bezierCurveTo(280.0000305175781 * scale, 517.676139831543 * scale, 291.0000305175781 * scale, 516.676139831543 * scale, 342.0000305175781 * scale, 497.67613983154297 * scale);
  ctx.bezierCurveTo(425.0000305175781 * scale, 454.67613983154297 * scale, 469.0000305175781 * scale, 392.67613983154297 * scale, 468.0000305175781 * scale, 300.67613983154297 * scale);
  ctx.bezierCurveTo(408.5000305175781 * scale, 365.17613983154297 * scale, 408.5000305175781 * scale, 365.17613983154297 * scale, 349.0000305175781 * scale, 429.67613983154297 * scale);
  ctx.bezierCurveTo(256.0000305175781 * scale, 473.67613983154297 * scale, 167.00003051757812 * scale, 459.67613983154297 * scale, 78.00003051757812 * scale, 384.67613983154297 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  circle(ctx, 247.01138305664062 * scale, 249.3125 * scale, 161.4465855941215 * scale);
  fill_path(ctx, color[5], undefined, 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(65.00003051757812 * scale, 263.4034118652344 * scale);
  ctx.bezierCurveTo(109.00003051757812 * scale, 160.40341186523438 * scale, 185.00003051757812 * scale, 128.40341186523438 * scale, 222.00003051757812 * scale, 124.40341186523438 * scale);
  ctx.bezierCurveTo(277.0000305175781 * scale, 116.40341186523438 * scale, 339.0000305175781 * scale, 134.40341186523438 * scale, 379.0000305175781 * scale, 195.40341186523438 * scale);
  ctx.bezierCurveTo(409.0000305175781 * scale, 242.40341186523438 * scale, 416.0000305175781 * scale, 256.4034118652344 * scale, 428.0000305175781 * scale, 304.4034118652344 * scale);
  ctx.bezierCurveTo(457.0000305175781 * scale, 203.40341186523438 * scale, 449.0000305175781 * scale, 183.40341186523438 * scale, 438.0000305175781 * scale, 162.40341186523438 * scale);
  ctx.bezierCurveTo(381.0000305175781 * scale, 73.40341186523438 * scale, 360.0000305175781 * scale, 66.40341186523438 * scale, 257.0000305175781 * scale, 46.403411865234375 * scale);
  ctx.bezierCurveTo(191.00003051757812 * scale, 45.403411865234375 * scale, 142.00003051757812 * scale, 65.40341186523438 * scale, 101.00003051757812 * scale, 115.40341186523438 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  var img = create_well_border(scale, color);
  ctx.drawImage(img, 0, 0);
  ctx.translate(0, -10 * scale);
  circle(ctx, 247.01138305664062 * scale, 249.3125 * scale, 161.4465855941215 * scale);
  fill_path(ctx, undefined, color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(325.0113830566406 * scale, 13.767059326171875 * scale);
  ctx.bezierCurveTo(349.5113830566406 * scale, 25.767059326171875 * scale, 349.5113830566406 * scale, 25.767059326171875 * scale, 374.0113830566406 * scale, 37.767059326171875 * scale);
  ctx.bezierCurveTo(384.0113830566406 * scale, 44.767059326171875 * scale, 383.0113830566406 * scale, 50.767059326171875 * scale, 368.0113830566406 * scale, 68.76705932617188 * scale);
  ctx.bezierCurveTo(352.5113830566406 * scale, 91.26705932617188 * scale, 352.5113830566406 * scale, 91.26705932617188 * scale, 337.0113830566406 * scale, 113.76705932617188 * scale);
  ctx.bezierCurveTo(328.0113830566406 * scale, 119.76705932617188 * scale, 328.0113830566406 * scale, 121.76705932617188 * scale, 312.0113830566406 * scale, 112.76705932617188 * scale);
  ctx.bezierCurveTo(303.0113830566406 * scale, 108.26705932617188 * scale, 303.0113830566406 * scale, 108.26705932617188 * scale, 294.0113830566406 * scale, 103.76705932617188 * scale);
  ctx.bezierCurveTo(287.0113830566406 * scale, 99.76705932617188 * scale, 293.0113830566406 * scale, 84.76705932617188 * scale, 297.0113830566406 * scale, 67.76705932617188 * scale);
  ctx.bezierCurveTo(302.0113830566406 * scale, 47.767059326171875 * scale, 302.0113830566406 * scale, 47.767059326171875 * scale, 307.0113830566406 * scale, 27.767059326171875 * scale);
  ctx.bezierCurveTo(310.0113830566406 * scale, 15.767059326171875 * scale, 317.0113830566406 * scale, 12.767059326171875 * scale, 323.0113830566406 * scale, 13.767059326171875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(325.0113830566406 * scale, 13.767059326171875 * scale);
  ctx.bezierCurveTo(349.5113830566406 * scale, 25.767059326171875 * scale, 349.5113830566406 * scale, 25.767059326171875 * scale, 374.0113830566406 * scale, 37.767059326171875 * scale);
  ctx.bezierCurveTo(384.0113830566406 * scale, 44.767059326171875 * scale, 383.0113830566406 * scale, 50.767059326171875 * scale, 368.0113830566406 * scale, 68.76705932617188 * scale);
  ctx.bezierCurveTo(352.5113830566406 * scale, 91.26705932617188 * scale, 352.5113830566406 * scale, 91.26705932617188 * scale, 337.0113830566406 * scale, 113.76705932617188 * scale);
  ctx.bezierCurveTo(328.0113830566406 * scale, 119.76705932617188 * scale, 328.0113830566406 * scale, 121.76705932617188 * scale, 312.0113830566406 * scale, 112.76705932617188 * scale);
  ctx.bezierCurveTo(303.0113830566406 * scale, 108.26705932617188 * scale, 303.0113830566406 * scale, 108.26705932617188 * scale, 294.0113830566406 * scale, 103.76705932617188 * scale);
  ctx.bezierCurveTo(287.0113830566406 * scale, 99.76705932617188 * scale, 293.0113830566406 * scale, 84.76705932617188 * scale, 297.0113830566406 * scale, 67.76705932617188 * scale);
  ctx.bezierCurveTo(302.0113830566406 * scale, 47.767059326171875 * scale, 302.0113830566406 * scale, 47.767059326171875 * scale, 307.0113830566406 * scale, 27.767059326171875 * scale);
  ctx.bezierCurveTo(310.0113830566406 * scale, 15.767059326171875 * scale, 317.0113830566406 * scale, 12.767059326171875 * scale, 323.0113830566406 * scale, 13.767059326171875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(403.0113830566406 * scale, 89.76705932617188 * scale);
  ctx.bezierCurveTo(413.0113830566406 * scale, 76.76705932617188 * scale, 418.0113830566406 * scale, 79.76705932617188 * scale, 428.0113830566406 * scale, 92.76705932617188 * scale);
  ctx.bezierCurveTo(435.0113830566406 * scale, 99.76705932617188 * scale, 435.0113830566406 * scale, 99.76705932617188 * scale, 442.0113830566406 * scale, 106.76705932617188 * scale);
  ctx.bezierCurveTo(450.0113830566406 * scale, 116.76705932617188 * scale, 445.0113830566406 * scale, 119.76705932617188 * scale, 433.0113830566406 * scale, 128.76705932617188 * scale);
  ctx.bezierCurveTo(408.0113830566406 * scale, 146.26705932617188 * scale, 408.0113830566406 * scale, 146.26705932617188 * scale, 383.0113830566406 * scale, 163.76705932617188 * scale);
  ctx.bezierCurveTo(376.0113830566406 * scale, 166.76705932617188 * scale, 377.0113830566406 * scale, 165.76705932617188 * scale, 368.0113830566406 * scale, 156.76705932617188 * scale);
  ctx.bezierCurveTo(359.0113830566406 * scale, 144.76705932617188 * scale, 359.0113830566406 * scale, 142.76705932617188 * scale, 367.0113830566406 * scale, 133.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(403.0113830566406 * scale, 89.76705932617188 * scale);
  ctx.bezierCurveTo(413.0113830566406 * scale, 76.76705932617188 * scale, 418.0113830566406 * scale, 79.76705932617188 * scale, 428.0113830566406 * scale, 92.76705932617188 * scale);
  ctx.bezierCurveTo(435.0113830566406 * scale, 99.76705932617188 * scale, 435.0113830566406 * scale, 99.76705932617188 * scale, 442.0113830566406 * scale, 106.76705932617188 * scale);
  ctx.bezierCurveTo(450.0113830566406 * scale, 116.76705932617188 * scale, 445.0113830566406 * scale, 119.76705932617188 * scale, 433.0113830566406 * scale, 128.76705932617188 * scale);
  ctx.bezierCurveTo(408.0113830566406 * scale, 146.26705932617188 * scale, 408.0113830566406 * scale, 146.26705932617188 * scale, 383.0113830566406 * scale, 163.76705932617188 * scale);
  ctx.bezierCurveTo(376.0113830566406 * scale, 166.76705932617188 * scale, 377.0113830566406 * scale, 165.76705932617188 * scale, 368.0113830566406 * scale, 156.76705932617188 * scale);
  ctx.bezierCurveTo(359.0113830566406 * scale, 144.76705932617188 * scale, 359.0113830566406 * scale, 142.76705932617188 * scale, 367.0113830566406 * scale, 133.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(228.01138305664062 * scale, 1.767059326171875 * scale);
  ctx.bezierCurveTo(246.51138305664062 * scale, 3.267059326171875 * scale, 246.51138305664062 * scale, 3.267059326171875 * scale, 265.0113830566406 * scale, 4.767059326171875 * scale);
  ctx.bezierCurveTo(273.0113830566406 * scale, 5.767059326171875 * scale, 275.0113830566406 * scale, 11.767059326171875 * scale, 270.0113830566406 * scale, 27.767059326171875 * scale);
  ctx.bezierCurveTo(264.0113830566406 * scale, 54.267059326171875 * scale, 264.0113830566406 * scale, 54.267059326171875 * scale, 258.0113830566406 * scale, 80.76705932617188 * scale);
  ctx.bezierCurveTo(256.0113830566406 * scale, 92.76705932617188 * scale, 256.0113830566406 * scale, 94.76705932617188 * scale, 242.01138305664062 * scale, 93.76705932617188 * scale);
  ctx.bezierCurveTo(226.01138305664062 * scale, 95.76705932617188 * scale, 225.01138305664062 * scale, 91.76705932617188 * scale, 225.01138305664062 * scale, 80.76705932617188 * scale);
  ctx.bezierCurveTo(223.51138305664062 * scale, 50.267059326171875 * scale, 223.51138305664062 * scale, 50.267059326171875 * scale, 222.01138305664062 * scale, 19.767059326171875 * scale);
  ctx.bezierCurveTo(219.01138305664062 * scale, 8.767059326171875 * scale, 224.01138305664062 * scale, 4.767059326171875 * scale, 227.01138305664062 * scale, 2.767059326171875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(228.01138305664062 * scale, 1.767059326171875 * scale);
  ctx.bezierCurveTo(246.51138305664062 * scale, 3.267059326171875 * scale, 246.51138305664062 * scale, 3.267059326171875 * scale, 265.0113830566406 * scale, 4.767059326171875 * scale);
  ctx.bezierCurveTo(273.0113830566406 * scale, 5.767059326171875 * scale, 275.0113830566406 * scale, 11.767059326171875 * scale, 270.0113830566406 * scale, 27.767059326171875 * scale);
  ctx.bezierCurveTo(264.0113830566406 * scale, 54.267059326171875 * scale, 264.0113830566406 * scale, 54.267059326171875 * scale, 258.0113830566406 * scale, 80.76705932617188 * scale);
  ctx.bezierCurveTo(256.0113830566406 * scale, 92.76705932617188 * scale, 256.0113830566406 * scale, 94.76705932617188 * scale, 242.01138305664062 * scale, 93.76705932617188 * scale);
  ctx.bezierCurveTo(226.01138305664062 * scale, 95.76705932617188 * scale, 225.01138305664062 * scale, 91.76705932617188 * scale, 225.01138305664062 * scale, 80.76705932617188 * scale);
  ctx.bezierCurveTo(223.51138305664062 * scale, 50.267059326171875 * scale, 223.51138305664062 * scale, 50.267059326171875 * scale, 222.01138305664062 * scale, 19.767059326171875 * scale);
  ctx.bezierCurveTo(219.01138305664062 * scale, 8.767059326171875 * scale, 224.01138305664062 * scale, 4.767059326171875 * scale, 227.01138305664062 * scale, 2.767059326171875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(142.01138305664062 * scale, 25.767059326171875 * scale);
  ctx.bezierCurveTo(158.51138305664062 * scale, 19.767059326171875 * scale, 158.51138305664062 * scale, 19.767059326171875 * scale, 175.01138305664062 * scale, 13.767059326171875 * scale);
  ctx.bezierCurveTo(188.01138305664062 * scale, 11.767059326171875 * scale, 188.01138305664062 * scale, 16.767059326171875 * scale, 191.01138305664062 * scale, 29.767059326171875 * scale);
  ctx.bezierCurveTo(197.01138305664062 * scale, 60.267059326171875 * scale, 197.01138305664062 * scale, 60.267059326171875 * scale, 203.01138305664062 * scale, 90.76705932617188 * scale);
  ctx.bezierCurveTo(206.01138305664062 * scale, 102.76705932617188 * scale, 196.01138305664062 * scale, 99.76705932617188 * scale, 181.01138305664062 * scale, 105.76705932617188 * scale);
  ctx.bezierCurveTo(175.01138305664062 * scale, 108.76705932617188 * scale, 172.01138305664062 * scale, 104.76705932617188 * scale, 164.01138305664062 * scale, 84.76705932617188 * scale);
  ctx.bezierCurveTo(152.51138305664062 * scale, 63.267059326171875 * scale, 152.51138305664062 * scale, 63.267059326171875 * scale, 141.01138305664062 * scale, 41.767059326171875 * scale);
  ctx.bezierCurveTo(138.01138305664062 * scale, 35.767059326171875 * scale, 138.01138305664062 * scale, 29.767059326171875 * scale, 141.01138305664062 * scale, 27.767059326171875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(142.01138305664062 * scale, 25.767059326171875 * scale);
  ctx.bezierCurveTo(158.51138305664062 * scale, 19.767059326171875 * scale, 158.51138305664062 * scale, 19.767059326171875 * scale, 175.01138305664062 * scale, 13.767059326171875 * scale);
  ctx.bezierCurveTo(188.01138305664062 * scale, 11.767059326171875 * scale, 188.01138305664062 * scale, 16.767059326171875 * scale, 191.01138305664062 * scale, 29.767059326171875 * scale);
  ctx.bezierCurveTo(197.01138305664062 * scale, 60.267059326171875 * scale, 197.01138305664062 * scale, 60.267059326171875 * scale, 203.01138305664062 * scale, 90.76705932617188 * scale);
  ctx.bezierCurveTo(206.01138305664062 * scale, 102.76705932617188 * scale, 196.01138305664062 * scale, 99.76705932617188 * scale, 181.01138305664062 * scale, 105.76705932617188 * scale);
  ctx.bezierCurveTo(175.01138305664062 * scale, 108.76705932617188 * scale, 172.01138305664062 * scale, 104.76705932617188 * scale, 164.01138305664062 * scale, 84.76705932617188 * scale);
  ctx.bezierCurveTo(152.51138305664062 * scale, 63.267059326171875 * scale, 152.51138305664062 * scale, 63.267059326171875 * scale, 141.01138305664062 * scale, 41.767059326171875 * scale);
  ctx.bezierCurveTo(138.01138305664062 * scale, 35.767059326171875 * scale, 138.01138305664062 * scale, 29.767059326171875 * scale, 141.01138305664062 * scale, 27.767059326171875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(70.01138305664062 * scale, 76.76705932617188 * scale);
  ctx.bezierCurveTo(83.01138305664062 * scale, 64.26705932617188 * scale, 83.01138305664062 * scale, 64.26705932617188 * scale, 96.01138305664062 * scale, 51.767059326171875 * scale);
  ctx.bezierCurveTo(104.01138305664062 * scale, 44.767059326171875 * scale, 110.01138305664062 * scale, 51.767059326171875 * scale, 119.01138305664062 * scale, 66.76705932617188 * scale);
  ctx.bezierCurveTo(135.01138305664062 * scale, 88.26705932617188 * scale, 135.01138305664062 * scale, 88.26705932617188 * scale, 151.01138305664062 * scale, 109.76705932617188 * scale);
  ctx.bezierCurveTo(157.01138305664062 * scale, 119.76705932617188 * scale, 153.01138305664062 * scale, 122.76705932617188 * scale, 147.01138305664062 * scale, 129.76705932617188 * scale);
  ctx.bezierCurveTo(138.01138305664062 * scale, 140.76705932617188 * scale, 136.01138305664062 * scale, 140.76705932617188 * scale, 122.01138305664062 * scale, 127.76705932617188 * scale);
  ctx.bezierCurveTo(99.51138305664062 * scale, 110.26705932617188 * scale, 99.51138305664062 * scale, 110.26705932617188 * scale, 77.01138305664062 * scale, 92.76705932617188 * scale);
  ctx.bezierCurveTo(66.01138305664062 * scale, 83.76705932617188 * scale, 66.01138305664062 * scale, 82.76705932617188 * scale, 69.01138305664062 * scale, 78.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(70.01138305664062 * scale, 76.76705932617188 * scale);
  ctx.bezierCurveTo(83.01138305664062 * scale, 64.26705932617188 * scale, 83.01138305664062 * scale, 64.26705932617188 * scale, 96.01138305664062 * scale, 51.767059326171875 * scale);
  ctx.bezierCurveTo(104.01138305664062 * scale, 44.767059326171875 * scale, 110.01138305664062 * scale, 51.767059326171875 * scale, 119.01138305664062 * scale, 66.76705932617188 * scale);
  ctx.bezierCurveTo(135.01138305664062 * scale, 88.26705932617188 * scale, 135.01138305664062 * scale, 88.26705932617188 * scale, 151.01138305664062 * scale, 109.76705932617188 * scale);
  ctx.bezierCurveTo(157.01138305664062 * scale, 119.76705932617188 * scale, 153.01138305664062 * scale, 122.76705932617188 * scale, 147.01138305664062 * scale, 129.76705932617188 * scale);
  ctx.bezierCurveTo(138.01138305664062 * scale, 140.76705932617188 * scale, 136.01138305664062 * scale, 140.76705932617188 * scale, 122.01138305664062 * scale, 127.76705932617188 * scale);
  ctx.bezierCurveTo(99.51138305664062 * scale, 110.26705932617188 * scale, 99.51138305664062 * scale, 110.26705932617188 * scale, 77.01138305664062 * scale, 92.76705932617188 * scale);
  ctx.bezierCurveTo(66.01138305664062 * scale, 83.76705932617188 * scale, 66.01138305664062 * scale, 82.76705932617188 * scale, 69.01138305664062 * scale, 78.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(33.011383056640625 * scale, 126.76705932617188 * scale);
  ctx.bezierCurveTo(22.011383056640625 * scale, 149.76705932617188 * scale, 22.011383056640625 * scale, 149.76705932617188 * scale, 11.011383056640625 * scale, 172.76705932617188 * scale);
  ctx.bezierCurveTo(7.011383056640625 * scale, 184.76705932617188 * scale, 11.011383056640625 * scale, 189.76705932617188 * scale, 36.011383056640625 * scale, 195.76705932617188 * scale);
  ctx.bezierCurveTo(61.011383056640625 * scale, 202.26705932617188 * scale, 61.011383056640625 * scale, 202.26705932617188 * scale, 86.01138305664062 * scale, 208.76705932617188 * scale);
  ctx.bezierCurveTo(100.01138305664062 * scale, 214.76705932617188 * scale, 102.01138305664062 * scale, 203.76705932617188 * scale, 109.01138305664062 * scale, 189.76705932617188 * scale);
  ctx.bezierCurveTo(117.01138305664062 * scale, 171.76705932617188 * scale, 116.01138305664062 * scale, 166.76705932617188 * scale, 97.01138305664062 * scale, 156.76705932617188 * scale);
  ctx.bezierCurveTo(74.01138305664062 * scale, 140.76705932617188 * scale, 74.01138305664062 * scale, 140.76705932617188 * scale, 51.011383056640625 * scale, 124.76705932617188 * scale);
  ctx.bezierCurveTo(42.011383056640625 * scale, 118.76705932617188 * scale, 37.011383056640625 * scale, 119.76705932617188 * scale, 33.011383056640625 * scale, 126.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(33.011383056640625 * scale, 126.76705932617188 * scale);
  ctx.bezierCurveTo(22.011383056640625 * scale, 149.76705932617188 * scale, 22.011383056640625 * scale, 149.76705932617188 * scale, 11.011383056640625 * scale, 172.76705932617188 * scale);
  ctx.bezierCurveTo(7.011383056640625 * scale, 184.76705932617188 * scale, 11.011383056640625 * scale, 189.76705932617188 * scale, 36.011383056640625 * scale, 195.76705932617188 * scale);
  ctx.bezierCurveTo(61.011383056640625 * scale, 202.26705932617188 * scale, 61.011383056640625 * scale, 202.26705932617188 * scale, 86.01138305664062 * scale, 208.76705932617188 * scale);
  ctx.bezierCurveTo(100.01138305664062 * scale, 214.76705932617188 * scale, 102.01138305664062 * scale, 203.76705932617188 * scale, 109.01138305664062 * scale, 189.76705932617188 * scale);
  ctx.bezierCurveTo(117.01138305664062 * scale, 171.76705932617188 * scale, 116.01138305664062 * scale, 166.76705932617188 * scale, 97.01138305664062 * scale, 156.76705932617188 * scale);
  ctx.bezierCurveTo(74.01138305664062 * scale, 140.76705932617188 * scale, 74.01138305664062 * scale, 140.76705932617188 * scale, 51.011383056640625 * scale, 124.76705932617188 * scale);
  ctx.bezierCurveTo(42.011383056640625 * scale, 118.76705932617188 * scale, 37.011383056640625 * scale, 119.76705932617188 * scale, 33.011383056640625 * scale, 126.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(13.011383056640625 * scale, 229.76705932617188 * scale);
  ctx.bezierCurveTo(45.511383056640625 * scale, 233.76705932617188 * scale, 45.511383056640625 * scale, 233.76705932617188 * scale, 78.01138305664062 * scale, 237.76705932617188 * scale);
  ctx.bezierCurveTo(92.01138305664062 * scale, 239.76705932617188 * scale, 92.01138305664062 * scale, 246.76705932617188 * scale, 91.01138305664062 * scale, 257.7670593261719 * scale);
  ctx.bezierCurveTo(92.01138305664062 * scale, 275.7670593261719 * scale, 91.01138305664062 * scale, 274.7670593261719 * scale, 68.01138305664062 * scale, 276.7670593261719 * scale);
  ctx.bezierCurveTo(42.511383056640625 * scale, 279.7670593261719 * scale, 42.511383056640625 * scale, 279.7670593261719 * scale, 17.011383056640625 * scale, 282.7670593261719 * scale);
  ctx.bezierCurveTo(2.011383056640625 * scale, 282.7670593261719 * scale, 3.011383056640625 * scale, 276.7670593261719 * scale, 2.011383056640625 * scale, 260.7670593261719 * scale);
  ctx.bezierCurveTo(2.011383056640625 * scale, 231.76705932617188 * scale, 4.011383056640625 * scale, 232.76705932617188 * scale, 11.011383056640625 * scale, 230.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(13.011383056640625 * scale, 229.76705932617188 * scale);
  ctx.bezierCurveTo(45.511383056640625 * scale, 233.76705932617188 * scale, 45.511383056640625 * scale, 233.76705932617188 * scale, 78.01138305664062 * scale, 237.76705932617188 * scale);
  ctx.bezierCurveTo(92.01138305664062 * scale, 239.76705932617188 * scale, 92.01138305664062 * scale, 246.76705932617188 * scale, 91.01138305664062 * scale, 257.7670593261719 * scale);
  ctx.bezierCurveTo(92.01138305664062 * scale, 275.7670593261719 * scale, 91.01138305664062 * scale, 274.7670593261719 * scale, 68.01138305664062 * scale, 276.7670593261719 * scale);
  ctx.bezierCurveTo(42.511383056640625 * scale, 279.7670593261719 * scale, 42.511383056640625 * scale, 279.7670593261719 * scale, 17.011383056640625 * scale, 282.7670593261719 * scale);
  ctx.bezierCurveTo(2.011383056640625 * scale, 282.7670593261719 * scale, 3.011383056640625 * scale, 276.7670593261719 * scale, 2.011383056640625 * scale, 260.7670593261719 * scale);
  ctx.bezierCurveTo(2.011383056640625 * scale, 231.76705932617188 * scale, 4.011383056640625 * scale, 232.76705932617188 * scale, 11.011383056640625 * scale, 230.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(97.01138305664062 * scale, 329.7670593261719 * scale);
  ctx.bezierCurveTo(68.51138305664062 * scale, 343.7670593261719 * scale, 68.51138305664062 * scale, 343.7670593261719 * scale, 40.011383056640625 * scale, 357.7670593261719 * scale);
  ctx.bezierCurveTo(29.011383056640625 * scale, 360.7670593261719 * scale, 27.011383056640625 * scale, 361.7670593261719 * scale, 20.011383056640625 * scale, 346.7670593261719 * scale);
  ctx.bezierCurveTo(16.511383056640625 * scale, 336.2670593261719 * scale, 16.511383056640625 * scale, 336.2670593261719 * scale, 13.011383056640625 * scale, 325.7670593261719 * scale);
  ctx.bezierCurveTo(10.011383056640625 * scale, 307.7670593261719 * scale, 18.011383056640625 * scale, 312.7670593261719 * scale, 34.011383056640625 * scale, 306.7670593261719 * scale);
  ctx.bezierCurveTo(59.511383056640625 * scale, 302.2670593261719 * scale, 59.511383056640625 * scale, 302.2670593261719 * scale, 85.01138305664062 * scale, 297.7670593261719 * scale);
  ctx.bezierCurveTo(97.01138305664062 * scale, 294.7670593261719 * scale, 100.01138305664062 * scale, 297.7670593261719 * scale, 100.01138305664062 * scale, 307.7670593261719 * scale);
  ctx.bezierCurveTo(105.01138305664062 * scale, 326.7670593261719 * scale, 103.01138305664062 * scale, 325.7670593261719 * scale, 97.01138305664062 * scale, 329.7670593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(97.01138305664062 * scale, 329.7670593261719 * scale);
  ctx.bezierCurveTo(68.51138305664062 * scale, 343.7670593261719 * scale, 68.51138305664062 * scale, 343.7670593261719 * scale, 40.011383056640625 * scale, 357.7670593261719 * scale);
  ctx.bezierCurveTo(29.011383056640625 * scale, 360.7670593261719 * scale, 27.011383056640625 * scale, 361.7670593261719 * scale, 20.011383056640625 * scale, 346.7670593261719 * scale);
  ctx.bezierCurveTo(16.511383056640625 * scale, 336.2670593261719 * scale, 16.511383056640625 * scale, 336.2670593261719 * scale, 13.011383056640625 * scale, 325.7670593261719 * scale);
  ctx.bezierCurveTo(10.011383056640625 * scale, 307.7670593261719 * scale, 18.011383056640625 * scale, 312.7670593261719 * scale, 34.011383056640625 * scale, 306.7670593261719 * scale);
  ctx.bezierCurveTo(59.511383056640625 * scale, 302.2670593261719 * scale, 59.511383056640625 * scale, 302.2670593261719 * scale, 85.01138305664062 * scale, 297.7670593261719 * scale);
  ctx.bezierCurveTo(97.01138305664062 * scale, 294.7670593261719 * scale, 100.01138305664062 * scale, 297.7670593261719 * scale, 100.01138305664062 * scale, 307.7670593261719 * scale);
  ctx.bezierCurveTo(105.01138305664062 * scale, 326.7670593261719 * scale, 103.01138305664062 * scale, 325.7670593261719 * scale, 97.01138305664062 * scale, 329.7670593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(394.0113830566406 * scale, 181.76705932617188 * scale);
  ctx.bezierCurveTo(426.5113830566406 * scale, 166.76705932617188 * scale, 426.5113830566406 * scale, 166.76705932617188 * scale, 459.0113830566406 * scale, 151.76705932617188 * scale);
  ctx.bezierCurveTo(469.0113830566406 * scale, 152.76705932617188 * scale, 469.0113830566406 * scale, 155.76705932617188 * scale, 472.0113830566406 * scale, 165.76705932617188 * scale);
  ctx.bezierCurveTo(476.0113830566406 * scale, 177.26705932617188 * scale, 476.0113830566406 * scale, 177.26705932617188 * scale, 480.0113830566406 * scale, 188.76705932617188 * scale);
  ctx.bezierCurveTo(483.0113830566406 * scale, 199.76705932617188 * scale, 480.0113830566406 * scale, 200.76705932617188 * scale, 460.0113830566406 * scale, 205.76705932617188 * scale);
  ctx.bezierCurveTo(433.5113830566406 * scale, 210.26705932617188 * scale, 433.5113830566406 * scale, 210.26705932617188 * scale, 407.0113830566406 * scale, 214.76705932617188 * scale);
  ctx.bezierCurveTo(395.0113830566406 * scale, 218.76705932617188 * scale, 397.0113830566406 * scale, 211.76705932617188 * scale, 393.0113830566406 * scale, 202.76705932617188 * scale);
  ctx.bezierCurveTo(387.0113830566406 * scale, 188.76705932617188 * scale, 387.0113830566406 * scale, 187.76705932617188 * scale, 394.0113830566406 * scale, 181.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(394.0113830566406 * scale, 181.76705932617188 * scale);
  ctx.bezierCurveTo(426.5113830566406 * scale, 166.76705932617188 * scale, 426.5113830566406 * scale, 166.76705932617188 * scale, 459.0113830566406 * scale, 151.76705932617188 * scale);
  ctx.bezierCurveTo(469.0113830566406 * scale, 152.76705932617188 * scale, 469.0113830566406 * scale, 155.76705932617188 * scale, 472.0113830566406 * scale, 165.76705932617188 * scale);
  ctx.bezierCurveTo(476.0113830566406 * scale, 177.26705932617188 * scale, 476.0113830566406 * scale, 177.26705932617188 * scale, 480.0113830566406 * scale, 188.76705932617188 * scale);
  ctx.bezierCurveTo(483.0113830566406 * scale, 199.76705932617188 * scale, 480.0113830566406 * scale, 200.76705932617188 * scale, 460.0113830566406 * scale, 205.76705932617188 * scale);
  ctx.bezierCurveTo(433.5113830566406 * scale, 210.26705932617188 * scale, 433.5113830566406 * scale, 210.26705932617188 * scale, 407.0113830566406 * scale, 214.76705932617188 * scale);
  ctx.bezierCurveTo(395.0113830566406 * scale, 218.76705932617188 * scale, 397.0113830566406 * scale, 211.76705932617188 * scale, 393.0113830566406 * scale, 202.76705932617188 * scale);
  ctx.bezierCurveTo(387.0113830566406 * scale, 188.76705932617188 * scale, 387.0113830566406 * scale, 187.76705932617188 * scale, 394.0113830566406 * scale, 181.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(411.0113830566406 * scale, 234.76705932617188 * scale);
  ctx.bezierCurveTo(446.0113830566406 * scale, 233.26705932617188 * scale, 446.0113830566406 * scale, 233.26705932617188 * scale, 481.0113830566406 * scale, 231.76705932617188 * scale);
  ctx.bezierCurveTo(491.0113830566406 * scale, 232.76705932617188 * scale, 493.0113830566406 * scale, 239.76705932617188 * scale, 491.0113830566406 * scale, 251.76705932617188 * scale);
  ctx.bezierCurveTo(490.0113830566406 * scale, 263.7670593261719 * scale, 490.0113830566406 * scale, 263.7670593261719 * scale, 489.0113830566406 * scale, 275.7670593261719 * scale);
  ctx.bezierCurveTo(487.0113830566406 * scale, 283.7670593261719 * scale, 483.0113830566406 * scale, 284.7670593261719 * scale, 464.0113830566406 * scale, 280.7670593261719 * scale);
  ctx.bezierCurveTo(437.0113830566406 * scale, 273.7670593261719 * scale, 437.0113830566406 * scale, 273.7670593261719 * scale, 410.0113830566406 * scale, 266.7670593261719 * scale);
  ctx.bezierCurveTo(400.0113830566406 * scale, 261.7670593261719 * scale, 401.0113830566406 * scale, 259.7670593261719 * scale, 402.0113830566406 * scale, 249.76705932617188 * scale);
  ctx.bezierCurveTo(401.0113830566406 * scale, 237.76705932617188 * scale, 403.0113830566406 * scale, 235.76705932617188 * scale, 408.0113830566406 * scale, 234.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(411.0113830566406 * scale, 234.76705932617188 * scale);
  ctx.bezierCurveTo(446.0113830566406 * scale, 233.26705932617188 * scale, 446.0113830566406 * scale, 233.26705932617188 * scale, 481.0113830566406 * scale, 231.76705932617188 * scale);
  ctx.bezierCurveTo(491.0113830566406 * scale, 232.76705932617188 * scale, 493.0113830566406 * scale, 239.76705932617188 * scale, 491.0113830566406 * scale, 251.76705932617188 * scale);
  ctx.bezierCurveTo(490.0113830566406 * scale, 263.7670593261719 * scale, 490.0113830566406 * scale, 263.7670593261719 * scale, 489.0113830566406 * scale, 275.7670593261719 * scale);
  ctx.bezierCurveTo(487.0113830566406 * scale, 283.7670593261719 * scale, 483.0113830566406 * scale, 284.7670593261719 * scale, 464.0113830566406 * scale, 280.7670593261719 * scale);
  ctx.bezierCurveTo(437.0113830566406 * scale, 273.7670593261719 * scale, 437.0113830566406 * scale, 273.7670593261719 * scale, 410.0113830566406 * scale, 266.7670593261719 * scale);
  ctx.bezierCurveTo(400.0113830566406 * scale, 261.7670593261719 * scale, 401.0113830566406 * scale, 259.7670593261719 * scale, 402.0113830566406 * scale, 249.76705932617188 * scale);
  ctx.bezierCurveTo(401.0113830566406 * scale, 237.76705932617188 * scale, 403.0113830566406 * scale, 235.76705932617188 * scale, 408.0113830566406 * scale, 234.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(400.0113830566406 * scale, 290.7670593261719 * scale);
  ctx.bezierCurveTo(437.0113830566406 * scale, 301.2670593261719 * scale, 437.0113830566406 * scale, 301.2670593261719 * scale, 474.0113830566406 * scale, 311.7670593261719 * scale);
  ctx.bezierCurveTo(484.0113830566406 * scale, 319.7670593261719 * scale, 481.0113830566406 * scale, 322.7670593261719 * scale, 474.0113830566406 * scale, 335.7670593261719 * scale);
  ctx.bezierCurveTo(465.5113830566406 * scale, 354.7670593261719 * scale, 465.5113830566406 * scale, 354.7670593261719 * scale, 457.0113830566406 * scale, 373.7670593261719 * scale);
  ctx.bezierCurveTo(449.0113830566406 * scale, 386.7670593261719 * scale, 444.0113830566406 * scale, 384.7670593261719 * scale, 427.0113830566406 * scale, 370.7670593261719 * scale);
  ctx.bezierCurveTo(403.0113830566406 * scale, 354.7670593261719 * scale, 403.0113830566406 * scale, 354.7670593261719 * scale, 379.0113830566406 * scale, 338.7670593261719 * scale);
  ctx.bezierCurveTo(371.0113830566406 * scale, 327.7670593261719 * scale, 373.0113830566406 * scale, 323.7670593261719 * scale, 377.0113830566406 * scale, 313.7670593261719 * scale);
  ctx.bezierCurveTo(386.0113830566406 * scale, 292.7670593261719 * scale, 393.0113830566406 * scale, 288.7670593261719 * scale, 398.0113830566406 * scale, 291.7670593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(400.0113830566406 * scale, 290.7670593261719 * scale);
  ctx.bezierCurveTo(437.0113830566406 * scale, 301.2670593261719 * scale, 437.0113830566406 * scale, 301.2670593261719 * scale, 474.0113830566406 * scale, 311.7670593261719 * scale);
  ctx.bezierCurveTo(484.0113830566406 * scale, 319.7670593261719 * scale, 481.0113830566406 * scale, 322.7670593261719 * scale, 474.0113830566406 * scale, 335.7670593261719 * scale);
  ctx.bezierCurveTo(465.5113830566406 * scale, 354.7670593261719 * scale, 465.5113830566406 * scale, 354.7670593261719 * scale, 457.0113830566406 * scale, 373.7670593261719 * scale);
  ctx.bezierCurveTo(449.0113830566406 * scale, 386.7670593261719 * scale, 444.0113830566406 * scale, 384.7670593261719 * scale, 427.0113830566406 * scale, 370.7670593261719 * scale);
  ctx.bezierCurveTo(403.0113830566406 * scale, 354.7670593261719 * scale, 403.0113830566406 * scale, 354.7670593261719 * scale, 379.0113830566406 * scale, 338.7670593261719 * scale);
  ctx.bezierCurveTo(371.0113830566406 * scale, 327.7670593261719 * scale, 373.0113830566406 * scale, 323.7670593261719 * scale, 377.0113830566406 * scale, 313.7670593261719 * scale);
  ctx.bezierCurveTo(386.0113830566406 * scale, 292.7670593261719 * scale, 393.0113830566406 * scale, 288.7670593261719 * scale, 398.0113830566406 * scale, 291.7670593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(366.0113830566406 * scale, 361.2216033935547 * scale);
  ctx.bezierCurveTo(393.0113830566406 * scale, 383.2216033935547 * scale, 393.0113830566406 * scale, 383.2216033935547 * scale, 420.0113830566406 * scale, 405.2216033935547 * scale);
  ctx.bezierCurveTo(427.0113830566406 * scale, 414.2216033935547 * scale, 425.0113830566406 * scale, 417.2216033935547 * scale, 413.0113830566406 * scale, 428.2216033935547 * scale);
  ctx.bezierCurveTo(405.5113830566406 * scale, 435.2216033935547 * scale, 405.5113830566406 * scale, 435.2216033935547 * scale, 398.0113830566406 * scale, 442.2216033935547 * scale);
  ctx.bezierCurveTo(388.0113830566406 * scale, 451.2216033935547 * scale, 385.0113830566406 * scale, 445.2216033935547 * scale, 373.0113830566406 * scale, 428.2216033935547 * scale);
  ctx.bezierCurveTo(358.5113830566406 * scale, 408.2216033935547 * scale, 358.5113830566406 * scale, 408.2216033935547 * scale, 344.0113830566406 * scale, 388.2216033935547 * scale);
  ctx.bezierCurveTo(337.0113830566406 * scale, 378.2216033935547 * scale, 342.0113830566406 * scale, 377.2216033935547 * scale, 347.0113830566406 * scale, 371.2216033935547 * scale);
  ctx.bezierCurveTo(359.0113830566406 * scale, 359.2216033935547 * scale, 361.0113830566406 * scale, 358.2216033935547 * scale, 364.0113830566406 * scale, 361.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(366.0113830566406 * scale, 361.2216033935547 * scale);
  ctx.bezierCurveTo(393.0113830566406 * scale, 383.2216033935547 * scale, 393.0113830566406 * scale, 383.2216033935547 * scale, 420.0113830566406 * scale, 405.2216033935547 * scale);
  ctx.bezierCurveTo(427.0113830566406 * scale, 414.2216033935547 * scale, 425.0113830566406 * scale, 417.2216033935547 * scale, 413.0113830566406 * scale, 428.2216033935547 * scale);
  ctx.bezierCurveTo(405.5113830566406 * scale, 435.2216033935547 * scale, 405.5113830566406 * scale, 435.2216033935547 * scale, 398.0113830566406 * scale, 442.2216033935547 * scale);
  ctx.bezierCurveTo(388.0113830566406 * scale, 451.2216033935547 * scale, 385.0113830566406 * scale, 445.2216033935547 * scale, 373.0113830566406 * scale, 428.2216033935547 * scale);
  ctx.bezierCurveTo(358.5113830566406 * scale, 408.2216033935547 * scale, 358.5113830566406 * scale, 408.2216033935547 * scale, 344.0113830566406 * scale, 388.2216033935547 * scale);
  ctx.bezierCurveTo(337.0113830566406 * scale, 378.2216033935547 * scale, 342.0113830566406 * scale, 377.2216033935547 * scale, 347.0113830566406 * scale, 371.2216033935547 * scale);
  ctx.bezierCurveTo(359.0113830566406 * scale, 359.2216033935547 * scale, 361.0113830566406 * scale, 358.2216033935547 * scale, 364.0113830566406 * scale, 361.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(323.0113830566406 * scale, 393.2216033935547 * scale);
  ctx.bezierCurveTo(338.0113830566406 * scale, 424.7216033935547 * scale, 338.0113830566406 * scale, 424.7216033935547 * scale, 353.0113830566406 * scale, 456.2216033935547 * scale);
  ctx.bezierCurveTo(355.0113830566406 * scale, 467.2216033935547 * scale, 354.0113830566406 * scale, 469.2216033935547 * scale, 336.0113830566406 * scale, 475.2216033935547 * scale);
  ctx.bezierCurveTo(326.0113830566406 * scale, 478.2216033935547 * scale, 326.0113830566406 * scale, 478.2216033935547 * scale, 316.0113830566406 * scale, 481.2216033935547 * scale);
  ctx.bezierCurveTo(304.0113830566406 * scale, 484.2216033935547 * scale, 304.0113830566406 * scale, 477.2216033935547 * scale, 301.0113830566406 * scale, 454.2216033935547 * scale);
  ctx.bezierCurveTo(295.5113830566406 * scale, 429.2216033935547 * scale, 295.5113830566406 * scale, 429.2216033935547 * scale, 290.0113830566406 * scale, 404.2216033935547 * scale);
  ctx.bezierCurveTo(287.0113830566406 * scale, 396.2216033935547 * scale, 297.0113830566406 * scale, 394.2216033935547 * scale, 303.0113830566406 * scale, 392.2216033935547 * scale);
  ctx.bezierCurveTo(316.0113830566406 * scale, 387.2216033935547 * scale, 318.0113830566406 * scale, 387.2216033935547 * scale, 323.0113830566406 * scale, 394.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(323.0113830566406 * scale, 393.2216033935547 * scale);
  ctx.bezierCurveTo(338.0113830566406 * scale, 424.7216033935547 * scale, 338.0113830566406 * scale, 424.7216033935547 * scale, 353.0113830566406 * scale, 456.2216033935547 * scale);
  ctx.bezierCurveTo(355.0113830566406 * scale, 467.2216033935547 * scale, 354.0113830566406 * scale, 469.2216033935547 * scale, 336.0113830566406 * scale, 475.2216033935547 * scale);
  ctx.bezierCurveTo(326.0113830566406 * scale, 478.2216033935547 * scale, 326.0113830566406 * scale, 478.2216033935547 * scale, 316.0113830566406 * scale, 481.2216033935547 * scale);
  ctx.bezierCurveTo(304.0113830566406 * scale, 484.2216033935547 * scale, 304.0113830566406 * scale, 477.2216033935547 * scale, 301.0113830566406 * scale, 454.2216033935547 * scale);
  ctx.bezierCurveTo(295.5113830566406 * scale, 429.2216033935547 * scale, 295.5113830566406 * scale, 429.2216033935547 * scale, 290.0113830566406 * scale, 404.2216033935547 * scale);
  ctx.bezierCurveTo(287.0113830566406 * scale, 396.2216033935547 * scale, 297.0113830566406 * scale, 394.2216033935547 * scale, 303.0113830566406 * scale, 392.2216033935547 * scale);
  ctx.bezierCurveTo(316.0113830566406 * scale, 387.2216033935547 * scale, 318.0113830566406 * scale, 387.2216033935547 * scale, 323.0113830566406 * scale, 394.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(270.0113830566406 * scale, 413.2216033935547 * scale);
  ctx.bezierCurveTo(271.0113830566406 * scale, 445.7216033935547 * scale, 271.0113830566406 * scale, 445.7216033935547 * scale, 272.0113830566406 * scale, 478.2216033935547 * scale);
  ctx.bezierCurveTo(273.0113830566406 * scale, 490.2216033935547 * scale, 267.0113830566406 * scale, 493.2216033935547 * scale, 249.01138305664062 * scale, 490.2216033935547 * scale);
  ctx.bezierCurveTo(222.01138305664062 * scale, 492.2216033935547 * scale, 220.01138305664062 * scale, 485.2216033935547 * scale, 225.01138305664062 * scale, 467.2216033935547 * scale);
  ctx.bezierCurveTo(230.51138305664062 * scale, 440.2216033935547 * scale, 230.51138305664062 * scale, 440.2216033935547 * scale, 236.01138305664062 * scale, 413.2216033935547 * scale);
  ctx.bezierCurveTo(237.01138305664062 * scale, 405.2216033935547 * scale, 238.01138305664062 * scale, 404.2216033935547 * scale, 253.01138305664062 * scale, 403.2216033935547 * scale);
  ctx.bezierCurveTo(269.0113830566406 * scale, 405.2216033935547 * scale, 270.0113830566406 * scale, 407.2216033935547 * scale, 269.0113830566406 * scale, 412.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(270.0113830566406 * scale, 413.2216033935547 * scale);
  ctx.bezierCurveTo(271.0113830566406 * scale, 445.7216033935547 * scale, 271.0113830566406 * scale, 445.7216033935547 * scale, 272.0113830566406 * scale, 478.2216033935547 * scale);
  ctx.bezierCurveTo(273.0113830566406 * scale, 490.2216033935547 * scale, 267.0113830566406 * scale, 493.2216033935547 * scale, 249.01138305664062 * scale, 490.2216033935547 * scale);
  ctx.bezierCurveTo(222.01138305664062 * scale, 492.2216033935547 * scale, 220.01138305664062 * scale, 485.2216033935547 * scale, 225.01138305664062 * scale, 467.2216033935547 * scale);
  ctx.bezierCurveTo(230.51138305664062 * scale, 440.2216033935547 * scale, 230.51138305664062 * scale, 440.2216033935547 * scale, 236.01138305664062 * scale, 413.2216033935547 * scale);
  ctx.bezierCurveTo(237.01138305664062 * scale, 405.2216033935547 * scale, 238.01138305664062 * scale, 404.2216033935547 * scale, 253.01138305664062 * scale, 403.2216033935547 * scale);
  ctx.bezierCurveTo(269.0113830566406 * scale, 405.2216033935547 * scale, 270.0113830566406 * scale, 407.2216033935547 * scale, 269.0113830566406 * scale, 412.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(207.01138305664062 * scale, 406.2216033935547 * scale);
  ctx.bezierCurveTo(197.51138305664062 * scale, 440.7216033935547 * scale, 197.51138305664062 * scale, 440.7216033935547 * scale, 188.01138305664062 * scale, 475.2216033935547 * scale);
  ctx.bezierCurveTo(184.01138305664062 * scale, 485.2216033935547 * scale, 179.01138305664062 * scale, 491.2216033935547 * scale, 152.01138305664062 * scale, 477.2216033935547 * scale);
  ctx.bezierCurveTo(136.51138305664062 * scale, 469.7216033935547 * scale, 136.51138305664062 * scale, 469.7216033935547 * scale, 121.01138305664062 * scale, 462.2216033935547 * scale);
  ctx.bezierCurveTo(109.01138305664062 * scale, 453.2216033935547 * scale, 117.01138305664062 * scale, 447.2216033935547 * scale, 133.01138305664062 * scale, 427.2216033935547 * scale);
  ctx.bezierCurveTo(146.51138305664062 * scale, 406.7216033935547 * scale, 146.51138305664062 * scale, 406.7216033935547 * scale, 160.01138305664062 * scale, 386.2216033935547 * scale);
  ctx.bezierCurveTo(163.01138305664062 * scale, 377.2216033935547 * scale, 168.01138305664062 * scale, 378.2216033935547 * scale, 187.01138305664062 * scale, 387.2216033935547 * scale);
  ctx.bezierCurveTo(206.01138305664062 * scale, 395.2216033935547 * scale, 208.01138305664062 * scale, 398.2216033935547 * scale, 207.01138305664062 * scale, 405.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(207.01138305664062 * scale, 406.2216033935547 * scale);
  ctx.bezierCurveTo(197.51138305664062 * scale, 440.7216033935547 * scale, 197.51138305664062 * scale, 440.7216033935547 * scale, 188.01138305664062 * scale, 475.2216033935547 * scale);
  ctx.bezierCurveTo(184.01138305664062 * scale, 485.2216033935547 * scale, 179.01138305664062 * scale, 491.2216033935547 * scale, 152.01138305664062 * scale, 477.2216033935547 * scale);
  ctx.bezierCurveTo(136.51138305664062 * scale, 469.7216033935547 * scale, 136.51138305664062 * scale, 469.7216033935547 * scale, 121.01138305664062 * scale, 462.2216033935547 * scale);
  ctx.bezierCurveTo(109.01138305664062 * scale, 453.2216033935547 * scale, 117.01138305664062 * scale, 447.2216033935547 * scale, 133.01138305664062 * scale, 427.2216033935547 * scale);
  ctx.bezierCurveTo(146.51138305664062 * scale, 406.7216033935547 * scale, 146.51138305664062 * scale, 406.7216033935547 * scale, 160.01138305664062 * scale, 386.2216033935547 * scale);
  ctx.bezierCurveTo(163.01138305664062 * scale, 377.2216033935547 * scale, 168.01138305664062 * scale, 378.2216033935547 * scale, 187.01138305664062 * scale, 387.2216033935547 * scale);
  ctx.bezierCurveTo(206.01138305664062 * scale, 395.2216033935547 * scale, 208.01138305664062 * scale, 398.2216033935547 * scale, 207.01138305664062 * scale, 405.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 12 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130.01138305664062 * scale, 375.2216033935547 * scale);
  ctx.bezierCurveTo(109.51138305664062 * scale, 400.7216033935547 * scale, 109.51138305664062 * scale, 400.7216033935547 * scale, 89.01138305664062 * scale, 426.2216033935547 * scale);
  ctx.bezierCurveTo(82.01138305664062 * scale, 435.2216033935547 * scale, 77.01138305664062 * scale, 435.2216033935547 * scale, 62.011383056640625 * scale, 417.2216033935547 * scale);
  ctx.bezierCurveTo(43.011383056640625 * scale, 397.2216033935547 * scale, 47.011383056640625 * scale, 395.2216033935547 * scale, 62.011383056640625 * scale, 382.2216033935547 * scale);
  ctx.bezierCurveTo(84.01138305664062 * scale, 366.7216033935547 * scale, 84.01138305664062 * scale, 366.7216033935547 * scale, 106.01138305664062 * scale, 351.2216033935547 * scale);
  ctx.bezierCurveTo(116.01138305664062 * scale, 344.2216033935547 * scale, 120.01138305664062 * scale, 347.2216033935547 * scale, 127.01138305664062 * scale, 356.2216033935547 * scale);
  ctx.bezierCurveTo(137.01138305664062 * scale, 366.2216033935547 * scale, 137.01138305664062 * scale, 366.2216033935547 * scale, 131.01138305664062 * scale, 376.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 12 * scale);
  ctx.globalAlpha = 1;
  ctx.translate(0, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(130.01138305664062 * scale, 375.2216033935547 * scale);
  ctx.bezierCurveTo(109.51138305664062 * scale, 400.7216033935547 * scale, 109.51138305664062 * scale, 400.7216033935547 * scale, 89.01138305664062 * scale, 426.2216033935547 * scale);
  ctx.bezierCurveTo(82.01138305664062 * scale, 435.2216033935547 * scale, 77.01138305664062 * scale, 435.2216033935547 * scale, 62.011383056640625 * scale, 417.2216033935547 * scale);
  ctx.bezierCurveTo(43.011383056640625 * scale, 397.2216033935547 * scale, 47.011383056640625 * scale, 395.2216033935547 * scale, 62.011383056640625 * scale, 382.2216033935547 * scale);
  ctx.bezierCurveTo(84.01138305664062 * scale, 366.7216033935547 * scale, 84.01138305664062 * scale, 366.7216033935547 * scale, 106.01138305664062 * scale, 351.2216033935547 * scale);
  ctx.bezierCurveTo(116.01138305664062 * scale, 344.2216033935547 * scale, 120.01138305664062 * scale, 347.2216033935547 * scale, 127.01138305664062 * scale, 356.2216033935547 * scale);
  ctx.bezierCurveTo(137.01138305664062 * scale, 366.2216033935547 * scale, 137.01138305664062 * scale, 366.2216033935547 * scale, 131.01138305664062 * scale, 376.2216033935547 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 12 * scale);
  return can;
};

function create_sand(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 218 * scale;
  can.height = 185 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(64 * scale, 53.135406494140625 * scale);
  ctx.bezierCurveTo(92 * scale, 17.135406494140625 * scale, 116 * scale, 11.135406494140625 * scale, 158 * scale, 53.135406494140625 * scale);
  ctx.bezierCurveTo(178 * scale, 74.13540649414062 * scale, 181 * scale, 81.13540649414062 * scale, 196 * scale, 101.13540649414062 * scale);
  ctx.bezierCurveTo(214 * scale, 127.13540649414062 * scale, 192 * scale, 138.13540649414062 * scale, 173 * scale, 149.13540649414062 * scale);
  ctx.bezierCurveTo(137 * scale, 166.13540649414062 * scale, 74 * scale, 170.13540649414062 * scale, 36 * scale, 141.13540649414062 * scale);
  ctx.bezierCurveTo(13 * scale, 127.13540649414062 * scale, 20 * scale, 119.13540649414062 * scale, 30 * scale, 103.13540649414062 * scale);
  ctx.bezierCurveTo(48 * scale, 71.13540649414062 * scale, 54 * scale, 67.13540649414062 * scale, 63 * scale, 54.135406494140625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107 * scale, 25.135406494140625 * scale);
  ctx.bezierCurveTo(62 * scale, 90.13540649414062 * scale, 54 * scale, 129.13540649414062 * scale, 53 * scale, 151.13540649414062 * scale);
  ctx.bezierCurveTo(39.5 * scale, 142.13540649414062 * scale, 39.5 * scale, 142.13540649414062 * scale, 26 * scale, 133.13540649414062 * scale);
  ctx.bezierCurveTo(23.5 * scale, 128.63540649414062 * scale, 23.5 * scale, 128.63540649414062 * scale, 21 * scale, 124.13540649414062 * scale);
  ctx.bezierCurveTo(22 * scale, 113.13540649414062 * scale, 31 * scale, 99.13540649414062 * scale, 40 * scale, 88.13540649414062 * scale);
  ctx.bezierCurveTo(54.5 * scale, 67.13540649414062 * scale, 54.5 * scale, 67.13540649414062 * scale, 69 * scale, 46.135406494140625 * scale);
  ctx.bezierCurveTo(80.5 * scale, 36.635406494140625 * scale, 80.5 * scale, 36.635406494140625 * scale, 92 * scale, 27.135406494140625 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  return can;
};

function create_ice(scale, useless, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 167 * scale;
  can.height = 136 * scale;
  ctx.globalAlpha = 0.5;
  ctx.save();
  ctx.translate(76.71426391601562 * scale, 67.85713195800781 * scale);
  round_rect(ctx, -57.5 * scale, -54.5 * scale, 115 * scale, 109 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 0.8;
  ctx.save();
  ctx.translate(76.71426391601562 * scale, 67.85713195800781 * scale);
  round_rect(ctx, -57.5 * scale, -54.5 * scale, 115 * scale, 109 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, undefined, color[1], 7 * scale);
  ctx.globalAlpha = 0.5;
  ctx.save();
  ctx.translate(91.21426391601562 * scale, 67.35713195800781 * scale);
  round_rect(ctx, -56 * scale, -55 * scale, 115 * scale, 109 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(91.21426391601562 * scale, 67.35713195800781 * scale);
  round_rect(ctx, -56 * scale, -55 * scale, 115 * scale, 109 * scale, 15 * scale);
  ctx.restore();
  fill_path(ctx, undefined, color[1], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(131.21426391601562 * scale, 70.35713195800781 * scale);
  ctx.bezierCurveTo(133.21426391601562 * scale, 95.35713195800781 * scale, 128.21426391601562 * scale, 109.35713195800781 * scale, 108.21426391601562 * scale, 108.35713195800781 * scale);
  fill_path(ctx, undefined, color[1], 10 * scale);
  return can;
};

function create_plot(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 163 * scale;
  can.height = 163 * scale;
  ctx.save();
  ctx.translate(82.5 * scale, 81.1015625 * scale);
  ctx.rotate(0);
  round_rect(ctx, -65.5 * scale, -66 * scale, 131 * scale, 131 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[1]);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(80 * scale, 17.1015625 * scale);
  round_rect(ctx, -64 * scale, -4.5 * scale, 129 * scale, 9 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(80 * scale, 17.1015625 * scale);
  round_rect(ctx, -64 * scale, -4.5 * scale, 129 * scale, 9 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 3 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(145.5 * scale, 83.6015625 * scale);
  round_rect(ctx, -4.5 * scale, -61 * scale, 9 * scale, 129 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(145.5 * scale, 83.6015625 * scale);
  round_rect(ctx, -4.5 * scale, -61 * scale, 9 * scale, 129 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 3 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(17.5 * scale, 82.6015625 * scale);
  round_rect(ctx, -4.5 * scale, -65 * scale, 9 * scale, 129 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(17.5 * scale, 82.6015625 * scale);
  round_rect(ctx, -4.5 * scale, -65 * scale, 9 * scale, 129 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 3 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(80.5 * scale, 145.6015625 * scale);
  round_rect(ctx, -65.5 * scale, -4 * scale, 129 * scale, 9 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(80.5 * scale, 145.6015625 * scale);
  round_rect(ctx, -65.5 * scale, -4 * scale, 129 * scale, 9 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 3 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(17 * scale, 18.1015625 * scale);
  round_rect(ctx, -11 * scale, -11.5 * scale, 22 * scale, 22 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(17 * scale, 18.1015625 * scale);
  round_rect(ctx, -11 * scale, -11.5 * scale, 22 * scale, 22 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 3 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(145.5 * scale, 16.6015625 * scale);
  round_rect(ctx, -10.5 * scale, -11.5 * scale, 21 * scale, 22 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(145.5 * scale, 16.6015625 * scale);
  round_rect(ctx, -10.5 * scale, -11.5 * scale, 21 * scale, 22 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 3 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(145.5 * scale, 144.1015625 * scale);
  round_rect(ctx, -10.5 * scale, -11 * scale, 22 * scale, 22 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(145.5 * scale, 144.1015625 * scale);
  round_rect(ctx, -10.5 * scale, -11 * scale, 22 * scale, 22 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 3 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  ctx.translate(17.5 * scale, 145.1015625 * scale);
  round_rect(ctx, -11.5 * scale, -12 * scale, 22 * scale, 22 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  ctx.translate(17.5 * scale, 145.1015625 * scale);
  round_rect(ctx, -11.5 * scale, -12 * scale, 22 * scale, 22 * scale, 5 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[3], 3 * scale);
  return can;
};

function create_watering_can(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 168 * scale;
  can.height = 100 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(10 * scale, 5 * scale);
  ctx.save();
  ctx.translate(24.5 * scale, 44.30000305175781 * scale);
  round_rect(ctx, -19.5 * scale, -8.5 * scale, 39 * scale, 17 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 37.80000305175781 * scale);
  ctx.bezierCurveTo(142 * scale, 37.80000305175781 * scale, 140 * scale, 37.80000305175781 * scale, 141 * scale, 37.80000305175781 * scale);
  ctx.bezierCurveTo(147 * scale, 28.800003051757812 * scale, 149 * scale, 26.800003051757812 * scale, 153 * scale, 32.80000305175781 * scale);
  ctx.bezierCurveTo(160 * scale, 42.80000305175781 * scale, 157 * scale, 50.80000305175781 * scale, 153 * scale, 58.80000305175781 * scale);
  ctx.bezierCurveTo(148 * scale, 62.80000305175781 * scale, 147 * scale, 59.80000305175781 * scale, 143 * scale, 52.80000305175781 * scale);
  ctx.bezierCurveTo(129 * scale, 52.80000305175781 * scale, 129 * scale, 52.80000305175781 * scale, 115 * scale, 52.80000305175781 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  circle(ctx, 78 * scale, 44.80000305175781 * scale, 39.44616584663204 * scale);
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-10 * scale, -5 * scale);
  ctx.save();
  ctx.translate(24.5 * scale, 44.30000305175781 * scale);
  round_rect(ctx, -19.5 * scale, -8.5 * scale, 39 * scale, 17 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, undefined, color[3], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 37.80000305175781 * scale);
  ctx.bezierCurveTo(142 * scale, 37.80000305175781 * scale, 140 * scale, 37.80000305175781 * scale, 141 * scale, 37.80000305175781 * scale);
  ctx.bezierCurveTo(147 * scale, 28.800003051757812 * scale, 149 * scale, 26.800003051757812 * scale, 153 * scale, 32.80000305175781 * scale);
  ctx.bezierCurveTo(160 * scale, 42.80000305175781 * scale, 157 * scale, 50.80000305175781 * scale, 153 * scale, 58.80000305175781 * scale);
  ctx.bezierCurveTo(148 * scale, 62.80000305175781 * scale, 147 * scale, 59.80000305175781 * scale, 143 * scale, 52.80000305175781 * scale);
  ctx.bezierCurveTo(129 * scale, 52.80000305175781 * scale, 129 * scale, 52.80000305175781 * scale, 115 * scale, 52.80000305175781 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[3], 6 * scale);
  circle(ctx, 78 * scale, 44.80000305175781 * scale, 42.44616584663204 * scale);
  fill_path(ctx, undefined, color[3], 6 * scale);
  ctx.save();
  ctx.translate(24.5 * scale, 44.30000305175781 * scale);
  round_rect(ctx, -19.5 * scale, -8.5 * scale, 39 * scale, 17 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 37.80000305175781 * scale);
  ctx.bezierCurveTo(142 * scale, 37.80000305175781 * scale, 140 * scale, 37.80000305175781 * scale, 141 * scale, 37.80000305175781 * scale);
  ctx.bezierCurveTo(147 * scale, 28.800003051757812 * scale, 149 * scale, 26.800003051757812 * scale, 153 * scale, 32.80000305175781 * scale);
  ctx.bezierCurveTo(160 * scale, 42.80000305175781 * scale, 157 * scale, 50.80000305175781 * scale, 153 * scale, 58.80000305175781 * scale);
  ctx.bezierCurveTo(148 * scale, 62.80000305175781 * scale, 147 * scale, 59.80000305175781 * scale, 143 * scale, 52.80000305175781 * scale);
  ctx.bezierCurveTo(129 * scale, 52.80000305175781 * scale, 129 * scale, 52.80000305175781 * scale, 115 * scale, 52.80000305175781 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  circle(ctx, 78 * scale, 44.80000305175781 * scale, 39.44616584663204 * scale);
  fill_path(ctx, color[2], color[1], 4 * scale);
  circle(ctx, 78 * scale, 44.80000305175781 * scale, 29.68164415931166 * scale);
  fill_path(ctx, color[3], color[1], 4 * scale);
  circle(ctx, 78 * scale, 44 * scale, 20 * scale);
  fill_path(ctx, color[4]);
  return can;
};

function create_pirahna(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 158 * scale;
  can.height = 201 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(96.5 * scale, 76.421875 * scale);
  ctx.bezierCurveTo(100.5 * scale, 64.421875 * scale, 103.5 * scale, 62.421875 * scale, 110.5 * scale, 65.421875 * scale);
  ctx.bezierCurveTo(116.5 * scale, 66.421875 * scale, 117.5 * scale, 67.421875 * scale, 112.5 * scale, 73.421875 * scale);
  ctx.bezierCurveTo(107 * scale, 79.921875 * scale, 107 * scale, 79.921875 * scale, 101.5 * scale, 86.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[8], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(61.5 * scale, 78.421875 * scale);
  ctx.bezierCurveTo(57.5 * scale, 73.421875 * scale, 51.5 * scale, 66.421875 * scale, 45.5 * scale, 68.421875 * scale);
  ctx.bezierCurveTo(32.5 * scale, 73.421875 * scale, 38.5 * scale, 75.421875 * scale, 46.5 * scale, 81.421875 * scale);
  ctx.bezierCurveTo(51.5 * scale, 84.921875 * scale, 51.5 * scale, 84.921875 * scale, 56.5 * scale, 88.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[8], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(116.5 * scale, 127.421875 * scale);
  ctx.bezierCurveTo(124.5 * scale, 108.421875 * scale, 129.5 * scale, 104.421875 * scale, 141.5 * scale, 107.421875 * scale);
  ctx.bezierCurveTo(156.5 * scale, 112.421875 * scale, 153.5 * scale, 113.421875 * scale, 132.5 * scale, 134.421875 * scale);
  ctx.bezierCurveTo(123.5 * scale, 141.921875 * scale, 123.5 * scale, 141.921875 * scale, 114.5 * scale, 149.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[8], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(41.5 * scale, 134.421875 * scale);
  ctx.bezierCurveTo(30.5 * scale, 119.421875 * scale, 25.5 * scale, 111.421875 * scale, 12.5 * scale, 115.421875 * scale);
  ctx.bezierCurveTo(4.5 * scale, 120.421875 * scale, 4.5 * scale, 121.421875 * scale, 26.5 * scale, 142.421875 * scale);
  ctx.bezierCurveTo(35 * scale, 149.921875 * scale, 35 * scale, 149.921875 * scale, 43.5 * scale, 157.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[8], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(78.5 * scale, 51.921875 * scale);
  ctx.bezierCurveTo(99.5 * scale, 75.921875 * scale, 110.5 * scale, 96.921875 * scale, 118.5 * scale, 120.921875 * scale);
  ctx.bezierCurveTo(121.5 * scale, 140.921875 * scale, 107.5 * scale, 179.921875 * scale, 75.5 * scale, 183.921875 * scale);
  ctx.bezierCurveTo(30.5 * scale, 169.921875 * scale, 37.5 * scale, 131.921875 * scale, 34.5 * scale, 120.921875 * scale);
  ctx.bezierCurveTo(41.5 * scale, 89.921875 * scale, 61.5 * scale, 67.921875 * scale, 78.5 * scale, 51.921875 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[8], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72.5 * scale, 72.421875 * scale);
  ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
  ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[8], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42.5 * scale, 163.421875 * scale);
  ctx.bezierCurveTo(62.5 * scale, 185.421875 * scale, 86.5 * scale, 186.421875 * scale, 111.5 * scale, 165.421875 * scale);
  ctx.bezierCurveTo(107.5 * scale, 176.421875 * scale, 95.5 * scale, 187.421875 * scale, 75.5 * scale, 188.421875 * scale);
  ctx.bezierCurveTo(53.5 * scale, 188.421875 * scale, 43.5 * scale, 171.421875 * scale, 42.5 * scale, 164.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[8], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(79.5 * scale, 61.421875 * scale);
  ctx.bezierCurveTo(88.5 * scale, 31.421875 * scale, 81.5 * scale, 16.421875 * scale, 75.5 * scale, 7.421875 * scale);
  ctx.bezierCurveTo(77.5 * scale, 28.421875 * scale, 77.5 * scale, 37.421875 * scale, 68.5 * scale, 42.421875 * scale);
  ctx.bezierCurveTo(79.5 * scale, 57.421875 * scale, 79.5 * scale, 58.421875 * scale, 80.5 * scale, 61.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[8], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72.5 * scale, 72.421875 * scale);
  ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
  ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[8], color[8], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(96.5 * scale, 76.421875 * scale);
  ctx.bezierCurveTo(100.5 * scale, 64.421875 * scale, 103.5 * scale, 62.421875 * scale, 110.5 * scale, 65.421875 * scale);
  ctx.bezierCurveTo(116.5 * scale, 66.421875 * scale, 117.5 * scale, 67.421875 * scale, 112.5 * scale, 73.421875 * scale);
  ctx.bezierCurveTo(107 * scale, 79.921875 * scale, 107 * scale, 79.921875 * scale, 101.5 * scale, 86.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(61.5 * scale, 78.421875 * scale);
  ctx.bezierCurveTo(57.5 * scale, 73.421875 * scale, 51.5 * scale, 66.421875 * scale, 45.5 * scale, 68.421875 * scale);
  ctx.bezierCurveTo(32.5 * scale, 73.421875 * scale, 38.5 * scale, 75.421875 * scale, 46.5 * scale, 81.421875 * scale);
  ctx.bezierCurveTo(51.5 * scale, 84.921875 * scale, 51.5 * scale, 84.921875 * scale, 56.5 * scale, 88.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(116.5 * scale, 127.421875 * scale);
  ctx.bezierCurveTo(124.5 * scale, 108.421875 * scale, 129.5 * scale, 104.421875 * scale, 141.5 * scale, 107.421875 * scale);
  ctx.bezierCurveTo(156.5 * scale, 112.421875 * scale, 153.5 * scale, 113.421875 * scale, 132.5 * scale, 134.421875 * scale);
  ctx.bezierCurveTo(123.5 * scale, 141.921875 * scale, 123.5 * scale, 141.921875 * scale, 114.5 * scale, 149.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(41.5 * scale, 134.421875 * scale);
  ctx.bezierCurveTo(30.5 * scale, 119.421875 * scale, 25.5 * scale, 111.421875 * scale, 12.5 * scale, 115.421875 * scale);
  ctx.bezierCurveTo(4.5 * scale, 120.421875 * scale, 4.5 * scale, 121.421875 * scale, 26.5 * scale, 142.421875 * scale);
  ctx.bezierCurveTo(35 * scale, 149.921875 * scale, 35 * scale, 149.921875 * scale, 43.5 * scale, 157.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(78.5 * scale, 51.921875 * scale);
  ctx.bezierCurveTo(99.5 * scale, 75.921875 * scale, 110.5 * scale, 96.921875 * scale, 118.5 * scale, 120.921875 * scale);
  ctx.bezierCurveTo(121.5 * scale, 140.921875 * scale, 107.5 * scale, 179.921875 * scale, 75.5 * scale, 183.921875 * scale);
  ctx.bezierCurveTo(30.5 * scale, 169.921875 * scale, 37.5 * scale, 131.921875 * scale, 34.5 * scale, 120.921875 * scale);
  ctx.bezierCurveTo(41.5 * scale, 89.921875 * scale, 61.5 * scale, 67.921875 * scale, 78.5 * scale, 51.921875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  circle(ctx, 108.5 * scale, 148.421875 * scale, 9 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 106.5 * scale, 144.421875 * scale, 3 * scale);
  fill_path(ctx, color[6]);
  circle(ctx, 46.5 * scale, 148.421875 * scale, 9 * scale);
  fill_path(ctx, color[5]);
  circle(ctx, 44.5 * scale, 144.421875 * scale, 3 * scale);
  fill_path(ctx, color[6]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(116.5 * scale, 114.421875 * scale);
  ctx.bezierCurveTo(121.5 * scale, 137.421875 * scale, 118.5 * scale, 133.421875 * scale, 108.5 * scale, 139.421875 * scale);
  ctx.bezierCurveTo(94.5 * scale, 146.421875 * scale, 96.5 * scale, 148.421875 * scale, 95.5 * scale, 152.421875 * scale);
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.translate(0, -2 * scale);
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(35.5 * scale, 131.421875 * scale);
  ctx.bezierCurveTo(36.5 * scale, 140.421875 * scale, 39.5 * scale, 140.421875 * scale, 49.5 * scale, 143.421875 * scale);
  ctx.bezierCurveTo(59.5 * scale, 149.421875 * scale, 57.5 * scale, 151.421875 * scale, 59.5 * scale, 155.421875 * scale);
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84.5 * scale, 57.421875 * scale);
  ctx.bezierCurveTo(101.5 * scale, 120.421875 * scale, 92.5 * scale, 127.421875 * scale, 78.5 * scale, 134.421875 * scale);
  ctx.bezierCurveTo(51.5 * scale, 131.421875 * scale, 63.5 * scale, 102.421875 * scale, 70.5 * scale, 59.421875 * scale);
  ctx.bezierCurveTo(75 * scale, 55.421875 * scale, 78.5 * scale, 52.421875 * scale, 79.5 * scale, 51.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[4]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(79.5 * scale, 61.421875 * scale);
  ctx.bezierCurveTo(88.5 * scale, 31.421875 * scale, 81.5 * scale, 16.421875 * scale, 75.5 * scale, 7.421875 * scale);
  ctx.bezierCurveTo(77.5 * scale, 28.421875 * scale, 77.5 * scale, 37.421875 * scale, 68.5 * scale, 42.421875 * scale);
  ctx.bezierCurveTo(79.5 * scale, 57.421875 * scale, 79.5 * scale, 58.421875 * scale, 80.5 * scale, 61.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72.5 * scale, 72.421875 * scale);
  ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
  ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(87.5 * scale, 154.421875 * scale);
  ctx.bezierCurveTo(93.5 * scale, 163.921875 * scale, 93.5 * scale, 163.921875 * scale, 99.5 * scale, 173.421875 * scale);
  ctx.bezierCurveTo(95 * scale, 177.421875 * scale, 95 * scale, 177.421875 * scale, 90.5 * scale, 181.421875 * scale);
  ctx.bezierCurveTo(89 * scale, 167.921875 * scale, 89 * scale, 167.921875 * scale, 87.5 * scale, 154.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(81.5 * scale, 164.421875 * scale);
  ctx.bezierCurveTo(84 * scale, 172.921875 * scale, 84 * scale, 172.921875 * scale, 86.5 * scale, 181.421875 * scale);
  ctx.bezierCurveTo(82.5 * scale, 182.421875 * scale, 82.5 * scale, 182.421875 * scale, 78.5 * scale, 183.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72.5 * scale, 164.421875 * scale);
  ctx.bezierCurveTo(73.5 * scale, 173.921875 * scale, 73.5 * scale, 173.921875 * scale, 74.5 * scale, 183.421875 * scale);
  ctx.bezierCurveTo(70.5 * scale, 182.921875 * scale, 70.5 * scale, 182.921875 * scale, 66.5 * scale, 182.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(65.5 * scale, 156.421875 * scale);
  ctx.bezierCurveTo(65 * scale, 168.421875 * scale, 65 * scale, 168.421875 * scale, 64.5 * scale, 180.421875 * scale);
  ctx.bezierCurveTo(58.5 * scale, 177.421875 * scale, 58.5 * scale, 177.421875 * scale, 52.5 * scale, 174.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[6], color[7], 2 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42.5 * scale, 163.421875 * scale);
  ctx.bezierCurveTo(62.5 * scale, 185.421875 * scale, 86.5 * scale, 186.421875 * scale, 111.5 * scale, 165.421875 * scale);
  ctx.bezierCurveTo(107.5 * scale, 176.421875 * scale, 95.5 * scale, 187.421875 * scale, 75.5 * scale, 188.421875 * scale);
  ctx.bezierCurveTo(53.5 * scale, 188.421875 * scale, 43.5 * scale, 171.421875 * scale, 42.5 * scale, 164.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  return can;
};

function create_hurt_pirahna(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 158 * scale;
  can.height = 201 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(96.5 * scale, 76.421875 * scale);
  ctx.bezierCurveTo(100.5 * scale, 64.421875 * scale, 103.5 * scale, 62.421875 * scale, 110.5 * scale, 65.421875 * scale);
  ctx.bezierCurveTo(116.5 * scale, 66.421875 * scale, 117.5 * scale, 67.421875 * scale, 112.5 * scale, 73.421875 * scale);
  ctx.bezierCurveTo(107 * scale, 79.921875 * scale, 107 * scale, 79.921875 * scale, 101.5 * scale, 86.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(61.5 * scale, 78.421875 * scale);
  ctx.bezierCurveTo(57.5 * scale, 73.421875 * scale, 51.5 * scale, 66.421875 * scale, 45.5 * scale, 68.421875 * scale);
  ctx.bezierCurveTo(32.5 * scale, 73.421875 * scale, 38.5 * scale, 75.421875 * scale, 46.5 * scale, 81.421875 * scale);
  ctx.bezierCurveTo(51.5 * scale, 84.921875 * scale, 51.5 * scale, 84.921875 * scale, 56.5 * scale, 88.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(116.5 * scale, 127.421875 * scale);
  ctx.bezierCurveTo(124.5 * scale, 108.421875 * scale, 129.5 * scale, 104.421875 * scale, 141.5 * scale, 107.421875 * scale);
  ctx.bezierCurveTo(156.5 * scale, 112.421875 * scale, 153.5 * scale, 113.421875 * scale, 132.5 * scale, 134.421875 * scale);
  ctx.bezierCurveTo(123.5 * scale, 141.921875 * scale, 123.5 * scale, 141.921875 * scale, 114.5 * scale, 149.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(41.5 * scale, 134.421875 * scale);
  ctx.bezierCurveTo(30.5 * scale, 119.421875 * scale, 25.5 * scale, 111.421875 * scale, 12.5 * scale, 115.421875 * scale);
  ctx.bezierCurveTo(4.5 * scale, 120.421875 * scale, 4.5 * scale, 121.421875 * scale, 26.5 * scale, 142.421875 * scale);
  ctx.bezierCurveTo(35 * scale, 149.921875 * scale, 35 * scale, 149.921875 * scale, 43.5 * scale, 157.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(78.5 * scale, 51.921875 * scale);
  ctx.bezierCurveTo(99.5 * scale, 75.921875 * scale, 110.5 * scale, 96.921875 * scale, 118.5 * scale, 120.921875 * scale);
  ctx.bezierCurveTo(121.5 * scale, 140.921875 * scale, 107.5 * scale, 179.921875 * scale, 75.5 * scale, 183.921875 * scale);
  ctx.bezierCurveTo(30.5 * scale, 169.921875 * scale, 37.5 * scale, 131.921875 * scale, 34.5 * scale, 120.921875 * scale);
  ctx.bezierCurveTo(41.5 * scale, 89.921875 * scale, 61.5 * scale, 67.921875 * scale, 78.5 * scale, 51.921875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72.5 * scale, 72.421875 * scale);
  ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
  ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(42.5 * scale, 163.421875 * scale);
  ctx.bezierCurveTo(62.5 * scale, 185.421875 * scale, 86.5 * scale, 186.421875 * scale, 111.5 * scale, 165.421875 * scale);
  ctx.bezierCurveTo(107.5 * scale, 176.421875 * scale, 95.5 * scale, 187.421875 * scale, 75.5 * scale, 188.421875 * scale);
  ctx.bezierCurveTo(53.5 * scale, 188.421875 * scale, 43.5 * scale, 171.421875 * scale, 42.5 * scale, 164.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(79.5 * scale, 61.421875 * scale);
  ctx.bezierCurveTo(88.5 * scale, 31.421875 * scale, 81.5 * scale, 16.421875 * scale, 75.5 * scale, 7.421875 * scale);
  ctx.bezierCurveTo(77.5 * scale, 28.421875 * scale, 77.5 * scale, 37.421875 * scale, 68.5 * scale, 42.421875 * scale);
  ctx.bezierCurveTo(79.5 * scale, 57.421875 * scale, 79.5 * scale, 58.421875 * scale, 80.5 * scale, 61.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(72.5 * scale, 72.421875 * scale);
  ctx.bezierCurveTo(76.5 * scale, 79.421875 * scale, 79.5 * scale, 80.421875 * scale, 83.5 * scale, 73.421875 * scale);
  ctx.bezierCurveTo(80.5 * scale, 96.921875 * scale, 79.5 * scale, 114.421875 * scale, 77.5 * scale, 120.421875 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  return can;
};

function create_flour(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 170 * scale;
  ctx.translate(0, -170 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(159.5 * scale, 322.0625 * scale);
  ctx.bezierCurveTo(240.5 * scale, 293.0625 * scale, 240.5 * scale, 293.0625 * scale, 321.5 * scale, 264.0625 * scale);
  ctx.bezierCurveTo(276.5 * scale, 230.0625 * scale, 276.5 * scale, 230.0625 * scale, 231.5 * scale, 196.0625 * scale);
  ctx.bezierCurveTo(158.5 * scale, 221.5625 * scale, 158.5 * scale, 221.5625 * scale, 85.5 * scale, 247.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(212.5 * scale, 270.0625 * scale);
  ctx.bezierCurveTo(235 * scale, 261.5625 * scale, 235 * scale, 261.5625 * scale, 257.5 * scale, 253.0625 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(193.5 * scale, 226.0625 * scale);
  ctx.bezierCurveTo(204.5 * scale, 242.0625 * scale, 242.5 * scale, 237.0625 * scale, 251.5 * scale, 225.0625 * scale);
  ctx.bezierCurveTo(246.5 * scale, 195.0625 * scale, 205.5 * scale, 190.0625 * scale, 193.5 * scale, 227.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(164.5 * scale, 245.0625 * scale);
  ctx.bezierCurveTo(182.5 * scale, 264.0625 * scale, 252.5 * scale, 258.0625 * scale, 276.5 * scale, 244.0625 * scale);
  ctx.bezierCurveTo(265.5 * scale, 226.0625 * scale, 244.5 * scale, 231.0625 * scale, 229.5 * scale, 230.0625 * scale);
  ctx.bezierCurveTo(205.5 * scale, 227.0625 * scale, 175.5 * scale, 202.0625 * scale, 162.5 * scale, 244.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115.5 * scale, 260.0625 * scale);
  ctx.bezierCurveTo(134.5 * scale, 279.0625 * scale, 170.5 * scale, 275.0625 * scale, 191.5 * scale, 257.0625 * scale);
  ctx.bezierCurveTo(174.5 * scale, 208.0625 * scale, 142.5 * scale, 197.0625 * scale, 116.5 * scale, 259.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(152.5 * scale, 278.0625 * scale);
  ctx.bezierCurveTo(165.5 * scale, 294.0625 * scale, 200.5 * scale, 287.0625 * scale, 216.5 * scale, 278.0625 * scale);
  ctx.bezierCurveTo(206.5 * scale, 247.0625 * scale, 173.5 * scale, 233.0625 * scale, 153.5 * scale, 276.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 12 * scale);
  return can;
};

function create_leaderboard(scale) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = 200 * scale;
  var h = 270 * scale;
  var r = 8 * scale;
  can.width = w;
  can.height = h + 20;
  ctx.beginPath();
  round_rect(ctx, 0, 0, w, h - r, r);
  ctx.globalAlpha = 0.5;
  fill_path(ctx, "#1D6055");
  ctx.globalAlpha = 1;
  var text = create_text(scale, "Leaderboard", 25, "#FFF");
  ctx.drawImage(text, (w - text.width) / 2, scale * 5);
  return can;
};

function create_pumpkin(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 272 * scale;
  can.height = 264 * scale;
  ctx.translate(0, 20 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56.999969482421875 * scale, 84.517333984375 * scale);
  ctx.bezierCurveTo(61.999969482421875 * scale, 58.517333984375 * scale, 79.99996948242188 * scale, 50.517333984375 * scale, 102.99996948242188 * scale, 50.517333984375 * scale);
  ctx.bezierCurveTo(119.99996948242188 * scale, 26.517333984375 * scale, 137.99996948242188 * scale, 32.517333984375 * scale, 156.99996948242188 * scale, 44.517333984375 * scale);
  ctx.bezierCurveTo(187.99996948242188 * scale, 42.517333984375 * scale, 195.99996948242188 * scale, 50.517333984375 * scale, 202.99996948242188 * scale, 77.517333984375 * scale);
  ctx.bezierCurveTo(229.99996948242188 * scale, 80.517333984375 * scale, 231.99996948242188 * scale, 96.517333984375 * scale, 229.99996948242188 * scale, 118.517333984375 * scale);
  ctx.bezierCurveTo(241.99996948242188 * scale, 147.517333984375 * scale, 236.99996948242188 * scale, 148.517333984375 * scale, 220.99996948242188 * scale, 165.517333984375 * scale);
  ctx.bezierCurveTo(222.99996948242188 * scale, 192.517333984375 * scale, 209.99996948242188 * scale, 212.517333984375 * scale, 177.99996948242188 * scale, 213.517333984375 * scale);
  ctx.bezierCurveTo(159.99996948242188 * scale, 234.517333984375 * scale, 141.99996948242188 * scale, 234.517333984375 * scale, 116.99996948242188 * scale, 222.517333984375 * scale);
  ctx.bezierCurveTo(72.99996948242188 * scale, 226.517333984375 * scale, 66.99996948242188 * scale, 207.517333984375 * scale, 65.99996948242188 * scale, 190.517333984375 * scale);
  ctx.bezierCurveTo(35.999969482421875 * scale, 180.517333984375 * scale, 30.999969482421875 * scale, 162.517333984375 * scale, 39.999969482421875 * scale, 135.517333984375 * scale);
  ctx.bezierCurveTo(23.999969482421875 * scale, 110.517333984375 * scale, 43.999969482421875 * scale, 90.517333984375 * scale, 55.999969482421875 * scale, 85.517333984375 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, -20 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56.999969482421875 * scale, 84.517333984375 * scale);
  ctx.bezierCurveTo(61.999969482421875 * scale, 58.517333984375 * scale, 79.99996948242188 * scale, 50.517333984375 * scale, 102.99996948242188 * scale, 50.517333984375 * scale);
  ctx.bezierCurveTo(119.99996948242188 * scale, 26.517333984375 * scale, 137.99996948242188 * scale, 32.517333984375 * scale, 156.99996948242188 * scale, 44.517333984375 * scale);
  ctx.bezierCurveTo(187.99996948242188 * scale, 42.517333984375 * scale, 195.99996948242188 * scale, 50.517333984375 * scale, 202.99996948242188 * scale, 77.517333984375 * scale);
  ctx.bezierCurveTo(229.99996948242188 * scale, 80.517333984375 * scale, 231.99996948242188 * scale, 96.517333984375 * scale, 229.99996948242188 * scale, 118.517333984375 * scale);
  ctx.bezierCurveTo(241.99996948242188 * scale, 147.517333984375 * scale, 236.99996948242188 * scale, 148.517333984375 * scale, 220.99996948242188 * scale, 165.517333984375 * scale);
  ctx.bezierCurveTo(222.99996948242188 * scale, 192.517333984375 * scale, 209.99996948242188 * scale, 212.517333984375 * scale, 177.99996948242188 * scale, 213.517333984375 * scale);
  ctx.bezierCurveTo(159.99996948242188 * scale, 234.517333984375 * scale, 141.99996948242188 * scale, 234.517333984375 * scale, 116.99996948242188 * scale, 222.517333984375 * scale);
  ctx.bezierCurveTo(72.99996948242188 * scale, 226.517333984375 * scale, 66.99996948242188 * scale, 207.517333984375 * scale, 65.99996948242188 * scale, 190.517333984375 * scale);
  ctx.bezierCurveTo(35.999969482421875 * scale, 180.517333984375 * scale, 30.999969482421875 * scale, 162.517333984375 * scale, 39.999969482421875 * scale, 135.517333984375 * scale);
  ctx.bezierCurveTo(23.999969482421875 * scale, 110.517333984375 * scale, 43.999969482421875 * scale, 90.517333984375 * scale, 55.999969482421875 * scale, 85.517333984375 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(123.99996948242188 * scale, 116.18402099609375 * scale);
  ctx.bezierCurveTo(115.99996948242188 * scale, 99.18402099609375 * scale, 109.99996948242188 * scale, 74.18402099609375 * scale, 109.99996948242188 * scale, 63.18402099609375 * scale);
  ctx.bezierCurveTo(115.99996948242188 * scale, 69.18402099609375 * scale, 125.99996948242188 * scale, 87.18402099609375 * scale, 137.99996948242188 * scale, 112.18402099609375 * scale);
  ctx.bezierCurveTo(142.99996948242188 * scale, 84.18402099609375 * scale, 143.99996948242188 * scale, 76.18402099609375 * scale, 153.99996948242188 * scale, 62.18402099609375 * scale);
  ctx.bezierCurveTo(155.99996948242188 * scale, 79.18402099609375 * scale, 149.99996948242188 * scale, 110.18402099609375 * scale, 151.99996948242188 * scale, 117.18402099609375 * scale);
  ctx.bezierCurveTo(162.99996948242188 * scale, 104.18402099609375 * scale, 180.99996948242188 * scale, 91.18402099609375 * scale, 191.99996948242188 * scale, 91.18402099609375 * scale);
  ctx.bezierCurveTo(185.99996948242188 * scale, 102.18402099609375 * scale, 180.99996948242188 * scale, 106.18402099609375 * scale, 160.99996948242188 * scale, 124.18402099609375 * scale);
  ctx.bezierCurveTo(190.99996948242188 * scale, 121.18402099609375 * scale, 199.99996948242188 * scale, 120.18402099609375 * scale, 207.99996948242188 * scale, 123.18402099609375 * scale);
  ctx.bezierCurveTo(199.99996948242188 * scale, 129.18402099609375 * scale, 181.99996948242188 * scale, 132.18402099609375 * scale, 160.99996948242188 * scale, 135.18402099609375 * scale);
  ctx.bezierCurveTo(179.99996948242188 * scale, 142.18402099609375 * scale, 193.99996948242188 * scale, 151.18402099609375 * scale, 196.99996948242188 * scale, 156.18402099609375 * scale);
  ctx.bezierCurveTo(185.99996948242188 * scale, 156.18402099609375 * scale, 163.99996948242188 * scale, 149.18402099609375 * scale, 152.99996948242188 * scale, 147.18402099609375 * scale);
  ctx.bezierCurveTo(157.99996948242188 * scale, 155.18402099609375 * scale, 165.99996948242188 * scale, 176.18402099609375 * scale, 169.99996948242188 * scale, 195.18402099609375 * scale);
  ctx.bezierCurveTo(162.99996948242188 * scale, 190.18402099609375 * scale, 147.99996948242188 * scale, 167.18402099609375 * scale, 139.99996948242188 * scale, 153.18402099609375 * scale);
  ctx.bezierCurveTo(137.99996948242188 * scale, 167.18402099609375 * scale, 126.99996948242188 * scale, 194.18402099609375 * scale, 119.99996948242188 * scale, 204.18402099609375 * scale);
  ctx.bezierCurveTo(117.99996948242188 * scale, 186.18402099609375 * scale, 123.99996948242188 * scale, 165.18402099609375 * scale, 126.99996948242188 * scale, 149.18402099609375 * scale);
  ctx.bezierCurveTo(110.99996948242188 * scale, 163.18402099609375 * scale, 103.99996948242188 * scale, 170.18402099609375 * scale, 82.99996948242188 * scale, 177.18402099609375 * scale);
  ctx.bezierCurveTo(90.99996948242188 * scale, 162.18402099609375 * scale, 99.99996948242188 * scale, 153.18402099609375 * scale, 117.99996948242188 * scale, 140.18402099609375 * scale);
  ctx.bezierCurveTo(97.99996948242188 * scale, 140.18402099609375 * scale, 83.99996948242188 * scale, 139.18402099609375 * scale, 65.99996948242188 * scale, 132.18402099609375 * scale);
  ctx.bezierCurveTo(77.99996948242188 * scale, 127.18402099609375 * scale, 95.99996948242188 * scale, 127.18402099609375 * scale, 115.99996948242188 * scale, 127.18402099609375 * scale);
  ctx.bezierCurveTo(91.99996948242188 * scale, 113.18402099609375 * scale, 84.99996948242188 * scale, 107.18402099609375 * scale, 76.99996948242188 * scale, 96.18402099609375 * scale);
  ctx.bezierCurveTo(94.99996948242188 * scale, 99.18402099609375 * scale, 109.99996948242188 * scale, 109.18402099609375 * scale, 123.99996948242188 * scale, 116.18402099609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(131.99996948242188 * scale, 119.18402099609375 * scale);
  ctx.bezierCurveTo(141.99996948242188 * scale, 119.18402099609375 * scale, 145.99996948242188 * scale, 116.18402099609375 * scale, 147.99996948242188 * scale, 109.18402099609375 * scale);
  ctx.bezierCurveTo(151.99996948242188 * scale, 107.18402099609375 * scale, 159.99996948242188 * scale, 107.18402099609375 * scale, 156.99996948242188 * scale, 123.18402099609375 * scale);
  ctx.bezierCurveTo(155.99996948242188 * scale, 140.18402099609375 * scale, 142.99996948242188 * scale, 149.18402099609375 * scale, 132.99996948242188 * scale, 147.18402099609375 * scale);
  ctx.bezierCurveTo(119.99996948242188 * scale, 144.18402099609375 * scale, 113.99996948242188 * scale, 122.18402099609375 * scale, 131.99996948242188 * scale, 119.18402099609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 6 * scale);
  return can;
};

function create_brambles(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 247 * scale;
  can.height = 247 * scale;
  ctx.translate(0, 10 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(150 * scale, 62 * scale);
  ctx.bezierCurveTo(151.5 * scale, 71.5 * scale, 149 * scale, 70 * scale, 153 * scale, 81 * scale);
  ctx.bezierCurveTo(158 * scale, 73.5 * scale, 158 * scale, 73.5 * scale, 163 * scale, 66 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(164 * scale, 171 * scale);
  ctx.bezierCurveTo(149 * scale, 159 * scale, 156.5 * scale, 165 * scale, 149 * scale, 159 * scale);
  ctx.bezierCurveTo(149 * scale, 167 * scale, 149 * scale, 170 * scale, 152 * scale, 178 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(132 * scale, 95 * scale);
  ctx.bezierCurveTo(154 * scale, 102 * scale, 154 * scale, 126 * scale, 137 * scale, 139 * scale);
  ctx.bezierCurveTo(113 * scale, 152 * scale, 89 * scale, 136 * scale, 80 * scale, 121 * scale);
  ctx.bezierCurveTo(57 * scale, 89 * scale, 69 * scale, 63 * scale, 79 * scale, 52 * scale);
  ctx.bezierCurveTo(110 * scale, 20 * scale, 139 * scale, 21 * scale, 150 * scale, 25 * scale);
  ctx.bezierCurveTo(197 * scale, 36 * scale, 221 * scale, 67 * scale, 226 * scale, 90 * scale);
  ctx.bezierCurveTo(234 * scale, 134 * scale, 214 * scale, 177 * scale, 195 * scale, 197 * scale);
  ctx.bezierCurveTo(144 * scale, 242 * scale, 79 * scale, 216 * scale, 58 * scale, 206 * scale);
  ctx.bezierCurveTo(13 * scale, 174 * scale, 20 * scale, 134 * scale, 23 * scale, 107 * scale);
  ctx.bezierCurveTo(26 * scale, 78 * scale, 33 * scale, 60 * scale, 38 * scale, 43 * scale);
  ctx.bezierCurveTo(42 * scale, 32 * scale, 47 * scale, 32 * scale, 50 * scale, 36 * scale);
  ctx.bezierCurveTo(54 * scale, 37 * scale, 50 * scale, 52 * scale, 44 * scale, 87 * scale);
  ctx.bezierCurveTo(40 * scale, 115 * scale, 46 * scale, 142 * scale, 57 * scale, 158 * scale);
  ctx.bezierCurveTo(76 * scale, 189 * scale, 129 * scale, 182 * scale, 152 * scale, 173 * scale);
  ctx.bezierCurveTo(186 * scale, 156 * scale, 191 * scale, 106 * scale, 176 * scale, 85 * scale);
  ctx.bezierCurveTo(159 * scale, 61 * scale, 132 * scale, 62 * scale, 122 * scale, 66 * scale);
  ctx.bezierCurveTo(108 * scale, 74 * scale, 108 * scale, 89 * scale, 116 * scale, 90 * scale);
  ctx.bezierCurveTo(123 * scale, 92 * scale, 130 * scale, 93 * scale, 131 * scale, 94 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.translate(0, -10 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(150 * scale, 62 * scale);
  ctx.bezierCurveTo(151.5 * scale, 71.5 * scale, 149 * scale, 70 * scale, 153 * scale, 81 * scale);
  ctx.bezierCurveTo(158 * scale, 73.5 * scale, 158 * scale, 73.5 * scale, 163 * scale, 66 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(164 * scale, 171 * scale);
  ctx.bezierCurveTo(149 * scale, 159 * scale, 156.5 * scale, 165 * scale, 149 * scale, 159 * scale);
  ctx.bezierCurveTo(149 * scale, 167 * scale, 149 * scale, 170 * scale, 152 * scale, 178 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(132 * scale, 95 * scale);
  ctx.bezierCurveTo(154 * scale, 102 * scale, 154 * scale, 126 * scale, 137 * scale, 139 * scale);
  ctx.bezierCurveTo(113 * scale, 152 * scale, 89 * scale, 136 * scale, 80 * scale, 121 * scale);
  ctx.bezierCurveTo(57 * scale, 89 * scale, 69 * scale, 63 * scale, 79 * scale, 52 * scale);
  ctx.bezierCurveTo(110 * scale, 20 * scale, 139 * scale, 21 * scale, 150 * scale, 25 * scale);
  ctx.bezierCurveTo(197 * scale, 36 * scale, 221 * scale, 67 * scale, 226 * scale, 90 * scale);
  ctx.bezierCurveTo(234 * scale, 134 * scale, 214 * scale, 177 * scale, 195 * scale, 197 * scale);
  ctx.bezierCurveTo(144 * scale, 242 * scale, 79 * scale, 216 * scale, 58 * scale, 206 * scale);
  ctx.bezierCurveTo(13 * scale, 174 * scale, 20 * scale, 134 * scale, 23 * scale, 107 * scale);
  ctx.bezierCurveTo(26 * scale, 78 * scale, 33 * scale, 60 * scale, 38 * scale, 43 * scale);
  ctx.bezierCurveTo(42 * scale, 32 * scale, 47 * scale, 32 * scale, 50 * scale, 36 * scale);
  ctx.bezierCurveTo(54 * scale, 37 * scale, 50 * scale, 52 * scale, 44 * scale, 87 * scale);
  ctx.bezierCurveTo(40 * scale, 115 * scale, 46 * scale, 142 * scale, 57 * scale, 158 * scale);
  ctx.bezierCurveTo(76 * scale, 189 * scale, 129 * scale, 182 * scale, 152 * scale, 173 * scale);
  ctx.bezierCurveTo(186 * scale, 156 * scale, 191 * scale, 106 * scale, 176 * scale, 85 * scale);
  ctx.bezierCurveTo(159 * scale, 61 * scale, 132 * scale, 62 * scale, 122 * scale, 66 * scale);
  ctx.bezierCurveTo(108 * scale, 74 * scale, 108 * scale, 89 * scale, 116 * scale, 90 * scale);
  ctx.bezierCurveTo(123 * scale, 92 * scale, 130 * scale, 93 * scale, 131 * scale, 94 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(137 * scale, 137 * scale);
  ctx.bezierCurveTo(145 * scale, 125 * scale, 138 * scale, 108 * scale, 123 * scale, 104 * scale);
  ctx.bezierCurveTo(81 * scale, 101 * scale, 88 * scale, 77 * scale, 98 * scale, 65 * scale);
  ctx.bezierCurveTo(117 * scale, 38 * scale, 138 * scale, 39 * scale, 165 * scale, 52 * scale);
  ctx.bezierCurveTo(197 * scale, 72 * scale, 207 * scale, 111 * scale, 197 * scale, 140 * scale);
  ctx.bezierCurveTo(182 * scale, 180 * scale, 161 * scale, 197 * scale, 112 * scale, 194 * scale);
  ctx.bezierCurveTo(58 * scale, 194 * scale, 37 * scale, 170 * scale, 34 * scale, 142 * scale);
  ctx.bezierCurveTo(29 * scale, 102 * scale, 40 * scale, 63 * scale, 51 * scale, 45 * scale);
  ctx.bezierCurveTo(43 * scale, 78 * scale, 41 * scale, 103 * scale, 43 * scale, 122 * scale);
  ctx.bezierCurveTo(51 * scale, 158 * scale, 63 * scale, 174 * scale, 95 * scale, 179 * scale);
  ctx.bezierCurveTo(129 * scale, 186 * scale, 169 * scale, 172 * scale, 177 * scale, 144 * scale);
  ctx.bezierCurveTo(197 * scale, 105 * scale, 172 * scale, 76 * scale, 160 * scale, 71 * scale);
  ctx.bezierCurveTo(125 * scale, 52 * scale, 111 * scale, 73 * scale, 111 * scale, 81 * scale);
  ctx.bezierCurveTo(106 * scale, 93 * scale, 140 * scale, 92 * scale, 147 * scale, 107 * scale);
  ctx.bezierCurveTo(153 * scale, 128 * scale, 140 * scale, 135 * scale, 137 * scale, 139 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(132 * scale, 95 * scale);
  ctx.bezierCurveTo(154 * scale, 102 * scale, 154 * scale, 126 * scale, 137 * scale, 139 * scale);
  ctx.bezierCurveTo(113 * scale, 152 * scale, 89 * scale, 136 * scale, 80 * scale, 121 * scale);
  ctx.bezierCurveTo(57 * scale, 89 * scale, 69 * scale, 63 * scale, 79 * scale, 52 * scale);
  ctx.bezierCurveTo(110 * scale, 20 * scale, 139 * scale, 21 * scale, 150 * scale, 25 * scale);
  ctx.bezierCurveTo(197 * scale, 36 * scale, 221 * scale, 67 * scale, 226 * scale, 90 * scale);
  ctx.bezierCurveTo(234 * scale, 134 * scale, 214 * scale, 177 * scale, 195 * scale, 197 * scale);
  ctx.bezierCurveTo(144 * scale, 242 * scale, 79 * scale, 216 * scale, 58 * scale, 206 * scale);
  ctx.bezierCurveTo(13 * scale, 174 * scale, 20 * scale, 134 * scale, 23 * scale, 107 * scale);
  ctx.bezierCurveTo(26 * scale, 78 * scale, 33 * scale, 60 * scale, 38 * scale, 43 * scale);
  ctx.bezierCurveTo(42 * scale, 32 * scale, 47 * scale, 32 * scale, 50 * scale, 36 * scale);
  ctx.bezierCurveTo(54 * scale, 37 * scale, 50 * scale, 52 * scale, 44 * scale, 87 * scale);
  ctx.bezierCurveTo(40 * scale, 115 * scale, 46 * scale, 142 * scale, 57 * scale, 158 * scale);
  ctx.bezierCurveTo(76 * scale, 189 * scale, 129 * scale, 182 * scale, 152 * scale, 173 * scale);
  ctx.bezierCurveTo(186 * scale, 156 * scale, 191 * scale, 106 * scale, 176 * scale, 85 * scale);
  ctx.bezierCurveTo(159 * scale, 61 * scale, 132 * scale, 62 * scale, 122 * scale, 66 * scale);
  ctx.bezierCurveTo(108 * scale, 74 * scale, 108 * scale, 89 * scale, 116 * scale, 90 * scale);
  ctx.bezierCurveTo(123 * scale, 92 * scale, 130 * scale, 93 * scale, 131 * scale, 94 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(82 * scale, 63 * scale);
  ctx.bezierCurveTo(91 * scale, 64 * scale, 96 * scale, 62 * scale, 98 * scale, 53 * scale);
  ctx.bezierCurveTo(91 * scale, 45 * scale, 85 * scale, 42 * scale, 78 * scale, 41 * scale);
  ctx.bezierCurveTo(81 * scale, 51 * scale, 82 * scale, 57 * scale, 82 * scale, 63 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(148 * scale, 40 * scale);
  ctx.bezierCurveTo(140 * scale, 52 * scale, 131 * scale, 51 * scale, 123 * scale, 43 * scale);
  ctx.bezierCurveTo(123 * scale, 25 * scale, 129 * scale, 17 * scale, 134 * scale, 12 * scale);
  ctx.bezierCurveTo(138 * scale, 35 * scale, 142 * scale, 31 * scale, 148 * scale, 40 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(189 * scale, 43 * scale);
  ctx.bezierCurveTo(191 * scale, 54 * scale, 196 * scale, 58 * scale, 205 * scale, 59 * scale);
  ctx.bezierCurveTo(211 * scale, 42 * scale, 214 * scale, 37 * scale, 216 * scale, 31 * scale);
  ctx.bezierCurveTo(202 * scale, 34 * scale, 195 * scale, 39 * scale, 190 * scale, 43 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(216 * scale, 98 * scale);
  ctx.bezierCurveTo(219 * scale, 105 * scale, 225 * scale, 107 * scale, 230 * scale, 109 * scale);
  ctx.bezierCurveTo(227 * scale, 113 * scale, 221 * scale, 115 * scale, 215 * scale, 115 * scale);
  ctx.bezierCurveTo(208 * scale, 109 * scale, 211 * scale, 101 * scale, 216 * scale, 98 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(180 * scale, 85 * scale);
  ctx.bezierCurveTo(193 * scale, 86 * scale, 196 * scale, 98 * scale, 191 * scale, 108 * scale);
  ctx.bezierCurveTo(179 * scale, 112 * scale, 167 * scale, 113 * scale, 155 * scale, 111 * scale);
  ctx.bezierCurveTo(169 * scale, 100 * scale, 176 * scale, 96 * scale, 180 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(96 * scale, 114 * scale);
  ctx.bezierCurveTo(102 * scale, 109 * scale, 112 * scale, 110 * scale, 114 * scale, 118 * scale);
  ctx.bezierCurveTo(111 * scale, 134 * scale, 102 * scale, 143 * scale, 95 * scale, 147 * scale);
  ctx.bezierCurveTo(98 * scale, 123 * scale, 97 * scale, 119 * scale, 96 * scale, 115 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(79 * scale, 92 * scale);
  ctx.bezierCurveTo(86 * scale, 95 * scale, 89 * scale, 102 * scale, 83 * scale, 111 * scale);
  ctx.bezierCurveTo(70 * scale, 110 * scale, 61 * scale, 107 * scale, 54 * scale, 100 * scale);
  ctx.bezierCurveTo(70 * scale, 97 * scale, 70 * scale, 95 * scale, 78 * scale, 92 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39 * scale, 130 * scale);
  ctx.bezierCurveTo(37 * scale, 141 * scale, 41 * scale, 143 * scale, 48 * scale, 144 * scale);
  ctx.bezierCurveTo(54 * scale, 134 * scale, 55 * scale, 131 * scale, 56 * scale, 123 * scale);
  ctx.bezierCurveTo(47 * scale, 129 * scale, 43 * scale, 129 * scale, 39 * scale, 129 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(113 * scale, 189 * scale);
  ctx.bezierCurveTo(119 * scale, 201 * scale, 127 * scale, 198 * scale, 134 * scale, 192 * scale);
  ctx.bezierCurveTo(128 * scale, 175 * scale, 128 * scale, 173 * scale, 128 * scale, 165 * scale);
  ctx.bezierCurveTo(117 * scale, 176 * scale, 116 * scale, 182 * scale, 113 * scale, 187 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(74 * scale, 154 * scale);
  ctx.bezierCurveTo(76 * scale, 163 * scale, 76 * scale, 170 * scale, 75 * scale, 177 * scale);
  ctx.bezierCurveTo(68 * scale, 179 * scale, 66 * scale, 176 * scale, 63 * scale, 171 * scale);
  ctx.bezierCurveTo(69 * scale, 164 * scale, 72 * scale, 159 * scale, 74 * scale, 154 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(206 * scale, 152 * scale);
  ctx.bezierCurveTo(198 * scale, 158 * scale, 198 * scale, 166 * scale, 201 * scale, 171 * scale);
  ctx.bezierCurveTo(209 * scale, 170 * scale, 221 * scale, 170 * scale, 226 * scale, 172 * scale);
  ctx.bezierCurveTo(219 * scale, 159 * scale, 210 * scale, 155 * scale, 207 * scale, 153 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(181 * scale, 184 * scale);
  ctx.bezierCurveTo(170 * scale, 184 * scale, 167 * scale, 187 * scale, 163 * scale, 195 * scale);
  ctx.bezierCurveTo(171 * scale, 207 * scale, 183 * scale, 214 * scale, 191 * scale, 217 * scale);
  ctx.bezierCurveTo(183 * scale, 204 * scale, 184 * scale, 196 * scale, 181 * scale, 184 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(66 * scale, 199 * scale);
  ctx.bezierCurveTo(73 * scale, 197 * scale, 78 * scale, 199 * scale, 79 * scale, 206 * scale);
  ctx.bezierCurveTo(71 * scale, 216 * scale, 67 * scale, 221 * scale, 57 * scale, 223 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(182 * scale, 143 * scale);
  ctx.bezierCurveTo(183 * scale, 146 * scale, 183 * scale, 149 * scale, 179 * scale, 152 * scale);
  ctx.bezierCurveTo(174 * scale, 146 * scale, 174 * scale, 146 * scale, 169 * scale, 140 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(32 * scale, 159 * scale);
  ctx.bezierCurveTo(45 * scale, 160 * scale, 48 * scale, 164 * scale, 45 * scale, 175 * scale);
  ctx.bezierCurveTo(28 * scale, 183 * scale, 25 * scale, 184 * scale, 19 * scale, 184 * scale);
  ctx.bezierCurveTo(30 * scale, 170 * scale, 29 * scale, 164 * scale, 31 * scale, 160 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(110 * scale, 214 * scale);
  ctx.bezierCurveTo(106 * scale, 212 * scale, 104 * scale, 213 * scale, 102 * scale, 218 * scale);
  ctx.bezierCurveTo(104 * scale, 220 * scale, 107 * scale, 222 * scale, 110 * scale, 224 * scale);
  ctx.bezierCurveTo(110.5 * scale, 219 * scale, 110.5 * scale, 219 * scale, 111 * scale, 214 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(40 * scale, 52 * scale);
  ctx.bezierCurveTo(41 * scale, 57 * scale, 40 * scale, 61 * scale, 34 * scale, 60 * scale);
  ctx.bezierCurveTo(31.5 * scale, 55 * scale, 31.5 * scale, 55 * scale, 29 * scale, 50 * scale);
  ctx.bezierCurveTo(34 * scale, 50.5 * scale, 34 * scale, 50.5 * scale, 39 * scale, 51 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(31 * scale, 81 * scale);
  ctx.bezierCurveTo(37 * scale, 84 * scale, 38 * scale, 90 * scale, 34 * scale, 99 * scale);
  ctx.bezierCurveTo(23 * scale, 97 * scale, 19 * scale, 96 * scale, 16 * scale, 93 * scale);
  ctx.bezierCurveTo(24 * scale, 88 * scale, 28 * scale, 85 * scale, 30 * scale, 81 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 5 * scale);
  return can;
};

function create_hood(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 465 * scale;
  can.height = 310 * scale;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(126 * scale, 192 * scale);
  ctx.bezierCurveTo(198 * scale, 202 * scale, 245 * scale, 203 * scale, 335 * scale, 194 * scale);
  ctx.bezierCurveTo(336 * scale, 232 * scale, 326 * scale, 235 * scale, 232 * scale, 237 * scale);
  ctx.bezierCurveTo(161 * scale, 235 * scale, 122 * scale, 235 * scale, 126 * scale, 193 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(146 * scale, 239 * scale);
  ctx.bezierCurveTo(174 * scale, 74 * scale, 287 * scale, 88 * scale, 320 * scale, 240 * scale);
  ctx.bezierCurveTo(329 * scale, 231 * scale, 340 * scale, 219 * scale, 332 * scale, 115 * scale);
  ctx.bezierCurveTo(330 * scale, 40 * scale, 144 * scale, 30 * scale, 129 * scale, 116 * scale);
  ctx.bezierCurveTo(124 * scale, 217 * scale, 124 * scale, 228 * scale, 143 * scale, 237 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(126 * scale, 193 * scale);
  ctx.bezierCurveTo(173 * scale, 94 * scale, 209 * scale, 100 * scale, 228 * scale, 57 * scale);
  ctx.bezierCurveTo(190 * scale, 112 * scale, 165 * scale, 115 * scale, 127 * scale, 184 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(230 * scale, 57 * scale);
  ctx.bezierCurveTo(266 * scale, 117 * scale, 310 * scale, 130 * scale, 332 * scale, 183 * scale);
  ctx.bezierCurveTo(290 * scale, 112 * scale, 262 * scale, 109 * scale, 230 * scale, 56 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(154 * scale, 212 * scale);
  ctx.bezierCurveTo(208 * scale, 224 * scale, 252 * scale, 219 * scale, 305 * scale, 212 * scale);
  ctx.bezierCurveTo(267 * scale, 219 * scale, 204 * scale, 222 * scale, 155 * scale, 212 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(239 * scale, 59 * scale);
  ctx.bezierCurveTo(302 * scale, 72 * scale, 325 * scale, 84 * scale, 326 * scale, 115 * scale);
  ctx.bezierCurveTo(289 * scale, 80 * scale, 270 * scale, 88 * scale, 253 * scale, 78 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(216 * scale, 61 * scale);
  ctx.bezierCurveTo(209 * scale, 70 * scale, 209 * scale, 70 * scale, 202 * scale, 79 * scale);
  ctx.bezierCurveTo(173 * scale, 87 * scale, 162 * scale, 91 * scale, 137 * scale, 107 * scale);
  ctx.bezierCurveTo(153 * scale, 78 * scale, 174 * scale, 67 * scale, 212 * scale, 62 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(175 * scale, 125 * scale);
  ctx.bezierCurveTo(218 * scale, 94 * scale, 238 * scale, 90 * scale, 281 * scale, 125 * scale);
  ctx.bezierCurveTo(245 * scale, 89 * scale, 240 * scale, 80 * scale, 228 * scale, 67 * scale);
  ctx.bezierCurveTo(207 * scale, 100 * scale, 192 * scale, 104 * scale, 177 * scale, 123 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  return can;
};

function create_winter_hood(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 465 * scale;
  can.height = 405 * scale;
  ctx.globalAlpha = 1;
  ctx.translate(6 * scale, 0 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(39.000030517578125 * scale, 162.03977966308594 * scale);
  ctx.bezierCurveTo(125.00003051757812 * scale, 84.03977966308594 * scale, 108.50003051757812 * scale, 115.03977966308594 * scale, 178.00003051757812 * scale, 68.03977966308594 * scale);
  ctx.bezierCurveTo(299.0000305175781 * scale, 146.53977966308594 * scale, 299.0000305175781 * scale, 146.53977966308594 * scale, 420.0000305175781 * scale, 225.03977966308594 * scale);
  ctx.bezierCurveTo(400.0000305175781 * scale, 288.53977966308594 * scale, 400.0000305175781 * scale, 288.53977966308594 * scale, 380.0000305175781 * scale, 352.03977966308594 * scale);
  ctx.bezierCurveTo(216.50003051757812 * scale, 345.53977966308594 * scale, 216.50003051757812 * scale, 345.53977966308594 * scale, 53.000030517578125 * scale, 339.03977966308594 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(23.000030517578125 * scale, 306.94886779785156 * scale);
  ctx.bezierCurveTo(5.000030517578125 * scale, 275.94886779785156 * scale, 6.000030517578125 * scale, 201.94886779785156 * scale, 14.000030517578125 * scale, 150.94886779785156 * scale);
  ctx.bezierCurveTo(40.000030517578125 * scale, 34.94886779785156 * scale, 157.00003051757812 * scale, 14.948867797851562 * scale, 199.00003051757812 * scale, 11.948867797851562 * scale);
  ctx.bezierCurveTo(331.0000305175781 * scale, 0.9488677978515625 * scale, 409.0000305175781 * scale, 61.94886779785156 * scale, 428.0000305175781 * scale, 133.94886779785156 * scale);
  ctx.bezierCurveTo(445.0000305175781 * scale, 207.94886779785156 * scale, 439.0000305175781 * scale, 274.94886779785156 * scale, 426.0000305175781 * scale, 342.94886779785156 * scale);
  ctx.bezierCurveTo(355.0000305175781 * scale, 207.94886779785156 * scale, 345.0000305175781 * scale, 208.94886779785156 * scale, 333.0000305175781 * scale, 202.94886779785156 * scale);
  ctx.bezierCurveTo(262.0000305175781 * scale, 143.94886779785156 * scale, 236.00003051757812 * scale, 148.94886779785156 * scale, 189.00003051757812 * scale, 162.94886779785156 * scale);
  ctx.bezierCurveTo(82.00003051757812 * scale, 190.94886779785156 * scale, 78.00003051757812 * scale, 235.94886779785156 * scale, 62.000030517578125 * scale, 279.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(17.000030517578125 * scale, 149.94886779785156 * scale);
  ctx.bezierCurveTo(76.00003051757812 * scale, 67.94886779785156 * scale, 177.00003051757812 * scale, 40.94886779785156 * scale, 232.00003051757812 * scale, 45.94886779785156 * scale);
  ctx.bezierCurveTo(316.0000305175781 * scale, 46.94886779785156 * scale, 359.0000305175781 * scale, 74.94886779785156 * scale, 428.0000305175781 * scale, 145.94886779785156 * scale);
  ctx.bezierCurveTo(414.0000305175781 * scale, 73.94886779785156 * scale, 386.0000305175781 * scale, 68.94886779785156 * scale, 359.0000305175781 * scale, 43.94886779785156 * scale);
  ctx.bezierCurveTo(295.0000305175781 * scale, 5.9488677978515625 * scale, 239.00003051757812 * scale, 10.948867797851562 * scale, 207.00003051757812 * scale, 10.948867797851562 * scale);
  ctx.bezierCurveTo(121.00003051757812 * scale, 20.948867797851562 * scale, 104.00003051757812 * scale, 34.94886779785156 * scale, 45.000030517578125 * scale, 84.94886779785156 * scale);
  ctx.bezierCurveTo(14.000030517578125 * scale, 128.94886779785156 * scale, 18.000030517578125 * scale, 142.94886779785156 * scale, 16.000030517578125 * scale, 151.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[2]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(23.000030517578125 * scale, 306.94886779785156 * scale);
  ctx.bezierCurveTo(5.000030517578125 * scale, 275.94886779785156 * scale, 6.000030517578125 * scale, 201.94886779785156 * scale, 14.000030517578125 * scale, 150.94886779785156 * scale);
  ctx.bezierCurveTo(40.000030517578125 * scale, 34.94886779785156 * scale, 157.00003051757812 * scale, 14.948867797851562 * scale, 199.00003051757812 * scale, 11.948867797851562 * scale);
  ctx.bezierCurveTo(331.0000305175781 * scale, 0.9488677978515625 * scale, 409.0000305175781 * scale, 61.94886779785156 * scale, 428.0000305175781 * scale, 133.94886779785156 * scale);
  ctx.bezierCurveTo(445.0000305175781 * scale, 207.94886779785156 * scale, 439.0000305175781 * scale, 274.94886779785156 * scale, 426.0000305175781 * scale, 342.94886779785156 * scale);
  ctx.bezierCurveTo(355.0000305175781 * scale, 207.94886779785156 * scale, 345.0000305175781 * scale, 208.94886779785156 * scale, 333.0000305175781 * scale, 202.94886779785156 * scale);
  ctx.bezierCurveTo(262.0000305175781 * scale, 143.94886779785156 * scale, 236.00003051757812 * scale, 148.94886779785156 * scale, 189.00003051757812 * scale, 162.94886779785156 * scale);
  ctx.bezierCurveTo(82.00003051757812 * scale, 190.94886779785156 * scale, 78.00003051757812 * scale, 235.94886779785156 * scale, 62.000030517578125 * scale, 279.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[1], 16 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(60.000030517578125 * scale, 288.03977966308594 * scale);
  ctx.bezierCurveTo(183.00003051757812 * scale, 320.03977966308594 * scale, 342.0000305175781 * scale, 306.03977966308594 * scale, 399.0000305175781 * scale, 286.03977966308594 * scale);
  ctx.bezierCurveTo(420.0000305175781 * scale, 345.03977966308594 * scale, 410.0000305175781 * scale, 335.03977966308594 * scale, 415.0000305175781 * scale, 362.03977966308594 * scale);
  ctx.bezierCurveTo(351.0000305175781 * scale, 384.03977966308594 * scale, 299.0000305175781 * scale, 389.03977966308594 * scale, 215.00003051757812 * scale, 391.03977966308594 * scale);
  ctx.bezierCurveTo(128.00003051757812 * scale, 388.03977966308594 * scale, 69.00003051757812 * scale, 373.03977966308594 * scale, 39.000030517578125 * scale, 359.03977966308594 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 13 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(47.000030517578125 * scale, 327.03977966308594 * scale);
  ctx.bezierCurveTo(203.00003051757812 * scale, 377.03977966308594 * scale, 331.0000305175781 * scale, 349.03977966308594 * scale, 410.0000305175781 * scale, 330.03977966308594 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(9.000030517578125 * scale, 339.1306915283203 * scale);
  ctx.bezierCurveTo(2.000030517578125 * scale, 280.1306915283203 * scale, 30.000030517578125 * scale, 219.1306915283203 * scale, 85.00003051757812 * scale, 167.1306915283203 * scale);
  ctx.bezierCurveTo(174.00003051757812 * scale, 82.13069152832031 * scale, 241.00003051757812 * scale, 101.13069152832031 * scale, 284.0000305175781 * scale, 115.13069152832031 * scale);
  ctx.bezierCurveTo(333.0000305175781 * scale, 134.1306915283203 * scale, 376.0000305175781 * scale, 177.1306915283203 * scale, 410.0000305175781 * scale, 247.1306915283203 * scale);
  ctx.bezierCurveTo(439.0000305175781 * scale, 300.1306915283203 * scale, 442.0000305175781 * scale, 346.1306915283203 * scale, 430.0000305175781 * scale, 363.1306915283203 * scale);
  ctx.bezierCurveTo(418.0000305175781 * scale, 366.1306915283203 * scale, 395.0000305175781 * scale, 295.1306915283203 * scale, 355.0000305175781 * scale, 223.1306915283203 * scale);
  ctx.bezierCurveTo(299.0000305175781 * scale, 156.1306915283203 * scale, 262.0000305175781 * scale, 155.1306915283203 * scale, 215.00003051757812 * scale, 159.1306915283203 * scale);
  ctx.bezierCurveTo(133.00003051757812 * scale, 171.1306915283203 * scale, 120.00003051757812 * scale, 193.1306915283203 * scale, 96.00003051757812 * scale, 221.1306915283203 * scale);
  ctx.bezierCurveTo(49.000030517578125 * scale, 262.1306915283203 * scale, 47.000030517578125 * scale, 306.1306915283203 * scale, 38.000030517578125 * scale, 336.1306915283203 * scale);
  ctx.bezierCurveTo(30.000030517578125 * scale, 349.1306915283203 * scale, 30.000030517578125 * scale, 349.1306915283203 * scale, 22.000030517578125 * scale, 362.1306915283203 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 20 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(228.00003051757812 * scale, 128.03977966308594 * scale);
  ctx.bezierCurveTo(315.0000305175781 * scale, 131.03977966308594 * scale, 349.0000305175781 * scale, 178.03977966308594 * scale, 386.0000305175781 * scale, 234.03977966308594 * scale);
  ctx.bezierCurveTo(444.0000305175781 * scale, 329.03977966308594 * scale, 446.0000305175781 * scale, 354.03977966308594 * scale, 427.0000305175781 * scale, 373.03977966308594 * scale);
  ctx.bezierCurveTo(389.0000305175781 * scale, 389.03977966308594 * scale, 399.0000305175781 * scale, 329.03977966308594 * scale, 361.0000305175781 * scale, 277.03977966308594 * scale);
  ctx.bezierCurveTo(306.0000305175781 * scale, 191.03977966308594 * scale, 266.0000305175781 * scale, 183.03977966308594 * scale, 220.00003051757812 * scale, 181.03977966308594 * scale);
  ctx.bezierCurveTo(138.00003051757812 * scale, 184.03977966308594 * scale, 123.00003051757812 * scale, 212.03977966308594 * scale, 89.00003051757812 * scale, 271.03977966308594 * scale);
  ctx.bezierCurveTo(52.000030517578125 * scale, 349.03977966308594 * scale, 68.00003051757812 * scale, 364.03977966308594 * scale, 33.000030517578125 * scale, 369.03977966308594 * scale);
  ctx.bezierCurveTo(6.000030517578125 * scale, 366.03977966308594 * scale, 5.000030517578125 * scale, 341.03977966308594 * scale, 26.000030517578125 * scale, 288.03977966308594 * scale);
  ctx.bezierCurveTo(60.000030517578125 * scale, 207.03977966308594 * scale, 100.00003051757812 * scale, 180.03977966308594 * scale, 113.00003051757812 * scale, 170.03977966308594 * scale);
  ctx.bezierCurveTo(159.00003051757812 * scale, 132.03977966308594 * scale, 196.00003051757812 * scale, 133.03977966308594 * scale, 226.00003051757812 * scale, 129.03977966308594 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 20 * scale);
  return can;
};

function create_peasant(scale, draw_shadow, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 198 * scale;
  can.height = 147 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(44 * scale, 76 * scale);
  ctx.bezierCurveTo(50 * scale, 82 * scale, 50 * scale, 82 * scale, 56 * scale, 88 * scale);
  ctx.bezierCurveTo(59 * scale, 82 * scale, 59 * scale, 82 * scale, 62 * scale, 76 * scale);
  ctx.bezierCurveTo(59 * scale, 71 * scale, 59 * scale, 71 * scale, 56 * scale, 66 * scale);
  ctx.bezierCurveTo(59 * scale, 69 * scale, 59 * scale, 69 * scale, 62 * scale, 72 * scale);
  ctx.bezierCurveTo(80 * scale, 48 * scale, 102 * scale, 50 * scale, 120 * scale, 62 * scale);
  ctx.bezierCurveTo(127 * scale, 58 * scale, 127 * scale, 58 * scale, 134 * scale, 54 * scale);
  ctx.bezierCurveTo(129 * scale, 60 * scale, 129 * scale, 60 * scale, 124 * scale, 66 * scale);
  ctx.bezierCurveTo(129 * scale, 73 * scale, 129 * scale, 73 * scale, 134 * scale, 80 * scale);
  ctx.bezierCurveTo(140 * scale, 74 * scale, 140 * scale, 74 * scale, 146 * scale, 68 * scale);
  ctx.bezierCurveTo(142 * scale, 76 * scale, 142 * scale, 76 * scale, 138 * scale, 84 * scale);
  ctx.bezierCurveTo(144 * scale, 90 * scale, 142 * scale, 90 * scale, 144 * scale, 90 * scale);
  ctx.bezierCurveTo(136 * scale, 97 * scale, 136 * scale, 97 * scale, 128 * scale, 104 * scale);
  ctx.bezierCurveTo(154 * scale, 110 * scale, 164 * scale, 90 * scale, 160 * scale, 80 * scale);
  ctx.bezierCurveTo(138 * scale, 22 * scale, 148 * scale, 51 * scale, 136 * scale, 22 * scale);
  ctx.bezierCurveTo(97 * scale, 24 * scale, 97 * scale, 24 * scale, 58 * scale, 26 * scale);
  ctx.bezierCurveTo(47 * scale, 54 * scale, 36 * scale, 80 * scale, 36 * scale, 82 * scale);
  ctx.bezierCurveTo(40 * scale, 108 * scale, 54 * scale, 104 * scale, 62 * scale, 104 * scale);
  ctx.bezierCurveTo(46 * scale, 92 * scale, 54 * scale, 97 * scale, 46 * scale, 90 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36 * scale, 80 * scale);
  ctx.bezierCurveTo(30 * scale, 84 * scale, 28 * scale, 92 * scale, 34 * scale, 100 * scale);
  ctx.bezierCurveTo(41.5 * scale, 102 * scale, 41.5 * scale, 102 * scale, 49 * scale, 104 * scale);
  ctx.bezierCurveTo(43 * scale, 105.5 * scale, 43 * scale, 105.5 * scale, 37 * scale, 107 * scale);
  ctx.bezierCurveTo(46 * scale, 111 * scale, 60 * scale, 114 * scale, 76 * scale, 114 * scale);
  ctx.bezierCurveTo(78 * scale, 110.5 * scale, 78 * scale, 110.5 * scale, 80 * scale, 107 * scale);
  ctx.bezierCurveTo(81 * scale, 110.5 * scale, 81 * scale, 110.5 * scale, 82 * scale, 114 * scale);
  ctx.bezierCurveTo(94.5 * scale, 113.5 * scale, 94.5 * scale, 113.5 * scale, 107 * scale, 113 * scale);
  ctx.bezierCurveTo(108.5 * scale, 110 * scale, 108.5 * scale, 110 * scale, 110 * scale, 107 * scale);
  ctx.bezierCurveTo(111.5 * scale, 110.5 * scale, 111.5 * scale, 110.5 * scale, 113 * scale, 114 * scale);
  ctx.bezierCurveTo(131 * scale, 112.5 * scale, 131 * scale, 112.5 * scale, 149 * scale, 111 * scale);
  ctx.bezierCurveTo(148.5 * scale, 107.5 * scale, 148.5 * scale, 107.5 * scale, 148 * scale, 104 * scale);
  ctx.bezierCurveTo(150.5 * scale, 107 * scale, 150.5 * scale, 107 * scale, 153 * scale, 110 * scale);
  ctx.bezierCurveTo(155.5 * scale, 108.5 * scale, 155.5 * scale, 108.5 * scale, 158 * scale, 107 * scale);
  ctx.bezierCurveTo(156.5 * scale, 104 * scale, 156.5 * scale, 104 * scale, 155 * scale, 101 * scale);
  ctx.bezierCurveTo(158.5 * scale, 102.5 * scale, 158.5 * scale, 102.5 * scale, 162 * scale, 104 * scale);
  ctx.bezierCurveTo(168 * scale, 100 * scale, 170 * scale, 92 * scale, 169 * scale, 85 * scale);
  ctx.bezierCurveTo(166 * scale, 86 * scale, 166 * scale, 86 * scale, 163 * scale, 87 * scale);
  ctx.bezierCurveTo(165.5 * scale, 83 * scale, 165.5 * scale, 83 * scale, 168 * scale, 79 * scale);
  ctx.bezierCurveTo(165.5 * scale, 76.5 * scale, 165.5 * scale, 76.5 * scale, 163 * scale, 74 * scale);
  ctx.bezierCurveTo(155 * scale, 82.5 * scale, 155 * scale, 82.5 * scale, 147 * scale, 91 * scale);
  ctx.bezierCurveTo(139 * scale, 95.5 * scale, 139 * scale, 95.5 * scale, 131 * scale, 100 * scale);
  ctx.bezierCurveTo(97.5 * scale, 100.5 * scale, 97.5 * scale, 100.5 * scale, 64 * scale, 101 * scale);
  ctx.bezierCurveTo(49 * scale, 102 * scale, 43 * scale, 90 * scale, 36 * scale, 80 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36 * scale, 80 * scale);
  ctx.bezierCurveTo(30 * scale, 84 * scale, 28 * scale, 92 * scale, 34 * scale, 100 * scale);
  ctx.bezierCurveTo(41.5 * scale, 102 * scale, 41.5 * scale, 102 * scale, 49 * scale, 104 * scale);
  ctx.bezierCurveTo(43 * scale, 105.5 * scale, 43 * scale, 105.5 * scale, 37 * scale, 107 * scale);
  ctx.bezierCurveTo(46 * scale, 111 * scale, 60 * scale, 114 * scale, 76 * scale, 114 * scale);
  ctx.bezierCurveTo(78 * scale, 110.5 * scale, 78 * scale, 110.5 * scale, 80 * scale, 107 * scale);
  ctx.bezierCurveTo(81 * scale, 110.5 * scale, 81 * scale, 110.5 * scale, 82 * scale, 114 * scale);
  ctx.bezierCurveTo(94.5 * scale, 113.5 * scale, 94.5 * scale, 113.5 * scale, 107 * scale, 113 * scale);
  ctx.bezierCurveTo(108.5 * scale, 110 * scale, 108.5 * scale, 110 * scale, 110 * scale, 107 * scale);
  ctx.bezierCurveTo(111.5 * scale, 110.5 * scale, 111.5 * scale, 110.5 * scale, 113 * scale, 114 * scale);
  ctx.bezierCurveTo(131 * scale, 112.5 * scale, 131 * scale, 112.5 * scale, 149 * scale, 111 * scale);
  ctx.bezierCurveTo(148.5 * scale, 107.5 * scale, 148.5 * scale, 107.5 * scale, 148 * scale, 104 * scale);
  ctx.bezierCurveTo(150.5 * scale, 107 * scale, 150.5 * scale, 107 * scale, 153 * scale, 110 * scale);
  ctx.bezierCurveTo(155.5 * scale, 108.5 * scale, 155.5 * scale, 108.5 * scale, 158 * scale, 107 * scale);
  ctx.bezierCurveTo(156.5 * scale, 104 * scale, 156.5 * scale, 104 * scale, 155 * scale, 101 * scale);
  ctx.bezierCurveTo(158.5 * scale, 102.5 * scale, 158.5 * scale, 102.5 * scale, 162 * scale, 104 * scale);
  ctx.bezierCurveTo(168 * scale, 100 * scale, 170 * scale, 92 * scale, 169 * scale, 85 * scale);
  ctx.bezierCurveTo(166 * scale, 86 * scale, 166 * scale, 86 * scale, 163 * scale, 87 * scale);
  ctx.bezierCurveTo(165.5 * scale, 83 * scale, 165.5 * scale, 83 * scale, 168 * scale, 79 * scale);
  ctx.bezierCurveTo(165.5 * scale, 76.5 * scale, 165.5 * scale, 76.5 * scale, 163 * scale, 74 * scale);
  ctx.bezierCurveTo(155 * scale, 82.5 * scale, 155 * scale, 82.5 * scale, 147 * scale, 91 * scale);
  ctx.bezierCurveTo(139 * scale, 95.5 * scale, 139 * scale, 95.5 * scale, 131 * scale, 100 * scale);
  ctx.bezierCurveTo(97.5 * scale, 100.5 * scale, 97.5 * scale, 100.5 * scale, 64 * scale, 101 * scale);
  ctx.bezierCurveTo(49 * scale, 102 * scale, 43 * scale, 90 * scale, 36 * scale, 80 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(49 * scale, 98 * scale);
  ctx.bezierCurveTo(96.5 * scale, 98 * scale, 96.5 * scale, 98 * scale, 144 * scale, 98 * scale);
  ctx.bezierCurveTo(136.5 * scale, 102 * scale, 136.5 * scale, 102 * scale, 129 * scale, 106 * scale);
  ctx.bezierCurveTo(103 * scale, 105.5 * scale, 103 * scale, 105.5 * scale, 77 * scale, 105 * scale);
  ctx.bezierCurveTo(65 * scale, 105 * scale, 65 * scale, 105 * scale, 53 * scale, 105 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.globalAlpha = 0.5;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(54 * scale, 98 * scale);
  ctx.bezierCurveTo(97 * scale, 98 * scale, 97 * scale, 98 * scale, 140 * scale, 98 * scale);
  ctx.bezierCurveTo(134 * scale, 101 * scale, 134 * scale, 101 * scale, 128 * scale, 104 * scale);
  ctx.bezierCurveTo(92 * scale, 104 * scale, 92 * scale, 104 * scale, 56 * scale, 104 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(118 * scale, 47 * scale);
  ctx.bezierCurveTo(124.5 * scale, 43.5 * scale, 124.5 * scale, 43.5 * scale, 131 * scale, 40 * scale);
  ctx.bezierCurveTo(128 * scale, 46 * scale, 128 * scale, 46 * scale, 125 * scale, 52 * scale);
  ctx.bezierCurveTo(131 * scale, 57 * scale, 135 * scale, 64 * scale, 139 * scale, 73 * scale);
  ctx.bezierCurveTo(142.5 * scale, 69.5 * scale, 142.5 * scale, 69.5 * scale, 146 * scale, 66 * scale);
  ctx.bezierCurveTo(143.5 * scale, 72.5 * scale, 143.5 * scale, 72.5 * scale, 141 * scale, 79 * scale);
  ctx.bezierCurveTo(142 * scale, 91 * scale, 141 * scale, 94 * scale, 132 * scale, 98 * scale);
  ctx.bezierCurveTo(117 * scale, 102 * scale, 126 * scale, 108 * scale, 142 * scale, 102 * scale);
  ctx.bezierCurveTo(159 * scale, 98 * scale, 164 * scale, 80 * scale, 162 * scale, 47 * scale);
  ctx.bezierCurveTo(160 * scale, 19 * scale, 150 * scale, 6 * scale, 117 * scale, 4 * scale);
  ctx.bezierCurveTo(44 * scale, 0 * scale, 35 * scale, 20 * scale, 33 * scale, 37 * scale);
  ctx.bezierCurveTo(29 * scale, 69 * scale, 33 * scale, 88 * scale, 44 * scale, 96 * scale);
  ctx.bezierCurveTo(64 * scale, 107 * scale, 70 * scale, 102 * scale, 54 * scale, 93 * scale);
  ctx.bezierCurveTo(49 * scale, 88 * scale, 50 * scale, 82 * scale, 53 * scale, 77 * scale);
  ctx.bezierCurveTo(51.5 * scale, 71 * scale, 51.5 * scale, 71 * scale, 50 * scale, 65 * scale);
  ctx.bezierCurveTo(53 * scale, 68.5 * scale, 53 * scale, 68.5 * scale, 56 * scale, 72 * scale);
  ctx.bezierCurveTo(59 * scale, 67.5 * scale, 59 * scale, 67.5 * scale, 62 * scale, 63 * scale);
  ctx.bezierCurveTo(60.5 * scale, 59.5 * scale, 60.5 * scale, 59.5 * scale, 59 * scale, 56 * scale);
  ctx.bezierCurveTo(62 * scale, 57 * scale, 62 * scale, 57 * scale, 65 * scale, 58 * scale);
  ctx.bezierCurveTo(78 * scale, 35 * scale, 103 * scale, 36 * scale, 117 * scale, 47 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(62 * scale, 21 * scale);
  ctx.bezierCurveTo(63 * scale, 34 * scale, 64 * scale, 37 * scale, 66 * scale, 40 * scale);
  ctx.bezierCurveTo(54 * scale, 49 * scale, 53 * scale, 51 * scale, 48 * scale, 58 * scale);
  ctx.bezierCurveTo(44 * scale, 51 * scale, 42 * scale, 43 * scale, 40 * scale, 36 * scale);
  ctx.bezierCurveTo(47 * scale, 28 * scale, 52 * scale, 25 * scale, 61 * scale, 21 * scale);
  ctx.closePath();
  fill_path(ctx, color[4]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(60 * scale, 29 * scale);
  ctx.bezierCurveTo(62 * scale, 25 * scale, 65 * scale, 24 * scale, 70 * scale, 23 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(61 * scale, 37 * scale);
  ctx.bezierCurveTo(63 * scale, 32 * scale, 66 * scale, 32 * scale, 71 * scale, 32 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(52 * scale, 31 * scale);
  ctx.bezierCurveTo(50 * scale, 26 * scale, 50 * scale, 25 * scale, 51 * scale, 23 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(46 * scale, 35 * scale);
  ctx.bezierCurveTo(44 * scale, 31 * scale, 43 * scale, 29 * scale, 45 * scale, 26 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58 * scale, 44 * scale);
  ctx.bezierCurveTo(57 * scale, 48 * scale, 57 * scale, 50 * scale, 60 * scale, 52 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(53 * scale, 48 * scale);
  ctx.bezierCurveTo(52 * scale, 52 * scale, 52 * scale, 54 * scale, 55 * scale, 57 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(46 * scale, 41 * scale);
  ctx.bezierCurveTo(41 * scale, 42 * scale, 39 * scale, 45 * scale, 38 * scale, 48 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(48 * scale, 48 * scale);
  ctx.bezierCurveTo(42 * scale, 51 * scale, 42 * scale, 53 * scale, 40 * scale, 55 * scale);
  fill_path(ctx, undefined, color[3], 4 * scale);
  if (i == 0) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(99 * scale, 101 * scale);
    ctx.bezierCurveTo(118.6666259765625 * scale, 104.33331298828125 * scale, 124.6666259765625 * scale, 116.33331298828125 * scale, 112.6666259765625 * scale, 114.33331298828125 * scale);
    ctx.bezierCurveTo(104.6666259765625 * scale, 112.33331298828125 * scale, 100.6666259765625 * scale, 105.33331298828125 * scale, 99.6666259765625 * scale, 101.33331298828125 * scale);
    fill_path(ctx, undefined, color[5], 6 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(97.6666259765625 * scale, 101.33331298828125 * scale);
    ctx.bezierCurveTo(81.6666259765625 * scale, 106.33331298828125 * scale, 79.6666259765625 * scale, 114.33331298828125 * scale, 89.6666259765625 * scale, 114.33331298828125 * scale);
    ctx.bezierCurveTo(95.6666259765625 * scale, 111.33331298828125 * scale, 95.6666259765625 * scale, 109.33331298828125 * scale, 98.6666259765625 * scale, 102.33331298828125 * scale);
    fill_path(ctx, undefined, color[5], 6 * scale);
  } else {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(103 * scale, 100.39999389648438 * scale);
    ctx.bezierCurveTo(120 * scale, 106.39999389648438 * scale, 118 * scale, 107.39999389648438 * scale, 120 * scale, 111.39999389648438 * scale);
    fill_path(ctx, undefined, color[5], 6 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(103 * scale, 100.39999389648438 * scale);
    ctx.bezierCurveTo(90 * scale, 103.39999389648438 * scale, 89 * scale, 106.39999389648438 * scale, 87 * scale, 112.39999389648438 * scale);
    fill_path(ctx, undefined, color[5], 6 * scale);
    circle(ctx, 86 * scale, 114.39999389648438 * scale, 4.5 * scale);
    fill_path(ctx, color[1], color[5], 6 * scale);
    circle(ctx, 121 * scale, 114.39999389648438 * scale, 4.5 * scale);
    fill_path(ctx, color[1], color[5], 6 * scale);
  }
  return can;
};

function create_treasure_chest(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 253 * scale;
  can.height = 192 * scale;
  ctx.globalAlpha = 0.5;
  ctx.save();
  ctx.translate(42 * scale, 99 * scale);
  ctx.globalAlpha = 0.5;
  round_rect(ctx, -7 * scale, -20 * scale, 14 * scale, 39 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(37 * scale, 94 * scale);
  round_rect(ctx, -7 * scale, -20 * scale, 14 * scale, 37 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.globalAlpha = 0.5;
  ctx.save();
  ctx.translate(136 * scale, 99 * scale);
  ctx.globalAlpha = 0.5;
  round_rect(ctx, -84 * scale, -67 * scale, 168 * scale, 134 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 13 * scale);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(131 * scale, 94 * scale);
  round_rect(ctx, -84 * scale, -67 * scale, 168 * scale, 134 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[2], color[2], 13 * scale);
  ctx.save();
  ctx.translate(131 * scale, 94 * scale);
  round_rect(ctx, -76 * scale, -61 * scale, 152 * scale, 122 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[1], 8 * scale);
  ctx.save();
  ctx.translate(168.5 * scale, 93.5 * scale);
  round_rect(ctx, -30.5 * scale, -58.5 * scale, 61 * scale, 117 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.save();
  ctx.translate(93.5 * scale, 95.5 * scale);
  round_rect(ctx, -32 * scale, -59.5 * scale, 59 * scale, 119 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.save();
  ctx.translate(130.5 * scale, 94 * scale);
  round_rect(ctx, -36 * scale, -67 * scale, 73 * scale, 134 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[2], 8 * scale);
  ctx.globalAlpha = 0.5;
  ctx.save();
  ctx.translate(133 * scale, 97 * scale);
  round_rect(ctx, -83 * scale, -12 * scale, 160 * scale, 24 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(133 * scale, 92 * scale);
  round_rect(ctx, -83 * scale, -12 * scale, 160 * scale, 24 * scale, 0 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.globalAlpha = 0.5;
  ctx.save();
  ctx.translate(228 * scale, 99.5 * scale);
  ctx.globalAlpha = 0.5;
  round_rect(ctx, -5 * scale, -18.5 * scale, 10 * scale, 37 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(223 * scale, 94.5 * scale);
  round_rect(ctx, -5 * scale, -18.5 * scale, 10 * scale, 37 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  ctx.save();
  ctx.translate(133.5 * scale, 175.5 * scale);
  ctx.globalAlpha = 0.5;
  round_rect(ctx, -22.5 * scale, -6.5 * scale, 45 * scale, 13 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.save();
  ctx.translate(128.5 * scale, 170.5 * scale);
  round_rect(ctx, -22.5 * scale, -6.5 * scale, 45 * scale, 13 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[2]);
  return can;
};

function create_hurt_treasure_chest(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 253 * scale;
  can.height = 192 * scale;
  ctx.save();
  ctx.translate(37 * scale, 94 * scale);
  round_rect(ctx, -7 * scale, -20 * scale, 14 * scale, 37 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(131 * scale, 94 * scale);
  round_rect(ctx, -84 * scale, -67 * scale, 168 * scale, 134 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 13 * scale);
  ctx.save();
  ctx.translate(223 * scale, 94.5 * scale);
  round_rect(ctx, -5 * scale, -18.5 * scale, 10 * scale, 37 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.save();
  ctx.translate(128.5 * scale, 170.5 * scale);
  round_rect(ctx, -22.5 * scale, -6.5 * scale, 45 * scale, 13 * scale, 20 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  return can;
};

function create_bottle(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 316 * scale;
  can.height = 365 * scale;
  ctx.save();
  ctx.translate(156.07142639160156 * scale, 51.81248474121094 * scale);
  ctx.rotate(0);
  round_rect(ctx, -21.5 * scale, -34 * scale, 43 * scale, 68 * scale, 8 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(110.57142639160156 * scale, 197.09820556640625 * scale);
  ctx.bezierCurveTo(158.07142639160156 * scale, 179.09820556640625 * scale, 158.07142639160156 * scale, 179.09820556640625 * scale, 205.57142639160156 * scale, 161.09820556640625 * scale);
  ctx.bezierCurveTo(205.57142639160156 * scale, 235.45535278320312 * scale, 205.57142639160156 * scale, 235.45535278320312 * scale, 205.57142639160156 * scale, 309.8125 * scale);
  ctx.bezierCurveTo(205.57142639160156 * scale, 323.8125 * scale, 200.57142639160156 * scale, 325.8125 * scale, 187.57142639160156 * scale, 326.8125 * scale);
  ctx.bezierCurveTo(155.57142639160156 * scale, 326.3125 * scale, 155.57142639160156 * scale, 326.3125 * scale, 123.57142639160156 * scale, 325.8125 * scale);
  ctx.bezierCurveTo(111.57142639160156 * scale, 326.8125 * scale, 109.57142639160156 * scale, 321.8125 * scale, 110.57142639160156 * scale, 312.8125 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(126.57142639160156 * scale, 67.38392639160156 * scale);
  ctx.bezierCurveTo(126.57142639160156 * scale, 57.38392639160156 * scale, 132.57142639160156 * scale, 54.38392639160156 * scale, 140.57142639160156 * scale, 54.38392639160156 * scale);
  ctx.bezierCurveTo(177.57142639160156 * scale, 55.38392639160156 * scale, 158.07142639160156 * scale, 54.38392639160156 * scale, 175.57142639160156 * scale, 54.38392639160156 * scale);
  ctx.bezierCurveTo(185.57142639160156 * scale, 56.38392639160156 * scale, 185.57142639160156 * scale, 57.38392639160156 * scale, 184.57142639160156 * scale, 66.38392639160156 * scale);
  ctx.bezierCurveTo(184.57142639160156 * scale, 78.38392639160156 * scale, 184.57142639160156 * scale, 89.38392639160156 * scale, 184.57142639160156 * scale, 90.38392639160156 * scale);
  ctx.bezierCurveTo(177.57142639160156 * scale, 107.38392639160156 * scale, 180.57142639160156 * scale, 112.38392639160156 * scale, 189.57142639160156 * scale, 116.38392639160156 * scale);
  ctx.bezierCurveTo(212.57142639160156 * scale, 127.38392639160156 * scale, 212.57142639160156 * scale, 132.38392639160156 * scale, 211.57142639160156 * scale, 150.38392639160156 * scale);
  ctx.bezierCurveTo(211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 304.81249618530273 * scale);
  ctx.bezierCurveTo(212.57142639160156 * scale, 328.81249618530273 * scale, 209.57142639160156 * scale, 330.81249618530273 * scale, 188.57142639160156 * scale, 333.81249618530273 * scale);
  ctx.bezierCurveTo(155.07142639160156 * scale, 333.31249618530273 * scale, 155.07142639160156 * scale, 333.31249618530273 * scale, 121.57142639160156 * scale, 332.81249618530273 * scale);
  ctx.bezierCurveTo(104.57142639160156 * scale, 327.81249618530273 * scale, 105.57142639160156 * scale, 328.81249618530273 * scale, 104.57142639160156 * scale, 312.81249618530273 * scale);
  ctx.bezierCurveTo(104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 143.52678298950195 * scale);
  ctx.bezierCurveTo(106.57142639160156 * scale, 124.52678298950195 * scale, 110.57142639160156 * scale, 123.52678298950195 * scale, 123.57142639160156 * scale, 116.52678298950195 * scale);
  ctx.bezierCurveTo(136.57142639160156 * scale, 110.52678298950195 * scale, 130.57142639160156 * scale, 106.52678298950195 * scale, 126.57142639160156 * scale, 98.52678298950195 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[5], 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125.57142639160156 * scale, 156.66963958740234 * scale);
  ctx.bezierCurveTo(125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 208.66963958740234 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 15 * scale);
  return can;
};

function create_bottle_full(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 316 * scale;
  can.height = 365 * scale;
  ctx.save();
  ctx.translate(156.07142639160156 * scale, 51.81248474121094 * scale);
  ctx.rotate(0);
  round_rect(ctx, -21.5 * scale, -34 * scale, 43 * scale, 68 * scale, 8 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(126.57142639160156 * scale, 67.38392639160156 * scale);
  ctx.bezierCurveTo(126.57142639160156 * scale, 57.38392639160156 * scale, 132.57142639160156 * scale, 54.38392639160156 * scale, 140.57142639160156 * scale, 54.38392639160156 * scale);
  ctx.bezierCurveTo(177.57142639160156 * scale, 55.38392639160156 * scale, 158.07142639160156 * scale, 54.38392639160156 * scale, 175.57142639160156 * scale, 54.38392639160156 * scale);
  ctx.bezierCurveTo(185.57142639160156 * scale, 56.38392639160156 * scale, 185.57142639160156 * scale, 57.38392639160156 * scale, 184.57142639160156 * scale, 66.38392639160156 * scale);
  ctx.bezierCurveTo(184.57142639160156 * scale, 78.38392639160156 * scale, 184.57142639160156 * scale, 89.38392639160156 * scale, 184.57142639160156 * scale, 90.38392639160156 * scale);
  ctx.bezierCurveTo(177.57142639160156 * scale, 107.38392639160156 * scale, 180.57142639160156 * scale, 112.38392639160156 * scale, 189.57142639160156 * scale, 116.38392639160156 * scale);
  ctx.bezierCurveTo(212.57142639160156 * scale, 127.38392639160156 * scale, 212.57142639160156 * scale, 132.38392639160156 * scale, 211.57142639160156 * scale, 150.38392639160156 * scale);
  ctx.bezierCurveTo(211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 304.81249618530273 * scale);
  ctx.bezierCurveTo(212.57142639160156 * scale, 328.81249618530273 * scale, 209.57142639160156 * scale, 330.81249618530273 * scale, 188.57142639160156 * scale, 333.81249618530273 * scale);
  ctx.bezierCurveTo(155.07142639160156 * scale, 333.31249618530273 * scale, 155.07142639160156 * scale, 333.31249618530273 * scale, 121.57142639160156 * scale, 332.81249618530273 * scale);
  ctx.bezierCurveTo(104.57142639160156 * scale, 327.81249618530273 * scale, 105.57142639160156 * scale, 328.81249618530273 * scale, 104.57142639160156 * scale, 312.81249618530273 * scale);
  ctx.bezierCurveTo(104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 143.52678298950195 * scale);
  ctx.bezierCurveTo(106.57142639160156 * scale, 124.52678298950195 * scale, 110.57142639160156 * scale, 123.52678298950195 * scale, 123.57142639160156 * scale, 116.52678298950195 * scale);
  ctx.bezierCurveTo(136.57142639160156 * scale, 110.52678298950195 * scale, 130.57142639160156 * scale, 106.52678298950195 * scale, 126.57142639160156 * scale, 98.52678298950195 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[5], 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125.57142639160156 * scale, 156.66963958740234 * scale);
  ctx.bezierCurveTo(125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 208.66963958740234 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[6], 15 * scale);
  return can;
};

function create_drink_delay(scale, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 316 * scale;
  can.height = 365 * scale;
  ctx.save();
  ctx.translate(156.07142639160156 * scale, 51.81248474121094 * scale);
  ctx.rotate(0);
  round_rect(ctx, -21.5 * scale, -34 * scale, 43 * scale, 68 * scale, 8 * scale);
  ctx.restore();
  fill_path(ctx, color[0], color[0], 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(126.57142639160156 * scale, 67.38392639160156 * scale);
  ctx.bezierCurveTo(126.57142639160156 * scale, 57.38392639160156 * scale, 132.57142639160156 * scale, 54.38392639160156 * scale, 140.57142639160156 * scale, 54.38392639160156 * scale);
  ctx.bezierCurveTo(177.57142639160156 * scale, 55.38392639160156 * scale, 158.07142639160156 * scale, 54.38392639160156 * scale, 175.57142639160156 * scale, 54.38392639160156 * scale);
  ctx.bezierCurveTo(185.57142639160156 * scale, 56.38392639160156 * scale, 185.57142639160156 * scale, 57.38392639160156 * scale, 184.57142639160156 * scale, 66.38392639160156 * scale);
  ctx.bezierCurveTo(184.57142639160156 * scale, 78.38392639160156 * scale, 184.57142639160156 * scale, 89.38392639160156 * scale, 184.57142639160156 * scale, 90.38392639160156 * scale);
  ctx.bezierCurveTo(177.57142639160156 * scale, 107.38392639160156 * scale, 180.57142639160156 * scale, 112.38392639160156 * scale, 189.57142639160156 * scale, 116.38392639160156 * scale);
  ctx.bezierCurveTo(212.57142639160156 * scale, 127.38392639160156 * scale, 212.57142639160156 * scale, 132.38392639160156 * scale, 211.57142639160156 * scale, 150.38392639160156 * scale);
  ctx.bezierCurveTo(211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 227.59821128845215 * scale, 211.57142639160156 * scale, 304.81249618530273 * scale);
  ctx.bezierCurveTo(212.57142639160156 * scale, 328.81249618530273 * scale, 209.57142639160156 * scale, 330.81249618530273 * scale, 188.57142639160156 * scale, 333.81249618530273 * scale);
  ctx.bezierCurveTo(155.07142639160156 * scale, 333.31249618530273 * scale, 155.07142639160156 * scale, 333.31249618530273 * scale, 121.57142639160156 * scale, 332.81249618530273 * scale);
  ctx.bezierCurveTo(104.57142639160156 * scale, 327.81249618530273 * scale, 105.57142639160156 * scale, 328.81249618530273 * scale, 104.57142639160156 * scale, 312.81249618530273 * scale);
  ctx.bezierCurveTo(104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 228.16963958740234 * scale, 104.57142639160156 * scale, 143.52678298950195 * scale);
  ctx.bezierCurveTo(106.57142639160156 * scale, 124.52678298950195 * scale, 110.57142639160156 * scale, 123.52678298950195 * scale, 123.57142639160156 * scale, 116.52678298950195 * scale);
  ctx.bezierCurveTo(136.57142639160156 * scale, 110.52678298950195 * scale, 130.57142639160156 * scale, 106.52678298950195 * scale, 126.57142639160156 * scale, 98.52678298950195 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 15 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(125.57142639160156 * scale, 156.66963958740234 * scale);
  ctx.bezierCurveTo(125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 182.66963958740234 * scale, 125.57142639160156 * scale, 208.66963958740234 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 15 * scale);
  return can;
};

function create_bucket_empty(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.translate(0, 15 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102 * scale, 154 * scale);
  ctx.bezierCurveTo(108 * scale, 216.5 * scale, 108 * scale, 216.5 * scale, 114 * scale, 279 * scale);
  ctx.bezierCurveTo(124 * scale, 300 * scale, 237 * scale, 299 * scale, 251 * scale, 279 * scale);
  ctx.bezierCurveTo(257 * scale, 217 * scale, 257 * scale, 217 * scale, 263 * scale, 155 * scale);
  ctx.bezierCurveTo(248 * scale, 194 * scale, 91 * scale, 180 * scale, 103 * scale, 156 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102 * scale, 154 * scale);
  ctx.bezierCurveTo(106 * scale, 53 * scale, 255 * scale, 53 * scale, 263 * scale, 154 * scale);
  ctx.bezierCurveTo(248 * scale, 38 * scale, 99 * scale, 69 * scale, 103 * scale, 154 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 11 * scale);
  ctx.translate(0, -5 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(103 * scale, 154 * scale);
  ctx.bezierCurveTo(98 * scale, 119 * scale, 264 * scale, 119 * scale, 264 * scale, 154 * scale);
  ctx.bezierCurveTo(271 * scale, 189 * scale, 94 * scale, 188 * scale, 103 * scale, 154 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102 * scale, 154 * scale);
  ctx.bezierCurveTo(108 * scale, 216.5 * scale, 108 * scale, 216.5 * scale, 114 * scale, 279 * scale);
  ctx.bezierCurveTo(124 * scale, 300 * scale, 237 * scale, 299 * scale, 251 * scale, 279 * scale);
  ctx.bezierCurveTo(257 * scale, 217 * scale, 257 * scale, 217 * scale, 263 * scale, 155 * scale);
  ctx.bezierCurveTo(248 * scale, 194 * scale, 91 * scale, 180 * scale, 103 * scale, 156 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(182 * scale, 185 * scale);
  ctx.bezierCurveTo(182.5 * scale, 237.5 * scale, 182.5 * scale, 237.5 * scale, 183 * scale, 290 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(222 * scale, 287 * scale);
  ctx.bezierCurveTo(226 * scale, 233.5 * scale, 226 * scale, 233.5 * scale, 230 * scale, 180 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(145 * scale, 290 * scale);
  ctx.bezierCurveTo(140.5 * scale, 237 * scale, 140.5 * scale, 237 * scale, 136 * scale, 184 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 11 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105 * scale, 184 * scale);
  ctx.bezierCurveTo(148 * scale, 205 * scale, 231 * scale, 202 * scale, 260 * scale, 182 * scale);
  ctx.bezierCurveTo(259 * scale, 195.5 * scale, 259 * scale, 195.5 * scale, 258 * scale, 209 * scale);
  ctx.bezierCurveTo(217 * scale, 218 * scale, 163 * scale, 225 * scale, 108 * scale, 207 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 11 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(251 * scale, 276 * scale);
  ctx.bezierCurveTo(251.5 * scale, 267.5 * scale, 251.5 * scale, 267.5 * scale, 252 * scale, 259 * scale);
  ctx.bezierCurveTo(212 * scale, 272 * scale, 156 * scale, 275 * scale, 112 * scale, 260 * scale);
  ctx.bezierCurveTo(112.5 * scale, 269 * scale, 112.5 * scale, 269 * scale, 113 * scale, 278 * scale);
  ctx.bezierCurveTo(155 * scale, 306 * scale, 253 * scale, 286 * scale, 250 * scale, 276 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 11 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102 * scale, 154 * scale);
  ctx.bezierCurveTo(106 * scale, 53 * scale, 255 * scale, 53 * scale, 263 * scale, 154 * scale);
  ctx.bezierCurveTo(248 * scale, 38 * scale, 99 * scale, 69 * scale, 103 * scale, 154 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 11 * scale);
  return can;
};

function create_bucket_full(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 400 * scale;
  can.height = 400 * scale;
  ctx.translate(0, 15 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102 * scale, 154 * scale);
  ctx.bezierCurveTo(108 * scale, 216.5 * scale, 108 * scale, 216.5 * scale, 114 * scale, 279 * scale);
  ctx.bezierCurveTo(124 * scale, 300 * scale, 237 * scale, 299 * scale, 251 * scale, 279 * scale);
  ctx.bezierCurveTo(257 * scale, 217 * scale, 257 * scale, 217 * scale, 263 * scale, 155 * scale);
  ctx.bezierCurveTo(248 * scale, 194 * scale, 91 * scale, 180 * scale, 103 * scale, 156 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102 * scale, 154 * scale);
  ctx.bezierCurveTo(106 * scale, 53 * scale, 255 * scale, 53 * scale, 263 * scale, 154 * scale);
  ctx.bezierCurveTo(248 * scale, 38 * scale, 99 * scale, 69 * scale, 103 * scale, 154 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[0], 11 * scale);
  ctx.translate(0, -5 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(103 * scale, 154 * scale);
  ctx.bezierCurveTo(98 * scale, 119 * scale, 264 * scale, 119 * scale, 264 * scale, 154 * scale);
  ctx.bezierCurveTo(271 * scale, 189 * scale, 94 * scale, 188 * scale, 103 * scale, 154 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 12 * scale);
  ctx.translate(0, 25 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(103 * scale, 154 * scale);
  ctx.bezierCurveTo(98 * scale, 119 * scale, 264 * scale, 119 * scale, 264 * scale, 154 * scale);
  ctx.bezierCurveTo(271 * scale, 189 * scale, 94 * scale, 188 * scale, 103 * scale, 154 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.translate(0, -25 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102 * scale, 154 * scale);
  ctx.bezierCurveTo(108 * scale, 216.5 * scale, 108 * scale, 216.5 * scale, 114 * scale, 279 * scale);
  ctx.bezierCurveTo(124 * scale, 300 * scale, 237 * scale, 299 * scale, 251 * scale, 279 * scale);
  ctx.bezierCurveTo(257 * scale, 217 * scale, 257 * scale, 217 * scale, 263 * scale, 155 * scale);
  ctx.bezierCurveTo(248 * scale, 194 * scale, 91 * scale, 180 * scale, 103 * scale, 156 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(182 * scale, 185 * scale);
  ctx.bezierCurveTo(182.5 * scale, 237.5 * scale, 182.5 * scale, 237.5 * scale, 183 * scale, 290 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(222 * scale, 287 * scale);
  ctx.bezierCurveTo(226 * scale, 233.5 * scale, 226 * scale, 233.5 * scale, 230 * scale, 180 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(145 * scale, 290 * scale);
  ctx.bezierCurveTo(140.5 * scale, 237 * scale, 140.5 * scale, 237 * scale, 136 * scale, 184 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 11 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105 * scale, 184 * scale);
  ctx.bezierCurveTo(148 * scale, 205 * scale, 231 * scale, 202 * scale, 260 * scale, 182 * scale);
  ctx.bezierCurveTo(259 * scale, 195.5 * scale, 259 * scale, 195.5 * scale, 258 * scale, 209 * scale);
  ctx.bezierCurveTo(217 * scale, 218 * scale, 163 * scale, 225 * scale, 108 * scale, 207 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 11 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(251 * scale, 276 * scale);
  ctx.bezierCurveTo(251.5 * scale, 267.5 * scale, 251.5 * scale, 267.5 * scale, 252 * scale, 259 * scale);
  ctx.bezierCurveTo(212 * scale, 272 * scale, 156 * scale, 275 * scale, 112 * scale, 260 * scale);
  ctx.bezierCurveTo(112.5 * scale, 269 * scale, 112.5 * scale, 269 * scale, 113 * scale, 278 * scale);
  ctx.bezierCurveTo(155 * scale, 306 * scale, 253 * scale, 286 * scale, 250 * scale, 276 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[2], 11 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(102 * scale, 154 * scale);
  ctx.bezierCurveTo(106 * scale, 53 * scale, 255 * scale, 53 * scale, 263 * scale, 154 * scale);
  ctx.bezierCurveTo(248 * scale, 38 * scale, 99 * scale, 69 * scale, 103 * scale, 154 * scale);
  ctx.closePath();
  fill_path(ctx, undefined, color[2], 11 * scale);
  return can;
};

function create_shovel(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 80 * scale;
  can.height = 160 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.save();
  round_rect(ctx, 33 * scale, 53 * scale, 10 * scale, 98 * scale, 10 * scale);
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(-150 * scale, -100 * scale);
  ctx.moveTo(167.5 * scale, 171.0625 * scale);
  ctx.bezierCurveTo(188 * scale, 171.0625 * scale, 188 * scale, 171.0625 * scale, 208.5 * scale, 171.0625 * scale);
  ctx.bezierCurveTo(208.5 * scale, 156.0625 * scale, 208.5 * scale, 156.0625 * scale, 208.5 * scale, 141.0625 * scale);
  ctx.bezierCurveTo(203.5 * scale, 113.0625 * scale, 179.5 * scale, 96.0625 * scale, 167.5 * scale, 141.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.restore();
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.save();
  round_rect(ctx, 33 * scale, 53 * scale, 10 * scale, 98 * scale, 10 * scale);
  fill_path(ctx, color[1], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(-150 * scale, -100 * scale);
  ctx.moveTo(167.5 * scale, 171.0625 * scale);
  ctx.bezierCurveTo(188 * scale, 171.0625 * scale, 188 * scale, 171.0625 * scale, 208.5 * scale, 171.0625 * scale);
  ctx.bezierCurveTo(208.5 * scale, 156.0625 * scale, 208.5 * scale, 156.0625 * scale, 208.5 * scale, 141.0625 * scale);
  ctx.bezierCurveTo(203.5 * scale, 113.0625 * scale, 179.5 * scale, 96.0625 * scale, 167.5 * scale, 141.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.translate(0 * scale, 1 * scale);
  ctx.moveTo(180.5 * scale, 169.0625 * scale);
  ctx.bezierCurveTo(180.5 * scale, 157.5625 * scale, 180.5 * scale, 157.5625 * scale, 180.5 * scale, 146.0625 * scale);
  ctx.bezierCurveTo(181.5 * scale, 134.0625 * scale, 193.5 * scale, 129.0625 * scale, 196.5 * scale, 146.0625 * scale);
  ctx.bezierCurveTo(196.5 * scale, 157.5625 * scale, 196.5 * scale, 157.5625 * scale, 196.5 * scale, 169.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[5]);
  ctx.restore();
  return can;
};

function create_symbol_hud(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 109 * scale;
  can.height = 110 * scale;
  circle(ctx, 54.5 * scale, 55 * scale, 48.038209575038294 * scale);
  fill_path(ctx, color[0], color[1], 8 * scale);
  if (i == 0) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(54.928558349609375 * scale, 43.72320556640625 * scale);
    ctx.bezierCurveTo(66.92855834960938 * scale, 31.72320556640625 * scale, 69.92855834960938 * scale, 29.72320556640625 * scale, 74.92855834960938 * scale, 29.72320556640625 * scale);
    ctx.bezierCurveTo(86.92855834960938 * scale, 28.72320556640625 * scale, 91.92855834960938 * scale, 42.72320556640625 * scale, 89.92855834960938 * scale, 52.72320556640625 * scale);
    ctx.bezierCurveTo(88.92855834960938 * scale, 63.72320556640625 * scale, 73.92855834960938 * scale, 75.72320556640625 * scale, 55.928558349609375 * scale, 87.72320556640625 * scale);
    ctx.bezierCurveTo(37.928558349609375 * scale, 78.72320556640625 * scale, 26.928558349609375 * scale, 65.72320556640625 * scale, 19.928558349609375 * scale, 54.72320556640625 * scale);
    ctx.bezierCurveTo(13.928558349609375 * scale, 42.72320556640625 * scale, 21.928558349609375 * scale, 28.72320556640625 * scale, 35.928558349609375 * scale, 29.72320556640625 * scale);
    ctx.bezierCurveTo(45.928558349609375 * scale, 31.72320556640625 * scale, 51.928558349609375 * scale, 40.72320556640625 * scale, 53.928558349609375 * scale, 44.72320556640625 * scale);
    ctx.closePath();
    fill_path(ctx, color[2]);
  } else if (i == 1) {
    ctx.save();
    ctx.translate(55 * scale, 39.48748779296875 * scale);
    round_rect(ctx, -11.5 * scale, -36 * scale, 23 * scale, 72 * scale, 10 * scale);
    ctx.restore();
    fill_path(ctx, color[2], color[3], 4 * scale);
    circle(ctx, 54.5 * scale, 78.48748779296875 * scale, 22.02271554554524 * scale);
    fill_path(ctx, color[4], color[3], 4 * scale);
    ctx.save();
    ctx.translate(55.5 * scale, 57.287506103515625 * scale);
    round_rect(ctx, -9 * scale, -16 * scale, 18 * scale, 32 * scale, 10 * scale);
    ctx.restore();
    fill_path(ctx, color[4]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(66.5 * scale, 25.287506103515625 * scale);
    ctx.bezierCurveTo(60.5 * scale, 25.287506103515625 * scale, 63.5 * scale, 25.287506103515625 * scale, 54.5 * scale, 25.287506103515625 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[5], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(66.5 * scale, 37.287506103515625 * scale);
    ctx.bezierCurveTo(60.5 * scale, 37.287506103515625 * scale, 60.5 * scale, 37.287506103515625 * scale, 54.5 * scale, 37.287506103515625 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[5], 4 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(66.5 * scale, 50.287506103515625 * scale);
    ctx.bezierCurveTo(61 * scale, 50.287506103515625 * scale, 61 * scale, 50.287506103515625 * scale, 55.5 * scale, 50.287506103515625 * scale);
    ctx.closePath();
    fill_path(ctx, undefined, color[5], 4 * scale);
  } else if (i == 2) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(45.928558349609375 * scale, 55.29463195800781 * scale);
    ctx.bezierCurveTo(38.928558349609375 * scale, 67.29463195800781 * scale, 38.928558349609375 * scale, 67.29463195800781 * scale, 31.928558349609375 * scale, 79.29463195800781 * scale);
    ctx.bezierCurveTo(15.928558349609375 * scale, 85.29463195800781 * scale, 17.928558349609375 * scale, 86.29463195800781 * scale, 17.928558349609375 * scale, 90.29463195800781 * scale);
    ctx.bezierCurveTo(19.928558349609375 * scale, 94.29463195800781 * scale, 21.928558349609375 * scale, 94.29463195800781 * scale, 27.928558349609375 * scale, 92.29463195800781 * scale);
    ctx.bezierCurveTo(29.928558349609375 * scale, 98.29463195800781 * scale, 30.928558349609375 * scale, 99.29463195800781 * scale, 33.928558349609375 * scale, 99.29463195800781 * scale);
    ctx.bezierCurveTo(38.928558349609375 * scale, 97.29463195800781 * scale, 38.928558349609375 * scale, 93.29463195800781 * scale, 37.928558349609375 * scale, 86.29463195800781 * scale);
    ctx.bezierCurveTo(45.428558349609375 * scale, 73.29463195800781 * scale, 51.928558349609375 * scale, 64.29463195800781 * scale, 52.928558349609375 * scale, 60.29463195800781 * scale);
    ctx.closePath();
    fill_path(ctx, color[2]);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(55.928558349609375 * scale, 8.866058349609375 * scale);
    ctx.bezierCurveTo(35.928558349609375 * scale, 35.866058349609375 * scale, 37.928558349609375 * scale, 48.866058349609375 * scale, 46.928558349609375 * scale, 62.866058349609375 * scale);
    ctx.bezierCurveTo(65.92855834960938 * scale, 72.86605834960938 * scale, 80.92855834960938 * scale, 55.866058349609375 * scale, 93.92855834960938 * scale, 36.866058349609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[4], 6 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(93.92855834960938 * scale, 36.866058349609375 * scale);
    ctx.bezierCurveTo(82.92855834960938 * scale, 37.866058349609375 * scale, 77.92855834960938 * scale, 36.866058349609375 * scale, 67.92855834960938 * scale, 28.866058349609375 * scale);
    ctx.bezierCurveTo(53.928558349609375 * scale, 16.866058349609375 * scale, 53.928558349609375 * scale, 14.866058349609375 * scale, 55.928558349609375 * scale, 7.866058349609375 * scale);
    ctx.bezierCurveTo(65.92855834960938 * scale, 4.866058349609375 * scale, 71.92855834960938 * scale, 7.866058349609375 * scale, 83.92855834960938 * scale, 13.866058349609375 * scale);
    ctx.bezierCurveTo(96.92855834960938 * scale, 21.866058349609375 * scale, 95.92855834960938 * scale, 31.866058349609375 * scale, 92.92855834960938 * scale, 36.866058349609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[4], 6 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(68.92855834960938 * scale, 16.866058349609375 * scale);
    ctx.bezierCurveTo(71.92855834960938 * scale, 13.866058349609375 * scale, 76.92855834960938 * scale, 16.866058349609375 * scale, 79.92855834960938 * scale, 21.866058349609375 * scale);
    ctx.bezierCurveTo(82.92855834960938 * scale, 24.866058349609375 * scale, 81.92855834960938 * scale, 27.866058349609375 * scale, 73.92855834960938 * scale, 24.866058349609375 * scale);
    ctx.bezierCurveTo(67.92855834960938 * scale, 20.866058349609375 * scale, 66.92855834960938 * scale, 19.866058349609375 * scale, 67.92855834960938 * scale, 17.866058349609375 * scale);
    ctx.closePath();
    fill_path(ctx, color[2]);
  } else if (i == 3) {
    ctx.scale(0.9, 0.9);
    ctx.translate(6 * scale, 0);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(54 * scale, 0.421875 * scale);
    ctx.bezierCurveTo(84 * scale, 45.421875 * scale, 89 * scale, 51.421875 * scale, 83 * scale, 74.421875 * scale);
    ctx.bezierCurveTo(74 * scale, 95.421875 * scale, 46 * scale, 98.421875 * scale, 30 * scale, 78.421875 * scale);
    ctx.bezierCurveTo(22 * scale, 59.421875 * scale, 27 * scale, 49.421875 * scale, 34 * scale, 36.421875 * scale);
    ctx.closePath();
    fill_path(ctx, color[2], color[3], 6 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(74 * scale, 52.421875 * scale);
    ctx.bezierCurveTo(77 * scale, 73.421875 * scale, 69 * scale, 81.421875 * scale, 58 * scale, 81.421875 * scale);
    ctx.bezierCurveTo(66 * scale, 71.421875 * scale, 70 * scale, 66.421875 * scale, 74 * scale, 52.421875 * scale);
    ctx.closePath();
    fill_path(ctx, color[3]);
  }
  return can;
};

function create_button_background(style, pressed) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = style.w + style.lw;
  var h = style.h + style.lw;
  var shadow = h * 0.1;
  can.width = w;
  can.height = h + shadow;
  ctx.beginPath();
  ctx.translate(w / 2, (h / 2) + shadow);
  ctx.globalAlpha = 0.5;
  round_rect(ctx, -style.w / 2, -style.h / 2, style.w, style.h, style.r);
  fill_path(ctx, "#000", "#000", style.lw);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  if (!pressed)
    ctx.translate(0, -shadow);

  round_rect(ctx, -style.w / 2, -style.h / 2, style.w, style.h, style.r);
  fill_path(ctx, style.bg, style.fg, style.lw);
  ctx.beginPath();
  ctx.fillStyle = style.color;
  ctx.textBaseline = "middle", ctx.textAlign = "center", ctx.font = (style.size + "px ") + style.font;
  ctx.fillText(style.text, 0, 0);
  return can;
};

function create_button(style) {
  var buttons = [];
  for (var i = 0; i < style.length; i++)
    buttons.push(create_button_background(style[i], (i == 2) ? true : false));
  return buttons;
};

function create_oxygen_gauges(scale) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = 600 * scale;
  var h = 22 * scale;
  var r = 4 * scale;
  var lw = 4 * scale;
  can.width = w;
  can.height = h;
  round_rect(ctx, 5 * scale, 5 * scale, w - (10 * scale), h - (10 * scale), r);
  fill_path(ctx, null, "#BBE8EF", lw);
  return can;
};

function create_recipe_button(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 573 * scale;
  can.height = 350 * scale;
  if (i == 1) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(336 * scale, 72 * scale);
    ctx.bezierCurveTo(366 * scale, 15 * scale, 426 * scale, 36 * scale, 497 * scale, 83 * scale);
    ctx.bezierCurveTo(522 * scale, 85 * scale, 522 * scale, 85 * scale, 547 * scale, 87 * scale);
    ctx.bezierCurveTo(476.5 * scale, 205 * scale, 476.5 * scale, 205 * scale, 406 * scale, 323 * scale);
    ctx.bezierCurveTo(297.5 * scale, 319 * scale, 297.5 * scale, 319 * scale, 189 * scale, 315 * scale);
    ctx.bezierCurveTo(105.5 * scale, 279 * scale, 105.5 * scale, 279 * scale, 22 * scale, 243 * scale);
    ctx.bezierCurveTo(92 * scale, 140 * scale, 92 * scale, 140 * scale, 162 * scale, 37 * scale);
    ctx.bezierCurveTo(173 * scale, 39 * scale, 173 * scale, 39 * scale, 184 * scale, 41 * scale);
    ctx.bezierCurveTo(185 * scale, 38.5 * scale, 185 * scale, 38.5 * scale, 186 * scale, 36 * scale);
    ctx.bezierCurveTo(323 * scale, 13 * scale, 322 * scale, 25 * scale, 337 * scale, 74 * scale);
    ctx.closePath();
    fill_path(ctx, color[4], color[4], 35 * scale);
  }
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(168 * scale, 42 * scale);
  ctx.bezierCurveTo(255 * scale, 60 * scale, 255 * scale, 60 * scale, 342 * scale, 78 * scale);
  ctx.bezierCurveTo(443 * scale, 81.5 * scale, 443 * scale, 81.5 * scale, 544 * scale, 85 * scale);
  ctx.bezierCurveTo(475 * scale, 204.5 * scale, 475 * scale, 204.5 * scale, 406 * scale, 324 * scale);
  ctx.bezierCurveTo(297.5 * scale, 320 * scale, 297.5 * scale, 320 * scale, 189 * scale, 316 * scale);
  ctx.bezierCurveTo(105.5 * scale, 279 * scale, 105.5 * scale, 279 * scale, 22 * scale, 242 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(188 * scale, 41 * scale);
  ctx.bezierCurveTo(308 * scale, 15 * scale, 325 * scale, 18 * scale, 337 * scale, 66 * scale);
  ctx.bezierCurveTo(191 * scale, 305 * scale, 196 * scale, 286 * scale, 184 * scale, 307 * scale);
  ctx.bezierCurveTo(175 * scale, 250 * scale, 90 * scale, 254 * scale, 52 * scale, 241 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(336 * scale, 71 * scale);
  ctx.bezierCurveTo(375 * scale, 8 * scale, 429 * scale, 50 * scale, 518 * scale, 92 * scale);
  ctx.bezierCurveTo(455 * scale, 199.5 * scale, 455 * scale, 199.5 * scale, 392 * scale, 307 * scale);
  ctx.bezierCurveTo(227 * scale, 301 * scale, 261 * scale, 255 * scale, 188 * scale, 308 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(357 * scale, 76 * scale);
  ctx.bezierCurveTo(390 * scale, 67 * scale, 414 * scale, 86 * scale, 435 * scale, 104 * scale);
  ctx.bezierCurveTo(417 * scale, 135 * scale, 417 * scale, 135 * scale, 399 * scale, 166 * scale);
  ctx.bezierCurveTo(352 * scale, 140 * scale, 345 * scale, 139 * scale, 319 * scale, 142 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(309 * scale, 168 * scale);
  ctx.bezierCurveTo(345 * scale, 163 * scale, 372 * scale, 180 * scale, 412 * scale, 203 * scale);
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(263 * scale, 54 * scale);
  ctx.bezierCurveTo(305 * scale, 44 * scale, 307 * scale, 51 * scale, 311 * scale, 64 * scale);
  ctx.bezierCurveTo(270.5 * scale, 129.5 * scale, 270.5 * scale, 129.5 * scale, 230 * scale, 195 * scale);
  ctx.bezierCurveTo(221 * scale, 175 * scale, 203 * scale, 171 * scale, 186 * scale, 172 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(292 * scale, 198 * scale);
  ctx.bezierCurveTo(328 * scale, 191 * scale, 364 * scale, 211 * scale, 401 * scale, 237 * scale);
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(245 * scale, 68 * scale);
  ctx.bezierCurveTo(210 * scale, 72 * scale, 210 * scale, 72 * scale, 189 * scale, 69 * scale);
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(222 * scale, 96 * scale);
  ctx.bezierCurveTo(196 * scale, 97 * scale, 193 * scale, 97 * scale, 177 * scale, 92 * scale);
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(207 * scale, 124 * scale);
  ctx.bezierCurveTo(179 * scale, 123 * scale, 177 * scale, 124 * scale, 161 * scale, 119 * scale);
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(115 * scale, 183 * scale);
  ctx.bezierCurveTo(184 * scale, 185 * scale, 203 * scale, 198 * scale, 219 * scale, 221 * scale);
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(98 * scale, 213 * scale);
  ctx.bezierCurveTo(161 * scale, 214 * scale, 193 * scale, 227 * scale, 201 * scale, 249 * scale);
  fill_path(ctx, color[2], color[3], 12 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(399 * scale, 257 * scale);
  ctx.bezierCurveTo(287 * scale, 215 * scale, 280 * scale, 215 * scale, 263 * scale, 222 * scale);
  ctx.bezierCurveTo(253 * scale, 238 * scale, 247 * scale, 245 * scale, 243 * scale, 254 * scale);
  ctx.bezierCurveTo(267 * scale, 236 * scale, 292 * scale, 263 * scale, 377 * scale, 284 * scale);
  fill_path(ctx, color[3], color[3], 12 * scale);
  return can;
};

function create_quest_button(scale, draw_shadow, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 170 * scale;
  can.height = 200 * scale;
  ctx.translate(5 * scale, 15 * scale);
  if (i == 1) {
    ctx.translate(0, -5 * scale);
    circle(ctx, 77.00003051757812 * scale, 104.49432373046875 * scale, 71.84010022264724 * scale);
    fill_path(ctx, color[1], color[5], 20 * scale);
    circle(ctx, 77.00003051757812 * scale, 104.22160339355469 * scale, 61.554853586049575 * scale);
    fill_path(ctx, color[1], color[5], 20 * scale);
    ctx.save();
    ctx.translate(77.00003051757812 * scale, 31.267044067382812 * scale);
    round_rect(ctx, -6 * scale, -12.5 * scale, 12 * scale, 25 * scale, 10 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[5], 20 * scale);
    ctx.save();
    ctx.translate(77.00003051757812 * scale, 13.267044067382812 * scale);
    round_rect(ctx, -15 * scale, -10.5 * scale, 30 * scale, 21 * scale, 10 * scale);
    ctx.restore();
    fill_path(ctx, color[1], color[5], 20 * scale);
  }
  circle(ctx, 77.00003051757812 * scale, 104.49432373046875 * scale, 71.84010022264724 * scale);
  fill_path(ctx, color[1], color[2], 7 * scale);
  circle(ctx, 77.00003051757812 * scale, 104.22160339355469 * scale, 61.554853586049575 * scale);
  fill_path(ctx, color[1], color[2], 7 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(18.000030517578125 * scale, 105.85795593261719 * scale);
  ctx.bezierCurveTo(134.00003051757812 * scale, 104.85795593261719 * scale, 77.00003051757812 * scale, 104.85795593261719 * scale, 136.00003051757812 * scale, 103.85795593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 8 * scale);
  circle(ctx, 77.00003051757812 * scale, 104.6761474609375 * scale, 32.55764119219941 * scale);
  fill_path(ctx, color[1], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(78.00003051757812 * scale, 112.03977966308594 * scale);
  ctx.bezierCurveTo(78.00003051757812 * scale, 87.03977966308594 * scale, 78.00003051757812 * scale, 87.03977966308594 * scale, 78.00003051757812 * scale, 62.03977966308594 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(78.00003051757812 * scale, 48.03977966308594 * scale);
  ctx.bezierCurveTo(82.00003051757812 * scale, 55.53977966308594 * scale, 82.00003051757812 * scale, 55.53977966308594 * scale, 86.00003051757812 * scale, 63.03977966308594 * scale);
  ctx.bezierCurveTo(78.00003051757812 * scale, 63.03977966308594 * scale, 78.00003051757812 * scale, 63.03977966308594 * scale, 70.00003051757812 * scale, 63.03977966308594 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80.00003051757812 * scale, 111.6761474609375 * scale);
  ctx.bezierCurveTo(95.00003051757812 * scale, 97.1761474609375 * scale, 95.00003051757812 * scale, 97.1761474609375 * scale, 110.00003051757812 * scale, 82.6761474609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 8 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107.00003051757812 * scale, 76.6761474609375 * scale);
  ctx.bezierCurveTo(111.50003051757812 * scale, 82.6761474609375 * scale, 111.50003051757812 * scale, 82.6761474609375 * scale, 116.00003051757812 * scale, 88.6761474609375 * scale);
  ctx.bezierCurveTo(118.50003051757812 * scale, 81.6761474609375 * scale, 118.50003051757812 * scale, 81.6761474609375 * scale, 121.00003051757812 * scale, 74.6761474609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[2], 4 * scale);
  circle(ctx, 77.00003051757812 * scale, 105.03977966308594 * scale, 15.556349186104045 * scale);
  fill_path(ctx, color[3], color[2], 4 * scale);
  ctx.save();
  ctx.translate(77.00003051757812 * scale, 31.267044067382812 * scale);
  ctx.rotate(0);
  round_rect(ctx, -6 * scale, -12.5 * scale, 12 * scale, 25 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 7 * scale);
  ctx.save();
  ctx.translate(77.00003051757812 * scale, 13.267044067382812 * scale);
  ctx.rotate(0);
  round_rect(ctx, -15 * scale, -10.5 * scale, 30 * scale, 21 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 7 * scale);
  return can;
};

function create_market_button(scale, color, i) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 81 * scale;
  can.height = 77 * scale;
  ctx.translate(0, 10 * scale);
  ctx.scale(0.2, 0.2);
  ctx.translate(0, -30 * scale);
  if (i == 1) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(36.5 * scale, 278.0625 * scale);
    ctx.bezierCurveTo(67.5 * scale, 316.0625 * scale, 134.5 * scale, 334.0625 * scale, 199.5 * scale, 319.0625 * scale);
    ctx.bezierCurveTo(254.5 * scale, 304.0625 * scale, 346.5 * scale, 270.0625 * scale, 348.5 * scale, 237.0625 * scale);
    ctx.bezierCurveTo(359.5 * scale, 206.0625 * scale, 318.5 * scale, 129.0625 * scale, 262.5 * scale, 122.0625 * scale);
    ctx.bezierCurveTo(213.5 * scale, 115.0625 * scale, 166.5 * scale, 133.0625 * scale, 104.5 * scale, 166.0625 * scale);
    ctx.bezierCurveTo(54.5 * scale, 194.0625 * scale, 23.5 * scale, 241.0625 * scale, 36.5 * scale, 277.0625 * scale);
    ctx.closePath();
    fill_path(ctx, color[0], color[3], 50 * scale);
  }
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(36.5 * scale, 278.0625 * scale);
  ctx.bezierCurveTo(67.5 * scale, 316.0625 * scale, 134.5 * scale, 334.0625 * scale, 199.5 * scale, 319.0625 * scale);
  ctx.bezierCurveTo(254.5 * scale, 304.0625 * scale, 346.5 * scale, 270.0625 * scale, 348.5 * scale, 237.0625 * scale);
  ctx.bezierCurveTo(359.5 * scale, 206.0625 * scale, 318.5 * scale, 129.0625 * scale, 262.5 * scale, 122.0625 * scale);
  ctx.bezierCurveTo(213.5 * scale, 115.0625 * scale, 166.5 * scale, 133.0625 * scale, 104.5 * scale, 166.0625 * scale);
  ctx.bezierCurveTo(54.5 * scale, 194.0625 * scale, 23.5 * scale, 241.0625 * scale, 36.5 * scale, 277.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 19 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(214.5 * scale, 124.0625 * scale);
  ctx.bezierCurveTo(242.5 * scale, 125.0625 * scale, 272.5 * scale, 159.0625 * scale, 283.5 * scale, 184.0625 * scale);
  ctx.bezierCurveTo(277.5 * scale, 161.0625 * scale, 233.5 * scale, 128.0625 * scale, 219.5 * scale, 122.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 19 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(157.5 * scale, 145.0625 * scale);
  ctx.bezierCurveTo(176.5 * scale, 148.0625 * scale, 205.5 * scale, 176.0625 * scale, 212.5 * scale, 197.0625 * scale);
  ctx.bezierCurveTo(205.5 * scale, 178.0625 * scale, 177.5 * scale, 152.0625 * scale, 156.5 * scale, 142.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[1], 19 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(103.5 * scale, 169.0625 * scale);
  ctx.bezierCurveTo(160.5 * scale, 166.0625 * scale, 228.5 * scale, 312.0625 * scale, 162.5 * scale, 323.0625 * scale);
  ctx.bezierCurveTo(128.5 * scale, 330.0625 * scale, 45.5 * scale, 312.0625 * scale, 34.5 * scale, 268.0625 * scale);
  ctx.bezierCurveTo(30.5 * scale, 238.0625 * scale, 44.5 * scale, 222.0625 * scale, 52.5 * scale, 211.0625 * scale);
  ctx.bezierCurveTo(82.5 * scale, 174.0625 * scale, 104.5 * scale, 166.0625 * scale, 119.5 * scale, 172.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[1], 19 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(194.5 * scale, 313.0625 * scale);
  ctx.bezierCurveTo(222.5 * scale, 306.0625 * scale, 319.5 * scale, 271.0625 * scale, 337.5 * scale, 241.0625 * scale);
  ctx.bezierCurveTo(274.5 * scale, 270.0625 * scale, 216.5 * scale, 288.0625 * scale, 199.5 * scale, 287.0625 * scale);
  ctx.bezierCurveTo(198.5 * scale, 302.0625 * scale, 195.5 * scale, 311.0625 * scale, 193.5 * scale, 312.0625 * scale);
  ctx.closePath();
  fill_path(ctx, color[1]);
  ctx.scale(3, 3);
  ctx.translate(15, 10 * scale);
  if (i == 1) {
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(4 * scale, 32 * scale);
    ctx.bezierCurveTo(19 * scale, 25 * scale, 19 * scale, 25 * scale, 34 * scale, 18 * scale);
    ctx.bezierCurveTo(41.5 * scale, 23.5 * scale, 41.5 * scale, 23.5 * scale, 49 * scale, 29 * scale);
    ctx.bezierCurveTo(59.5 * scale, 20 * scale, 59.5 * scale, 20 * scale, 70 * scale, 11 * scale);
    fill_path(ctx, undefined, color[3], 28 * scale);
    ctx.beginPath();
    ctx.lineCap = "round";
    ctx.lineJoin = "round";
    ctx.moveTo(56 * scale, 6 * scale);
    ctx.bezierCurveTo(63.5 * scale, 13.5 * scale, 63.5 * scale, 13.5 * scale, 71 * scale, 21 * scale);
    ctx.bezierCurveTo(74.5 * scale, 11.5 * scale, 74.5 * scale, 11.5 * scale, 78 * scale, 2 * scale);
    ctx.closePath();
    fill_path(ctx, color[3], color[3], 28 * scale);
  }
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(4 * scale, 32 * scale);
  ctx.bezierCurveTo(19 * scale, 25 * scale, 19 * scale, 25 * scale, 34 * scale, 18 * scale);
  ctx.bezierCurveTo(41.5 * scale, 23.5 * scale, 41.5 * scale, 23.5 * scale, 49 * scale, 29 * scale);
  ctx.bezierCurveTo(59.5 * scale, 20 * scale, 59.5 * scale, 20 * scale, 70 * scale, 11 * scale);
  fill_path(ctx, undefined, color[1], 17 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56 * scale, 6 * scale);
  ctx.bezierCurveTo(63.5 * scale, 13.5 * scale, 63.5 * scale, 13.5 * scale, 71 * scale, 21 * scale);
  ctx.bezierCurveTo(74.5 * scale, 11.5 * scale, 74.5 * scale, 11.5 * scale, 78 * scale, 2 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[1], 17 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(4 * scale, 32 * scale);
  ctx.bezierCurveTo(19 * scale, 25 * scale, 19 * scale, 25 * scale, 34 * scale, 18 * scale);
  ctx.bezierCurveTo(41.5 * scale, 23.5 * scale, 41.5 * scale, 23.5 * scale, 49 * scale, 29 * scale);
  ctx.bezierCurveTo(59.5 * scale, 20 * scale, 59.5 * scale, 20 * scale, 70 * scale, 11 * scale);
  fill_path(ctx, undefined, color[2], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(56 * scale, 6 * scale);
  ctx.bezierCurveTo(63.5 * scale, 13.5 * scale, 63.5 * scale, 13.5 * scale, 71 * scale, 21 * scale);
  ctx.bezierCurveTo(74.5 * scale, 11.5 * scale, 74.5 * scale, 11.5 * scale, 78 * scale, 2 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[2], 10 * scale);
  return can;
};

function create_spanner(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 144 * scale;
  can.height = 280 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(5 * scale, 5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(62 * scale, 103.79999542236328 * scale);
  ctx.bezierCurveTo(62.5 * scale, 148.79999542236328 * scale, 62.5 * scale, 148.79999542236328 * scale, 63 * scale, 193.79999542236328 * scale);
  ctx.bezierCurveTo(63 * scale, 219.79999542236328 * scale, 47 * scale, 217.79999542236328 * scale, 51 * scale, 230.79999542236328 * scale);
  ctx.bezierCurveTo(62 * scale, 255.79999542236328 * scale, 74 * scale, 260.7999954223633 * scale, 72 * scale, 248.79999542236328 * scale);
  ctx.bezierCurveTo(65 * scale, 226.79999542236328 * scale, 71 * scale, 229.79999542236328 * scale, 76 * scale, 225.79999542236328 * scale);
  ctx.bezierCurveTo(90 * scale, 224.79999542236328 * scale, 89 * scale, 232.79999542236328 * scale, 90 * scale, 243.79999542236328 * scale);
  ctx.bezierCurveTo(95 * scale, 253.79999542236328 * scale, 99 * scale, 249.79999542236328 * scale, 100 * scale, 229.79999542236328 * scale);
  ctx.bezierCurveTo(102 * scale, 213.79999542236328 * scale, 98 * scale, 214.79999542236328 * scale, 90 * scale, 205.79999542236328 * scale);
  ctx.bezierCurveTo(82 * scale, 201.79999542236328 * scale, 82 * scale, 185.79999542236328 * scale, 82 * scale, 114.79999542236328 * scale);
  ctx.bezierCurveTo(80 * scale, 73 * scale, 82 * scale, 68 * scale, 93 * scale, 53 * scale);
  ctx.bezierCurveTo(98 * scale, 37 * scale, 65 * scale, 14 * scale, 74 * scale, 33 * scale);
  ctx.bezierCurveTo(82 * scale, 56 * scale, 77 * scale, 52 * scale, 69 * scale, 54 * scale);
  ctx.bezierCurveTo(55 * scale, 57 * scale, 57 * scale, 53 * scale, 54 * scale, 39 * scale);
  ctx.bezierCurveTo(46 * scale, 20 * scale, 37 * scale, 61 * scale, 50 * scale, 68 * scale);
  ctx.bezierCurveTo(65 * scale, 81 * scale, 60 * scale, 89 * scale, 62 * scale, 102 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(-5 * scale, -5 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(62 * scale, 103.79999542236328 * scale);
  ctx.bezierCurveTo(62.5 * scale, 148.79999542236328 * scale, 62.5 * scale, 148.79999542236328 * scale, 63 * scale, 193.79999542236328 * scale);
  ctx.bezierCurveTo(63 * scale, 219.79999542236328 * scale, 47 * scale, 217.79999542236328 * scale, 51 * scale, 230.79999542236328 * scale);
  ctx.bezierCurveTo(62 * scale, 255.79999542236328 * scale, 74 * scale, 260.7999954223633 * scale, 72 * scale, 248.79999542236328 * scale);
  ctx.bezierCurveTo(65 * scale, 226.79999542236328 * scale, 71 * scale, 229.79999542236328 * scale, 76 * scale, 225.79999542236328 * scale);
  ctx.bezierCurveTo(90 * scale, 224.79999542236328 * scale, 89 * scale, 232.79999542236328 * scale, 90 * scale, 243.79999542236328 * scale);
  ctx.bezierCurveTo(95 * scale, 253.79999542236328 * scale, 99 * scale, 249.79999542236328 * scale, 100 * scale, 229.79999542236328 * scale);
  ctx.bezierCurveTo(102 * scale, 213.79999542236328 * scale, 98 * scale, 214.79999542236328 * scale, 90 * scale, 205.79999542236328 * scale);
  ctx.bezierCurveTo(82 * scale, 201.79999542236328 * scale, 82 * scale, 185.79999542236328 * scale, 82 * scale, 114.79999542236328 * scale);
  ctx.bezierCurveTo(80 * scale, 73 * scale, 82 * scale, 68 * scale, 93 * scale, 53 * scale);
  ctx.bezierCurveTo(98 * scale, 37 * scale, 65 * scale, 14 * scale, 74 * scale, 33 * scale);
  ctx.bezierCurveTo(82 * scale, 56 * scale, 77 * scale, 52 * scale, 69 * scale, 54 * scale);
  ctx.bezierCurveTo(55 * scale, 57 * scale, 57 * scale, 53 * scale, 54 * scale, 39 * scale);
  ctx.bezierCurveTo(46 * scale, 20 * scale, 37 * scale, 61 * scale, 50 * scale, 68 * scale);
  ctx.bezierCurveTo(65 * scale, 81 * scale, 60 * scale, 89 * scale, 62 * scale, 102 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[2], 6 * scale);
  return can;
};

function create_present(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 160 * scale;
  can.height = 161 * scale;
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.save();
  ctx.translate(80.5 * scale, 78 * scale);
  round_rect(ctx, -71.5 * scale, -71 * scale, 143 * scale, 143 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.save();
  ctx.translate(80.5 * scale, 78 * scale);
  round_rect(ctx, -71.5 * scale, -71 * scale, 143 * scale, 143 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[1], color[2], 6 * scale);
  ctx.save();
  ctx.translate(80 * scale, 78.5 * scale);
  round_rect(ctx, -17 * scale, -72.5 * scale, 34 * scale, 145 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.save();
  ctx.translate(80 * scale, 79.5 * scale);
  round_rect(ctx, -73 * scale, -16.5 * scale, 145 * scale, 34 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.save();
  ctx.translate(80 * scale, 79.5 * scale);
  round_rect(ctx, -73 * scale, -16.5 * scale, 145 * scale, 34 * scale, 10 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(79 * scale, 71 * scale);
  ctx.bezierCurveTo(90 * scale, 42 * scale, 98 * scale, 36 * scale, 109 * scale, 43 * scale);
  ctx.bezierCurveTo(119 * scale, 47 * scale, 128 * scale, 62 * scale, 107 * scale, 72 * scale);
  ctx.bezierCurveTo(96 * scale, 78.5 * scale, 96 * scale, 78.5 * scale, 85 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84 * scale, 78 * scale);
  ctx.bezierCurveTo(113 * scale, 82 * scale, 123 * scale, 97 * scale, 115 * scale, 108 * scale);
  ctx.bezierCurveTo(110 * scale, 119 * scale, 98 * scale, 124 * scale, 87 * scale, 107 * scale);
  ctx.bezierCurveTo(81.5 * scale, 94.5 * scale, 81.5 * scale, 94.5 * scale, 76 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80 * scale, 73 * scale);
  ctx.bezierCurveTo(64 * scale, 37 * scale, 55 * scale, 34 * scale, 45 * scale, 42 * scale);
  ctx.bezierCurveTo(30 * scale, 54 * scale, 36 * scale, 65 * scale, 51 * scale, 72 * scale);
  ctx.bezierCurveTo(62.5 * scale, 77 * scale, 62.5 * scale, 77 * scale, 74 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(82 * scale, 83 * scale);
  ctx.bezierCurveTo(73 * scale, 107 * scale, 60 * scale, 123 * scale, 47 * scale, 113 * scale);
  ctx.bezierCurveTo(33 * scale, 105 * scale, 33 * scale, 92 * scale, 52 * scale, 85 * scale);
  ctx.bezierCurveTo(74 * scale, 73 * scale, 77 * scale, 76 * scale, 76 * scale, 75 * scale);
  ctx.closePath();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(79 * scale, 71 * scale);
  ctx.bezierCurveTo(90 * scale, 42 * scale, 98 * scale, 36 * scale, 109 * scale, 43 * scale);
  ctx.bezierCurveTo(119 * scale, 47 * scale, 128 * scale, 62 * scale, 107 * scale, 72 * scale);
  ctx.bezierCurveTo(96 * scale, 78.5 * scale, 96 * scale, 78.5 * scale, 85 * scale, 85 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(84 * scale, 78 * scale);
  ctx.bezierCurveTo(113 * scale, 82 * scale, 123 * scale, 97 * scale, 115 * scale, 108 * scale);
  ctx.bezierCurveTo(110 * scale, 119 * scale, 98 * scale, 124 * scale, 87 * scale, 107 * scale);
  ctx.bezierCurveTo(81.5 * scale, 94.5 * scale, 81.5 * scale, 94.5 * scale, 76 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(80 * scale, 73 * scale);
  ctx.bezierCurveTo(64 * scale, 37 * scale, 55 * scale, 34 * scale, 45 * scale, 42 * scale);
  ctx.bezierCurveTo(30 * scale, 54 * scale, 36 * scale, 65 * scale, 51 * scale, 72 * scale);
  ctx.bezierCurveTo(62.5 * scale, 77 * scale, 62.5 * scale, 77 * scale, 74 * scale, 82 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(82 * scale, 83 * scale);
  ctx.bezierCurveTo(73 * scale, 107 * scale, 60 * scale, 123 * scale, 47 * scale, 113 * scale);
  ctx.bezierCurveTo(33 * scale, 105 * scale, 33 * scale, 92 * scale, 52 * scale, 85 * scale);
  ctx.bezierCurveTo(74 * scale, 73 * scale, 77 * scale, 76 * scale, 76 * scale, 75 * scale);
  ctx.closePath();
  fill_path(ctx, color[3], color[4], 6 * scale);
  ctx.globalAlpha = draw_shadow ? 0.5 : 1;
  ctx.translate(0, 10 * scale);
  ctx.save();
  ctx.translate(78.5 * scale, 78 * scale);
  round_rect(ctx, -13.5 * scale, -14 * scale, 27 * scale, 27 * scale, 6 * scale);
  ctx.restore();
  fill_path(ctx, color[0]);
  ctx.globalAlpha = 1;
  ctx.translate(0, -10 * scale);
  ctx.save();
  ctx.translate(78.5 * scale, 78 * scale);
  round_rect(ctx, -13.5 * scale, -14 * scale, 27 * scale, 27 * scale, 6 * scale);
  ctx.restore();
  fill_path(ctx, color[3], color[4], 6 * scale);
  return can;
};

function create_crown_life(scale, draw_shadow, color) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 372 * scale;
  can.height = 358 * scale;
  ctx.translate(0 * scale, 10 * scale);
  ctx.globalAlpha = draw_shadow ? 0.2 : 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(247.00003051757812 * scale, 115.76704406738281 * scale);
  ctx.bezierCurveTo(305.0000305175781 * scale, 124.76704406738281 * scale, 335.0000305175781 * scale, 112.76704406738281 * scale, 359.0000305175781 * scale, 93.76704406738281 * scale);
  ctx.bezierCurveTo(359.5000305175781 * scale, 113.26704406738281 * scale, 359.5000305175781 * scale, 113.26704406738281 * scale, 360.0000305175781 * scale, 132.7670440673828 * scale);
  ctx.bezierCurveTo(339.0000305175781 * scale, 177.7670440673828 * scale, 281.0000305175781 * scale, 178.7670440673828 * scale, 243.00003051757812 * scale, 183.7670440673828 * scale);
  ctx.bezierCurveTo(214.50003051757812 * scale, 214.2670440673828 * scale, 214.50003051757812 * scale, 214.2670440673828 * scale, 186.00003051757812 * scale, 244.7670440673828 * scale);
  ctx.bezierCurveTo(155.00003051757812 * scale, 214.2670440673828 * scale, 155.00003051757812 * scale, 214.2670440673828 * scale, 124.00003051757812 * scale, 183.7670440673828 * scale);
  ctx.bezierCurveTo(51.000030517578125 * scale, 180.7670440673828 * scale, 21.000030517578125 * scale, 161.7670440673828 * scale, 9.000030517578125 * scale, 129.7670440673828 * scale);
  ctx.bezierCurveTo(8.500030517578125 * scale, 110.76704406738281 * scale, 8.500030517578125 * scale, 110.76704406738281 * scale, 8.000030517578125 * scale, 91.76704406738281 * scale);
  ctx.bezierCurveTo(31.000030517578125 * scale, 112.76704406738281 * scale, 87.00003051757812 * scale, 119.76704406738281 * scale, 116.00003051757812 * scale, 117.76704406738281 * scale);
  ctx.bezierCurveTo(175.00003051757812 * scale, 18.767044067382812 * scale, 170.00003051757812 * scale, 23.767044067382812 * scale, 181.00003051757812 * scale, 14.767044067382812 * scale);
  ctx.bezierCurveTo(199.00003051757812 * scale, 34.76704406738281 * scale, 203.00003051757812 * scale, 54.76704406738281 * scale, 247.00003051757812 * scale, 115.76704406738281 * scale);
  ctx.closePath();
  fill_path(ctx, color[0], color[0], 10 * scale);
  ctx.translate(0 * scale, -10 * scale);
  ctx.globalAlpha = 1;
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(107.00003051757812 * scale, 54.13069152832031 * scale);
  ctx.bezierCurveTo(106.50003051757812 * scale, 38.63069152832031 * scale, 106.50003051757812 * scale, 38.63069152832031 * scale, 106.00003051757812 * scale, 23.130691528320312 * scale);
  ctx.bezierCurveTo(121.50003051757812 * scale, 38.13069152832031 * scale, 121.50003051757812 * scale, 38.13069152832031 * scale, 137.00003051757812 * scale, 53.13069152832031 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(233.00003051757812 * scale, 53.6761474609375 * scale);
  ctx.bezierCurveTo(247.00003051757812 * scale, 37.1761474609375 * scale, 247.00003051757812 * scale, 37.1761474609375 * scale, 261.0000305175781 * scale, 20.6761474609375 * scale);
  ctx.bezierCurveTo(261.0000305175781 * scale, 36.1761474609375 * scale, 261.0000305175781 * scale, 36.1761474609375 * scale, 261.0000305175781 * scale, 51.6761474609375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(293.0000305175781 * scale, 54.403411865234375 * scale);
  ctx.bezierCurveTo(300.0000305175781 * scale, 49.903411865234375 * scale, 300.0000305175781 * scale, 49.903411865234375 * scale, 307.0000305175781 * scale, 45.403411865234375 * scale);
  ctx.bezierCurveTo(307.0000305175781 * scale, 49.903411865234375 * scale, 307.0000305175781 * scale, 49.903411865234375 * scale, 307.0000305175781 * scale, 54.403411865234375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(77.00003051757812 * scale, 54.403411865234375 * scale);
  ctx.bezierCurveTo(70.00003051757812 * scale, 50.403411865234375 * scale, 70.00003051757812 * scale, 50.403411865234375 * scale, 63.000030517578125 * scale, 46.403411865234375 * scale);
  ctx.bezierCurveTo(62.500030517578125 * scale, 50.903411865234375 * scale, 62.500030517578125 * scale, 50.903411865234375 * scale, 62.000030517578125 * scale, 55.403411865234375 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(58.000030517578125 * scale, 122.3125 * scale);
  ctx.bezierCurveTo(59.500030517578125 * scale, 97.3125 * scale, 59.500030517578125 * scale, 97.3125 * scale, 61.000030517578125 * scale, 72.3125 * scale);
  ctx.bezierCurveTo(91.00003051757812 * scale, 89.3125 * scale, 91.00003051757812 * scale, 89.3125 * scale, 121.00003051757812 * scale, 106.3125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[1], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(310.0000305175781 * scale, 127.3125 * scale);
  ctx.bezierCurveTo(308.0000305175781 * scale, 98.3125 * scale, 308.0000305175781 * scale, 98.3125 * scale, 306.0000305175781 * scale, 69.3125 * scale);
  ctx.bezierCurveTo(274.5000305175781 * scale, 88.8125 * scale, 274.5000305175781 * scale, 88.8125 * scale, 243.00003051757812 * scale, 108.3125 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[1], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(226.00003051757812 * scale, 87.85795593261719 * scale);
  ctx.bezierCurveTo(243.50003051757812 * scale, 66.85795593261719 * scale, 243.50003051757812 * scale, 66.85795593261719 * scale, 261.0000305175781 * scale, 45.85795593261719 * scale);
  ctx.bezierCurveTo(265.0000305175781 * scale, 83.85795593261719 * scale, 265.0000305175781 * scale, 83.85795593261719 * scale, 269.0000305175781 * scale, 121.85795593261719 * scale);
  ctx.bezierCurveTo(235.00003051757812 * scale, 122.85795593261719 * scale, 233.00003051757812 * scale, 107.85795593261719 * scale, 228.00003051757812 * scale, 90.85795593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105.00003051757812 * scale, 128.8579559326172 * scale);
  ctx.bezierCurveTo(104.50003051757812 * scale, 87.85795593261719 * scale, 104.50003051757812 * scale, 87.85795593261719 * scale, 104.00003051757812 * scale, 46.85795593261719 * scale);
  ctx.bezierCurveTo(126.50003051757812 * scale, 69.35795593261719 * scale, 126.50003051757812 * scale, 69.35795593261719 * scale, 149.00003051757812 * scale, 91.85795593261719 * scale);
  ctx.bezierCurveTo(130.00003051757812 * scale, 123.85795593261719 * scale, 123.00003051757812 * scale, 132.8579559326172 * scale, 107.00003051757812 * scale, 130.8579559326172 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[1], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(59.000030517578125 * scale, 121.85795593261719 * scale);
  ctx.bezierCurveTo(59.500030517578125 * scale, 99.35795593261719 * scale, 59.500030517578125 * scale, 99.35795593261719 * scale, 60.000030517578125 * scale, 76.85795593261719 * scale);
  ctx.bezierCurveTo(84.00003051757812 * scale, 92.35795593261719 * scale, 84.00003051757812 * scale, 92.35795593261719 * scale, 108.00003051757812 * scale, 107.85795593261719 * scale);
  ctx.bezierCurveTo(106.00003051757812 * scale, 148.8579559326172 * scale, 86.00003051757812 * scale, 148.8579559326172 * scale, 62.000030517578125 * scale, 123.85795593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(105.00003051757812 * scale, 132.8579559326172 * scale);
  ctx.bezierCurveTo(104.50003051757812 * scale, 93.35795593261719 * scale, 104.50003051757812 * scale, 93.35795593261719 * scale, 104.00003051757812 * scale, 53.85795593261719 * scale);
  ctx.bezierCurveTo(126.50003051757812 * scale, 75.85795593261719 * scale, 126.50003051757812 * scale, 75.85795593261719 * scale, 149.00003051757812 * scale, 97.85795593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(311.0000305175781 * scale, 126.85795593261719 * scale);
  ctx.bezierCurveTo(309.0000305175781 * scale, 101.35795593261719 * scale, 309.0000305175781 * scale, 101.35795593261719 * scale, 307.0000305175781 * scale, 75.85795593261719 * scale);
  ctx.bezierCurveTo(271.0000305175781 * scale, 96.85795593261719 * scale, 271.0000305175781 * scale, 96.85795593261719 * scale, 235.00003051757812 * scale, 117.85795593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(228.00003051757812 * scale, 96.85795593261719 * scale);
  ctx.bezierCurveTo(244.50003051757812 * scale, 74.85795593261719 * scale, 244.50003051757812 * scale, 74.85795593261719 * scale, 261.0000305175781 * scale, 52.85795593261719 * scale);
  ctx.bezierCurveTo(265.5000305175781 * scale, 89.85795593261719 * scale, 265.5000305175781 * scale, 89.85795593261719 * scale, 270.0000305175781 * scale, 126.85795593261719 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(12.000030517578125 * scale, 86.13069152832031 * scale);
  ctx.bezierCurveTo(36.000030517578125 * scale, 113.13069152832031 * scale, 84.00003051757812 * scale, 111.13069152832031 * scale, 116.00003051757812 * scale, 113.13069152832031 * scale);
  ctx.bezierCurveTo(164.00003051757812 * scale, 23.130691528320312 * scale, 172.00003051757812 * scale, 18.130691528320312 * scale, 181.00003051757812 * scale, 9.130691528320312 * scale);
  ctx.bezierCurveTo(199.00003051757812 * scale, 29.130691528320312 * scale, 221.00003051757812 * scale, 78.13069152832031 * scale, 247.00003051757812 * scale, 112.13069152832031 * scale);
  ctx.bezierCurveTo(301.0000305175781 * scale, 122.13069152832031 * scale, 338.0000305175781 * scale, 111.13069152832031 * scale, 359.0000305175781 * scale, 94.13069152832031 * scale);
  ctx.bezierCurveTo(359.0000305175781 * scale, 113.13069152832031 * scale, 358.5000305175781 * scale, 105.13069152832031 * scale, 358.0000305175781 * scale, 116.13069152832031 * scale);
  ctx.bezierCurveTo(270.5000305175781 * scale, 130.1306915283203 * scale, 270.5000305175781 * scale, 130.1306915283203 * scale, 183.00003051757812 * scale, 144.1306915283203 * scale);
  ctx.bezierCurveTo(98.00003051757812 * scale, 128.6306915283203 * scale, 98.00003051757812 * scale, 128.6306915283203 * scale, 13.000030517578125 * scale, 113.13069152832031 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[1], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(247.00003051757812 * scale, 115.76704406738281 * scale);
  ctx.bezierCurveTo(305.0000305175781 * scale, 124.76704406738281 * scale, 335.0000305175781 * scale, 112.76704406738281 * scale, 359.0000305175781 * scale, 93.76704406738281 * scale);
  ctx.bezierCurveTo(359.5000305175781 * scale, 113.26704406738281 * scale, 359.5000305175781 * scale, 113.26704406738281 * scale, 360.0000305175781 * scale, 132.7670440673828 * scale);
  ctx.bezierCurveTo(339.0000305175781 * scale, 177.7670440673828 * scale, 281.0000305175781 * scale, 178.7670440673828 * scale, 243.00003051757812 * scale, 183.7670440673828 * scale);
  ctx.bezierCurveTo(214.50003051757812 * scale, 214.2670440673828 * scale, 214.50003051757812 * scale, 214.2670440673828 * scale, 186.00003051757812 * scale, 244.7670440673828 * scale);
  ctx.bezierCurveTo(155.00003051757812 * scale, 214.2670440673828 * scale, 155.00003051757812 * scale, 214.2670440673828 * scale, 124.00003051757812 * scale, 183.7670440673828 * scale);
  ctx.bezierCurveTo(51.000030517578125 * scale, 180.7670440673828 * scale, 21.000030517578125 * scale, 161.7670440673828 * scale, 9.000030517578125 * scale, 129.7670440673828 * scale);
  ctx.bezierCurveTo(8.500030517578125 * scale, 110.76704406738281 * scale, 8.500030517578125 * scale, 110.76704406738281 * scale, 8.000030517578125 * scale, 91.76704406738281 * scale);
  ctx.bezierCurveTo(31.000030517578125 * scale, 112.76704406738281 * scale, 87.00003051757812 * scale, 119.76704406738281 * scale, 116.00003051757812 * scale, 117.76704406738281 * scale);
  ctx.bezierCurveTo(175.00003051757812 * scale, 18.767044067382812 * scale, 170.00003051757812 * scale, 23.767044067382812 * scale, 181.00003051757812 * scale, 14.767044067382812 * scale);
  ctx.bezierCurveTo(199.00003051757812 * scale, 34.76704406738281 * scale, 203.00003051757812 * scale, 54.76704406738281 * scale, 247.00003051757812 * scale, 115.76704406738281 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(27.000030517578125 * scale, 94.76704406738281 * scale);
  ctx.bezierCurveTo(11.000030517578125 * scale, 81.76704406738281 * scale, 31.000030517578125 * scale, 72.76704406738281 * scale, 44.000030517578125 * scale, 59.76704406738281 * scale);
  ctx.bezierCurveTo(9.000030517578125 * scale, 65.76704406738281 * scale, 4.000030517578125 * scale, 78.76704406738281 * scale, 9.000030517578125 * scale, 89.76704406738281 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(352.0000305175781 * scale, 100.76705932617188 * scale);
  ctx.bezierCurveTo(362.0000305175781 * scale, 92.76705932617188 * scale, 352.0000305175781 * scale, 84.76705932617188 * scale, 340.0000305175781 * scale, 68.76705932617188 * scale);
  ctx.bezierCurveTo(360.0000305175781 * scale, 69.76705932617188 * scale, 364.0000305175781 * scale, 79.76705932617188 * scale, 364.0000305175781 * scale, 94.76705932617188 * scale);
  ctx.closePath();
  fill_path(ctx, color[1], color[1], 1 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(25.000030517578125 * scale, 97.94886779785156 * scale);
  ctx.bezierCurveTo(2.000030517578125 * scale, 76.94886779785156 * scale, 29.000030517578125 * scale, 62.94886779785156 * scale, 44.000030517578125 * scale, 59.94886779785156 * scale);
  ctx.bezierCurveTo(8.000030517578125 * scale, 59.94886779785156 * scale, -0.999969482421875 * scale, 81.94886779785156 * scale, 4.000030517578125 * scale, 92.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[3]);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(349.0000305175781 * scale, 100.94886779785156 * scale);
  ctx.bezierCurveTo(366.0000305175781 * scale, 82.94886779785156 * scale, 353.0000305175781 * scale, 76.94886779785156 * scale, 337.0000305175781 * scale, 67.94886779785156 * scale);
  ctx.bezierCurveTo(366.0000305175781 * scale, 69.94886779785156 * scale, 366.0000305175781 * scale, 83.94886779785156 * scale, 363.0000305175781 * scale, 101.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[2], color[3], 10 * scale);
  circle(ctx, 46.000030517578125 * scale, 137.5852279663086 * scale, 9.219544457292887 * scale);
  fill_path(ctx, color[4], color[5], 1 * scale);
  circle(ctx, 308.0000305175781 * scale, 141.5852279663086 * scale, 8.54400374531753 * scale);
  fill_path(ctx, color[4], color[5], 1 * scale);
  circle(ctx, 92.00003051757812 * scale, 149.58523559570312 * scale, 14.866068747318506 * scale);
  fill_path(ctx, color[4], color[5], 1 * scale);
  circle(ctx, 262.0000305175781 * scale, 148.8579559326172 * scale, 15.620499351813308 * scale);
  fill_path(ctx, color[4], color[5], 1 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(184.00003051757812 * scale, 68.85795593261719 * scale);
  ctx.bezierCurveTo(203.00003051757812 * scale, 108.85795593261719 * scale, 203.00003051757812 * scale, 108.85795593261719 * scale, 222.00003051757812 * scale, 148.8579559326172 * scale);
  ctx.bezierCurveTo(202.50003051757812 * scale, 177.8579559326172 * scale, 202.50003051757812 * scale, 177.8579559326172 * scale, 183.00003051757812 * scale, 206.8579559326172 * scale);
  ctx.bezierCurveTo(162.00003051757812 * scale, 178.8579559326172 * scale, 162.00003051757812 * scale, 178.8579559326172 * scale, 141.00003051757812 * scale, 150.8579559326172 * scale);
  ctx.closePath();
  fill_path(ctx, color[4], color[5], 10 * scale);
  ctx.beginPath();
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.moveTo(183.00003051757812 * scale, 104.94886779785156 * scale);
  ctx.bezierCurveTo(192.50003051757812 * scale, 125.44886779785156 * scale, 192.50003051757812 * scale, 125.44886779785156 * scale, 202.00003051757812 * scale, 145.94886779785156 * scale);
  ctx.bezierCurveTo(192.00003051757812 * scale, 163.94886779785156 * scale, 192.00003051757812 * scale, 163.94886779785156 * scale, 182.00003051757812 * scale, 181.94886779785156 * scale);
  ctx.bezierCurveTo(172.50003051757812 * scale, 164.44886779785156 * scale, 172.50003051757812 * scale, 164.44886779785156 * scale, 163.00003051757812 * scale, 146.94886779785156 * scale);
  ctx.closePath();
  fill_path(ctx, color[6]);
  return can;
};

function create_background_market() {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  can.width = 460;
  can.height = 220;
  ctx.fillStyle = "#3a2a0d";
  ctx.fillRect(0, 0, can.width, can.height);
  ctx.lineWidth = 4;
  ctx.beginPath();
  ctx.strokeStyle = "#513810";
  for (var y = 20; y < 220; y += 20) {
    ctx.moveTo(0, y);
    ctx.lineTo(460, y);
    ctx.closePath();
    ctx.stroke();
  }
  return can;
};

function create_gauges(scale) {
  var can = document.createElement("canvas");
  var ctx = can.getContext("2d");
  var w = 950 * scale;
  var gw = 180 * scale;
  var h = 50 * scale;
  var hg = 20 * scale;
  var gh = 240 * scale;
  var xw = 35 * scale;
  var yh = 1 * scale;
  var r = 4 * scale;
  var lw = 4 * scale;
  can.width = w;
  can.height = h;
  ctx.translate(0, 15 * scale);
  round_rect(ctx, xw, yh, gw, hg, r);
  fill_path(ctx, null, "#69A148", lw);
  var img = sprite[SPRITE.HEART_SYMBOL_HUD];
  ctx.drawImage(img, 17, -8);
  ctx.translate(gh, 0);
  round_rect(ctx, xw, yh, gw, hg, r);
  fill_path(ctx, null, "#AF352A", lw);
  var img = sprite[SPRITE.FOOD_SYMBOL_HUD];
  ctx.drawImage(img, 17, -9);
  ctx.translate(gh, 0);
  round_rect(ctx, xw, yh, gw, hg, r);
  fill_path(ctx, null, "#669BB1", lw);
  var img = sprite[SPRITE.COLD_SYMBOL_HUD];
  ctx.drawImage(img, 17, -8);
  ctx.translate(gh, 0);
  round_rect(ctx, xw, yh, gw, hg, r);
  fill_path(ctx, null, "#074A87", lw);
  var img = sprite[SPRITE.WATER_SYMBOL_HUD];
  ctx.drawImage(img, 17, -8);
  return can;
};

function _load_images() {
  var TIMEDEBUG = (new Date).getTime();
  render_cosmetics();

  function codeToTile(code) {
    var tile = 0;
    for (var i = 0, j = 0; i < code.length; i++) {
      var c = code.charAt(i);
      if ((c === "_") || (i === 5))
        continue;

      if (c === "1")
        tile += Math.pow(2, j);

      j++;
    }
    return tile;
  };
  sprite[SPRITE.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN];
  sprite[SPRITE.RIVER_DECO] = [];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY] = [];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_010_000")] = [IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_011_010")] = [IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_011_011")] = [IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO8, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_111")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO13];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_010_000")] = [IMAGES.DAY_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_010_010")] = [IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_011_000")] = [IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_011_000")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_011_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_011_011")] = [IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO15];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_011_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("011_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_110_000")] = [IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_000")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_110")] = [IMAGES.DAY_RIVER_COMPO28, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_000")] = [IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO14];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][codeToTile("111_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT] = [];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_010_000")] = [IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_011_010")] = [IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_011_011")] = [IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO8, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_111")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO13];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_010_000")] = [IMAGES.NIGHT_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_010_010")] = [IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_011_000")] = [IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_011_000")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_011_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_011_011")] = [IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO15];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_011_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("011_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_110_000")] = [IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_000")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_110")] = [IMAGES.NIGHT_RIVER_COMPO28, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_000")] = [IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO14];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][codeToTile("111_111_110")];
  sprite[SPRITE.RIVER] = [];
  sprite[SPRITE.RIVER][SPRITE.DAY] = [];
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_010_000")] = IMAGES.DAY_RIVER_000_010_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_010_010")] = IMAGES.DAY_RIVER_000_010_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_011_000")] = IMAGES.DAY_RIVER_000_011_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_011_010")] = IMAGES.DAY_RIVER_000_011_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_011_011")] = IMAGES.DAY_RIVER_000_011_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_110_000")] = IMAGES.DAY_RIVER_000_110_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_110_010")] = IMAGES.DAY_RIVER_000_110_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_110_110")] = IMAGES.DAY_RIVER_000_110_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_000")] = IMAGES.DAY_RIVER_000_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_010")] = IMAGES.DAY_RIVER_000_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_011")] = IMAGES.DAY_RIVER_000_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_110")] = IMAGES.DAY_RIVER_000_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("000_111_111")] = IMAGES.DAY_RIVER_000_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_010_000")] = IMAGES.DAY_RIVER_010_010_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_010_010")] = IMAGES.DAY_RIVER_010_010_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_011_000")] = IMAGES.DAY_RIVER_010_011_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_011_010")] = IMAGES.DAY_RIVER_010_011_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_011_011")] = IMAGES.DAY_RIVER_010_011_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_110_000")] = IMAGES.DAY_RIVER_010_110_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_110_010")] = IMAGES.DAY_RIVER_010_110_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_110_110")] = IMAGES.DAY_RIVER_010_110_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_000")] = IMAGES.DAY_RIVER_010_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_010")] = IMAGES.DAY_RIVER_010_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_011")] = IMAGES.DAY_RIVER_010_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_110")] = IMAGES.DAY_RIVER_010_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("010_111_111")] = IMAGES.DAY_RIVER_010_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_011_000")] = IMAGES.DAY_RIVER_011_011_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_011_010")] = IMAGES.DAY_RIVER_011_011_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_011_011")] = IMAGES.DAY_RIVER_011_011_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_000")] = IMAGES.DAY_RIVER_011_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_010")] = IMAGES.DAY_RIVER_011_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_011")] = IMAGES.DAY_RIVER_011_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_110")] = IMAGES.DAY_RIVER_011_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("011_111_111")] = IMAGES.DAY_RIVER_011_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_110_000")] = IMAGES.DAY_RIVER_110_110_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_110_010")] = IMAGES.DAY_RIVER_110_110_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_110_110")] = IMAGES.DAY_RIVER_110_110_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_000")] = IMAGES.DAY_RIVER_110_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_010")] = IMAGES.DAY_RIVER_110_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_011")] = IMAGES.DAY_RIVER_110_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_110")] = IMAGES.DAY_RIVER_110_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("110_111_111")] = IMAGES.DAY_RIVER_110_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_110")] = IMAGES.DAY_RIVER_111_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_000")] = IMAGES.DAY_RIVER_111_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_111")] = IMAGES.DAY_RIVER_111_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][codeToTile("111_111_010")] = IMAGES.DAY_RIVER_111_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT] = [];
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_010_000")] = IMAGES.NIGHT_RIVER_000_010_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_010_010")] = IMAGES.NIGHT_RIVER_000_010_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_011_000")] = IMAGES.NIGHT_RIVER_000_011_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_011_010")] = IMAGES.NIGHT_RIVER_000_011_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_011_011")] = IMAGES.NIGHT_RIVER_000_011_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_110_000")] = IMAGES.NIGHT_RIVER_000_110_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_110_010")] = IMAGES.NIGHT_RIVER_000_110_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_110_110")] = IMAGES.NIGHT_RIVER_000_110_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_000")] = IMAGES.NIGHT_RIVER_000_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_010")] = IMAGES.NIGHT_RIVER_000_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_011")] = IMAGES.NIGHT_RIVER_000_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_110")] = IMAGES.NIGHT_RIVER_000_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("000_111_111")] = IMAGES.NIGHT_RIVER_000_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_010_000")] = IMAGES.NIGHT_RIVER_010_010_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_010_010")] = IMAGES.NIGHT_RIVER_010_010_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_011_000")] = IMAGES.NIGHT_RIVER_010_011_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_011_010")] = IMAGES.NIGHT_RIVER_010_011_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_011_011")] = IMAGES.NIGHT_RIVER_010_011_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_110_000")] = IMAGES.NIGHT_RIVER_010_110_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_110_010")] = IMAGES.NIGHT_RIVER_010_110_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_110_110")] = IMAGES.NIGHT_RIVER_010_110_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_000")] = IMAGES.NIGHT_RIVER_010_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_010")] = IMAGES.NIGHT_RIVER_010_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_011")] = IMAGES.NIGHT_RIVER_010_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_110")] = IMAGES.NIGHT_RIVER_010_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("010_111_111")] = IMAGES.NIGHT_RIVER_010_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_011_000")] = IMAGES.NIGHT_RIVER_011_011_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_011_010")] = IMAGES.NIGHT_RIVER_011_011_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_011_011")] = IMAGES.NIGHT_RIVER_011_011_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_000")] = IMAGES.NIGHT_RIVER_011_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_010")] = IMAGES.NIGHT_RIVER_011_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_011")] = IMAGES.NIGHT_RIVER_011_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_110")] = IMAGES.NIGHT_RIVER_011_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("011_111_111")] = IMAGES.NIGHT_RIVER_011_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_110_000")] = IMAGES.NIGHT_RIVER_110_110_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_110_010")] = IMAGES.NIGHT_RIVER_110_110_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_110_110")] = IMAGES.NIGHT_RIVER_110_110_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_000")] = IMAGES.NIGHT_RIVER_110_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_010")] = IMAGES.NIGHT_RIVER_110_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_011")] = IMAGES.NIGHT_RIVER_110_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_110")] = IMAGES.NIGHT_RIVER_110_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("110_111_111")] = IMAGES.NIGHT_RIVER_110_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_110")] = IMAGES.NIGHT_RIVER_111_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_000")] = IMAGES.NIGHT_RIVER_111_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_111")] = IMAGES.NIGHT_RIVER_111_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][codeToTile("111_111_010")] = IMAGES.NIGHT_RIVER_111_111_010;
  sprite[SPRITE.PICK_REIDITE] = [];
  sprite[SPRITE.PICK_REIDITE][SPRITE.DAY] = IMAGES.PICK_REIDITED;
  sprite[SPRITE.PICK_REIDITE][SPRITE.NIGHT] = IMAGES.PICK_REIDITEN;
  sprite[SPRITE.CARROT] = [];
  sprite[SPRITE.CARROT][SPRITE.DAY] = IMAGES.CARROTD;
  sprite[SPRITE.CARROT][SPRITE.NIGHT] = IMAGES.CARROTN;
  sprite[SPRITE.TOMATO_MINI] = [];
  sprite[SPRITE.TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINID;
  sprite[SPRITE.TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MININ;
  sprite[SPRITE.TOMATO] = [];
  sprite[SPRITE.TOMATO][SPRITE.DAY] = IMAGES.TOMATOD;
  sprite[SPRITE.TOMATO][SPRITE.NIGHT] = IMAGES.TOMATON;
  sprite[SPRITE.DRIED_CARROT] = [];
  sprite[SPRITE.DRIED_CARROT][SPRITE.DAY] = IMAGES.CARROT_DRIEDD;
  sprite[SPRITE.DRIED_CARROT][SPRITE.NIGHT] = IMAGES.CARROT_DRIEDN;
  sprite[SPRITE.DRIED_TOMATO_MINI] = [];
  sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINI_DRIEDD;
  sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN;
  sprite[SPRITE.WATERMELON] = [];
  sprite[SPRITE.WATERMELON][SPRITE.DAY] = IMAGES.WATERMELOND;
  sprite[SPRITE.WATERMELON][SPRITE.NIGHT] = IMAGES.WATERMELONN;
  sprite[SPRITE.DRIED_WATERMELON] = [];
  sprite[SPRITE.DRIED_WATERMELON][SPRITE.DAY] = IMAGES.DRIED_WATERMELOND;
  sprite[SPRITE.DRIED_WATERMELON][SPRITE.NIGHT] = IMAGES.DRIED_WATERMELONN;
  sprite[SPRITE.ALOE_VERA_GROWN] = [];
  sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.DAY] = IMAGES.ALOE_VERA_GROWND;
  sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.NIGHT] = IMAGES.ALOE_VERA_GROWNN;
  sprite[SPRITE.DRIED_ALOE_VERA] = [];
  sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERA_DRIEDD;
  sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN;
  sprite[SPRITE.CACTUS] = [];
  sprite[SPRITE.CACTUS][SPRITE.DAY] = [IMAGES.CACTUSD];
  sprite[SPRITE.CACTUS][SPRITE.NIGHT] = [IMAGES.CACTUSN];
  sprite[SPRITE.REIDITE_WALL] = [], sprite[SPRITE.REIDITE_WALL][SPRITE.DAY] = IMAGES.REIDITE_WALLD;
  sprite[SPRITE.REIDITE_WALL][SPRITE.NIGHT] = IMAGES.REIDITE_WALLN;
  sprite[SPRITE.REIDITE_SPIKE] = [], sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_SPIKED;
  sprite[SPRITE.REIDITE_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_SPIKEN;
  sprite[SPRITE.REIDITE_DOOR] = [];
  sprite[SPRITE.REIDITE_DOOR][SPRITE.DAY] = IMAGES.REIDITE_DOORD;
  sprite[SPRITE.REIDITE_DOOR][SPRITE.NIGHT] = IMAGES.REIDITE_DOORN;
  sprite[SPRITE.WOOD_DOOR_SPIKE] = [];
  sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.WOOD_DOOR_SPIKED;
  sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN;
  sprite[SPRITE.STONE_DOOR_SPIKE] = [];
  sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.STONE_DOOR_SPIKED;
  sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.STONE_DOOR_SPIKEN;
  sprite[SPRITE.GOLD_DOOR_SPIKE] = [];
  sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.GOLD_DOOR_SPIKED;
  sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN;
  sprite[SPRITE.DIAMOND_DOOR_SPIKE] = [];
  sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.DAY] = IMAGES.DIAMOND_DOOR_SPIKED;
  sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN;
  sprite[SPRITE.AMETHYST_DOOR_SPIKE] = [];
  sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.DAY] = IMAGES.AMETHYST_DOOR_SPIKED;
  sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.AMETHYST_DOOR_SPIKEN;
  sprite[SPRITE.REIDITE_DOOR_SPIKE] = [];
  sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_DOOR_SPIKED;
  sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN;
  sprite[SPRITE.GOLDEN_HEN] = [];
  sprite[SPRITE.GOLDEN_HEN][SPRITE.DAY] = IMAGES.HEND;
  sprite[SPRITE.GOLDEN_HEN][SPRITE.NIGHT] = IMAGES.HENN;
  sprite[SPRITE.GOLDEN_CHICKEN] = [];
  sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.DAY] = IMAGES.CHICKEND;
  sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.NIGHT] = IMAGES.CHICKENN;
  sprite[SPRITE.HAMMER_REIDITE] = [];
  sprite[SPRITE.HAMMER_REIDITE][SPRITE.DAY] = IMAGES.HAMMER_REIDITED;
  sprite[SPRITE.HAMMER_REIDITE][SPRITE.NIGHT] = IMAGES.HAMMER_REIDITEN;
  sprite[SPRITE.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN;
  sprite[SPRITE.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN;
  sprite[SPRITE.FOG] = [];
  sprite[SPRITE.FOG][SPRITE.DAY] = [];
  sprite[SPRITE.FOG][SPRITE.NIGHT] = [];
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG0D);
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG1D);
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG2D);
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG0N);
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG1N);
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG2N);
  sprite[SPRITE.FOD] = [];
  sprite[SPRITE.FOD][SPRITE.DAY] = [];
  sprite[SPRITE.FOD][SPRITE.NIGHT] = [];
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD0D);
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD1D);
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD2D);
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD0N);
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD1N);
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD2N);
  sprite[SPRITE.MARKER] = [];
  sprite[SPRITE.MARKER][SPRITE.DAY] = [];
  sprite[SPRITE.MARKER][SPRITE.NIGHT] = [];
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER0D);
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER1D);
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER2D);
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER3D);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER0N);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER1N);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER2N);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER3N);
  sprite[SPRITE.LAVA_DRAGON] = [];
  sprite[SPRITE.LAVA_DRAGON][SPRITE.DAY] = IMAGES.LAVA_DRAGOND;
  sprite[SPRITE.LAVA_DRAGON][SPRITE.NIGHT] = IMAGES.LAVA_DRAGONN;
  sprite[SPRITE.LAVA_WING_LEFT] = [];
  sprite[SPRITE.LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.LAVA_WING_LEFTD;
  sprite[SPRITE.LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.LAVA_WING_LEFTN;
  sprite[SPRITE.LAVA_WING_RIGHT] = [];
  sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.LAVA_WING_RIGHTD;
  sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.LAVA_WING_RIGHTN;
  sprite[SPRITE.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON;
  sprite[SPRITE.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT;
  sprite[SPRITE.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT;
  sprite[SPRITE.DIAMOND_PROTECTION] = [];
  sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.DIAMOND_PROTECTIOND;
  sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.DIAMOND_PROTECTIONN;
  sprite[SPRITE.GLOVES_DIAMOND_PROTECTION] = [];
  sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
  sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
  sprite[SPRITE.AMETHYST_PROTECTION] = [];
  sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.AMETHYST_PROTECTIOND;
  sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.AMETHYST_PROTECTIONN;
  sprite[SPRITE.GLOVES_AMETHYST_PROTECTION] = [];
  sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
  sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
  sprite[SPRITE.REIDITE_HELMET] = [];
  sprite[SPRITE.REIDITE_HELMET][SPRITE.DAY] = IMAGES.REIDITE_HELMETD;
  sprite[SPRITE.REIDITE_HELMET][SPRITE.NIGHT] = IMAGES.REIDITE_HELMETN;
  sprite[SPRITE.REIDITE_SWORD] = [];
  sprite[SPRITE.REIDITE_SWORD][SPRITE.DAY] = IMAGES.REIDITE_SWORDD;
  sprite[SPRITE.REIDITE_SWORD][SPRITE.NIGHT] = IMAGES.REIDITE_SWORDN;
  sprite[SPRITE.REIDITE_SPEAR] = [];
  sprite[SPRITE.REIDITE_SPEAR][SPRITE.DAY] = IMAGES.REIDITE_SPEARD;
  sprite[SPRITE.REIDITE_SPEAR][SPRITE.NIGHT] = IMAGES.REIDITE_SPEARN;
  sprite[SPRITE.LAVA_SPEAR] = [];
  sprite[SPRITE.LAVA_SPEAR][SPRITE.DAY] = IMAGES.LAVA_SPEARD;
  sprite[SPRITE.LAVA_SPEAR][SPRITE.NIGHT] = IMAGES.LAVA_SPEARN;
  sprite[SPRITE.LAVA_SWORD] = [];
  sprite[SPRITE.LAVA_SWORD][SPRITE.DAY] = IMAGES.LAVA_SWORDD;
  sprite[SPRITE.LAVA_SWORD][SPRITE.NIGHT] = IMAGES.LAVA_SWORDN;
  sprite[SPRITE.LAVA_HELMET] = [];
  sprite[SPRITE.LAVA_HELMET][SPRITE.DAY] = IMAGES.LAVA_HELMETD;
  sprite[SPRITE.LAVA_HELMET][SPRITE.NIGHT] = IMAGES.LAVA_HELMETN;
  sprite[SPRITE.WITCH] = [];
  sprite[SPRITE.WITCH][SPRITE.DAY] = IMAGES.WITCHD;
  sprite[SPRITE.WITCH][SPRITE.NIGHT] = IMAGES.WITCHN;
  sprite[SPRITE.NIMBUS] = [];
  sprite[SPRITE.NIMBUS][SPRITE.DAY] = IMAGES.NIMBUSD;
  sprite[SPRITE.NIMBUS][SPRITE.NIGHT] = IMAGES.NIMBUSN;
  sprite[SPRITE.WOOD_SHIELD] = [];
  sprite[SPRITE.WOOD_SHIELD][SPRITE.DAY] = IMAGES.WOOD_SHIELDD;
  sprite[SPRITE.WOOD_SHIELD][SPRITE.NIGHT] = IMAGES.WOOD_SHIELDN;
  sprite[SPRITE.STONE_SHIELD] = [];
  sprite[SPRITE.STONE_SHIELD][SPRITE.DAY] = IMAGES.STONE_SHIELDD;
  sprite[SPRITE.STONE_SHIELD][SPRITE.NIGHT] = IMAGES.STONE_SHIELDN;
  sprite[SPRITE.GOLD_SHIELD] = [];
  sprite[SPRITE.GOLD_SHIELD][SPRITE.DAY] = IMAGES.GOLD_SHIELDD;
  sprite[SPRITE.GOLD_SHIELD][SPRITE.NIGHT] = IMAGES.GOLD_SHIELDN;
  sprite[SPRITE.DIAMOND_SHIELD] = [];
  sprite[SPRITE.DIAMOND_SHIELD][SPRITE.DAY] = IMAGES.DIAMOND_SHIELDD;
  sprite[SPRITE.DIAMOND_SHIELD][SPRITE.NIGHT] = IMAGES.DIAMOND_SHIELDN;
  sprite[SPRITE.AMETHYST_SHIELD] = [];
  sprite[SPRITE.AMETHYST_SHIELD][SPRITE.DAY] = IMAGES.AMETHYST_SHIELDD;
  sprite[SPRITE.AMETHYST_SHIELD][SPRITE.NIGHT] = IMAGES.AMETHYST_SHIELDN;
  sprite[SPRITE.REIDITE_SHIELD] = [];
  sprite[SPRITE.REIDITE_SHIELD][SPRITE.DAY] = IMAGES.REIDITE_SHIELDD;
  sprite[SPRITE.REIDITE_SHIELD][SPRITE.NIGHT] = IMAGES.REIDITE_SHIELDN;
  sprite[SPRITE.WOOD_ARROW] = [];
  sprite[SPRITE.WOOD_ARROW][SPRITE.DAY] = IMAGES.WOOD_ARROWD;
  sprite[SPRITE.WOOD_ARROW][SPRITE.NIGHT] = IMAGES.WOOD_ARROWN;
  sprite[SPRITE.WOOD_BOW] = [];
  sprite[SPRITE.WOOD_BOW][SPRITE.DAY] = IMAGES.WOOD_BOWD;
  sprite[SPRITE.WOOD_BOW][SPRITE.NIGHT] = IMAGES.WOOD_BOWN;
  sprite[SPRITE.STONE_ARROW] = [];
  sprite[SPRITE.STONE_ARROW][SPRITE.DAY] = IMAGES.STONE_ARROWD;
  sprite[SPRITE.STONE_ARROW][SPRITE.NIGHT] = IMAGES.STONE_ARROWN;
  sprite[SPRITE.STONE_BOW] = [];
  sprite[SPRITE.STONE_BOW][SPRITE.DAY] = IMAGES.STONE_BOWD;
  sprite[SPRITE.STONE_BOW][SPRITE.NIGHT] = IMAGES.STONE_BOWN;
  sprite[SPRITE.GOLD_ARROW] = [];
  sprite[SPRITE.GOLD_ARROW][SPRITE.DAY] = IMAGES.GOLD_ARROWD;
  sprite[SPRITE.GOLD_ARROW][SPRITE.NIGHT] = IMAGES.GOLD_ARROWN;
  sprite[SPRITE.GOLD_BOW] = [];
  sprite[SPRITE.GOLD_BOW][SPRITE.DAY] = IMAGES.GOLD_BOWD;
  sprite[SPRITE.GOLD_BOW][SPRITE.NIGHT] = IMAGES.GOLD_BOWN;
  sprite[SPRITE.DIAMOND_ARROW] = [];
  sprite[SPRITE.DIAMOND_ARROW][SPRITE.DAY] = IMAGES.DIAMOND_ARROWD;
  sprite[SPRITE.DIAMOND_ARROW][SPRITE.NIGHT] = IMAGES.DIAMOND_ARROWN;
  sprite[SPRITE.DIAMOND_BOW] = [];
  sprite[SPRITE.DIAMOND_BOW][SPRITE.DAY] = IMAGES.DIAMOND_BOWD;
  sprite[SPRITE.DIAMOND_BOW][SPRITE.NIGHT] = IMAGES.DIAMOND_BOWN;
  sprite[SPRITE.AMETHYST_ARROW] = [];
  sprite[SPRITE.AMETHYST_ARROW][SPRITE.DAY] = IMAGES.AMETHYST_ARROWD;
  sprite[SPRITE.AMETHYST_ARROW][SPRITE.NIGHT] = IMAGES.AMETHYST_ARROWN;
  sprite[SPRITE.AMETHYST_BOW] = [];
  sprite[SPRITE.AMETHYST_BOW][SPRITE.DAY] = IMAGES.AMETHYST_BOWD;
  sprite[SPRITE.AMETHYST_BOW][SPRITE.NIGHT] = IMAGES.AMETHYST_BOWN;
  sprite[SPRITE.REIDITE_ARROW] = [];
  sprite[SPRITE.REIDITE_ARROW][SPRITE.DAY] = IMAGES.REIDITE_ARROWD;
  sprite[SPRITE.REIDITE_ARROW][SPRITE.NIGHT] = IMAGES.REIDITE_ARROWN;
  sprite[SPRITE.REIDITE_BOW] = [];
  sprite[SPRITE.REIDITE_BOW][SPRITE.DAY] = IMAGES.REIDITE_BOWD;
  sprite[SPRITE.REIDITE_BOW][SPRITE.NIGHT] = IMAGES.REIDITE_BOWN;
  sprite[SPRITE.DRAGON_ARROW] = [];
  sprite[SPRITE.DRAGON_ARROW][SPRITE.DAY] = IMAGES.DRAGON_ARROWD;
  sprite[SPRITE.DRAGON_ARROW][SPRITE.NIGHT] = IMAGES.DRAGON_ARROWN;
  sprite[SPRITE.DRAGON_BOW] = [];
  sprite[SPRITE.DRAGON_BOW][SPRITE.DAY] = IMAGES.DRAGON_BOWD;
  sprite[SPRITE.DRAGON_BOW][SPRITE.NIGHT] = IMAGES.DRAGON_BOWN;
  sprite[SPRITE.TURBAN1] = [];
  sprite[SPRITE.TURBAN1][SPRITE.DAY] = IMAGES.TURBAN1D;
  sprite[SPRITE.TURBAN1][SPRITE.NIGHT] = IMAGES.TURBAN1N;
  sprite[SPRITE.TURBAN2] = [];
  sprite[SPRITE.TURBAN2][SPRITE.DAY] = IMAGES.TURBAN2D;
  sprite[SPRITE.TURBAN2][SPRITE.NIGHT] = IMAGES.TURBAN2N;
  sprite[SPRITE.REIDITE_PROTECTION] = [];
  sprite[SPRITE.REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.REIDITE_PROTECTIOND;
  sprite[SPRITE.REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.REIDITE_PROTECTIONN;
  sprite[SPRITE.GLOVES_REIDITE_PROTECTION] = [];
  sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.HAND_REIDITE_PROTECTIOND;
  sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_REIDITE_PROTECTIONN;
  sprite[SPRITE.LAVA_SHINGLE] = [];
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY] = [];
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES0D);
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES1D);
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1D);
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1N);
  sprite[SPRITE.LAVA_BUBBLE] = [];
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY] = [];
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE0D);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE1D);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE2D);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE0N);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE1N);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE2N);
  sprite[SPRITE.PITCHFORK] = [];
  sprite[SPRITE.PITCHFORK][SPRITE.DAY] = IMAGES.PITCHFORKD;
  sprite[SPRITE.PITCHFORK][SPRITE.NIGHT] = IMAGES.PITCHFORKN;
  sprite[SPRITE.PITCHFORK2] = [];
  sprite[SPRITE.PITCHFORK2][SPRITE.DAY] = IMAGES.PITCHFORK2D;
  sprite[SPRITE.PITCHFORK2][SPRITE.NIGHT] = IMAGES.PITCHFORK2N;
  sprite[SPRITE.EMERALD] = [];
  sprite[SPRITE.EMERALD][SPRITE.DAY] = [];
  sprite[SPRITE.EMERALD][SPRITE.NIGHT] = [];
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD0D);
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD1D);
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD2D);
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD0N);
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD1N);
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD2N);
  sprite[SPRITE.REIDITE] = [];
  sprite[SPRITE.REIDITE][SPRITE.DAY] = [];
  sprite[SPRITE.REIDITE][SPRITE.NIGHT] = [];
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE0D);
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE1D);
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE2D);
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE0N);
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE1N);
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE2N);
  sprite[SPRITE.MAGMA] = [];
  sprite[SPRITE.MAGMA][SPRITE.DAY] = [];
  sprite[SPRITE.MAGMA][SPRITE.NIGHT] = [];
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA1D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA2D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA3D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA4D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA5D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA6D);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA1N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA2N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA3N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA4N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA5N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA6N);
  sprite[SPRITE.LAVA_GROUND] = [];
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY] = [];
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND1D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND2D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND3D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND4D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND5D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND6D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND1N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND2N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND3N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND4N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND5N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND6N);
  sprite[SPRITE.FIRE_MOB] = [];
  sprite[SPRITE.FIRE_MOB][SPRITE.DAY] = IMAGES.FIRE_MOBD;
  sprite[SPRITE.FIRE_MOB][SPRITE.NIGHT] = IMAGES.FIRE_MOBN;
  sprite[SPRITE.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT;
  sprite[SPRITE.MACHETE] = [];
  sprite[SPRITE.MACHETE][SPRITE.DAY] = IMAGES.MACHETED;
  sprite[SPRITE.MACHETE][SPRITE.NIGHT] = IMAGES.MACHETEN;
  sprite[SPRITE.BOAT] = [];
  sprite[SPRITE.BOAT][SPRITE.DAY] = IMAGES.BOATD;
  sprite[SPRITE.BOAT][SPRITE.NIGHT] = IMAGES.BOATN;
  sprite[SPRITE.SLED] = [];
  sprite[SPRITE.SLED][SPRITE.DAY] = IMAGES.SLEDD;
  sprite[SPRITE.SLED][SPRITE.NIGHT] = IMAGES.SLEDN;
  sprite[SPRITE.PLANE] = [];
  sprite[SPRITE.PLANE][SPRITE.DAY] = IMAGES.PLANED;
  sprite[SPRITE.PLANE][SPRITE.NIGHT] = IMAGES.PLANEN;
  sprite[SPRITE.PENGUIN] = [];
  sprite[SPRITE.PENGUIN][SPRITE.DAY] = IMAGES.PENGUIND;
  sprite[SPRITE.PENGUIN][SPRITE.NIGHT] = IMAGES.PENGUINN;
  sprite[SPRITE.HURT_PENGUIN] = IMAGES.HURT_PENGUIN;
  sprite[SPRITE.SAND_WORM1] = [];
  sprite[SPRITE.SAND_WORM1][SPRITE.DAY] = IMAGES.SAND_WORM1D;
  sprite[SPRITE.SAND_WORM1][SPRITE.NIGHT] = IMAGES.SAND_WORM1N;
  sprite[SPRITE.SAND_WORM2] = [];
  sprite[SPRITE.SAND_WORM2][SPRITE.DAY] = IMAGES.SAND_WORM2D;
  sprite[SPRITE.SAND_WORM2][SPRITE.NIGHT] = IMAGES.SAND_WORM2N;
  sprite[SPRITE.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0;
  sprite[SPRITE.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1;
  sprite[SPRITE.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2;
  sprite[SPRITE.SCORPION] = [];
  sprite[SPRITE.SCORPION][SPRITE.DAY] = IMAGES.SCORPIOND;
  sprite[SPRITE.SCORPION][SPRITE.NIGHT] = IMAGES.SCORPIONN;
  sprite[SPRITE.SCORPION_HAND_LEFT] = [];
  sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.DAY] = IMAGES.SCORPION_HAND_LEFTD;
  sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_LEFTN;
  sprite[SPRITE.SCORPION_HAND_RIGHT] = [];
  sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.DAY] = IMAGES.SCORPION_HAND_RIGHTD;
  sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_RIGHTN;
  sprite[SPRITE.HURT_SCORPION] = IMAGES.HURT_SCORPION;
  sprite[SPRITE.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT;
  sprite[SPRITE.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT;
  sprite[SPRITE.CRAB_BOSS_ATTACK] = [];
  sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_ATTACKD;
  sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN;
  sprite[SPRITE.CRAB_BOSS_TAMED] = [];
  sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.DAY] = IMAGES.CRAB_BOSS_TAMEDD;
  sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN;
  sprite[SPRITE.CRAB_BOSS] = [];
  sprite[SPRITE.CRAB_BOSS][SPRITE.DAY] = IMAGES.CRAB_BOSSD;
  sprite[SPRITE.CRAB_BOSS][SPRITE.NIGHT] = IMAGES.CRAB_BOSSN;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFTN;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHTD;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHTN;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN;
  sprite[SPRITE.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS;
  sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT;
  sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT;
  sprite[SPRITE.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS;
  sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT;
  sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT;
  sprite[SPRITE.BABY_MAMMOTH_ATTACK] = [];
  sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD;
  sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_ATTACKN;
  sprite[SPRITE.BABY_MAMMOTH] = [];
  sprite[SPRITE.BABY_MAMMOTH][SPRITE.DAY] = IMAGES.BABY_MAMMOTHD;
  sprite[SPRITE.BABY_MAMMOTH][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTHN;
  sprite[SPRITE.MAMMOTH] = [];
  sprite[SPRITE.MAMMOTH][SPRITE.DAY] = IMAGES.MAMMOTHD;
  sprite[SPRITE.MAMMOTH][SPRITE.NIGHT] = IMAGES.MAMMOTHN;
  sprite[SPRITE.BABY_MAMMOTH_TAMED] = [];
  sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD;
  sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN;
  sprite[SPRITE.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH;
  sprite[SPRITE.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH;
  sprite[SPRITE.BABY_DRAGON_ATTACK] = [];
  sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_ATTACKD;
  sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN;
  sprite[SPRITE.BABY_DRAGON] = [];
  sprite[SPRITE.BABY_DRAGON][SPRITE.DAY] = IMAGES.BABY_DRAGOND;
  sprite[SPRITE.BABY_DRAGON][SPRITE.NIGHT] = IMAGES.BABY_DRAGONN;
  sprite[SPRITE.BABY_DRAGON_TAMED] = [];
  sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_TAMEDD;
  sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT] = [];
  sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFTD;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFTN;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT] = [];
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHTD;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHTN;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED] = [];
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON;
  sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT;
  sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT] = IMAGES.HURT_BABY_DRAGON_WING_RIGHT;
  sprite[SPRITE.BABY_LAVA_ATTACK] = [];
  sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_ATTACKD;
  sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_ATTACKN;
  sprite[SPRITE.BABY_LAVA] = [];
  sprite[SPRITE.BABY_LAVA][SPRITE.DAY] = IMAGES.BABY_LAVAD;
  sprite[SPRITE.BABY_LAVA][SPRITE.NIGHT] = IMAGES.BABY_LAVAN;
  sprite[SPRITE.BABY_LAVA_TAMED] = [];
  sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_TAMEDD;
  sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_TAMEDN;
  sprite[SPRITE.BABY_LAVA_WING_LEFT] = [];
  sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFTD;
  sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFTN;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT] = [];
  sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHTD;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHTN;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKD;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKN;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED] = [];
  sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDD;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDN;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA;
  sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT;
  sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT;
  sprite[SPRITE.HAWK_ATTACK] = [];
  sprite[SPRITE.HAWK_ATTACK][SPRITE.DAY] = IMAGES.HAWK_ATTACKD;
  sprite[SPRITE.HAWK_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_ATTACKN;
  sprite[SPRITE.HAWK] = [];
  sprite[SPRITE.HAWK][SPRITE.DAY] = IMAGES.HAWKD;
  sprite[SPRITE.HAWK][SPRITE.NIGHT] = IMAGES.HAWKN;
  sprite[SPRITE.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND;
  sprite[SPRITE.HAWK_GROUND] = [];
  sprite[SPRITE.HAWK_GROUND][SPRITE.DAY] = IMAGES.HAWK_GROUNDD;
  sprite[SPRITE.HAWK_GROUND][SPRITE.NIGHT] = IMAGES.HAWK_GROUNDN;
  sprite[SPRITE.HAWK_GROUND_ATTACK] = [];
  sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.DAY] = IMAGES.HAWK_GROUND_ATTACKD;
  sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN;
  sprite[SPRITE.HAWK_TAMED] = [];
  sprite[SPRITE.HAWK_TAMED][SPRITE.DAY] = IMAGES.HAWK_TAMEDD;
  sprite[SPRITE.HAWK_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_TAMEDN;
  sprite[SPRITE.HAWK_WING_LEFT] = [];
  sprite[SPRITE.HAWK_WING_LEFT][SPRITE.DAY] = IMAGES.HAWK_WING_LEFTD;
  sprite[SPRITE.HAWK_WING_LEFT][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFTN;
  sprite[SPRITE.HAWK_WING_RIGHT] = [];
  sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHTD;
  sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHTN;
  sprite[SPRITE.HAWK_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_ATTACKD;
  sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_ATTACKN;
  sprite[SPRITE.HAWK_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_ATTACKD;
  sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_ATTACKN;
  sprite[SPRITE.HAWK_WING_LEFT_TAMED] = [];
  sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_TAMEDD;
  sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_TAMEDN;
  sprite[SPRITE.HAWK_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_TAMEDD;
  sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_HAWK] = IMAGES.HURT_HAWK;
  sprite[SPRITE.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT;
  sprite[SPRITE.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT;
  sprite[SPRITE.VULTURE_ATTACK] = [];
  sprite[SPRITE.VULTURE_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_ATTACKD;
  sprite[SPRITE.VULTURE_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_ATTACKN;
  sprite[SPRITE.VULTURE] = [];
  sprite[SPRITE.VULTURE][SPRITE.DAY] = IMAGES.VULTURED;
  sprite[SPRITE.VULTURE][SPRITE.NIGHT] = IMAGES.VULTUREN;
  sprite[SPRITE.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND;
  sprite[SPRITE.VULTURE_GROUND] = [];
  sprite[SPRITE.VULTURE_GROUND][SPRITE.DAY] = IMAGES.VULTURE_GROUNDD;
  sprite[SPRITE.VULTURE_GROUND][SPRITE.NIGHT] = IMAGES.VULTURE_GROUNDN;
  sprite[SPRITE.VULTURE_GROUND_ATTACK] = [];
  sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_GROUND_ATTACKD;
  sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_GROUND_ATTACKN;
  sprite[SPRITE.VULTURE_TAMED] = [];
  sprite[SPRITE.VULTURE_TAMED][SPRITE.DAY] = IMAGES.VULTURE_TAMEDD;
  sprite[SPRITE.VULTURE_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_TAMEDN;
  sprite[SPRITE.VULTURE_WING_LEFT] = [];
  sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFTD;
  sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFTN;
  sprite[SPRITE.VULTURE_WING_RIGHT] = [];
  sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHTD;
  sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHTN;
  sprite[SPRITE.VULTURE_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_ATTACKD;
  sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_ATTACKN;
  sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_ATTACKD;
  sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_ATTACKN;
  sprite[SPRITE.VULTURE_WING_LEFT_TAMED] = [];
  sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_TAMEDD;
  sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_TAMEDN;
  sprite[SPRITE.VULTURE_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_TAMEDD;
  sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_VULTURE] = IMAGES.HURT_VULTURE;
  sprite[SPRITE.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT;
  sprite[SPRITE.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT;
  sprite[SPRITE.BOAR] = [];
  sprite[SPRITE.BOAR][SPRITE.DAY] = IMAGES.BOARD;
  sprite[SPRITE.BOAR][SPRITE.NIGHT] = IMAGES.BOARN;
  sprite[SPRITE.BOAR_TAMED] = [];
  sprite[SPRITE.BOAR_TAMED][SPRITE.DAY] = IMAGES.BOAR_TAMEDD;
  sprite[SPRITE.BOAR_TAMED][SPRITE.NIGHT] = IMAGES.BOAR_TAMEDN;
  sprite[SPRITE.BOAR_ATTACK] = [];
  sprite[SPRITE.BOAR_ATTACK][SPRITE.DAY] = IMAGES.BOAR_ANGRYD;
  sprite[SPRITE.BOAR_ATTACK][SPRITE.NIGHT] = IMAGES.BOAR_ANGRYN;
  sprite[SPRITE.BOAR_STEP] = [];
  sprite[SPRITE.BOAR_STEP][SPRITE.DAY] = IMAGES.BOAR_STEP;
  sprite[SPRITE.BOAR_STEP][SPRITE.NIGHT] = IMAGES.BOAR_STEP;
  sprite[SPRITE.CRAB_STEP] = [];
  sprite[SPRITE.CRAB_STEP][SPRITE.DAY] = IMAGES.CRAB_STEP;
  sprite[SPRITE.CRAB_STEP][SPRITE.NIGHT] = IMAGES.CRAB_STEP;
  sprite[SPRITE.BABY_MAMMOTH_STEP] = [];
  sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_STEP;
  sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_STEP;
  sprite[SPRITE.HURT_BOAR] = IMAGES.HURT_BOAR;
  sprite[SPRITE.SADDLE] = [];
  sprite[SPRITE.SADDLE][SPRITE.DAY] = IMAGES.SADDLED;
  sprite[SPRITE.SADDLE][SPRITE.NIGHT] = IMAGES.SADDLEN;
  sprite[SPRITE.WAND1] = [];
  sprite[SPRITE.WAND1][SPRITE.DAY] = IMAGES.WAND1D;
  sprite[SPRITE.WAND1][SPRITE.NIGHT] = IMAGES.WAND1N;
  sprite[SPRITE.SPELL] = [];
  sprite[SPRITE.SPELL][SPRITE.DAY] = [IMAGES.LIGHT_WAND0D, IMAGES.LIGHT_WAND1D, IMAGES.WOOD_ARROWD, IMAGES.STONE_ARROWD, IMAGES.GOLD_ARROWD, IMAGES.DIAMOND_ARROWD, IMAGES.AMETHYST_ARROWD, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWD];
  sprite[SPRITE.SPELL][SPRITE.NIGHT] = [IMAGES.LIGHT_WAND0N, IMAGES.LIGHT_WAND1N, IMAGES.WOOD_ARROWN, IMAGES.STONE_ARROWN, IMAGES.GOLD_ARROWN, IMAGES.DIAMOND_ARROWN, IMAGES.AMETHYST_ARROWN, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWN];
  sprite[SPRITE.WAND2] = [];
  sprite[SPRITE.WAND2][SPRITE.DAY] = IMAGES.WAND2D;
  sprite[SPRITE.WAND2][SPRITE.NIGHT] = IMAGES.WAND2N;
  sprite[SPRITE.BOAT_WAVE] = [];
  sprite[SPRITE.BOAT_WAVE][SPRITE.DAY] = IMAGES.BOAT_WAVED;
  sprite[SPRITE.BOAT_WAVE][SPRITE.NIGHT] = IMAGES.BOAT_WAVEN;
  sprite[SPRITE.SLED_WAVE] = [];
  sprite[SPRITE.SLED_WAVE][SPRITE.DAY] = IMAGES.SLED_WAVED;
  sprite[SPRITE.SLED_WAVE][SPRITE.NIGHT] = IMAGES.SLED_WAVEN;
  sprite[SPRITE.PIRATE_HAT] = [];
  sprite[SPRITE.PIRATE_HAT][SPRITE.DAY] = IMAGES.PIRATE_HATD;
  sprite[SPRITE.PIRATE_HAT][SPRITE.NIGHT] = IMAGES.PIRATE_HATN;
  sprite[SPRITE.FUR_HAT] = [];
  sprite[SPRITE.FUR_HAT][SPRITE.DAY] = IMAGES.FUR_HATD;
  sprite[SPRITE.FUR_HAT][SPRITE.NIGHT] = IMAGES.FUR_HATN;
  sprite[SPRITE.FLOWER_HAT] = [];
  sprite[SPRITE.FLOWER_HAT][SPRITE.DAY] = IMAGES.FLOWER_HATD;
  sprite[SPRITE.FLOWER_HAT][SPRITE.NIGHT] = IMAGES.FLOWER_HATN;
  sprite[SPRITE.PILOT_HELMET] = [];
  sprite[SPRITE.PILOT_HELMET][SPRITE.DAY] = IMAGES.PILOT_HELMETD;
  sprite[SPRITE.PILOT_HELMET][SPRITE.NIGHT] = IMAGES.PILOT_HELMETN;
  sprite[SPRITE.LAKE_EDGE] = [];
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY] = [];
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE0D_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE1D_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE2D_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE0N_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE1N_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE2N_EDGE);
  sprite[SPRITE.LAKE_DEEP] = [];
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY] = [];
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE0D_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE1D_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE2D_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE0N_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE1N_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE2N_DEEP);
  sprite[SPRITE.LAKE] = [];
  sprite[SPRITE.LAKE][SPRITE.DAY] = [];
  sprite[SPRITE.LAKE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE0D);
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE1D);
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE2D);
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE0N);
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE1N);
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE2N);
  MINIMAP_UTILS["g"] = [];
  MINIMAP_UTILS["g"][0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1];
  MINIMAP_UTILS["g"][1] = MINIMAP_UTILS["g"][0];
  MINIMAP_UTILS["g"][2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2];
  MINIMAP_UTILS["m"] = [];
  MINIMAP_UTILS["m"][0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1];
  MINIMAP_UTILS["m"][1] = MINIMAP_UTILS["m"][0];
  MINIMAP_UTILS["m"][2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2];
  MINIMAP_UTILS["la"] = [];
  MINIMAP_UTILS["la"][0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA];
  MINIMAP_UTILS["la"][1] = MINIMAP_UTILS["la"][0];
  MINIMAP_UTILS["la"][2] = MINIMAP_UTILS["la"][0];
  MINIMAP_UTILS["la"][3] = MINIMAP_UTILS["la"][0];
  MINIMAP_UTILS["la"][4] = MINIMAP_UTILS["la"][0];
  MINIMAP_UTILS["la"][5] = MINIMAP_UTILS["la"][0];
  MINIMAP_UTILS["s"] = [];
  MINIMAP_UTILS["s"][0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1];
  MINIMAP_UTILS["s"][1] = MINIMAP_UTILS["s"][0];
  MINIMAP_UTILS["s"][2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2];
  MINIMAP_UTILS["p"] = [];
  MINIMAP_UTILS["p"][0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY];
  MINIMAP_UTILS["a"] = [];
  MINIMAP_UTILS["a"][0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST];
  MINIMAP_UTILS["a"][1] = MINIMAP_UTILS["a"][0];
  MINIMAP_UTILS["a"][2] = MINIMAP_UTILS["a"][0];
  MINIMAP_UTILS["d"] = [];
  MINIMAP_UTILS["d"][0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND];
  MINIMAP_UTILS["d"][1] = MINIMAP_UTILS["d"][0];
  MINIMAP_UTILS["d"][2] = MINIMAP_UTILS["d"][0];
  MINIMAP_UTILS["re"] = [];
  MINIMAP_UTILS["re"][0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE];
  MINIMAP_UTILS["re"][1] = MINIMAP_UTILS["re"][0];
  MINIMAP_UTILS["re"][2] = MINIMAP_UTILS["re"][0];
  MINIMAP_UTILS["f"] = [];
  MINIMAP_UTILS["f"][0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE];
  MINIMAP_UTILS["f"][1] = MINIMAP_UTILS["f"][0];
  MINIMAP_UTILS["f"][2] = MINIMAP_UTILS["f"][0];
  MINIMAP_UTILS["isl"] = [];
  MINIMAP_UTILS["isl"][0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND];
  MINIMAP_UTILS["isl"][1] = MINIMAP_UTILS["isl"][0];
  MINIMAP_UTILS["isl"][2] = MINIMAP_UTILS["isl"][0];
  MINIMAP_UTILS["c"] = [];
  MINIMAP_UTILS["c"][0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS];
  MINIMAP_UTILS["c"][1] = MINIMAP_UTILS["c"][0];
  MINIMAP_UTILS["c"][2] = MINIMAP_UTILS["c"][0];
  MINIMAP_UTILS["wtb"] = [];
  MINIMAP_UTILS["wtb"][0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER];
  MINIMAP_UTILS["PIRANHA"] = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA];
  MINIMAP_UTILS["KRAKEN"] = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN];
  MINIMAP_UTILS["FOX"] = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX];
  MINIMAP_UTILS["WOLF"] = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF];
  MINIMAP_UTILS["SPIDER"] = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER];
  MINIMAP_UTILS["BEAR"] = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR];
  MINIMAP_UTILS["CAVE"] = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE];
  MINIMAP_UTILS["MAP"] = [IMAGES.BIGDAY, IMAGES.BIGNIGHT];
  MINIMAP_UTILS["FOREST"] = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST];
  MINIMAP_UTILS["WINTER"] = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER];
  MINIMAP_UTILS["DESERT"] = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT];
  MINIMAP_UTILS["LAVA"] = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA];
  for (var _key in MINIMAP_UTILS) {
    var _utils = MINIMAP_UTILS[_key];
    for (var i = 0; i < _utils.length; i++) {
      var _subutils = _utils[i];
      if (_subutils.tryLoad !== undefined)
        _subutils.tryLoad();
      else if (_subutils.length > 0) {
        for (var j = 0; j < _subutils.length; j++) {
          if (_subutils[j].tryLoad !== undefined)
            _subutils[j].tryLoad();

        }
      }
    }
  }
  console.log("Load images", Date.now() - TIMEDEBUG);
};;

function create_images() {
  var scale = 1;
  var TIMEDEBUG = (new Date).getTime();
  _load_images();
  render_inventory();
  sprite[SPRITE.BUBBLES] = [];
  sprite[SPRITE.BUBBLES][SPRITE.DAY] = [];
  sprite[SPRITE.BUBBLES][SPRITE.NIGHT] = [];
  for (var i = 0; i < SPRITE.BUBBLES_SIZES; i++) {
    sprite[SPRITE.BUBBLES][SPRITE.DAY].push(CTI(create_flake(scale, 4 + i, "#59B8CE")));
    sprite[SPRITE.BUBBLES][SPRITE.NIGHT].push(CTI(create_flake(scale, 4 + i, "#90DDD9")));
  }
  sprite[SPRITE.FLAKES] = [];
  sprite[SPRITE.FLAKES][SPRITE.DAY] = [];
  sprite[SPRITE.FLAKES][SPRITE.NIGHT] = [];
  for (var i = 0; i < SPRITE.FLAKES_SIZES; i++) {
    sprite[SPRITE.FLAKES][SPRITE.DAY].push(CTI(create_flake(scale, 4 + i, "#fff")));
    sprite[SPRITE.FLAKES][SPRITE.NIGHT].push(CTI(create_flake(scale, 4 + i, "#fff")));
  }
  sprite[SPRITE.DESERT] = [];
  sprite[SPRITE.DESERT][SPRITE.DAY] = [];
  sprite[SPRITE.DESERT][SPRITE.NIGHT] = [];
  for (var i = 0; i < SPRITE.FLAKES_SIZES; i++) {
    sprite[SPRITE.DESERT][SPRITE.DAY].push(CTI(create_flake(scale, 6 + i, "#DDCD8A")));
    sprite[SPRITE.DESERT][SPRITE.NIGHT].push(CTI(create_flake(scale, 6 + i, "#155E57")));
  }
  sprite[SPRITE.ASHES] = [];
  sprite[SPRITE.ASHES][SPRITE.DAY] = [];
  sprite[SPRITE.ASHES][SPRITE.NIGHT] = [];
  for (var i = 0; i < SPRITE.ASHES_SIZES; i++) {
    sprite[SPRITE.ASHES][SPRITE.DAY].push(CTI(create_flake(scale, 4 + i, "#353326")));
    sprite[SPRITE.ASHES][SPRITE.NIGHT].push(CTI(create_flake(scale, 4 + i, "#1D2526")));
  }
  sprite[SPRITE.GARLAND] = [];
  sprite[SPRITE.GARLAND][SPRITE.DAY] = CTI(create_garland(scale * 1.5, true, ["#ee71a9"]));
  sprite[SPRITE.GARLAND][SPRITE.NIGHT] = CTI(create_garland(scale * 1.5, true, ["#ee71a9"]));
  sprite[SPRITE.GARLANDS] = [sprite[SPRITE.GARLAND]];
  sprite[SPRITE.GARLANDS][1] = [];
  sprite[SPRITE.GARLANDS][2] = [];
  sprite[SPRITE.GARLANDS][3] = [];
  sprite[SPRITE.GARLANDS][4] = [];
  sprite[SPRITE.GARLANDS][1][SPRITE.DAY] = CTI(create_garland(scale * 1.5, true, ["#e2d63b"]));
  sprite[SPRITE.GARLANDS][1][SPRITE.NIGHT] = CTI(create_garland(scale * 1.5, true, ["#e2d63b"]));
  sprite[SPRITE.GARLANDS][2][SPRITE.DAY] = CTI(create_garland(scale * 1.5, true, ["#309cbd"]));
  sprite[SPRITE.GARLANDS][2][SPRITE.NIGHT] = CTI(create_garland(scale * 1.5, true, ["#309cbd"]));
  sprite[SPRITE.GARLANDS][3][SPRITE.DAY] = CTI(create_garland(scale * 1.5, true, ["#cd232d"]));
  sprite[SPRITE.GARLANDS][3][SPRITE.NIGHT] = CTI(create_garland(scale * 1.5, true, ["#cd232d"]));
  sprite[SPRITE.GARLANDS][4][SPRITE.DAY] = CTI(create_garland(scale * 1.5, true, ["#42b672"]));
  sprite[SPRITE.GARLANDS][4][SPRITE.NIGHT] = CTI(create_garland(scale * 1.5, true, ["#42b672"]));
  var cti = Utils.gup("cti", window.location.href);
  if (cti)
    document.getElementById("version").innerHTML += "[CTI]";
  else
    CTI = function (a) {
      a.loaded = 1;
      return a;
    };
  sprite[SPRITE.MARKET_BGD] = CTI(create_background_market());
  sprite[SPRITE.STONES] = [];
  sprite[SPRITE.STONES][SPRITE.DAY] = [];
  sprite[SPRITE.STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(scale * 1.1, false, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
  sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(scale * 0.9, false, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
  sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(scale * 0.6, false, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(scale * 1.1, false, ["#0a2728", "#3c8e88", "#40a39b"])));
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(scale * 0.9, false, ["#0a2728", "#3c8e88", "#40a39b"])));
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(scale * 0.6, false, ["#0a2728", "#3c8e88", "#40a39b"])));
  sprite[SPRITE.GOLD] = [];
  sprite[SPRITE.GOLD][SPRITE.DAY] = [];
  sprite[SPRITE.GOLD][SPRITE.NIGHT] = [];
  sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(scale * 1.5, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(scale * 1.3, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(scale * 1.1, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(scale * 1.5, false, ["#030d14", "#1b4444", "#16605a"])));
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(scale * 1.3, false, ["#030d14", "#1b4444", "#16605a"])));
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(scale * 1.1, false, ["#030d14", "#1b4444", "#16605a"])));
  sprite[SPRITE.DIAMOND] = [];
  sprite[SPRITE.DIAMOND][SPRITE.DAY] = [];
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT] = [];
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(scale * 1.1, false, ["#232828", "#3fc9c9", "#74ede6"])));
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(scale * 0.9, false, ["#232828", "#3fc9c9", "#74ede6"])));
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(scale * 0.7, false, ["#232828", "#3fc9c9", "#74ede6"])));
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(scale * 1.1, false, ["#030d14", "#2b9390", "#57bcb5"])));
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(scale * 0.9, false, ["#030d14", "#2b9390", "#57bcb5"])));
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(scale * 0.7, false, ["#030d14", "#2b9390", "#57bcb5"])));
  sprite[SPRITE.ALOE_VERA] = [];
  sprite[SPRITE.ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERAD;
  sprite[SPRITE.ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN;
  sprite[SPRITE.HAND_SHADOW] = [];
  sprite[SPRITE.HAND_SHADOW][SPRITE.DAY] = CTI(create_hand_shadow(scale * 0.6, ["#0d1b1c"]));
  sprite[SPRITE.HAND_SHADOW][SPRITE.NIGHT] = CTI(create_hand_shadow(scale * 0.6, ["#030d14"]));
  sprite[SPRITE.GLOVES_HOOD] = [];
  sprite[SPRITE.GLOVES_HOOD][SPRITE.DAY] = CTI(create_hand(scale * 0.6, ["#2a2938", "#242330"]));
  sprite[SPRITE.GLOVES_HOOD][SPRITE.NIGHT] = CTI(create_hand(scale * 0.6, ["#1b1e30", "#161921"]));
  sprite[SPRITE.ZOMBIE_BODY] = [];
  sprite[SPRITE.ZOMBIE_BODY][SPRITE.DAY] = CTI(create_zombie_boss(scale * 0.6, true, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
  sprite[SPRITE.ZOMBIE_BODY][SPRITE.NIGHT] = CTI(create_zombie_boss(scale * 0.6, true, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
  sprite[SPRITE.ZOMBIE_HEAD] = [];
  sprite[SPRITE.ZOMBIE_HEAD][SPRITE.DAY] = CTI(create_zombie_head(scale * 0.6, true, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
  sprite[SPRITE.ZOMBIE_HEAD][SPRITE.NIGHT] = CTI(create_zombie_head(scale * 0.6, true, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
  sprite[SPRITE.ZOMBIE_HAND] = [];
  sprite[SPRITE.ZOMBIE_HAND][SPRITE.DAY] = CTI(create_zombie_hand(scale * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
  sprite[SPRITE.ZOMBIE_HAND][SPRITE.NIGHT] = CTI(create_zombie_hand(scale * 0.4, ["#030d14", "#11635e", "#02373e"]));
  sprite[SPRITE.ZOMBIE_HURT] = CTI(create_zombie_hurt(scale * 0.6, ["#BB0000"]));
  sprite[SPRITE.ZOMBIE_HUNGER] = CTI(create_zombie_hurt(scale * 0.6, ["#DBE71C"]));
  sprite[SPRITE.ZOMBIE_HEAL] = CTI(create_zombie_hurt(scale * 0.6, ["#00BB00"]));
  sprite[SPRITE.TREE] = [];
  sprite[SPRITE.TREE][SPRITE.DAY] = [];
  sprite[SPRITE.TREE][SPRITE.NIGHT] = [];
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(scale * 1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(scale * 1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(scale * 0.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], false, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(scale * 0.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], true, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(scale * 0.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], false, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(scale * 0.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], true, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(scale * 1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], false, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(scale * 1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(scale * 0.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(scale * 0.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(scale * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(scale * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
  sprite[SPRITE.TREE_BRANCH] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(scale * 1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], false), sprite[SPRITE.TREE][SPRITE.DAY][0])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(scale * 1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], true), sprite[SPRITE.TREE][SPRITE.DAY][1])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(scale * 1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], false), sprite[SPRITE.TREE][SPRITE.NIGHT][0])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(scale * 1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true), sprite[SPRITE.TREE][SPRITE.NIGHT][1])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(scale * 0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], false), sprite[SPRITE.TREE][SPRITE.DAY][2])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(scale * 0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], true), sprite[SPRITE.TREE][SPRITE.DAY][2])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(scale * 0.9, ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"], false), sprite[SPRITE.TREE][SPRITE.NIGHT][2])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(scale * 0.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], true), sprite[SPRITE.TREE][SPRITE.NIGHT][3])));
  sprite[SPRITE.TREE][SPRITE.DAY][5] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][5]);
  sprite[SPRITE.TREE][SPRITE.DAY][4] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][4]);
  sprite[SPRITE.TREE][SPRITE.DAY][3] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][3]);
  sprite[SPRITE.TREE][SPRITE.DAY][2] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][2]);
  sprite[SPRITE.TREE][SPRITE.DAY][1] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][1]);
  sprite[SPRITE.TREE][SPRITE.DAY][0] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][0]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][5] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][5]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][4] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][4]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][3] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][3]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][2] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][2]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][1] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][1]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][0] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][0]);
  sprite[SPRITE.PICK_WOOD] = [];
  sprite[SPRITE.PICK_WOOD][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
  sprite[SPRITE.PICK_WOOD][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
  sprite[SPRITE.PICK] = [];
  sprite[SPRITE.PICK][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
  sprite[SPRITE.PICK][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
  sprite[SPRITE.PICK_GOLD] = [];
  sprite[SPRITE.PICK_GOLD][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
  sprite[SPRITE.PICK_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
  sprite[SPRITE.PICK_DIAMOND] = [];
  sprite[SPRITE.PICK_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
  sprite[SPRITE.PICK_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
  sprite[SPRITE.PICK_AMETHYST] = [];
  sprite[SPRITE.PICK_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
  sprite[SPRITE.PICK_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(scale * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
  sprite[SPRITE.PIRATE_SWORD] = [];
  sprite[SPRITE.PIRATE_SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_pirate_sword(scale * 0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
  sprite[SPRITE.PIRATE_SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_pirate_sword(scale * 0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
  sprite[SPRITE.SUGAR_CAN] = [];
  sprite[SPRITE.SUGAR_CAN][SPRITE.DAY] = CTI(create_rotated_img(3, create_sugar_can(scale * 0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
  sprite[SPRITE.SUGAR_CAN][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_sugar_can(scale * 0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
  sprite[SPRITE.SWORD_WOOD] = [];
  sprite[SPRITE.SWORD_WOOD][SPRITE.DAY] = CTI(create_rotated_img(3, create_sword_wood(scale * 0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
  sprite[SPRITE.SWORD_WOOD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_sword_wood(scale * 0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
  sprite[SPRITE.SWORD] = [];
  sprite[SPRITE.SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_stonesword(scale * 0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
  sprite[SPRITE.SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_stonesword(scale * 0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
  sprite[SPRITE.SWORD_GOLD] = [];
  sprite[SPRITE.SWORD_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_goldsword(scale * 0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
  sprite[SPRITE.SWORD_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_goldsword(scale * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
  sprite[SPRITE.SWORD_DIAMOND] = [];
  sprite[SPRITE.SWORD_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_diamondsword(scale * 0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
  sprite[SPRITE.SWORD_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_diamondsword(scale * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
  sprite[SPRITE.SWORD_AMETHYST] = [];
  sprite[SPRITE.SWORD_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_amesword(scale * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
  sprite[SPRITE.SWORD_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_amesword(scale * 0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
  sprite[SPRITE.HERB] = [];
  sprite[SPRITE.HERB][SPRITE.DAY] = [];
  sprite[SPRITE.HERB][SPRITE.NIGHT] = [];
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(scale * 0.9, false, ["#0d4f35"], 0)));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(scale * 0.9, false, ["#0d4f35"], 1)));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(scale * 0.9, false, ["#0d4f35"], 2)));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(scale * 0.9, false, ["#053339"], 0)));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(scale * 0.9, false, ["#053339"], 1)));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(scale * 0.9, false, ["#053339"], 2)));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_leaf(scale * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_leaf(scale * 0.8, ["#292002", "#ba930e", "#6d5704"])));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_leaf(scale * 0.9, ["#052919", "#0a4738", "#06321f"])));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_leaf(scale * 0.8, ["#052918", "#08491c", "#063417"])));
  sprite[SPRITE.SIGN] = [];
  sprite[SPRITE.SIGN][SPRITE.DAY] = CTI(create_rotated_img(Math.PI / 2, create_sign(scale * 0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
  sprite[SPRITE.SIGN][SPRITE.NIGHT] = CTI(create_rotated_img(Math.PI / 2, create_sign(scale * 0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
  sprite[SPRITE.SIGN_BUTTON] = [];
  sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(scale * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
  sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(scale * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
  sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(scale * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
  sprite[SPRITE.SYMBOLS] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.DAY] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(scale * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(scale * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(scale * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(scale * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(scale * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(scale * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(scale * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(scale * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
  sprite[SPRITE.PLANT] = [];
  sprite[SPRITE.PLANT][SPRITE.DAY] = [CTI(create_plant(scale * 1.2, true, ["#352b10", "#80500b", "#7c4908"]))];
  sprite[SPRITE.PLANT][SPRITE.NIGHT] = [CTI(create_plant(scale * 1.2, true, ["#030d14", "#0a3429", "#0a2f2b"]))];
  sprite[SPRITE.DRIED_PLANT] = [];
  sprite[SPRITE.DRIED_PLANT][SPRITE.DAY] = CTI(create_plant(scale * 0.8, true, ["#0e3022", "#68622D", "#665329"]));
  sprite[SPRITE.DRIED_PLANT][SPRITE.NIGHT] = CTI(create_plant(scale * 0.8, true, ["#030d14", "#0F3A24", "#083326"]));
  sprite[SPRITE.PUMPKIN] = [];
  sprite[SPRITE.PUMPKIN][SPRITE.DAY] = CTI(create_pumpkin(scale * 0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
  sprite[SPRITE.PUMPKIN][SPRITE.NIGHT] = CTI(create_pumpkin(scale * 0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
  sprite[SPRITE.GARLIC] = [];
  sprite[SPRITE.GARLIC][SPRITE.DAY] = CTI(create_garlic(scale * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
  sprite[SPRITE.GARLIC][SPRITE.NIGHT] = CTI(create_garlic(scale * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
  sprite[SPRITE.THORNBUSH] = [];
  sprite[SPRITE.THORNBUSH][SPRITE.DAY] = CTI(create_brambles(scale * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
  sprite[SPRITE.THORNBUSH][SPRITE.NIGHT] = CTI(create_brambles(scale * 0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
  sprite[SPRITE.PLANT_MINI] = [];
  sprite[SPRITE.PLANT_MINI][SPRITE.DAY] = CTI(create_plant(scale * 0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
  sprite[SPRITE.PLANT_MINI][SPRITE.NIGHT] = CTI(create_plant(scale * 0.8, true, ["#030d14", "#084442", "#0a4049"]));
  sprite[SPRITE.DRIED_PUMPKIN] = [];
  sprite[SPRITE.DRIED_PUMPKIN][SPRITE.DAY] = CTI(create_pumpkin(scale * 0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
  sprite[SPRITE.DRIED_PUMPKIN][SPRITE.NIGHT] = CTI(create_pumpkin(scale * 0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
  sprite[SPRITE.DRIED_GARLIC] = [];
  sprite[SPRITE.DRIED_GARLIC][SPRITE.DAY] = CTI(create_garlic(scale * 0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
  sprite[SPRITE.DRIED_GARLIC][SPRITE.NIGHT] = CTI(create_garlic(scale * 0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
  sprite[SPRITE.DRIED_THORNBUSH] = [];
  sprite[SPRITE.DRIED_THORNBUSH][SPRITE.DAY] = CTI(create_brambles(scale * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
  sprite[SPRITE.DRIED_THORNBUSH][SPRITE.NIGHT] = CTI(create_brambles(scale * 0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
  sprite[SPRITE.GIFT] = [];
  sprite[SPRITE.GIFT][SPRITE.DAY] = CTI(create_present(scale * 0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
  sprite[SPRITE.GIFT][SPRITE.NIGHT] = CTI(create_present(scale * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
  sprite[SPRITE.HURT_GIFT] = CTI(create_present(scale * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
  sprite[SPRITE.FRUIT] = [];
  sprite[SPRITE.FRUIT][SPRITE.DAY] = CTI(create_fruit(scale * 1.4, false, ["#3d2a6e", "#8255b5"]));
  sprite[SPRITE.FRUIT][SPRITE.NIGHT] = CTI(create_fruit(scale * 1.4, false, ["#26124f", "#524082"]));
  sprite[SPRITE.FIRE] = [];
  sprite[SPRITE.FIRE][SPRITE.DAY] = CTI(create_fire(scale * 0.9, false, ["#efd435", "#ec8d35", "#e96132"]));
  sprite[SPRITE.FIRE][SPRITE.NIGHT] = CTI(create_fire(scale * 0.9, false, ["#efdb7b", "#efe854", "#e8ef62"]));
  sprite[SPRITE.BIG_FIRE_WOOD] = [];
  sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.DAY] = CTI(create_big_fire_wood(scale * 0.9, false, ["#4d2d14", "#432516"]));
  sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.NIGHT] = CTI(create_big_fire_wood(scale * 0.9, false, ["#282404", "#0a0a01"]));
  sprite[SPRITE.WOOD_FIRE] = [];
  sprite[SPRITE.WOOD_FIRE][SPRITE.DAY] = CTI(create_wood_fire(scale * 0.9, false, ["#4d2d14", "#432516"]));
  sprite[SPRITE.WOOD_FIRE][SPRITE.NIGHT] = CTI(create_wood_fire(scale * 0.9, false, ["#282404", "#0a0a01"]));
  sprite[SPRITE.HALO_FIRE] = [];
  sprite[SPRITE.HALO_FIRE][SPRITE.DAY] = CTI(create_halo_fire(scale * 0.9, false, ["#efd435"]));
  sprite[SPRITE.HALO_FIRE][SPRITE.NIGHT] = CTI(create_halo_fire(scale * 0.9, false, ["#fffabb"]));
  sprite[SPRITE.GROUND_FIRE] = [];
  sprite[SPRITE.GROUND_FIRE][SPRITE.DAY] = CTI(create_ground_fire(scale * 0.9, false, ["#efd435"]));
  sprite[SPRITE.GROUND_FIRE][SPRITE.NIGHT] = CTI(create_ground_fire(scale * 0.9, false, ["#fffabb"]));
  sprite[SPRITE.HALO_FIRE_PUMPKIN] = [];
  sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.DAY] = CTI(create_halo_fire(scale * 0.9, false, ["#efd435"]));
  sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(create_halo_fire(scale * 0.9, false, ["rgba(255, 84, 0, 1)"]));
  sprite[SPRITE.GROUND_FIRE_PUMPKIN] = [];
  sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.DAY] = CTI(create_ground_fire(scale * 0.9, false, ["#efd435"]));
  sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(create_ground_fire(scale * 0.9, false, ["#ff5704"]));
  sprite[SPRITE.GEAR] = CTI(create_gear(scale, "#ffffff", 1));
  sprite[SPRITE.GEAR2] = CTI(create_gear(scale * 1.5, "#ffffff", 1));
  sprite[SPRITE.YOUR_SCORE] = CTI(create_text(scale, "Your score:", 15 * scale, "#FFF"));
  sprite[SPRITE.WINDMILL_CASES] = CTI(create_windmill_chest(scale * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
  sprite[SPRITE.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES;
  sprite[SPRITE.WINDMILL] = [];
  sprite[SPRITE.WINDMILL][SPRITE.DAY] = CTI(create_windmill(scale * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
  sprite[SPRITE.WINDMILL][SPRITE.NIGHT] = CTI(create_windmill(scale * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
  sprite[SPRITE.WINDMILL_WINGS] = [];
  sprite[SPRITE.WINDMILL_WINGS][SPRITE.DAY] = CTI(create_windmill_wing(scale * 2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
  sprite[SPRITE.WINDMILL_WINGS][SPRITE.NIGHT] = CTI(create_windmill_wing(scale * 2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
  sprite[SPRITE.WINDMILL_HEAD] = [];
  sprite[SPRITE.WINDMILL_HEAD][SPRITE.DAY] = CTI(create_windmill_head(scale * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
  sprite[SPRITE.WINDMILL_HEAD][SPRITE.NIGHT] = CTI(create_windmill_head(scale * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
  sprite[SPRITE.WILD_WHEAT] = [];
  sprite[SPRITE.WILD_WHEAT][SPRITE.DAY] = CTI(create_wheat(scale * 2.2, true, ["#A89F67", "#9E8456"]));
  sprite[SPRITE.WILD_WHEAT][SPRITE.NIGHT] = CTI(create_wheat(scale * 2.2, true, ["#0B4049", "#08383D"]));
  sprite[SPRITE.DRIED_WHEAT] = [];
  sprite[SPRITE.DRIED_WHEAT][SPRITE.DAY] = CTI(create_wheat(scale * 2.2, true, ["#68622D", "#665329"]));
  sprite[SPRITE.DRIED_WHEAT][SPRITE.NIGHT] = CTI(create_wheat(scale * 2.2, true, ["#0F3A24", "#083326"]));
  sprite[SPRITE.WHEAT_MOB] = [];
  sprite[SPRITE.WHEAT_MOB][SPRITE.DAY] = CTI(create_seed(scale * 0.8, true, ["#A89F67", "#9E8456"]));
  sprite[SPRITE.WHEAT_MOB][SPRITE.NIGHT] = CTI(create_seed(scale * 0.8, true, ["#15514F", "#0F3F3D"]));
  sprite[SPRITE.PUMPKIN_SEED_MOB] = [];
  sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.DAY] = CTI(create_seed(scale * 0.8, true, ["#c67933", "#b17238"]));
  sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(scale * 0.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.ALOE_VERA_SEED_MOB] = [];
  sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.DAY] = CTI(create_seed(scale * 0.8, true, ["#3a8214", "#4a9c1e"]));
  sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(scale * 0.8, true, ["#032d29", "#044640"]));
  sprite[SPRITE.GARLIC_SEED_MOB] = [];
  sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.DAY] = CTI(create_seed(scale * 0.8, true, ["#e8e8e8", "#bbbbbb"]));
  sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(scale * 0.8, true, ["#1c6161", "#07413f"]));
  sprite[SPRITE.THORNBUSH_SEED_MOB] = [];
  sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.DAY] = CTI(create_seed(scale * 0.8, true, ["#328a56", "#449573"]));
  sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(scale * 0.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.CARROT_SEED_MOB] = [];
  sprite[SPRITE.CARROT_SEED_MOB][SPRITE.DAY] = CTI(create_seed(scale * 0.8, true, ["#c98e2f", "#a36b11"]));
  sprite[SPRITE.CARROT_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(scale * 0.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.TOMATO_SEED_MOB] = [];
  sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.DAY] = CTI(create_seed(scale * 0.8, true, ["#b22419", "#99110e"]));
  sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(scale * 0.8, true, ["#04323c", "#03222b"]));
  sprite[SPRITE.WATERMELON_SEED_MOB] = [];
  sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.DAY] = CTI(create_seed(scale * 0.8, true, ["#13a56d", "#098a58"]));
  sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(scale * 0.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.WINDMILL_WHEAT_SEED] = create_craft_button(1, [{
    f: create_wheat,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#A89F67", "#9E8456"]
  }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
  sprite[SPRITE.BREAD_OVEN_WOOD] = create_craft_button(1, [{
    f: create_wood_fire,
    x: 0,
    y: 0,
    a: 1,
    r: -Math.PI / 5,
    c: ["#4d2d14", "#432516"]
  }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
  sprite[SPRITE.BREAD_OVEN_BREAD] = create_craft_button(1, [{
    f: create_bread,
    x: 0,
    y: -5,
    a: 1,
    r: 0,
    c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
  }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
  sprite[SPRITE.EMPTY_SLOT] = create_craft_button(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.PLANT_SEED] = [];
  sprite[SPRITE.PLANT_SEED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#7d613e", "#9e7e5a"]));
  sprite[SPRITE.PLANT_SEED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#084442", "#125e5a"]));
  sprite[SPRITE.WHEAT_SEED] = [];
  sprite[SPRITE.WHEAT_SEED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#9E8456", "#A89F67"]));
  sprite[SPRITE.WHEAT_SEED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#1b6f6a", "#0d4e4c"]));
  sprite[SPRITE.WHEAT_SEED_DRIED] = [];
  sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#665329", "#68622D"]));
  sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#083326", "#0F3A24"]));
  sprite[SPRITE.PLANT_PUMPKIN] = [];
  sprite[SPRITE.PLANT_PUMPKIN][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#c67933", "#ec952d"]));
  sprite[SPRITE.PLANT_PUMPKIN][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#0e6553", "#094437"]));
  sprite[SPRITE.PLANT_ALOE_VERA] = [];
  sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#375809", "#4b770e"]));
  sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#09542d", "#0d5d2f"]));
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED] = [];
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#585809", "#72770e"]));
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#295209", "#305d0d"]));
  sprite[SPRITE.PLANT_GARLIC] = [];
  sprite[SPRITE.PLANT_GARLIC][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#b9b094", "#e2d2c0"]));
  sprite[SPRITE.PLANT_GARLIC][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#126366", "#0d484b"]));
  sprite[SPRITE.PLANT_THORNBUSH] = [];
  sprite[SPRITE.PLANT_THORNBUSH][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#3f8662", "#30915d"]));
  sprite[SPRITE.PLANT_THORNBUSH][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#0e6553", "#094437"]));
  sprite[SPRITE.PLANT_PUMPKIN_DRIED] = [];
  sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#c79153", "#dfa868"]));
  sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#073927", "#075040"]));
  sprite[SPRITE.PLANT_GARLIC_DRIED] = [];
  sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#768b5b", "#819984"]));
  sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#0c4540", "#0e5153"]));
  sprite[SPRITE.PLANT_THORNBUSH_DRIED] = [];
  sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#567465", "#627c6e"]));
  sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#073927", "#075040"]));
  sprite[SPRITE.PLANT_CARROT] = [];
  sprite[SPRITE.PLANT_CARROT][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#996b3a", "#bf956b"]));
  sprite[SPRITE.PLANT_CARROT][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#0e6553", "#094437"]));
  sprite[SPRITE.PLANT_CARROT_DRIED] = [];
  sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#7a634a", "#a68f77"]));
  sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#1e4d43", "#113c32"]));
  sprite[SPRITE.PLANT_TOMATO] = [];
  sprite[SPRITE.PLANT_TOMATO][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#99403c", "#bc796c"]));
  sprite[SPRITE.PLANT_TOMATO][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#1e434d", "#11303c"]));
  sprite[SPRITE.PLANT_TOMATO_DRIED] = [];
  sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#88504e", "#b3857c"]));
  sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#253b41", "#162930"]));
  sprite[SPRITE.PLANT_WATERMELON] = [];
  sprite[SPRITE.PLANT_WATERMELON][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#0f8870", "#23af93"]));
  sprite[SPRITE.PLANT_WATERMELON][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#032829", "#083233"]));
  sprite[SPRITE.PLANT_WATERMELON_DRIED] = [];
  sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.DAY] = CTI(create_plant_seed(scale * 0.9, false, ["#618a20", "#84a74e"]));
  sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(scale * 0.9, false, ["#1f4632", "#335d47"]));
  sprite[SPRITE.WORKBENCH] = [];
  sprite[SPRITE.WORKBENCH][SPRITE.DAY] = CTI(create_workbench(scale * 1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
  sprite[SPRITE.WORKBENCH][SPRITE.NIGHT] = CTI(create_workbench(scale * 1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
  sprite[SPRITE.WALL] = [], sprite[SPRITE.WALL][SPRITE.DAY] = CTI(create_wall(scale * 1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
  sprite[SPRITE.WALL][SPRITE.NIGHT] = CTI(create_wall(scale * 1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
  sprite[SPRITE.DIAMOND_WALL] = [], sprite[SPRITE.DIAMOND_WALL][SPRITE.DAY] = CTI(create_wall_diamond(scale * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
  sprite[SPRITE.DIAMOND_WALL][SPRITE.NIGHT] = CTI(create_wall_diamond(scale * 1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.AMETHYST_WALL] = [], sprite[SPRITE.AMETHYST_WALL][SPRITE.DAY] = CTI(create_wall_stone(scale * 1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
  sprite[SPRITE.AMETHYST_WALL][SPRITE.NIGHT] = CTI(create_wall_stone(scale * 1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
  sprite[SPRITE.STONE_WALL] = [], sprite[SPRITE.STONE_WALL][SPRITE.DAY] = CTI(create_wall_stone(scale * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
  sprite[SPRITE.STONE_WALL][SPRITE.NIGHT] = CTI(create_wall_stone(scale * 1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
  sprite[SPRITE.GOLD_WALL] = [], sprite[SPRITE.GOLD_WALL][SPRITE.DAY] = CTI(create_wall_gold(scale * 1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
  sprite[SPRITE.GOLD_WALL][SPRITE.NIGHT] = CTI(create_wall_gold(scale * 1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
  sprite[SPRITE.SPIKE] = [], sprite[SPRITE.SPIKE][SPRITE.DAY] = CTI(create_spike(scale * 0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
  sprite[SPRITE.SPIKE][SPRITE.NIGHT] = CTI(create_spike(scale * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
  sprite[SPRITE.GOLD_SPIKE] = [], sprite[SPRITE.GOLD_SPIKE][SPRITE.DAY] = CTI(create_spike_gold(scale * 0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
  sprite[SPRITE.GOLD_SPIKE][SPRITE.NIGHT] = CTI(create_spike_gold(scale * 0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
  sprite[SPRITE.DIAMOND_SPIKE] = [], sprite[SPRITE.DIAMOND_SPIKE][SPRITE.DAY] = CTI(create_spike_diamond(scale * 0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
  sprite[SPRITE.DIAMOND_SPIKE][SPRITE.NIGHT] = CTI(create_spike_diamond(scale * 0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.STONE_SPIKE] = [], sprite[SPRITE.STONE_SPIKE][SPRITE.DAY] = CTI(create_spike_stone(scale * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
  sprite[SPRITE.STONE_SPIKE][SPRITE.NIGHT] = CTI(create_spike_stone(scale * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
  sprite[SPRITE.AMETHYST_SPIKE] = [], sprite[SPRITE.AMETHYST_SPIKE][SPRITE.DAY] = CTI(create_spike_stone(scale * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
  sprite[SPRITE.AMETHYST_SPIKE][SPRITE.NIGHT] = CTI(create_spike_stone(scale * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
  sprite[SPRITE.DOOR_WOOD_CLOSE] = [];
  sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.DAY] = CTI(create_door_wood(scale * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
  sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.NIGHT] = CTI(create_door_wood(scale * 1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
  sprite[SPRITE.DOOR_WOOD_OPEN] = [];
  sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.DAY] = CTI(create_door_wood(scale * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.NIGHT] = CTI(create_door_wood(scale * 1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
  sprite[SPRITE.DOOR_STONE_CLOSE] = [];
  sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.DAY] = CTI(create_door_stone(scale * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
  sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.NIGHT] = CTI(create_door_stone(scale * 1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
  sprite[SPRITE.DOOR_STONE_OPEN] = [];
  sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.DAY] = CTI(create_door_stone(scale * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.NIGHT] = CTI(create_door_stone(scale * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.DOOR_AMETHYST_CLOSE] = [];
  sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.DAY] = CTI(create_door_stone(scale * 1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
  sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.NIGHT] = CTI(create_door_stone(scale * 1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN] = [];
  sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.DAY] = CTI(create_door_stone(scale * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.NIGHT] = CTI(create_door_stone(scale * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.DOOR_GOLD_CLOSE] = [];
  sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.DAY] = CTI(create_door_gold(scale * 1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
  sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.NIGHT] = CTI(create_door_gold(scale * 1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
  sprite[SPRITE.DOOR_GOLD_OPEN] = [];
  sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.DAY] = CTI(create_door_gold(scale * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.NIGHT] = CTI(create_door_gold(scale * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.DOOR_DIAMOND_CLOSE] = [];
  sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.DAY] = CTI(create_door_diamond(scale * 1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
  sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.NIGHT] = CTI(create_door_diamond(scale * 1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN] = [];
  sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.DAY] = CTI(create_door_diamond(scale * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.NIGHT] = CTI(create_door_diamond(scale * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.CHEST] = [];
  sprite[SPRITE.CHEST][SPRITE.DAY] = CTI(create_chest(scale * 0.5, true, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
  sprite[SPRITE.CHEST][SPRITE.NIGHT] = CTI(create_chest(scale * 0.5, true, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
  sprite[SPRITE.TREASURE_CHEST] = [];
  sprite[SPRITE.TREASURE_CHEST][SPRITE.DAY] = CTI(create_treasure_chest(scale * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
  sprite[SPRITE.TREASURE_CHEST][SPRITE.NIGHT] = CTI(create_treasure_chest(scale * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
  sprite[SPRITE.RABBIT] = [];
  sprite[SPRITE.RABBIT][SPRITE.DAY] = CTI(create_rabbit(scale * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
  sprite[SPRITE.RABBIT][SPRITE.NIGHT] = CTI(create_rabbit(scale * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
  sprite[SPRITE.SPIDER] = [];
  sprite[SPRITE.SPIDER][SPRITE.DAY] = CTI(create_rotated_img(Math.PI, create_spider(scale * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
  sprite[SPRITE.SPIDER][SPRITE.NIGHT] = CTI(create_rotated_img(Math.PI, create_spider(scale * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
  sprite[SPRITE.WEB] = CTI(create_web(scale * 0.6, ["#FFFFFF"]));
  sprite[SPRITE.WOLF] = [];
  sprite[SPRITE.WOLF][SPRITE.DAY] = CTI(create_wolf(scale * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
  sprite[SPRITE.WOLF][SPRITE.NIGHT] = CTI(create_wolf(scale * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
  sprite[SPRITE.EARMUFFS] = [];
  sprite[SPRITE.EARMUFFS][SPRITE.DAY] = CTI(create_earmuff(scale * 0.6, true, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
  sprite[SPRITE.EARMUFFS][SPRITE.NIGHT] = CTI(create_earmuff(scale * 0.6, true, ["#478e8b", "#327e73", "#073030", "#08403f"]));
  sprite[SPRITE.COAT] = [];
  sprite[SPRITE.COAT][SPRITE.DAY] = CTI(create_coat(scale * 0.6, true, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
  sprite[SPRITE.COAT][SPRITE.NIGHT] = CTI(create_coat(scale * 0.6, true, ["#073030", "#08403f", "#478e8b", "#327e73"]));
  sprite[SPRITE.CAP_SCARF] = [];
  sprite[SPRITE.CAP_SCARF][SPRITE.DAY] = CTI(create_cap_scarf(scale * 0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
  sprite[SPRITE.CAP_SCARF][SPRITE.NIGHT] = CTI(create_cap_scarf(scale * 0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
  sprite[SPRITE.CHRISTMAS_HAT] = [];
  sprite[SPRITE.CHRISTMAS_HAT][SPRITE.DAY] = CTI(create_christmas_hat(scale * 0.6, true, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
  sprite[SPRITE.CHRISTMAS_HAT][SPRITE.NIGHT] = CTI(create_christmas_hat(scale * 0.6, true, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
  sprite[SPRITE.ELF_HAT] = [];
  sprite[SPRITE.ELF_HAT][SPRITE.DAY] = CTI(create_elf_hat(scale * 0.6, true, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
  sprite[SPRITE.ELF_HAT][SPRITE.NIGHT] = CTI(create_elf_hat(scale * 0.6, true, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
  sprite[SPRITE.BREAD_OVEN_ON] = [];
  sprite[SPRITE.BREAD_OVEN_ON][SPRITE.DAY] = CTI(create_bread_oven(scale * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
  sprite[SPRITE.BREAD_OVEN_ON][SPRITE.NIGHT] = CTI(create_bread_oven(scale * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
  sprite[SPRITE.BREAD_LIGHT_UP] = [];
  sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.DAY] = CTI(create_bread_light_up(scale * 0.9, ["#e4c027"]));
  sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.NIGHT] = CTI(create_bread_light_up(scale * 0.9, ["#D8E57F"]));
  sprite[SPRITE.BREAD_OVEN_OFF] = [];
  sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.DAY] = CTI(create_bread_oven_off(scale * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
  sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.NIGHT] = CTI(create_bread_oven_off(scale * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
  sprite[SPRITE.BREAD_OVEN_UI] = CTI(create_bread_oven_ui(scale * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
  sprite[SPRITE.FURNACE_ON] = [];
  sprite[SPRITE.FURNACE_ON][SPRITE.DAY] = CTI(create_furnace_on(scale * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
  sprite[SPRITE.FURNACE_ON][SPRITE.NIGHT] = CTI(create_furnace_on(scale * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
  sprite[SPRITE.FURNACE_OFF] = [];
  sprite[SPRITE.FURNACE_OFF][SPRITE.DAY] = CTI(create_furnace_off(scale * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
  sprite[SPRITE.FURNACE_OFF][SPRITE.NIGHT] = CTI(create_furnace_off(scale * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
  sprite[SPRITE.FURNACE_SLOT] = CTI(create_furnace_slot(scale * 0.8, true, ["#5f6061", "#939393"]));
  sprite[SPRITE.FURNACE_BUTTON] = create_craft_button(1, [{
    f: create_wood_fire,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 2.5,
    c: ["#4d2d14", "#432516"]
  }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
  sprite[SPRITE.BED] = [];
  sprite[SPRITE.BED][SPRITE.DAY] = CTI(create_bed(scale * 1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
  sprite[SPRITE.BED][SPRITE.NIGHT] = CTI(create_bed(scale * 1, true, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
  sprite[SPRITE.BED_TOP] = [];
  sprite[SPRITE.BED_TOP][SPRITE.DAY] = CTI(create_bed_top(scale * 1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
  sprite[SPRITE.BED_TOP][SPRITE.NIGHT] = CTI(create_bed_top(scale * 1, true, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
  sprite[SPRITE.CRAB_SPEAR] = [];
  sprite[SPRITE.CRAB_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_crab_spear(scale * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
  sprite[SPRITE.CRAB_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_crab_spear(scale * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
  sprite[SPRITE.WOOD_SPEAR] = [];
  sprite[SPRITE.WOOD_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_wood_spear(scale * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
  sprite[SPRITE.WOOD_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_wood_spear(scale * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
  sprite[SPRITE.SPEAR] = [];
  sprite[SPRITE.SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_stonespear(scale * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
  sprite[SPRITE.SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_stonespear(scale * 0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
  sprite[SPRITE.GOLD_SPEAR] = [];
  sprite[SPRITE.GOLD_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_goldspear(scale * 0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
  sprite[SPRITE.GOLD_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_goldspear(scale * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
  sprite[SPRITE.DIAMOND_SPEAR] = [];
  sprite[SPRITE.DIAMOND_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_diamondspear(scale * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
  sprite[SPRITE.DIAMOND_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_diamondspear(scale * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
  sprite[SPRITE.AMETHYST_SPEAR] = [];
  sprite[SPRITE.AMETHYST_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_amespear(scale * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
  sprite[SPRITE.AMETHYST_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_amespear(scale * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
  sprite[SPRITE.DRAGON_SPEAR] = [];
  sprite[SPRITE.DRAGON_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_spear(scale * 1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
  sprite[SPRITE.DRAGON_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_spear(scale * 1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
  sprite[SPRITE.HAMMER] = [];
  sprite[SPRITE.HAMMER][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(scale * 1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
  sprite[SPRITE.HAMMER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(scale * 1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
  sprite[SPRITE.SPANNER] = [];
  sprite[SPRITE.SPANNER][SPRITE.DAY] = CTI(create_rotated_img(3, create_spanner(scale * 0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
  sprite[SPRITE.SPANNER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_spanner(scale * 0.5, true, ["#030d14", "#485e66", "#1f343f"])));
  sprite[SPRITE.SUPER_HAMMER] = [];
  sprite[SPRITE.SUPER_HAMMER][SPRITE.DAY] = CTI(create_rotated_img(3, create_superhammer(scale * 1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
  sprite[SPRITE.SUPER_HAMMER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_superhammer(scale * 1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
  sprite[SPRITE.HAMMER_GOLD] = [];
  sprite[SPRITE.HAMMER_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(scale * 1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
  sprite[SPRITE.HAMMER_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(scale * 1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
  sprite[SPRITE.HAMMER_DIAMOND] = [];
  sprite[SPRITE.HAMMER_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(scale * 1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
  sprite[SPRITE.HAMMER_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(scale * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
  sprite[SPRITE.HAMMER_AMETHYST] = [];
  sprite[SPRITE.HAMMER_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(scale * 1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
  sprite[SPRITE.HAMMER_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(scale * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
  sprite[SPRITE.LOCK] = [];
  sprite[SPRITE.LOCK][SPRITE.DAY] = CTI(create_lock(scale * 0.55, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
  sprite[SPRITE.LOCK][SPRITE.NIGHT] = CTI(create_lock(scale * 0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
  sprite[SPRITE.PADLOCK] = [];
  sprite[SPRITE.PADLOCK].push(CTI(create_lock(scale * 0.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
  sprite[SPRITE.PADLOCK].push(CTI(create_lock(scale * 0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
  sprite[SPRITE.PADLOCK].push(CTI(create_lock(scale * 0.8, false, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
  sprite[SPRITE.LOCKED] = [];
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKPICK] = [];
  sprite[SPRITE.LOCKPICK][SPRITE.DAY] = CTI(create_lockpick(scale * 0.06, false, ["#141414", "#c4a23a", "#816511"]));
  sprite[SPRITE.LOCKPICK][SPRITE.NIGHT] = CTI(create_lockpick(scale * 0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
  sprite[SPRITE.KEY] = [];
  sprite[SPRITE.KEY].push(CTI(create_lockpick(scale * 0.08, false, ["#141414", "#c4a23a", "#816511"])));
  sprite[SPRITE.KEY].push(CTI(create_lockpick(scale * 0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
  sprite[SPRITE.KEY].push(CTI(create_lockpick(scale * 0.08, false, ["#141414", "#b0902e", "#634d09"])));
  sprite[SPRITE.DRAGON_HEART] = create_craft_button(1.5, [{
    f: create_dragon_heart,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#141414", "#178a99", "#0a6372", "#03282e"]
  }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
  sprite[SPRITE.RESURRECTION_GROUND] = [];
  sprite[SPRITE.RESURRECTION_GROUND][SPRITE.DAY] = CTI(create_resurrection_ground(scale * 0.8, true, ["#347f93", "#54a4ba"]));
  sprite[SPRITE.RESURRECTION_GROUND][SPRITE.NIGHT] = CTI(create_resurrection_ground(scale * 0.8, true, ["#98ede3", "#94f2e7"]));
  sprite[SPRITE.RESURRECTION_HOLE] = [];
  sprite[SPRITE.RESURRECTION_HOLE][SPRITE.DAY] = CTI(create_resurrection_hole(scale * 0.8, true, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
  sprite[SPRITE.RESURRECTION_HOLE][SPRITE.NIGHT] = CTI(create_resurrection_hole(scale * 0.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
  sprite[SPRITE.RESURRECTION_ROTATE] = [];
  sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.DAY] = CTI(create_resurrection_rotate(scale * 0.8, true, ["#a9e4ed", "#86d4e0"]));
  sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.NIGHT] = CTI(create_resurrection_rotate(scale * 0.8, true, ["#83ddd4", "#485e66"]));
  sprite[SPRITE.RESURRECTION] = [];
  sprite[SPRITE.RESURRECTION][SPRITE.DAY] = CTI(create_resurrection(scale * 0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
  sprite[SPRITE.RESURRECTION][SPRITE.NIGHT] = CTI(create_resurrection(scale * 0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
  sprite[SPRITE.EMERALD_MACHINE_GROUND] = [];
  sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_GROUNDD;
  sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_GROUNDN;
  sprite[SPRITE.EMERALD_MACHINE_HOLE] = [];
  sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_HOLED;
  sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_HOLEN;
  sprite[SPRITE.EMERALD_MACHINE_ROTATE] = [];
  sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_ROTATED;
  sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_ROTATEN;
  sprite[SPRITE.EMERALD_MACHINE] = [];
  sprite[SPRITE.EMERALD_MACHINE][SPRITE.DAY] = IMAGES.EMERALD_MACHINED;
  sprite[SPRITE.EMERALD_MACHINE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINEN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_STONED;
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_STONEN;
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_STONED;
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_STONEN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_GOLDD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_GOLDN;
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_GOLDD;
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_GOLDN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDN;
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_DIAMONDD;
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_DIAMONDN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN;
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTD;
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_REIDITED;
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_REIDITEN;
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_REIDITED;
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_REIDITEN;
  sprite[SPRITE.FIREFLY] = [];
  sprite[SPRITE.FIREFLY][SPRITE.DAY] = IMAGES.FIREFLYD;
  sprite[SPRITE.FIREFLY][SPRITE.NIGHT] = IMAGES.FIREFLYN;
  sprite[SPRITE.HURT_FIREFLY] = IMAGES.HURT_FIREFLY;
  sprite[SPRITE.TOTEM] = [], sprite[SPRITE.TOTEM][SPRITE.DAY] = CTI(create_totem(scale * 0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
  sprite[SPRITE.TOTEM][SPRITE.NIGHT] = CTI(create_totem(scale * 0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
  sprite[SPRITE.ICON_MEMBER] = CTI(create_icon_team(scale * 0.3, ["#092813", "#1f773d"], 0));
  sprite[SPRITE.ICON_LEADER] = CTI(create_icon_team(scale * 0.3, ["#092813", "#1f773d"], 1));
  sprite[SPRITE.VERIFIED] = CTI(create_verified(scale * 0.6, ["#092813", "#1f773d"]));
  sprite[SPRITE.TEAM_BUTTON] = [];
  sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(scale * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
  sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(scale * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
  sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(scale * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
  sprite[SPRITE.FULL_TEAM_BUTTON] = [];
  var img = CTI(create_team_button(scale * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
  sprite[SPRITE.FULL_TEAM_BUTTON].push(img);
  sprite[SPRITE.FULL_TEAM_BUTTON].push(img);
  sprite[SPRITE.FULL_TEAM_BUTTON].push(img);
  sprite[SPRITE.MANAGE_TEAM_BUTTON] = [];
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(scale * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(scale * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(scale * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
  sprite[SPRITE.DELAY_SPIKE] = CTI(create_spiketimer(scale * 0.3, ["#FFFFFF"]));
  sprite[SPRITE.DELAY_WALL] = CTI(create_delay_wall(scale * 0.3, ["#FFFFFF"]));
  sprite[SPRITE.DELAY_TEAM] = CTI(create_icon_team(scale * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
  sprite[SPRITE.DELAY_DRINK] = CTI(create_rotated_img(Math.PI / 5, create_drink_delay(scale * 0.2, ["#FFFFFF"])));
  sprite[SPRITE.AMETHYST_HELMET] = [], sprite[SPRITE.AMETHYST_HELMET][SPRITE.DAY] = CTI(create_amethyst_helmet(scale * 0.85, true, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
  sprite[SPRITE.AMETHYST_HELMET][SPRITE.NIGHT] = CTI(create_amethyst_helmet(scale * 0.85, true, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
  sprite[SPRITE.SHOW_TEAM_BUTTON] = [];
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(scale * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(scale * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(scale * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
  sprite[SPRITE.HOOD] = [], sprite[SPRITE.HOOD][SPRITE.DAY] = CTI(create_hood(scale * 0.37, true, ["#2a2938", "#242330", "#313041"]));
  sprite[SPRITE.HOOD][SPRITE.NIGHT] = CTI(create_hood(scale * 0.37, true, ["#1b1e30", "#161921", "#252f3e"]));
  sprite[SPRITE.WINTER_HOOD] = [], sprite[SPRITE.WINTER_HOOD][SPRITE.DAY] = CTI(create_winter_hood(scale * 0.17, true, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
  sprite[SPRITE.WINTER_HOOD][SPRITE.NIGHT] = CTI(create_winter_hood(scale * 0.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
  sprite[SPRITE.WINTER_PEASANT] = [], sprite[SPRITE.WINTER_PEASANT][SPRITE.DAY] = CTI(create_peasant(scale * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
  sprite[SPRITE.WINTER_PEASANT][SPRITE.NIGHT] = CTI(create_peasant(scale * 0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
  sprite[SPRITE.PEASANT] = [], sprite[SPRITE.PEASANT][SPRITE.DAY] = CTI(create_peasant(scale * 0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
  sprite[SPRITE.PEASANT][SPRITE.NIGHT] = CTI(create_peasant(scale * 0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
  sprite[SPRITE.CROWN_GREEN] = [], sprite[SPRITE.CROWN_GREEN][SPRITE.DAY] = CTI(create_crown_life(scale * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
  sprite[SPRITE.CROWN_GREEN][SPRITE.NIGHT] = CTI(create_crown_life(scale * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
  sprite[SPRITE.CROWN_ORANGE] = [], sprite[SPRITE.CROWN_ORANGE][SPRITE.DAY] = CTI(create_crown_life(scale * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
  sprite[SPRITE.CROWN_ORANGE][SPRITE.NIGHT] = CTI(create_crown_life(scale * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
  sprite[SPRITE.CROWN_BLUE] = [], sprite[SPRITE.CROWN_BLUE][SPRITE.DAY] = CTI(create_crown_life(scale * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
  sprite[SPRITE.CROWN_BLUE][SPRITE.NIGHT] = CTI(create_crown_life(scale * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
  sprite[SPRITE.CROWN_CRAB] = [], sprite[SPRITE.CROWN_CRAB][SPRITE.DAY] = CTI(create_crab_crown(scale * 0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
  sprite[SPRITE.CROWN_CRAB][SPRITE.NIGHT] = CTI(create_crab_crown(scale * 0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
  sprite[SPRITE.DRAGON_HELMET] = [], sprite[SPRITE.DRAGON_HELMET][SPRITE.DAY] = CTI(create_dragon_helmet(scale * 0.32, true, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
  sprite[SPRITE.DRAGON_HELMET][SPRITE.NIGHT] = CTI(create_dragon_helmet(scale * 0.32, true, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
  sprite[SPRITE.DRAGON_SWORD] = [];
  sprite[SPRITE.DRAGON_SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_sword(scale * 0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
  sprite[SPRITE.DRAGON_SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_sword(scale * 0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
  sprite[SPRITE.DRAGON_SWORD_HALO] = [];
  sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_sword(scale * 1, true, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
  sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_sword(scale * 1, true, [undefined, undefined, undefined, "#87d2e6", "#87d2e6"])));
  sprite[SPRITE.QUEST_BUTTON] = [];
  sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(scale * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
  sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(scale * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
  sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(scale * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
  sprite[SPRITE.MARKET_BUTTON] = [];
  sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(scale * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
  sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(scale * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
  sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(scale * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
  sprite[SPRITE.SOUND_BUTTON_ON] = [];
  sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(scale * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
  sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(scale * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
  sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(scale * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
  sprite[SPRITE.SOUND_BUTTON_OFF] = [];
  sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(scale * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
  sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(scale * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
  sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(scale * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
  sprite[SPRITE.SHOVEL] = [];
  sprite[SPRITE.SHOVEL][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(scale * 0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
  sprite[SPRITE.SHOVEL][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(scale * 0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
  sprite[SPRITE.SHOVEL_GOLD] = [];
  sprite[SPRITE.SHOVEL_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(scale * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
  sprite[SPRITE.SHOVEL_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(scale * 0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
  sprite[SPRITE.SHOVEL_DIAMOND] = [];
  sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(scale * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
  sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(scale * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
  sprite[SPRITE.SHOVEL_AMETHYST] = [];
  sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(scale * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
  sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(scale * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
  sprite[SPRITE.SHOP] = [];
  sprite[SPRITE.SHOP].push(CTI(create_shop(scale * 0.7, ["#3b330d", "#b5a118", "#c8ac16"], 0)));
  sprite[SPRITE.SHOP].push(CTI(create_shop(scale * 0.7, ["#524712", "#c7b11c", "#d9ba18"], 0)));
  sprite[SPRITE.SHOP].push(CTI(create_shop(scale * 0.7, ["#2a2409", "#9f8e14", "#ad9511"], 0)));
  sprite[SPRITE.HURT_WOLF] = CTI(create_hurt_wolf(scale * 1.1, ["#BB0000"]));
  sprite[SPRITE.HURT_SPIDER] = CTI(create_rotated_img(Math.PI, create_hurt_spider(scale * 0.9, "#BB0000")));
  sprite[SPRITE.EXPLORER_HAT] = [];
  sprite[SPRITE.EXPLORER_HAT][SPRITE.DAY] = CTI(create_explorer_hat(scale * 0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
  sprite[SPRITE.EXPLORER_HAT][SPRITE.NIGHT] = CTI(create_explorer_hat(scale * 0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
  sprite[SPRITE.WOOD_HELMET] = [];
  sprite[SPRITE.WOOD_HELMET][SPRITE.DAY] = CTI(create_wooden_helmet(scale * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
  sprite[SPRITE.WOOD_HELMET][SPRITE.NIGHT] = CTI(create_wooden_helmet(scale * 0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
  sprite[SPRITE.STONE_HELMET] = [];
  sprite[SPRITE.STONE_HELMET][SPRITE.DAY] = CTI(create_viking_hat(scale * 0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
  sprite[SPRITE.STONE_HELMET][SPRITE.NIGHT] = CTI(create_viking_hat(scale * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
  sprite[SPRITE.GOLD_HELMET] = [];
  sprite[SPRITE.GOLD_HELMET][SPRITE.DAY] = CTI(create_gold_helmet(scale * 0.58, true, ["#dbce71", "#b29c32", "#c4bc51"]));
  sprite[SPRITE.GOLD_HELMET][SPRITE.NIGHT] = CTI(create_gold_helmet(scale * 0.58, true, ["#2b7c57", "#15543c", "#1a7961"]));
  sprite[SPRITE.DIAMOND_HELMET] = [];
  sprite[SPRITE.DIAMOND_HELMET][SPRITE.DAY] = CTI(create_diamond_helmet(scale * 0.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
  sprite[SPRITE.DIAMOND_HELMET][SPRITE.NIGHT] = CTI(create_diamond_helmet(scale * 0.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.FIR] = [];
  sprite[SPRITE.FIR][SPRITE.DAY] = [];
  sprite[SPRITE.FIR][SPRITE.NIGHT] = [];
  sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_three(scale * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
  sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_two(scale * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
  sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_one(scale * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_three(scale * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_two(scale * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_one(scale * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
  sprite[SPRITE.DRAGON] = [];
  sprite[SPRITE.DRAGON][SPRITE.DAY] = CTI(create_dragon(scale * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
  sprite[SPRITE.DRAGON][SPRITE.NIGHT] = CTI(create_dragon(scale * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
  sprite[SPRITE.WING_LEFT] = [];
  sprite[SPRITE.WING_LEFT][SPRITE.DAY] = CTI(create_wingleft(scale * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
  sprite[SPRITE.WING_LEFT][SPRITE.NIGHT] = CTI(create_wingleft(scale * 1, ["#050505", "#327570", "#021724", "#200333"]));
  sprite[SPRITE.WING_RIGHT] = [];
  sprite[SPRITE.WING_RIGHT][SPRITE.DAY] = CTI(create_wingright(scale * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
  sprite[SPRITE.WING_RIGHT][SPRITE.NIGHT] = CTI(create_wingright(scale * 1, ["#050505", "#327570", "#021724", "#200333"]));
  sprite[SPRITE.DECORATION] = [];
  sprite[SPRITE.DECORATION][SPRITE.DAY] = [];
  sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [];
  sprite[SPRITE.DECORATION][SPRITE.DAY] = [IMAGES.DECORATION_0D, IMAGES.DECORATION_1D, IMAGES.DECORATION_2D, IMAGES.DECORATION_3D, IMAGES.DECORATION_4D, IMAGES.DECORATION_5D, IMAGES.DECORATION_6D, IMAGES.DECORATION_7D, IMAGES.DECORATION_8D, IMAGES.DECORATION_9D, IMAGES.DECORATION_10D, IMAGES.DECORATION_11D, IMAGES.DECORATION_12D, IMAGES.DECORATION_13D, IMAGES.DECORATION_14D, IMAGES.DECORATION_15D, IMAGES.DECORATION_16D, IMAGES.DECORATION_17D, IMAGES.DECORATION_18D, IMAGES.DECORATION_19D, IMAGES.DECORATION_20D, IMAGES.DECORATION_21D, IMAGES.DECORATION_22D, IMAGES.DECORATION_23D, IMAGES.DECORATION_24D, IMAGES.DECORATION_25D, IMAGES.DECORATION_26D, IMAGES.DECORATION_27D, IMAGES.DECORATION_28D, IMAGES.DECORATION_29D, IMAGES.DECORATION_30D, IMAGES.DECORATION_31D, IMAGES.DECORATION_32D, IMAGES.DECORATION_33D, IMAGES.DECORATION_34D, IMAGES.DECORATION_35D, IMAGES.DECORATION_36D, IMAGES.DECORATION_37D, IMAGES.DECORATION_38D, IMAGES.DECORATION_39D, IMAGES.DECORATION_40D, IMAGES.DECORATION_41D, IMAGES.DECORATION_42D, IMAGES.DECORATION_43D, IMAGES.DECORATION_44D, IMAGES.DECORATION_45D, IMAGES.DECORATION_46D, IMAGES.DECORATION_47D, IMAGES.DECORATION_48D, IMAGES.DECORATION_49D, IMAGES.DECORATION_50D, IMAGES.DECORATION_51D, IMAGES.DECORATION_52D, IMAGES.DECORATION_53D, IMAGES.DECORATION_54D, IMAGES.DECORATION_55D];
  sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [IMAGES.DECORATION_0N, IMAGES.DECORATION_1N, IMAGES.DECORATION_2N, IMAGES.DECORATION_3N, IMAGES.DECORATION_4N, IMAGES.DECORATION_5N, IMAGES.DECORATION_6N, IMAGES.DECORATION_7N, IMAGES.DECORATION_8N, IMAGES.DECORATION_9N, IMAGES.DECORATION_10N, IMAGES.DECORATION_11N, IMAGES.DECORATION_12N, IMAGES.DECORATION_13N, IMAGES.DECORATION_14N, IMAGES.DECORATION_15N, IMAGES.DECORATION_16N, IMAGES.DECORATION_17N, IMAGES.DECORATION_18N, IMAGES.DECORATION_19N, IMAGES.DECORATION_20N, IMAGES.DECORATION_21N, IMAGES.DECORATION_22N, IMAGES.DECORATION_23N, IMAGES.DECORATION_24N, IMAGES.DECORATION_25N, IMAGES.DECORATION_26N, IMAGES.DECORATION_27N, IMAGES.DECORATION_28N, IMAGES.DECORATION_29N, IMAGES.DECORATION_30N, IMAGES.DECORATION_31N, IMAGES.DECORATION_32N, IMAGES.DECORATION_33N, IMAGES.DECORATION_34N, IMAGES.DECORATION_35N, IMAGES.DECORATION_36N, IMAGES.DECORATION_37N, IMAGES.DECORATION_38N, IMAGES.DECORATION_39N, IMAGES.DECORATION_40N, IMAGES.DECORATION_41N, IMAGES.DECORATION_42N, IMAGES.DECORATION_43N, IMAGES.DECORATION_44N, IMAGES.DECORATION_45N, IMAGES.DECORATION_46N, IMAGES.DECORATION_47N, IMAGES.DECORATION_48N, IMAGES.DECORATION_49N, IMAGES.DECORATION_50N, IMAGES.DECORATION_51N, IMAGES.DECORATION_52N, IMAGES.DECORATION_53N, IMAGES.DECORATION_54N, IMAGES.DECORATION_55N];
  sprite[SPRITE.CAVE_STONES] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(scale * 1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(scale * 0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(scale * 1, false, ["#252B28", "#747471", "#83827e"], 2)));
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(scale * 0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(scale * 1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(scale * 0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(scale * 1, false, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(scale * 0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(scale * 1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(scale * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(scale * 1, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(scale * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(scale * 1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(scale * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(scale * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(scale * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.GOLD_WINTER] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(scale * 1.5, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(scale * 1.3, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(scale * 1.1, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(scale * 1.5, false, ["#0a2728", "#3e8989", "#50a09c"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(scale * 1.3, false, ["#0a2728", "#3e8989", "#50a09c"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(scale * 1.1, false, ["#0a2728", "#3e8989", "#50a09c"])));
  sprite[SPRITE.DIAMOND_WINTER] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(scale * 1.1, false, ["#123d38", "#70e0dd", "#95efea"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(scale * 0.9, false, ["#123d38", "#70e0dd", "#95efea"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(scale * 0.7, false, ["#123d38", "#70e0dd", "#95efea"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(scale * 1.1, false, ["#123d38", "#47b2ac", "#5cccc4"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(scale * 0.9, false, ["#123d38", "#47b2ac", "#5cccc4"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(scale * 0.7, false, ["#123d38", "#47b2ac", "#5cccc4"])));
  sprite[SPRITE.AMETHYST] = [];
  sprite[SPRITE.AMETHYST][SPRITE.DAY] = [];
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT] = [];
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(scale * 1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(scale * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(scale * 1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(scale * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(scale * 1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(scale * 1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
  sprite[SPRITE.WATERBLOCK] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.DAY] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.DAY].push(CTI(create_dragon_ground(scale, ["#2d53c4"])));
  sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT].push(CTI(create_dragon_ground(scale, ["#2d53c4"])));
  sprite[SPRITE.ISLAND_BLOCK] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY].push(CTI(create_dragon_ground(scale, ["#c4912d"])));
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT].push(CTI(create_dragon_ground(scale, ["#c4912d"])));
  sprite[SPRITE.CAVE_STEP] = [];
  sprite[SPRITE.CAVE_STEP][SPRITE.DAY] = CTI(create_snow_step(scale, ["#414040"]));
  sprite[SPRITE.CAVE_STEP][SPRITE.NIGHT] = CTI(create_snow_step(scale, ["#153635"]));
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_wood(scale * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_wood(scale * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_stone(scale * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_stone(scale * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_stone(scale * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_stone(scale * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_diamond(scale * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_diamond(scale * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_gold(scale * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_gold(scale * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.FOX] = [];
  sprite[SPRITE.FOX][SPRITE.DAY] = CTI(create_winter_fox(scale * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
  sprite[SPRITE.FOX][SPRITE.NIGHT] = CTI(create_winter_fox(scale * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
  sprite[SPRITE.BEAR] = [];
  sprite[SPRITE.BEAR][SPRITE.DAY] = CTI(create_polar_bear(scale * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
  sprite[SPRITE.BEAR][SPRITE.NIGHT] = CTI(create_polar_bear(scale * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
  sprite[SPRITE.MINIMAP] = [];
  sprite[SPRITE.MINIMAP_CTX] = [];
  sprite[SPRITE.BIGMAP] = [];
  sprite[SPRITE.BIGMAP_CTX] = [];
  for (var i = 0; i < 2; i++) {
    sprite[SPRITE.MINIMAP][i] = document.createElement("canvas");
    sprite[SPRITE.MINIMAP][i].width = 193;
    sprite[SPRITE.MINIMAP][i].height = 193;
    sprite[SPRITE.MINIMAP_CTX][i] = sprite[SPRITE.MINIMAP][i].getContext("2d");
    sprite[SPRITE.BIGMAP][i] = document.createElement("canvas");
    sprite[SPRITE.BIGMAP][i].width = 600;
    sprite[SPRITE.BIGMAP][i].height = 600;
    sprite[SPRITE.BIGMAP_CTX][i] = sprite[SPRITE.BIGMAP][i].getContext("2d");
  }
  sprite[SPRITE.SNOW_STEP] = [];
  sprite[SPRITE.SNOW_STEP][SPRITE.DAY] = CTI(create_snow_step(scale, ["#c8e0de"]));
  sprite[SPRITE.SNOW_STEP][SPRITE.NIGHT] = CTI(create_snow_step(scale, ["#147071"]));
  sprite[SPRITE.LAVA_STEP] = [];
  sprite[SPRITE.LAVA_STEP][SPRITE.DAY] = CTI(create_snow_step(scale, ["#231912"]));
  sprite[SPRITE.LAVA_STEP][SPRITE.NIGHT] = CTI(create_snow_step(scale, ["#021719"]));
  sprite[SPRITE.HURT_TREASURE_CHEST] = CTI(create_hurt_treasure_chest(scale * 0.5, ["#BB0000"]));
  sprite[SPRITE.HURT_FOX] = CTI(create_hurt_fox_winter(scale * 0.9, "#BB0000"));
  sprite[SPRITE.HURT_BEAR] = CTI(create_hurt_polar_bear(scale * 0.9, "#BB0000"));
  sprite[SPRITE.HURT_DRAGON] = CTI(create_hurt_dragon(scale * 1, ["#BB0000"]));
  sprite[SPRITE.HURT_WING_LEFT] = CTI(create_hurt_wingleft(scale * 0.8, "#BB0000"));
  sprite[SPRITE.HURT_WING_RIGHT] = CTI(create_hurt_wingright(scale * 0.8, "#BB0000"));
  sprite[SPRITE.HURT_RABBIT] = CTI(create_hurt_rabbit(scale * 0.9, "#BB0000"));
  sprite[SPRITE.HURT] = CTI(create_hurt_player(scale * 0.6, "#BB0000"));
  sprite[SPRITE.COLD] = CTI(create_hurt_player(scale * 0.6, "#1CE7E0"));
  sprite[SPRITE.HUNGER] = CTI(create_hurt_player(scale * 0.6, "#DBE71C"));
  sprite[SPRITE.HEAL] = CTI(create_hurt_player(scale * 0.6, "#00BB00"));
  sprite[SPRITE.SAND_STEP] = [];
  sprite[SPRITE.SAND_STEP][SPRITE.DAY] = CTI(create_snow_step(scale, ["#dac291"]));
  sprite[SPRITE.SAND_STEP][SPRITE.NIGHT] = CTI(create_snow_step(scale, ["#0D423D"]));
  sprite[SPRITE.ISLAND_STEP] = [];
  sprite[SPRITE.ISLAND_STEP][SPRITE.DAY] = CTI(create_snow_step(scale, ["#dac291"]));
  sprite[SPRITE.ISLAND_STEP][SPRITE.NIGHT] = CTI(create_snow_step(scale, ["#0D423D"]));
  sprite[SPRITE.WELL_FULL] = [];
  sprite[SPRITE.WELL_FULL][SPRITE.DAY] = CTI(create_well(scale * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
  sprite[SPRITE.WELL_FULL][SPRITE.NIGHT] = CTI(create_well(scale * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
  sprite[SPRITE.WELL_EMPTY] = [];
  sprite[SPRITE.WELL_EMPTY][SPRITE.DAY] = CTI(create_well(scale * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
  sprite[SPRITE.WELL_EMPTY][SPRITE.NIGHT] = CTI(create_well(scale * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
  sprite[SPRITE.BOTTLE_FULL] = [CTI(create_bottle(scale, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
  sprite[SPRITE.BOTTLE_EMPTY] = [CTI(create_bottle(scale, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
  sprite[SPRITE.OCEAN] = [];
  sprite[SPRITE.OCEAN][SPRITE.DAY] = [];
  sprite[SPRITE.OCEAN][SPRITE.NIGHT] = [];
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_one(scale * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_two(scale * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_three(scale * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_four(scale * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_five(scale * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_six(scale * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_sept(scale * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_one(scale * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_two(scale * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_three(scale * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_four(scale * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_five(scale * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_six(scale * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_sept(scale * 1, ["#09373F"])));
  sprite[SPRITE.ISLAND] = [];
  sprite[SPRITE.ISLAND][SPRITE.DAY] = [];
  sprite[SPRITE.ISLAND][SPRITE.NIGHT] = [];
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(scale * 1.7, ["#FBEFBC"], 0)));
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(scale * 1.9, ["#FBEFBC"], 1)));
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(scale * 1.7, ["#FBEFBC"], 2)));
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(scale * 1.7, ["#0F4C48"], 0)));
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(scale * 1.9, ["#0F4C48"], 1)));
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(scale * 1.7, ["#0F4C48"], 2)));
  sprite[SPRITE.WAVE_ONE] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(scale * 1.8, ["#A9D6D3"], 0)));
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(scale * 2, ["#A9D6D3"], 1)));
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(scale * 1.8, ["#A9D6D3"], 2)));
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(scale * 1.8, ["#115E60"], 0)));
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(scale * 2, ["#115E60"], 1)));
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(scale * 1.8, ["#115E60"], 2)));
  sprite[SPRITE.WAVE_TWO] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(scale * 1.9, ["#2A8B9B"], 0)));
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(scale * 2.1, ["#2A8B9B"], 1)));
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(scale * 1.9, ["#2A8B9B"], 2)));
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(scale * 1.9, ["#0F464C"], 0)));
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(scale * 2.1, ["#0F464C"], 1)));
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(scale * 1.9, ["#0F464C"], 2)));
  sprite[SPRITE.PALM] = [];
  sprite[SPRITE.PALM][SPRITE.DAY] = [];
  sprite[SPRITE.PALM][SPRITE.NIGHT] = [];
  sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(scale * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
  sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(scale * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
  sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(scale * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(scale * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(scale * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(scale * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
  sprite[SPRITE.KRAKEN] = [];
  sprite[SPRITE.KRAKEN][SPRITE.DAY] = CTI(create_kraken(scale * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
  sprite[SPRITE.KRAKEN][SPRITE.NIGHT] = CTI(create_kraken(scale * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
  sprite[SPRITE.HURT_KRAKEN] = CTI(create_hurt_kraken(scale * 0.8, ["#B6222A"]));
  sprite[SPRITE.PIRANHA] = [];
  sprite[SPRITE.PIRANHA][SPRITE.DAY] = CTI(create_pirahna(scale * 0.8, true, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
  sprite[SPRITE.PIRANHA][SPRITE.NIGHT] = CTI(create_pirahna(scale * 0.8, true, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
  sprite[SPRITE.HURT_PIRANHA] = CTI(create_hurt_pirahna(scale * 0.8, ["#B6222A"]));
  sprite[SPRITE.FISH1] = [];
  sprite[SPRITE.FISH1][SPRITE.DAY] = CTI(create_fish1(scale * 0.4, true, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
  sprite[SPRITE.FISH1][SPRITE.NIGHT] = CTI(create_fish1(scale * 0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
  sprite[SPRITE.FISH2] = [];
  sprite[SPRITE.FISH2][SPRITE.DAY] = CTI(create_fish1(scale * 0.4, true, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
  sprite[SPRITE.FISH2][SPRITE.NIGHT] = CTI(create_fish1(scale * 0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
  sprite[SPRITE.FISH3] = [];
  sprite[SPRITE.FISH3][SPRITE.DAY] = CTI(create_fish1(scale * 0.4, true, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
  sprite[SPRITE.FISH3][SPRITE.NIGHT] = CTI(create_fish1(scale * 0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
  sprite[SPRITE.HURT_FISH1] = CTI(create_hurt_fish1(scale * 0.4, ["#B6222A"]));
  sprite[SPRITE.HURT_FISH2] = CTI(create_hurt_fish1(scale * 0.4, ["#B6222A"]));
  sprite[SPRITE.HURT_FISH3] = CTI(create_hurt_fish1(scale * 0.4, ["#B6222A"]));
  sprite[SPRITE.CRAB_LOOT] = CTI(create_crab_loot(scale * 0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"], 1));
  sprite[SPRITE.CRAB_STICK] = CTI(create_crab_stick(scale * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"], 1));
  sprite[SPRITE.CRAB_ATTACK] = [];
  sprite[SPRITE.CRAB_ATTACK][SPRITE.DAY] = CTI(create_crab(scale * 0.35, true, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
  sprite[SPRITE.CRAB_ATTACK][SPRITE.NIGHT] = CTI(create_crab(scale * 0.35, true, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
  sprite[SPRITE.CRAB] = [];
  sprite[SPRITE.CRAB][SPRITE.DAY] = CTI(create_crab(scale * 0.35, true, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
  sprite[SPRITE.CRAB][SPRITE.NIGHT] = CTI(create_crab(scale * 0.35, true, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
  sprite[SPRITE.CRAB_CLAW_LEFT] = [];
  sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.DAY] = CTI(create_crab_claw_left(scale * 0.35, true, ["#1e2021", "#e45936", "#ffffff"]));
  sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.NIGHT] = CTI(create_crab_claw_left(scale * 0.35, true, ["#0c0c0d", "#34255d", "#563f83"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT] = [];
  sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.DAY] = CTI(create_crab_claw_right(scale * 0.42, true, ["#1e2021", "#e45936", "#ffffff"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.NIGHT] = CTI(create_crab_claw_right(scale * 0.42, true, ["#0c0c0d", "#34255d", "#563f83"]));
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK] = [];
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.DAY] = CTI(create_crab_claw_left(scale * 0.35, true, ["#1e2021", "#e45936", "#B6222A"]));
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = CTI(create_crab_claw_left(scale * 0.35, true, ["#0c0c0d", "#613577", "#462966"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK] = [];
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.DAY] = CTI(create_crab_claw_right(scale * 0.42, true, ["#1e2021", "#e45936", "#B6222A"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = CTI(create_crab_claw_right(scale * 0.42, true, ["#0c0c0d", "#613577", "#462966"]));
  sprite[SPRITE.HURT_CRAB] = CTI(create_hurt_crab(scale * 0.35, ["#B6222A"]));
  sprite[SPRITE.HURT_CRAB_CLAW_LEFT] = CTI(create_crab_claw_left(scale * 0.35, true, [undefined, "#B6222A"]));
  sprite[SPRITE.HURT_CRAB_CLAW_RIGHT] = CTI(create_crab_claw_right(scale * 0.35, true, [undefined, "#B6222A"]));
  sprite[SPRITE.HEAL_CRAB] = CTI(create_hurt_crab(scale * 0.35, ["#22E066"]));
  sprite[SPRITE.HEAL_CRAB_CLAW_LEFT] = CTI(create_crab_claw_left(scale * 0.35, true, [undefined, "#22E066"]));
  sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT] = CTI(create_crab_claw_right(scale * 0.35, true, [undefined, "#22E066"]));
  sprite[SPRITE.DIVING_MASK] = [];
  sprite[SPRITE.DIVING_MASK][SPRITE.DAY] = CTI(create_divingmask(scale * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
  sprite[SPRITE.DIVING_MASK][SPRITE.NIGHT] = CTI(create_divingmask(scale * 0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
  sprite[SPRITE.SUPER_DIVING_SUIT] = [];
  sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.DAY] = CTI(create_superdivingsuit(scale * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
  sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.NIGHT] = CTI(create_superdivingsuit(scale * 0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
  sprite[SPRITE.PLOT] = [];
  sprite[SPRITE.PLOT][SPRITE.DAY] = CTI(create_plot(scale * 0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
  sprite[SPRITE.PLOT][SPRITE.NIGHT] = CTI(create_plot(scale * 0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
  sprite[SPRITE.BRIDGE] = [];
  sprite[SPRITE.BRIDGE][SPRITE.DAY] = CTI(create_bridge(scale, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
  sprite[SPRITE.BRIDGE][SPRITE.NIGHT] = CTI(create_bridge(scale, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
  sprite[SPRITE.WOOD_TOWER] = [];
  sprite[SPRITE.WOOD_TOWER][SPRITE.DAY] = IMAGES.WOOD_TOWERD;
  sprite[SPRITE.WOOD_TOWER][SPRITE.NIGHT] = IMAGES.WOOD_TOWERN;
  sprite[SPRITE.ROOF] = [];
  sprite[SPRITE.ROOF][SPRITE.DAY] = CTI(create_roof(scale * 0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
  sprite[SPRITE.ROOF][SPRITE.NIGHT] = CTI(create_roof(scale * 0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
  sprite[SPRITE.ROOFS] = [sprite[SPRITE.ROOF]];
  sprite[SPRITE.ROOFS][1] = [];
  sprite[SPRITE.ROOFS][2] = [];
  sprite[SPRITE.ROOFS][1][SPRITE.DAY] = CTI(create_roof1(scale * 0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
  sprite[SPRITE.ROOFS][1][SPRITE.NIGHT] = CTI(create_roof1(scale * 0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
  sprite[SPRITE.ROOFS][2][SPRITE.DAY] = CTI(create_roof2(scale * 0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
  sprite[SPRITE.ROOFS][2][SPRITE.NIGHT] = CTI(create_roof2(scale * 0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
  sprite[SPRITE.WATERING_CAN_FULL] = [];
  sprite[SPRITE.WATERING_CAN_FULL][SPRITE.DAY] = CTI(create_rotated_img(3 - (Math.PI / 2), create_watering_can(scale * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
  sprite[SPRITE.WATERING_CAN_FULL][SPRITE.NIGHT] = CTI(create_rotated_img(3 - (Math.PI / 2), create_watering_can(scale * 0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
  sprite[SPRITE.DEAD_BOX] = [];
  sprite[SPRITE.DEAD_BOX][SPRITE.DAY] = CTI(create_dead_box(scale * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
  sprite[SPRITE.DEAD_BOX][SPRITE.NIGHT] = CTI(create_dead_box(scale * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
  sprite[SPRITE.DEAD_BOX_UI] = CTI(create_dead_box_ui(scale * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
  sprite[SPRITE.HURT_DEAD_BOX] = CTI(create_hurt_dead_box(scale * 0.3, ["#BB0000"]));
  sprite[SPRITE.WINDMILL_FLOUR] = create_craft_button(1, [{
    f: create_flour,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
  }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
  sprite[SPRITE.LAVA_HEART] = create_craft_button(1.5, [{
    f: create_dragon_heart,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#120202", "#750a0a", "#991616", "#120202"]
  }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
  sprite[SPRITE.HEART_SYMBOL_HUD] = create_symbol_hud(scale * 0.35, ["#072428", "#67A242", "#67A242"], 0);
  sprite[SPRITE.COLD_SYMBOL_HUD] = create_symbol_hud(scale * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
  sprite[SPRITE.FOOD_SYMBOL_HUD] = create_symbol_hud(scale * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
  sprite[SPRITE.WATER_SYMBOL_HUD] = create_symbol_hud(scale * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
  sprite[SPRITE.LEADERBOARD] = CTI(create_leaderboard(scale));
  sprite[SPRITE.GAUGES] = CTI(create_gauges(scale));
  sprite[SPRITE.OXYGEN] = CTI(create_oxygen_gauges(scale));
  sprite[SPRITE.DELAY_HELMET] = CTI(create_viking_hat(scale * 0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
  sprite[SPRITE.DELAY_WEAPON] = CTI(create_rotated_img(5.8, create_sword(scale * 0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
  sprite[SPRITE.COUNTER] = [];
  sprite[SPRITE.SLOT_NUMBER] = [];
  for (var i = 0; i < (WORLD.WITH_BAG + 2); i++)
    sprite[SPRITE.SLOT_NUMBER][i] = create_text(scale, "" + (i + 1), 12, "#FFF");
  sprite[SPRITE.RECIPE_BUTTON] = [];
  sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(scale * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
  sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(scale * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
  sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(scale * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
  sprite[SPRITE.CLOCK] = [];
  sprite[SPRITE.CLOCK].push(CTI(create_clock_day(scale * 0.22)));
  sprite[SPRITE.CLOCK].push(CTI(create_clock_night(scale * 0.22)));
  sprite[SPRITE.ARROW_CLOCK] = CTI(create_arrow_clock(scale * 0.22));
  sprite[SPRITE.OPTION_BUTTON] = [];
  sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(scale * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
  sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(scale * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
  sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(scale * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
  sprite[SPRITE.AUTO_FEED] = IMAGES.AUTO_FEED;
  sprite[SPRITE.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED;
  sprite[SPRITE.STOP_REGENERATION] = IMAGES.STOP_REGENERATION;
  sprite[SPRITE.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD;
  sprite[SPRITE.SHOW_SPECTATORS] = create_text(scale, "Show spectators", 25, "#FFF", undefined, undefined, "#000", 5, 220);
  sprite[SPRITE.RECONNECT] = create_text(scale, "Reconnecting...", 30, "#FFF");
  console.log("Load canvas", Date.now() - TIMEDEBUG);
};

function init_fake_world() {
  document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
  fake_world.items.push(new Item(ITEMS.FIRE, 0, 0, 0, 0, (Math.random() * Math.PI) * 2, 2, 1));
  fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
  fake_world.items.push(new Item(ITEMS.WORKBENCH, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
};

function draw_fake_world() {
  var scale = 1;
  var time = fake_world.time;
  if (sprite[SPRITE.HERB]) {
    ctx.drawImage(sprite[SPRITE.HERB][time][1], canw2 + 480, canh2 + 190);
    ctx.drawImage(sprite[SPRITE.HERB][time][2], canw2 + 180, canh2 - 430);
    ctx.drawImage(sprite[SPRITE.HERB][time][1], canw2 - 855, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.HERB][time][0], canw2 - 550, canh2 - 300);
    ctx.drawImage(sprite[SPRITE.HERB][time][0], canw2 - 1020, canh2 - 520);
  }
  if (sprite[SPRITE.STONES]) {
    ctx.drawImage(sprite[SPRITE.STONES][time][1], canw2 - 80, canh2 - 640);
    ctx.drawImage(sprite[SPRITE.STONES][time][1], canw2 + 80, canh2 + 490);
    ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 - 180, canh2 - 700);
    ctx.drawImage(sprite[SPRITE.STONES][time][0], canw2 + 550, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.STONES][time][1], canw2 + 450, canh2 + 300);
    ctx.drawImage(sprite[SPRITE.STONES][time][1], canw2 + 780, canh2 + 300);
    ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 + 980, canh2 + 200);
    ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 + 680, canh2 + 600);
    ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 - 380, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.STONES][time][2], canw2 + 280, canh2 + 250);
  }
  if (sprite[SPRITE.PLANT]) {
    ctx.drawImage(sprite[SPRITE.PLANT][time][0], canw2 - 590, canh2);
    ctx.drawImage(sprite[SPRITE.PLANT][time][0], canw2 + 120, canh2 - 390);
    ctx.drawImage(sprite[SPRITE.PLANT][time][0], canw2 - 270, canh2 + 340);
  }
  if (sprite[SPRITE.TREE]) {
    ctx.drawImage(sprite[SPRITE.TREE][time][4], canw2 - 700, canh2 - 600);
    ctx.drawImage(sprite[SPRITE.TREE][time][2], canw2 - 970, canh2 - 250);
    ctx.drawImage(sprite[SPRITE.TREE][time][5], canw2 - 720, canh2 - 200);
    ctx.drawImage(sprite[SPRITE.TREE][time][2], canw2 - 1020, canh2 + 340);
    ctx.drawImage(sprite[SPRITE.TREE][time][0], canw2 - 1120, canh2 - 0);
    ctx.drawImage(sprite[SPRITE.TREE][time][1], canw2 - 650, canh2 - 330);
    ctx.drawImage(sprite[SPRITE.TREE][time][4], canw2 - 495, canh2 - 90);
    ctx.drawImage(sprite[SPRITE.TREE][time][3], canw2 - 520, canh2 + 340);
    ctx.drawImage(sprite[SPRITE.TREE][time][2], canw2 + 830, canh2 - 520);
  }
  if (user && world) {
    var x = user.cam.x;
    var y = user.cam.y;
    user.cam.x = canw2;
    user.cam.y = canh2;
    var real_time = world.time;
    world.time = fake_world.time;
    var items = fake_world.items;
    items[2].x = 400;
    items[2].y = 100;
    items[2].draw(SPRITE.WORKBENCH);
    var fruits = items[1];
    fruits.x = -500;
    fruits.y = 100;
    fruits.fruits[0].x = fruits.x - 20.5;
    fruits.fruits[0].y = fruits.y - 22.5;
    fruits.fruits[1].x = fruits.x - 35.5;
    fruits.fruits[1].y = fruits.y + 7.5;
    fruits.fruits[2].x = fruits.x + 7.5;
    fruits.fruits[2].y = fruits.y - 30;
    fruits.fruits[3].x = fruits.x + 22.5;
    fruits.fruits[3].y = fruits.y;
    fruits.fruits[4].x = fruits.x - 7.5;
    fruits.fruits[4].y = fruits.y + 14.5;
    for (var i = 0; i < fruits.info; i++) {
      fruits.fruits[i].draw(SPRITE.FRUIT);
    }
    var fruits = items[3];
    fruits.x = 210;
    fruits.y = -290;
    fruits.fruits[0].x = fruits.x - 20.5;
    fruits.fruits[0].y = fruits.y - 22.5;
    fruits.fruits[1].x = fruits.x - 35.5;
    fruits.fruits[1].y = fruits.y + 7.5;
    fruits.fruits[2].x = fruits.x + 7.5;
    fruits.fruits[2].y = fruits.y - 30;
    fruits.fruits[3].x = fruits.x + 22.5;
    fruits.fruits[3].y = fruits.y;
    fruits.fruits[4].x = fruits.x - 7.5;
    fruits.fruits[4].y = fruits.y + 14.5;
    for (var i = 0; i < fruits.info; i++) {
      fruits.fruits[i].draw(SPRITE.FRUIT);
    }
    items[0].x = 450;
    items[0].y = -100;
    items[0].draw_bg(SPRITE.WOOD_FIRE);
    items[0].draw_fg();
    user.cam.x = x;
    user.cam.y = y;
    world.time = real_time;
  }
};